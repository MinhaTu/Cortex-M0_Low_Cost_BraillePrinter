
nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e50  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000fe4  08000fe4  00010fe4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001014  08001014  00011014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001018  08001018  00011018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  0800101c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          0000006c  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000080  20000080  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00009ad0  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001835  00000000  00000000  00029b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001657  00000000  00000000  0002b349  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000003b0  00000000  00000000  0002c9a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000005d0  00000000  00000000  0002cd50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00002579  00000000  00000000  0002d320  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001a55  00000000  00000000  0002f899  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000312ee  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000007d0  00000000  00000000  0003136c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000fcc 	.word	0x08000fcc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08000fcc 	.word	0x08000fcc

080001d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001d4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d6:	4a0e      	ldr	r2, [pc, #56]	; (8000210 <HAL_InitTick+0x3c>)
 80001d8:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <HAL_InitTick+0x40>)
{
 80001da:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001dc:	7818      	ldrb	r0, [r3, #0]
 80001de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e2:	fbb3 f3f0 	udiv	r3, r3, r0
 80001e6:	6810      	ldr	r0, [r2, #0]
 80001e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80001ec:	f000 f8a0 	bl	8000330 <HAL_SYSTICK_Config>
 80001f0:	4604      	mov	r4, r0
 80001f2:	b958      	cbnz	r0, 800020c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001f4:	2d0f      	cmp	r5, #15
 80001f6:	d809      	bhi.n	800020c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001f8:	4602      	mov	r2, r0
 80001fa:	4629      	mov	r1, r5
 80001fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 f856 	bl	80002b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000204:	4b04      	ldr	r3, [pc, #16]	; (8000218 <HAL_InitTick+0x44>)
 8000206:	4620      	mov	r0, r4
 8000208:	601d      	str	r5, [r3, #0]
 800020a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800020c:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 800020e:	bd38      	pop	{r3, r4, r5, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	20000000 	.word	0x20000000
 8000218:	20000004 	.word	0x20000004

0800021c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800021c:	4a07      	ldr	r2, [pc, #28]	; (800023c <HAL_Init+0x20>)
{
 800021e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000220:	6813      	ldr	r3, [r2, #0]
 8000222:	f043 0310 	orr.w	r3, r3, #16
 8000226:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000228:	2003      	movs	r0, #3
 800022a:	f000 f82f 	bl	800028c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800022e:	2000      	movs	r0, #0
 8000230:	f7ff ffd0 	bl	80001d4 <HAL_InitTick>
  HAL_MspInit();
 8000234:	f000 fdea 	bl	8000e0c <HAL_MspInit>
}
 8000238:	2000      	movs	r0, #0
 800023a:	bd08      	pop	{r3, pc}
 800023c:	40022000 	.word	0x40022000

08000240 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000240:	4a03      	ldr	r2, [pc, #12]	; (8000250 <HAL_IncTick+0x10>)
 8000242:	4b04      	ldr	r3, [pc, #16]	; (8000254 <HAL_IncTick+0x14>)
 8000244:	6811      	ldr	r1, [r2, #0]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	440b      	add	r3, r1
 800024a:	6013      	str	r3, [r2, #0]
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	20000038 	.word	0x20000038
 8000254:	20000000 	.word	0x20000000

08000258 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000258:	4b01      	ldr	r3, [pc, #4]	; (8000260 <HAL_GetTick+0x8>)
 800025a:	6818      	ldr	r0, [r3, #0]
}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	20000038 	.word	0x20000038

08000264 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000264:	b538      	push	{r3, r4, r5, lr}
 8000266:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000268:	f7ff fff6 	bl	8000258 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800026c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800026e:	bf1c      	itt	ne
 8000270:	4b05      	ldrne	r3, [pc, #20]	; (8000288 <HAL_Delay+0x24>)
 8000272:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000274:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000276:	bf18      	it	ne
 8000278:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800027a:	f7ff ffed 	bl	8000258 <HAL_GetTick>
 800027e:	1b40      	subs	r0, r0, r5
 8000280:	4284      	cmp	r4, r0
 8000282:	d8fa      	bhi.n	800027a <HAL_Delay+0x16>
  {
  }
}
 8000284:	bd38      	pop	{r3, r4, r5, pc}
 8000286:	bf00      	nop
 8000288:	20000000 	.word	0x20000000

0800028c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800028c:	4a07      	ldr	r2, [pc, #28]	; (80002ac <HAL_NVIC_SetPriorityGrouping+0x20>)
 800028e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000290:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000294:	041b      	lsls	r3, r3, #16
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800029c:	0200      	lsls	r0, r0, #8
 800029e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002a2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80002a6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80002a8:	60d3      	str	r3, [r2, #12]
 80002aa:	4770      	bx	lr
 80002ac:	e000ed00 	.word	0xe000ed00

080002b0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002b0:	4b17      	ldr	r3, [pc, #92]	; (8000310 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002b2:	b530      	push	{r4, r5, lr}
 80002b4:	68dc      	ldr	r4, [r3, #12]
 80002b6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ba:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002be:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002c0:	2b04      	cmp	r3, #4
 80002c2:	bf28      	it	cs
 80002c4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002c8:	f04f 0501 	mov.w	r5, #1
 80002cc:	fa05 f303 	lsl.w	r3, r5, r3
 80002d0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002d4:	bf8c      	ite	hi
 80002d6:	3c03      	subhi	r4, #3
 80002d8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002da:	4019      	ands	r1, r3
 80002dc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002de:	fa05 f404 	lsl.w	r4, r5, r4
 80002e2:	3c01      	subs	r4, #1
 80002e4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002e6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002e8:	ea42 0201 	orr.w	r2, r2, r1
 80002ec:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f0:	bfaf      	iteee	ge
 80002f2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f6:	f000 000f 	andlt.w	r0, r0, #15
 80002fa:	4b06      	ldrlt	r3, [pc, #24]	; (8000314 <HAL_NVIC_SetPriority+0x64>)
 80002fc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fe:	bfa5      	ittet	ge
 8000300:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000304:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000306:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000308:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800030c:	bd30      	pop	{r4, r5, pc}
 800030e:	bf00      	nop
 8000310:	e000ed00 	.word	0xe000ed00
 8000314:	e000ed14 	.word	0xe000ed14

08000318 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000318:	0942      	lsrs	r2, r0, #5
 800031a:	2301      	movs	r3, #1
 800031c:	f000 001f 	and.w	r0, r0, #31
 8000320:	fa03 f000 	lsl.w	r0, r3, r0
 8000324:	4b01      	ldr	r3, [pc, #4]	; (800032c <HAL_NVIC_EnableIRQ+0x14>)
 8000326:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800032a:	4770      	bx	lr
 800032c:	e000e100 	.word	0xe000e100

08000330 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000330:	3801      	subs	r0, #1
 8000332:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000336:	d20a      	bcs.n	800034e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000338:	4b06      	ldr	r3, [pc, #24]	; (8000354 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033a:	4a07      	ldr	r2, [pc, #28]	; (8000358 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800033c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033e:	21f0      	movs	r1, #240	; 0xf0
 8000340:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000344:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000346:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000348:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800034e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	e000e010 	.word	0xe000e010
 8000358:	e000ed00 	.word	0xe000ed00

0800035c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800035c:	4b04      	ldr	r3, [pc, #16]	; (8000370 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800035e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000360:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000362:	bf0c      	ite	eq
 8000364:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000368:	f022 0204 	bicne.w	r2, r2, #4
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	4770      	bx	lr
 8000370:	e000e010 	.word	0xe000e010

08000374 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000374:	4770      	bx	lr

08000376 <HAL_SYSTICK_IRQHandler>:
{
 8000376:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000378:	f7ff fffc 	bl	8000374 <HAL_SYSTICK_Callback>
 800037c:	bd08      	pop	{r3, pc}
	...

08000380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000380:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000384:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000388:	f8df 9190 	ldr.w	r9, [pc, #400]	; 800051c <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800038c:	4a61      	ldr	r2, [pc, #388]	; (8000514 <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 800038e:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000390:	fa38 f403 	lsrs.w	r4, r8, r3
 8000394:	d102      	bne.n	800039c <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000396:	b003      	add	sp, #12
 8000398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800039c:	f04f 0e01 	mov.w	lr, #1
 80003a0:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 80003a4:	ea18 060e 	ands.w	r6, r8, lr
 80003a8:	f000 80a6 	beq.w	80004f8 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003ac:	684c      	ldr	r4, [r1, #4]
 80003ae:	f024 0710 	bic.w	r7, r4, #16
 80003b2:	2f02      	cmp	r7, #2
 80003b4:	d116      	bne.n	80003e4 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 80003b6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80003ba:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80003be:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80003c2:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80003c6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80003ca:	f04f 0c0f 	mov.w	ip, #15
 80003ce:	fa0c fc0b 	lsl.w	ip, ip, fp
 80003d2:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80003d6:	690d      	ldr	r5, [r1, #16]
 80003d8:	fa05 f50b 	lsl.w	r5, r5, fp
 80003dc:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80003e0:	f8ca 5020 	str.w	r5, [sl, #32]
 80003e4:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003e8:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80003ea:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003ee:	fa05 f50a 	lsl.w	r5, r5, sl
 80003f2:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003f4:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003f8:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003fc:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000400:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000402:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000406:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000408:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800040c:	d811      	bhi.n	8000432 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800040e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000410:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000414:	68cf      	ldr	r7, [r1, #12]
 8000416:	fa07 fc0a 	lsl.w	ip, r7, sl
 800041a:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800041e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000420:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000422:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000426:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800042a:	409f      	lsls	r7, r3
 800042c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000430:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000432:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000434:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000436:	688f      	ldr	r7, [r1, #8]
 8000438:	fa07 f70a 	lsl.w	r7, r7, sl
 800043c:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800043e:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000440:	00e5      	lsls	r5, r4, #3
 8000442:	d559      	bpl.n	80004f8 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000444:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000448:	f045 0501 	orr.w	r5, r5, #1
 800044c:	f8c9 5018 	str.w	r5, [r9, #24]
 8000450:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000454:	f023 0703 	bic.w	r7, r3, #3
 8000458:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800045c:	f005 0501 	and.w	r5, r5, #1
 8000460:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000464:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000466:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800046a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800046c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800046e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000472:	f04f 0e0f 	mov.w	lr, #15
 8000476:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800047a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800047e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000482:	d03b      	beq.n	80004fc <HAL_GPIO_Init+0x17c>
 8000484:	4d24      	ldr	r5, [pc, #144]	; (8000518 <HAL_GPIO_Init+0x198>)
 8000486:	42a8      	cmp	r0, r5
 8000488:	d03a      	beq.n	8000500 <HAL_GPIO_Init+0x180>
 800048a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800048e:	42a8      	cmp	r0, r5
 8000490:	d038      	beq.n	8000504 <HAL_GPIO_Init+0x184>
 8000492:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000496:	42a8      	cmp	r0, r5
 8000498:	d036      	beq.n	8000508 <HAL_GPIO_Init+0x188>
 800049a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800049e:	42a8      	cmp	r0, r5
 80004a0:	d034      	beq.n	800050c <HAL_GPIO_Init+0x18c>
 80004a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80004a6:	42a8      	cmp	r0, r5
 80004a8:	d032      	beq.n	8000510 <HAL_GPIO_Init+0x190>
 80004aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80004ae:	42a8      	cmp	r0, r5
 80004b0:	bf14      	ite	ne
 80004b2:	2507      	movne	r5, #7
 80004b4:	2506      	moveq	r5, #6
 80004b6:	fa05 f50c 	lsl.w	r5, r5, ip
 80004ba:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80004be:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80004c0:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80004c2:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004c4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80004c8:	bf0c      	ite	eq
 80004ca:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80004cc:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 80004ce:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80004d0:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004d2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80004d6:	bf0c      	ite	eq
 80004d8:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80004da:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 80004dc:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80004de:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004e0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80004e4:	bf0c      	ite	eq
 80004e6:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80004e8:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 80004ea:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80004ec:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004ee:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80004f0:	bf54      	ite	pl
 80004f2:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80004f4:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 80004f6:	60d5      	str	r5, [r2, #12]
    position++;
 80004f8:	3301      	adds	r3, #1
 80004fa:	e749      	b.n	8000390 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80004fc:	2500      	movs	r5, #0
 80004fe:	e7da      	b.n	80004b6 <HAL_GPIO_Init+0x136>
 8000500:	2501      	movs	r5, #1
 8000502:	e7d8      	b.n	80004b6 <HAL_GPIO_Init+0x136>
 8000504:	2502      	movs	r5, #2
 8000506:	e7d6      	b.n	80004b6 <HAL_GPIO_Init+0x136>
 8000508:	2503      	movs	r5, #3
 800050a:	e7d4      	b.n	80004b6 <HAL_GPIO_Init+0x136>
 800050c:	2504      	movs	r5, #4
 800050e:	e7d2      	b.n	80004b6 <HAL_GPIO_Init+0x136>
 8000510:	2505      	movs	r5, #5
 8000512:	e7d0      	b.n	80004b6 <HAL_GPIO_Init+0x136>
 8000514:	40010400 	.word	0x40010400
 8000518:	48000400 	.word	0x48000400
 800051c:	40021000 	.word	0x40021000

08000520 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000520:	6903      	ldr	r3, [r0, #16]
 8000522:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000524:	bf14      	ite	ne
 8000526:	2001      	movne	r0, #1
 8000528:	2000      	moveq	r0, #0
 800052a:	4770      	bx	lr

0800052c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800052c:	b10a      	cbz	r2, 8000532 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800052e:	6181      	str	r1, [r0, #24]
 8000530:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000532:	6281      	str	r1, [r0, #40]	; 0x28
 8000534:	4770      	bx	lr

08000536 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000536:	6943      	ldr	r3, [r0, #20]
 8000538:	4059      	eors	r1, r3
 800053a:	6141      	str	r1, [r0, #20]
 800053c:	4770      	bx	lr

0800053e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800053e:	4770      	bx	lr

08000540 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000540:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000542:	4b04      	ldr	r3, [pc, #16]	; (8000554 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000544:	6959      	ldr	r1, [r3, #20]
 8000546:	4201      	tst	r1, r0
 8000548:	d002      	beq.n	8000550 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800054a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800054c:	f7ff fff7 	bl	800053e <HAL_GPIO_EXTI_Callback>
 8000550:	bd08      	pop	{r3, pc}
 8000552:	bf00      	nop
 8000554:	40010400 	.word	0x40010400

08000558 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000558:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800055c:	4605      	mov	r5, r0
 800055e:	b918      	cbnz	r0, 8000568 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000560:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000562:	b002      	add	sp, #8
 8000564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000568:	6803      	ldr	r3, [r0, #0]
 800056a:	07df      	lsls	r7, r3, #31
 800056c:	d411      	bmi.n	8000592 <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800056e:	682b      	ldr	r3, [r5, #0]
 8000570:	079e      	lsls	r6, r3, #30
 8000572:	f100 8088 	bmi.w	8000686 <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000576:	682b      	ldr	r3, [r5, #0]
 8000578:	071c      	lsls	r4, r3, #28
 800057a:	f100 80fc 	bmi.w	8000776 <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800057e:	682b      	ldr	r3, [r5, #0]
 8000580:	0758      	lsls	r0, r3, #29
 8000582:	f100 8145 	bmi.w	8000810 <HAL_RCC_OscConfig+0x2b8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000586:	69aa      	ldr	r2, [r5, #24]
 8000588:	2a00      	cmp	r2, #0
 800058a:	f040 81dc 	bne.w	8000946 <HAL_RCC_OscConfig+0x3ee>
  return HAL_OK;
 800058e:	2000      	movs	r0, #0
 8000590:	e7e7      	b.n	8000562 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000592:	4cbd      	ldr	r4, [pc, #756]	; (8000888 <HAL_RCC_OscConfig+0x330>)
 8000594:	6863      	ldr	r3, [r4, #4]
 8000596:	f003 030c 	and.w	r3, r3, #12
 800059a:	2b04      	cmp	r3, #4
 800059c:	d00a      	beq.n	80005b4 <HAL_RCC_OscConfig+0x5c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800059e:	6863      	ldr	r3, [r4, #4]
 80005a0:	f003 030c 	and.w	r3, r3, #12
 80005a4:	2b08      	cmp	r3, #8
 80005a6:	d119      	bne.n	80005dc <HAL_RCC_OscConfig+0x84>
 80005a8:	6863      	ldr	r3, [r4, #4]
 80005aa:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80005ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005b2:	d113      	bne.n	80005dc <HAL_RCC_OscConfig+0x84>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005b8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005bc:	6821      	ldr	r1, [r4, #0]
 80005be:	fa93 f3a3 	rbit	r3, r3
 80005c2:	fab3 f383 	clz	r3, r3
 80005c6:	f003 031f 	and.w	r3, r3, #31
 80005ca:	2201      	movs	r2, #1
 80005cc:	fa02 f303 	lsl.w	r3, r2, r3
 80005d0:	420b      	tst	r3, r1
 80005d2:	d0cc      	beq.n	800056e <HAL_RCC_OscConfig+0x16>
 80005d4:	686b      	ldr	r3, [r5, #4]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d1c9      	bne.n	800056e <HAL_RCC_OscConfig+0x16>
 80005da:	e7c1      	b.n	8000560 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005dc:	686b      	ldr	r3, [r5, #4]
 80005de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005e2:	d11e      	bne.n	8000622 <HAL_RCC_OscConfig+0xca>
 80005e4:	6823      	ldr	r3, [r4, #0]
 80005e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005ea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005ec:	f7ff fe34 	bl	8000258 <HAL_GetTick>
 80005f0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80005f4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005f6:	2701      	movs	r7, #1
 80005f8:	fa96 f3a6 	rbit	r3, r6
 80005fc:	6822      	ldr	r2, [r4, #0]
 80005fe:	fa96 f3a6 	rbit	r3, r6
 8000602:	fab3 f383 	clz	r3, r3
 8000606:	f003 031f 	and.w	r3, r3, #31
 800060a:	fa07 f303 	lsl.w	r3, r7, r3
 800060e:	4213      	tst	r3, r2
 8000610:	d1ad      	bne.n	800056e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000612:	f7ff fe21 	bl	8000258 <HAL_GetTick>
 8000616:	eba0 0008 	sub.w	r0, r0, r8
 800061a:	2864      	cmp	r0, #100	; 0x64
 800061c:	d9ec      	bls.n	80005f8 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 800061e:	2003      	movs	r0, #3
 8000620:	e79f      	b.n	8000562 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000622:	bb0b      	cbnz	r3, 8000668 <HAL_RCC_OscConfig+0x110>
 8000624:	6823      	ldr	r3, [r4, #0]
 8000626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800062a:	6023      	str	r3, [r4, #0]
 800062c:	6823      	ldr	r3, [r4, #0]
 800062e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000632:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000634:	f7ff fe10 	bl	8000258 <HAL_GetTick>
 8000638:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800063c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800063e:	2701      	movs	r7, #1
 8000640:	fa96 f3a6 	rbit	r3, r6
 8000644:	6822      	ldr	r2, [r4, #0]
 8000646:	fa96 f3a6 	rbit	r3, r6
 800064a:	fab3 f383 	clz	r3, r3
 800064e:	f003 031f 	and.w	r3, r3, #31
 8000652:	fa07 f303 	lsl.w	r3, r7, r3
 8000656:	4213      	tst	r3, r2
 8000658:	d089      	beq.n	800056e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800065a:	f7ff fdfd 	bl	8000258 <HAL_GetTick>
 800065e:	eba0 0008 	sub.w	r0, r0, r8
 8000662:	2864      	cmp	r0, #100	; 0x64
 8000664:	d9ec      	bls.n	8000640 <HAL_RCC_OscConfig+0xe8>
 8000666:	e7da      	b.n	800061e <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800066c:	6823      	ldr	r3, [r4, #0]
 800066e:	d103      	bne.n	8000678 <HAL_RCC_OscConfig+0x120>
 8000670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000674:	6023      	str	r3, [r4, #0]
 8000676:	e7b5      	b.n	80005e4 <HAL_RCC_OscConfig+0x8c>
 8000678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800067c:	6023      	str	r3, [r4, #0]
 800067e:	6823      	ldr	r3, [r4, #0]
 8000680:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000684:	e7b1      	b.n	80005ea <HAL_RCC_OscConfig+0x92>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000686:	4c80      	ldr	r4, [pc, #512]	; (8000888 <HAL_RCC_OscConfig+0x330>)
 8000688:	6863      	ldr	r3, [r4, #4]
 800068a:	f013 0f0c 	tst.w	r3, #12
 800068e:	d00a      	beq.n	80006a6 <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000690:	6863      	ldr	r3, [r4, #4]
 8000692:	f003 030c 	and.w	r3, r3, #12
 8000696:	2b08      	cmp	r3, #8
 8000698:	d125      	bne.n	80006e6 <HAL_RCC_OscConfig+0x18e>
 800069a:	6863      	ldr	r3, [r4, #4]
 800069c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80006a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80006a4:	d11f      	bne.n	80006e6 <HAL_RCC_OscConfig+0x18e>
 80006a6:	2302      	movs	r3, #2
 80006a8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006ac:	6821      	ldr	r1, [r4, #0]
 80006ae:	fa93 f3a3 	rbit	r3, r3
 80006b2:	fab3 f383 	clz	r3, r3
 80006b6:	f003 031f 	and.w	r3, r3, #31
 80006ba:	2201      	movs	r2, #1
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	420b      	tst	r3, r1
 80006c2:	d003      	beq.n	80006cc <HAL_RCC_OscConfig+0x174>
 80006c4:	68eb      	ldr	r3, [r5, #12]
 80006c6:	4293      	cmp	r3, r2
 80006c8:	f47f af4a 	bne.w	8000560 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006cc:	6821      	ldr	r1, [r4, #0]
 80006ce:	23f8      	movs	r3, #248	; 0xf8
 80006d0:	fa93 f3a3 	rbit	r3, r3
 80006d4:	fab3 f283 	clz	r2, r3
 80006d8:	692b      	ldr	r3, [r5, #16]
 80006da:	4093      	lsls	r3, r2
 80006dc:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80006e0:	4313      	orrs	r3, r2
 80006e2:	6023      	str	r3, [r4, #0]
 80006e4:	e747      	b.n	8000576 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006e6:	68ea      	ldr	r2, [r5, #12]
 80006e8:	2601      	movs	r6, #1
 80006ea:	b30a      	cbz	r2, 8000730 <HAL_RCC_OscConfig+0x1d8>
 80006ec:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80006f0:	fab3 f383 	clz	r3, r3
 80006f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80006f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	2702      	movs	r7, #2
 8000700:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000702:	f7ff fda9 	bl	8000258 <HAL_GetTick>
 8000706:	4680      	mov	r8, r0
 8000708:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800070c:	6822      	ldr	r2, [r4, #0]
 800070e:	fa97 f3a7 	rbit	r3, r7
 8000712:	fab3 f383 	clz	r3, r3
 8000716:	f003 031f 	and.w	r3, r3, #31
 800071a:	fa06 f303 	lsl.w	r3, r6, r3
 800071e:	4213      	tst	r3, r2
 8000720:	d1d4      	bne.n	80006cc <HAL_RCC_OscConfig+0x174>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000722:	f7ff fd99 	bl	8000258 <HAL_GetTick>
 8000726:	eba0 0008 	sub.w	r0, r0, r8
 800072a:	2802      	cmp	r0, #2
 800072c:	d9ec      	bls.n	8000708 <HAL_RCC_OscConfig+0x1b0>
 800072e:	e776      	b.n	800061e <HAL_RCC_OscConfig+0xc6>
 8000730:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000734:	fab3 f383 	clz	r3, r3
 8000738:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800073c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	2702      	movs	r7, #2
 8000744:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000746:	f7ff fd87 	bl	8000258 <HAL_GetTick>
 800074a:	4680      	mov	r8, r0
 800074c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000750:	6822      	ldr	r2, [r4, #0]
 8000752:	fa97 f3a7 	rbit	r3, r7
 8000756:	fab3 f383 	clz	r3, r3
 800075a:	f003 031f 	and.w	r3, r3, #31
 800075e:	fa06 f303 	lsl.w	r3, r6, r3
 8000762:	4213      	tst	r3, r2
 8000764:	f43f af07 	beq.w	8000576 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000768:	f7ff fd76 	bl	8000258 <HAL_GetTick>
 800076c:	eba0 0008 	sub.w	r0, r0, r8
 8000770:	2802      	cmp	r0, #2
 8000772:	d9eb      	bls.n	800074c <HAL_RCC_OscConfig+0x1f4>
 8000774:	e753      	b.n	800061e <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000776:	696a      	ldr	r2, [r5, #20]
 8000778:	4e43      	ldr	r6, [pc, #268]	; (8000888 <HAL_RCC_OscConfig+0x330>)
 800077a:	4944      	ldr	r1, [pc, #272]	; (800088c <HAL_RCC_OscConfig+0x334>)
 800077c:	2401      	movs	r4, #1
 800077e:	b31a      	cbz	r2, 80007c8 <HAL_RCC_OscConfig+0x270>
 8000780:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000784:	fab3 f383 	clz	r3, r3
 8000788:	440b      	add	r3, r1
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	2702      	movs	r7, #2
 800078e:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000790:	f7ff fd62 	bl	8000258 <HAL_GetTick>
 8000794:	4680      	mov	r8, r0
 8000796:	fa97 f3a7 	rbit	r3, r7
 800079a:	fa97 f3a7 	rbit	r3, r7
 800079e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007a2:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80007a4:	fa97 f3a7 	rbit	r3, r7
 80007a8:	fab3 f383 	clz	r3, r3
 80007ac:	f003 031f 	and.w	r3, r3, #31
 80007b0:	fa04 f303 	lsl.w	r3, r4, r3
 80007b4:	4213      	tst	r3, r2
 80007b6:	f47f aee2 	bne.w	800057e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007ba:	f7ff fd4d 	bl	8000258 <HAL_GetTick>
 80007be:	eba0 0008 	sub.w	r0, r0, r8
 80007c2:	2802      	cmp	r0, #2
 80007c4:	d9e7      	bls.n	8000796 <HAL_RCC_OscConfig+0x23e>
 80007c6:	e72a      	b.n	800061e <HAL_RCC_OscConfig+0xc6>
 80007c8:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80007cc:	fab3 f383 	clz	r3, r3
 80007d0:	440b      	add	r3, r1
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	2702      	movs	r7, #2
 80007d6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80007d8:	f7ff fd3e 	bl	8000258 <HAL_GetTick>
 80007dc:	4680      	mov	r8, r0
 80007de:	fa97 f3a7 	rbit	r3, r7
 80007e2:	fa97 f3a7 	rbit	r3, r7
 80007e6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007ea:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80007ec:	fa97 f3a7 	rbit	r3, r7
 80007f0:	fab3 f383 	clz	r3, r3
 80007f4:	f003 031f 	and.w	r3, r3, #31
 80007f8:	fa04 f303 	lsl.w	r3, r4, r3
 80007fc:	4213      	tst	r3, r2
 80007fe:	f43f aebe 	beq.w	800057e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000802:	f7ff fd29 	bl	8000258 <HAL_GetTick>
 8000806:	eba0 0008 	sub.w	r0, r0, r8
 800080a:	2802      	cmp	r0, #2
 800080c:	d9e7      	bls.n	80007de <HAL_RCC_OscConfig+0x286>
 800080e:	e706      	b.n	800061e <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000810:	4c1d      	ldr	r4, [pc, #116]	; (8000888 <HAL_RCC_OscConfig+0x330>)
 8000812:	69e3      	ldr	r3, [r4, #28]
 8000814:	00d9      	lsls	r1, r3, #3
 8000816:	d434      	bmi.n	8000882 <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000818:	69e3      	ldr	r3, [r4, #28]
 800081a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081e:	61e3      	str	r3, [r4, #28]
 8000820:	69e3      	ldr	r3, [r4, #28]
 8000822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000826:	9301      	str	r3, [sp, #4]
 8000828:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800082a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800082c:	4f18      	ldr	r7, [pc, #96]	; (8000890 <HAL_RCC_OscConfig+0x338>)
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	05da      	lsls	r2, r3, #23
 8000832:	d52f      	bpl.n	8000894 <HAL_RCC_OscConfig+0x33c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000834:	68ab      	ldr	r3, [r5, #8]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d13d      	bne.n	80008b6 <HAL_RCC_OscConfig+0x35e>
 800083a:	6a23      	ldr	r3, [r4, #32]
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000842:	f7ff fd09 	bl	8000258 <HAL_GetTick>
 8000846:	2702      	movs	r7, #2
 8000848:	4682      	mov	sl, r0
 800084a:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800084c:	f04f 0801 	mov.w	r8, #1
 8000850:	fa97 f3a7 	rbit	r3, r7
 8000854:	fa97 f3a7 	rbit	r3, r7
 8000858:	2b00      	cmp	r3, #0
 800085a:	d06c      	beq.n	8000936 <HAL_RCC_OscConfig+0x3de>
 800085c:	6a22      	ldr	r2, [r4, #32]
 800085e:	fa99 f3a9 	rbit	r3, r9
 8000862:	fab3 f383 	clz	r3, r3
 8000866:	f003 031f 	and.w	r3, r3, #31
 800086a:	fa08 f303 	lsl.w	r3, r8, r3
 800086e:	4213      	tst	r3, r2
 8000870:	d058      	beq.n	8000924 <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 8000872:	2e00      	cmp	r6, #0
 8000874:	f43f ae87 	beq.w	8000586 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000878:	69e3      	ldr	r3, [r4, #28]
 800087a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800087e:	61e3      	str	r3, [r4, #28]
 8000880:	e681      	b.n	8000586 <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 8000882:	2600      	movs	r6, #0
 8000884:	e7d2      	b.n	800082c <HAL_RCC_OscConfig+0x2d4>
 8000886:	bf00      	nop
 8000888:	40021000 	.word	0x40021000
 800088c:	10908120 	.word	0x10908120
 8000890:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800089a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800089c:	f7ff fcdc 	bl	8000258 <HAL_GetTick>
 80008a0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	05db      	lsls	r3, r3, #23
 80008a6:	d4c5      	bmi.n	8000834 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80008a8:	f7ff fcd6 	bl	8000258 <HAL_GetTick>
 80008ac:	eba0 0008 	sub.w	r0, r0, r8
 80008b0:	2864      	cmp	r0, #100	; 0x64
 80008b2:	d9f6      	bls.n	80008a2 <HAL_RCC_OscConfig+0x34a>
 80008b4:	e6b3      	b.n	800061e <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008b6:	bb3b      	cbnz	r3, 8000908 <HAL_RCC_OscConfig+0x3b0>
 80008b8:	6a23      	ldr	r3, [r4, #32]
 80008ba:	f023 0301 	bic.w	r3, r3, #1
 80008be:	6223      	str	r3, [r4, #32]
 80008c0:	6a23      	ldr	r3, [r4, #32]
 80008c2:	f023 0304 	bic.w	r3, r3, #4
 80008c6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80008c8:	f7ff fcc6 	bl	8000258 <HAL_GetTick>
 80008cc:	2702      	movs	r7, #2
 80008ce:	4682      	mov	sl, r0
 80008d0:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008d2:	f04f 0801 	mov.w	r8, #1
 80008d6:	fa97 f3a7 	rbit	r3, r7
 80008da:	fa97 f3a7 	rbit	r3, r7
 80008de:	b373      	cbz	r3, 800093e <HAL_RCC_OscConfig+0x3e6>
 80008e0:	6a22      	ldr	r2, [r4, #32]
 80008e2:	fa99 f3a9 	rbit	r3, r9
 80008e6:	fab3 f383 	clz	r3, r3
 80008ea:	f003 031f 	and.w	r3, r3, #31
 80008ee:	fa08 f303 	lsl.w	r3, r8, r3
 80008f2:	4213      	tst	r3, r2
 80008f4:	d0bd      	beq.n	8000872 <HAL_RCC_OscConfig+0x31a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008f6:	f7ff fcaf 	bl	8000258 <HAL_GetTick>
 80008fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80008fe:	eba0 000a 	sub.w	r0, r0, sl
 8000902:	4298      	cmp	r0, r3
 8000904:	d9e7      	bls.n	80008d6 <HAL_RCC_OscConfig+0x37e>
 8000906:	e68a      	b.n	800061e <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000908:	2b05      	cmp	r3, #5
 800090a:	6a23      	ldr	r3, [r4, #32]
 800090c:	d103      	bne.n	8000916 <HAL_RCC_OscConfig+0x3be>
 800090e:	f043 0304 	orr.w	r3, r3, #4
 8000912:	6223      	str	r3, [r4, #32]
 8000914:	e791      	b.n	800083a <HAL_RCC_OscConfig+0x2e2>
 8000916:	f023 0301 	bic.w	r3, r3, #1
 800091a:	6223      	str	r3, [r4, #32]
 800091c:	6a23      	ldr	r3, [r4, #32]
 800091e:	f023 0304 	bic.w	r3, r3, #4
 8000922:	e78d      	b.n	8000840 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000924:	f7ff fc98 	bl	8000258 <HAL_GetTick>
 8000928:	f241 3388 	movw	r3, #5000	; 0x1388
 800092c:	eba0 000a 	sub.w	r0, r0, sl
 8000930:	4298      	cmp	r0, r3
 8000932:	d98d      	bls.n	8000850 <HAL_RCC_OscConfig+0x2f8>
 8000934:	e673      	b.n	800061e <HAL_RCC_OscConfig+0xc6>
 8000936:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800093a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800093c:	e78f      	b.n	800085e <HAL_RCC_OscConfig+0x306>
 800093e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000942:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000944:	e7cd      	b.n	80008e2 <HAL_RCC_OscConfig+0x38a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000946:	4c44      	ldr	r4, [pc, #272]	; (8000a58 <HAL_RCC_OscConfig+0x500>)
 8000948:	6863      	ldr	r3, [r4, #4]
 800094a:	f003 030c 	and.w	r3, r3, #12
 800094e:	2b08      	cmp	r3, #8
 8000950:	f43f ae06 	beq.w	8000560 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000954:	2a02      	cmp	r2, #2
 8000956:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800095a:	d158      	bne.n	8000a0e <HAL_RCC_OscConfig+0x4b6>
 800095c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000960:	fab3 f383 	clz	r3, r3
 8000964:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000968:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000972:	f7ff fc71 	bl	8000258 <HAL_GetTick>
 8000976:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800097a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800097c:	2601      	movs	r6, #1
 800097e:	fa97 f3a7 	rbit	r3, r7
 8000982:	6822      	ldr	r2, [r4, #0]
 8000984:	fa97 f3a7 	rbit	r3, r7
 8000988:	fab3 f383 	clz	r3, r3
 800098c:	f003 031f 	and.w	r3, r3, #31
 8000990:	fa06 f303 	lsl.w	r3, r6, r3
 8000994:	4213      	tst	r3, r2
 8000996:	d133      	bne.n	8000a00 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000998:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800099a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800099c:	f023 030f 	bic.w	r3, r3, #15
 80009a0:	4313      	orrs	r3, r2
 80009a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80009a4:	6862      	ldr	r2, [r4, #4]
 80009a6:	6a2b      	ldr	r3, [r5, #32]
 80009a8:	69e9      	ldr	r1, [r5, #28]
 80009aa:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 80009ae:	430b      	orrs	r3, r1
 80009b0:	4313      	orrs	r3, r2
 80009b2:	6063      	str	r3, [r4, #4]
 80009b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009b8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80009bc:	fab3 f383 	clz	r3, r3
 80009c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80009ce:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80009d0:	f7ff fc42 	bl	8000258 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009d4:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 80009d6:	4607      	mov	r7, r0
 80009d8:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009dc:	6822      	ldr	r2, [r4, #0]
 80009de:	fa95 f3a5 	rbit	r3, r5
 80009e2:	fab3 f383 	clz	r3, r3
 80009e6:	f003 031f 	and.w	r3, r3, #31
 80009ea:	fa06 f303 	lsl.w	r3, r6, r3
 80009ee:	4213      	tst	r3, r2
 80009f0:	f47f adcd 	bne.w	800058e <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009f4:	f7ff fc30 	bl	8000258 <HAL_GetTick>
 80009f8:	1bc0      	subs	r0, r0, r7
 80009fa:	2802      	cmp	r0, #2
 80009fc:	d9ec      	bls.n	80009d8 <HAL_RCC_OscConfig+0x480>
 80009fe:	e60e      	b.n	800061e <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a00:	f7ff fc2a 	bl	8000258 <HAL_GetTick>
 8000a04:	eba0 0008 	sub.w	r0, r0, r8
 8000a08:	2802      	cmp	r0, #2
 8000a0a:	d9b8      	bls.n	800097e <HAL_RCC_OscConfig+0x426>
 8000a0c:	e607      	b.n	800061e <HAL_RCC_OscConfig+0xc6>
 8000a0e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000a12:	fab3 f383 	clz	r3, r3
 8000a16:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a1a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a24:	f7ff fc18 	bl	8000258 <HAL_GetTick>
 8000a28:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000a2c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a2e:	2601      	movs	r6, #1
 8000a30:	fa95 f3a5 	rbit	r3, r5
 8000a34:	6822      	ldr	r2, [r4, #0]
 8000a36:	fa95 f3a5 	rbit	r3, r5
 8000a3a:	fab3 f383 	clz	r3, r3
 8000a3e:	f003 031f 	and.w	r3, r3, #31
 8000a42:	fa06 f303 	lsl.w	r3, r6, r3
 8000a46:	4213      	tst	r3, r2
 8000a48:	f43f ada1 	beq.w	800058e <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a4c:	f7ff fc04 	bl	8000258 <HAL_GetTick>
 8000a50:	1bc0      	subs	r0, r0, r7
 8000a52:	2802      	cmp	r0, #2
 8000a54:	d9ec      	bls.n	8000a30 <HAL_RCC_OscConfig+0x4d8>
 8000a56:	e5e2      	b.n	800061e <HAL_RCC_OscConfig+0xc6>
 8000a58:	40021000 	.word	0x40021000

08000a5c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000a5c:	4911      	ldr	r1, [pc, #68]	; (8000aa4 <HAL_RCC_GetSysClockFreq+0x48>)
 8000a5e:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000a60:	f003 020c 	and.w	r2, r3, #12
 8000a64:	2a08      	cmp	r2, #8
 8000a66:	d11a      	bne.n	8000a9e <HAL_RCC_GetSysClockFreq+0x42>
 8000a68:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000a6c:	fa92 f2a2 	rbit	r2, r2
 8000a70:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a72:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a76:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000a78:	fa90 f0a0 	rbit	r0, r0
 8000a7c:	fab0 f080 	clz	r0, r0
 8000a80:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a84:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000a88:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a8a:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a8c:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a8e:	4807      	ldr	r0, [pc, #28]	; (8000aac <HAL_RCC_GetSysClockFreq+0x50>)
 8000a90:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000a92:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <HAL_RCC_GetSysClockFreq+0x54>)
 8000a94:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a98:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000a9a:	4348      	muls	r0, r1
 8000a9c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000a9e:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	08000fe4 	.word	0x08000fe4
 8000aac:	08000ff4 	.word	0x08000ff4
 8000ab0:	007a1200 	.word	0x007a1200

08000ab4 <HAL_RCC_ClockConfig>:
{
 8000ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ab8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000aba:	4604      	mov	r4, r0
 8000abc:	b910      	cbnz	r0, 8000ac4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000abe:	2001      	movs	r0, #1
 8000ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ac4:	4a4c      	ldr	r2, [pc, #304]	; (8000bf8 <HAL_RCC_ClockConfig+0x144>)
 8000ac6:	6813      	ldr	r3, [r2, #0]
 8000ac8:	f003 0307 	and.w	r3, r3, #7
 8000acc:	428b      	cmp	r3, r1
 8000ace:	d32e      	bcc.n	8000b2e <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ad0:	6822      	ldr	r2, [r4, #0]
 8000ad2:	0791      	lsls	r1, r2, #30
 8000ad4:	d436      	bmi.n	8000b44 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ad6:	07d2      	lsls	r2, r2, #31
 8000ad8:	d43c      	bmi.n	8000b54 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ada:	4a47      	ldr	r2, [pc, #284]	; (8000bf8 <HAL_RCC_ClockConfig+0x144>)
 8000adc:	6813      	ldr	r3, [r2, #0]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	429d      	cmp	r5, r3
 8000ae4:	d375      	bcc.n	8000bd2 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ae6:	6822      	ldr	r2, [r4, #0]
 8000ae8:	4d44      	ldr	r5, [pc, #272]	; (8000bfc <HAL_RCC_ClockConfig+0x148>)
 8000aea:	f012 0f04 	tst.w	r2, #4
 8000aee:	d17c      	bne.n	8000bea <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000af0:	0713      	lsls	r3, r2, #28
 8000af2:	d506      	bpl.n	8000b02 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000af4:	686b      	ldr	r3, [r5, #4]
 8000af6:	6922      	ldr	r2, [r4, #16]
 8000af8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000afc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b00:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000b02:	f7ff ffab 	bl	8000a5c <HAL_RCC_GetSysClockFreq>
 8000b06:	686b      	ldr	r3, [r5, #4]
 8000b08:	22f0      	movs	r2, #240	; 0xf0
 8000b0a:	fa92 f2a2 	rbit	r2, r2
 8000b0e:	fab2 f282 	clz	r2, r2
 8000b12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b16:	40d3      	lsrs	r3, r2
 8000b18:	4a39      	ldr	r2, [pc, #228]	; (8000c00 <HAL_RCC_ClockConfig+0x14c>)
 8000b1a:	5cd3      	ldrb	r3, [r2, r3]
 8000b1c:	40d8      	lsrs	r0, r3
 8000b1e:	4b39      	ldr	r3, [pc, #228]	; (8000c04 <HAL_RCC_ClockConfig+0x150>)
 8000b20:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff fb56 	bl	80001d4 <HAL_InitTick>
  return HAL_OK;
 8000b28:	2000      	movs	r0, #0
 8000b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b2e:	6813      	ldr	r3, [r2, #0]
 8000b30:	f023 0307 	bic.w	r3, r3, #7
 8000b34:	430b      	orrs	r3, r1
 8000b36:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b38:	6813      	ldr	r3, [r2, #0]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	d1bd      	bne.n	8000abe <HAL_RCC_ClockConfig+0xa>
 8000b42:	e7c5      	b.n	8000ad0 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b44:	492d      	ldr	r1, [pc, #180]	; (8000bfc <HAL_RCC_ClockConfig+0x148>)
 8000b46:	68a0      	ldr	r0, [r4, #8]
 8000b48:	684b      	ldr	r3, [r1, #4]
 8000b4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b4e:	4303      	orrs	r3, r0
 8000b50:	604b      	str	r3, [r1, #4]
 8000b52:	e7c0      	b.n	8000ad6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b54:	6862      	ldr	r2, [r4, #4]
 8000b56:	4e29      	ldr	r6, [pc, #164]	; (8000bfc <HAL_RCC_ClockConfig+0x148>)
 8000b58:	2a01      	cmp	r2, #1
 8000b5a:	d127      	bne.n	8000bac <HAL_RCC_ClockConfig+0xf8>
 8000b5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b60:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b64:	6831      	ldr	r1, [r6, #0]
 8000b66:	fa93 f3a3 	rbit	r3, r3
 8000b6a:	fab3 f383 	clz	r3, r3
 8000b6e:	f003 031f 	and.w	r3, r3, #31
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b78:	d0a1      	beq.n	8000abe <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b7a:	6873      	ldr	r3, [r6, #4]
 8000b7c:	f023 0303 	bic.w	r3, r3, #3
 8000b80:	431a      	orrs	r2, r3
 8000b82:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8000b84:	f7ff fb68 	bl	8000258 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b88:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000b8c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000b8e:	6873      	ldr	r3, [r6, #4]
 8000b90:	6862      	ldr	r2, [r4, #4]
 8000b92:	f003 030c 	and.w	r3, r3, #12
 8000b96:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000b9a:	d09e      	beq.n	8000ada <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b9c:	f7ff fb5c 	bl	8000258 <HAL_GetTick>
 8000ba0:	1bc0      	subs	r0, r0, r7
 8000ba2:	4540      	cmp	r0, r8
 8000ba4:	d9f3      	bls.n	8000b8e <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8000ba6:	2003      	movs	r0, #3
}
 8000ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bac:	2a02      	cmp	r2, #2
 8000bae:	bf0c      	ite	eq
 8000bb0:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000bb4:	2302      	movne	r3, #2
 8000bb6:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bba:	6830      	ldr	r0, [r6, #0]
 8000bbc:	fa93 f3a3 	rbit	r3, r3
 8000bc0:	fab3 f383 	clz	r3, r3
 8000bc4:	f003 031f 	and.w	r3, r3, #31
 8000bc8:	2101      	movs	r1, #1
 8000bca:	fa01 f303 	lsl.w	r3, r1, r3
 8000bce:	4203      	tst	r3, r0
 8000bd0:	e7d2      	b.n	8000b78 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bd2:	6813      	ldr	r3, [r2, #0]
 8000bd4:	f023 0307 	bic.w	r3, r3, #7
 8000bd8:	432b      	orrs	r3, r5
 8000bda:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bdc:	6813      	ldr	r3, [r2, #0]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	429d      	cmp	r5, r3
 8000be4:	f47f af6b 	bne.w	8000abe <HAL_RCC_ClockConfig+0xa>
 8000be8:	e77d      	b.n	8000ae6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000bea:	686b      	ldr	r3, [r5, #4]
 8000bec:	68e1      	ldr	r1, [r4, #12]
 8000bee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bf2:	430b      	orrs	r3, r1
 8000bf4:	606b      	str	r3, [r5, #4]
 8000bf6:	e77b      	b.n	8000af0 <HAL_RCC_ClockConfig+0x3c>
 8000bf8:	40022000 	.word	0x40022000
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	08001004 	.word	0x08001004
 8000c04:	20000010 	.word	0x20000010

08000c08 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000c08:	4b01      	ldr	r3, [pc, #4]	; (8000c10 <HAL_RCC_GetHCLKFreq+0x8>)
 8000c0a:	6818      	ldr	r0, [r3, #0]
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000010 	.word	0x20000010

08000c14 <ps2interrupt>:
//	keyboard->DataPin = GPIO_PIN_5;
//}

// The ISR for the external interrupt
void ps2interrupt(Keyboard_TypeDef* keyboard) //MUDAR
{
 8000c14:	b570      	push	{r4, r5, r6, lr}
	static uint8_t bitcount=0;
	static uint8_t incoming=0;
	static uint32_t prev_ms=0;
	uint32_t now_ms;
	uint8_t n, val;
	if(bitcount == 0){
 8000c16:	4c23      	ldr	r4, [pc, #140]	; (8000ca4 <ps2interrupt+0x90>)
 8000c18:	7823      	ldrb	r3, [r4, #0]
{
 8000c1a:	4605      	mov	r5, r0
	if(bitcount == 0){
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d13a      	bne.n	8000c96 <ps2interrupt+0x82>
		keyboard->DataPin = GPIO_PIN_6;
 8000c20:	2240      	movs	r2, #64	; 0x40
	}else if (bitcount == 1){
		keyboard->DataPin = GPIO_PIN_5;
 8000c22:	f885 202f 	strb.w	r2, [r5, #47]	; 0x2f
	}else if (bitcount == 2){
		keyboard->DataPin = GPIO_PIN_6;
	}
	bitcount++;
 8000c26:	3301      	adds	r3, #1
	val = HAL_GPIO_ReadPin(keyboard->DataPort, keyboard->DataPin); //MUDAR
 8000c28:	f895 102f 	ldrb.w	r1, [r5, #47]	; 0x2f
 8000c2c:	6b28      	ldr	r0, [r5, #48]	; 0x30
	bitcount++;
 8000c2e:	7023      	strb	r3, [r4, #0]
	val = HAL_GPIO_ReadPin(keyboard->DataPort, keyboard->DataPin); //MUDAR
 8000c30:	f7ff fc76 	bl	8000520 <HAL_GPIO_ReadPin>
 8000c34:	4606      	mov	r6, r0
	now_ms = HAL_GetTick() ;//MUDAR millis N SEI SE FUNCIONA POSSIVEL ERRO
 8000c36:	f7ff fb0f 	bl	8000258 <HAL_GetTick>
	if (now_ms - prev_ms > 250) {
 8000c3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <ps2interrupt+0x94>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
		bitcount = 0;
		incoming = 0;
	}
	prev_ms = now_ms;
 8000c3e:	6018      	str	r0, [r3, #0]
	if (now_ms - prev_ms > 250) {
 8000c40:	1a82      	subs	r2, r0, r2
 8000c42:	2afa      	cmp	r2, #250	; 0xfa
		bitcount = 0;
 8000c44:	bf82      	ittt	hi
 8000c46:	2200      	movhi	r2, #0
 8000c48:	7022      	strbhi	r2, [r4, #0]
		incoming = 0;
 8000c4a:	4918      	ldrhi	r1, [pc, #96]	; (8000cac <ps2interrupt+0x98>)
	n = bitcount - 1;
 8000c4c:	7823      	ldrb	r3, [r4, #0]
		incoming = 0;
 8000c4e:	bf88      	it	hi
 8000c50:	700a      	strbhi	r2, [r1, #0]
	n = bitcount - 1;
 8000c52:	1e5a      	subs	r2, r3, #1
 8000c54:	b2d2      	uxtb	r2, r2
	if (n <= 7) {
 8000c56:	2a07      	cmp	r2, #7
 8000c58:	d804      	bhi.n	8000c64 <ps2interrupt+0x50>
		incoming |= (val << n);
 8000c5a:	4914      	ldr	r1, [pc, #80]	; (8000cac <ps2interrupt+0x98>)
 8000c5c:	4096      	lsls	r6, r2
 8000c5e:	780a      	ldrb	r2, [r1, #0]
 8000c60:	4316      	orrs	r6, r2
 8000c62:	700e      	strb	r6, [r1, #0]
	}
	bitcount++;
 8000c64:	3301      	adds	r3, #1
 8000c66:	b2db      	uxtb	r3, r3
	if (bitcount == 11) {
 8000c68:	2b0b      	cmp	r3, #11
	bitcount++;
 8000c6a:	7023      	strb	r3, [r4, #0]
	if (bitcount == 11) {
 8000c6c:	d112      	bne.n	8000c94 <ps2interrupt+0x80>
		uint8_t i = keyboard->head + 1;
 8000c6e:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
		if (i >= BUFFER_SIZE) i = 0;
		if (i != keyboard->tail) {
 8000c72:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
		uint8_t i = keyboard->head + 1;
 8000c76:	3301      	adds	r3, #1
 8000c78:	b2db      	uxtb	r3, r3
		if (i >= BUFFER_SIZE) i = 0;
 8000c7a:	2b2d      	cmp	r3, #45	; 0x2d
 8000c7c:	bf28      	it	cs
 8000c7e:	2300      	movcs	r3, #0
		if (i != keyboard->tail) {
 8000c80:	4293      	cmp	r3, r2
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <ps2interrupt+0x98>)
			keyboard->buffer[i] = incoming;
 8000c84:	bf1e      	ittt	ne
 8000c86:	7811      	ldrbne	r1, [r2, #0]
 8000c88:	54e9      	strbne	r1, [r5, r3]
			keyboard->head = i;
 8000c8a:	f885 302d 	strbne.w	r3, [r5, #45]	; 0x2d
		}
		bitcount = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	7023      	strb	r3, [r4, #0]
		incoming = 0;
 8000c92:	7013      	strb	r3, [r2, #0]
 8000c94:	bd70      	pop	{r4, r5, r6, pc}
	}else if (bitcount == 1){
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d101      	bne.n	8000c9e <ps2interrupt+0x8a>
		keyboard->DataPin = GPIO_PIN_5;
 8000c9a:	2220      	movs	r2, #32
 8000c9c:	e7c1      	b.n	8000c22 <ps2interrupt+0xe>
	}else if (bitcount == 2){
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d1c1      	bne.n	8000c26 <ps2interrupt+0x12>
 8000ca2:	e7bd      	b.n	8000c20 <ps2interrupt+0xc>
 8000ca4:	20000030 	.word	0x20000030
 8000ca8:	20000034 	.word	0x20000034
 8000cac:	20000031 	.word	0x20000031

08000cb0 <keyboardBegin>:
  //uint8_t irq_num=255;
  // irq data e port
  keyboard->DataPort = data_port;
  keyboard->DataPin = data_pin;

  keyboard->IQRPort = iqr_port;
 8000cb0:	6383      	str	r3, [r0, #56]	; 0x38
  keyboard->IQRPin = iqr_pin;
 8000cb2:	f89d 3000 	ldrb.w	r3, [sp]
 8000cb6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
//  pinMode(data_pin, INPUT_PULLUP);
//#ifdef CORE_INT_EVERY_PIN
//  irq_num = irq_pin;
//
//
  keyboard->head = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  keyboard->DataPort = data_port;
 8000cc0:	6301      	str	r1, [r0, #48]	; 0x30
  keyboard->DataPin = data_pin;
 8000cc2:	f880 202f 	strb.w	r2, [r0, #47]	; 0x2f
  keyboard->tail = 0;
 8000cc6:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
  keyboard->CharBuffer = 0;
 8000cca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  keyboard->UTF8next = 0;
 8000cce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  keyboard->keymap = 0;
 8000cd2:	6403      	str	r3, [r0, #64]	; 0x40
 8000cd4:	4770      	bx	lr
	...

08000cd8 <interrupcao>:
/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
  Keyboard_TypeDef keyboard;
  Keyboard_TypeDef* pKeyboard = &keyboard;
  uint16_t x = GPIO_PIN_5;
	void interrupcao(){
 8000cd8:	b510      	push	{r4, lr}
		ps2interrupt(pKeyboard);
 8000cda:	4c05      	ldr	r4, [pc, #20]	; (8000cf0 <interrupcao+0x18>)
 8000cdc:	6820      	ldr	r0, [r4, #0]
 8000cde:	f7ff ff99 	bl	8000c14 <ps2interrupt>
		x = pKeyboard->DataPin;
 8000ce2:	6823      	ldr	r3, [r4, #0]
 8000ce4:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8000ce8:	4b02      	ldr	r3, [pc, #8]	; (8000cf4 <interrupcao+0x1c>)
 8000cea:	801a      	strh	r2, [r3, #0]
 8000cec:	bd10      	pop	{r4, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	2000000c 	.word	0x2000000c

08000cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf8:	b510      	push	{r4, lr}
 8000cfa:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d00:	2301      	movs	r3, #1
 8000d02:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000d04:	2310      	movs	r3, #16
 8000d06:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d08:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0e:	f7ff fc23 	bl	8000558 <HAL_RCC_OscConfig>
 8000d12:	4601      	mov	r1, r0
 8000d14:	b100      	cbz	r0, 8000d18 <SystemClock_Config+0x20>
 8000d16:	e7fe      	b.n	8000d16 <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d18:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d1a:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1c:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d1e:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d20:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d22:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d24:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d26:	f7ff fec5 	bl	8000ab4 <HAL_RCC_ClockConfig>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	b100      	cbz	r0, 8000d30 <SystemClock_Config+0x38>
 8000d2e:	e7fe      	b.n	8000d2e <SystemClock_Config+0x36>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000d30:	f7ff ff6a 	bl	8000c08 <HAL_RCC_GetHCLKFreq>
 8000d34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d38:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d3c:	f7ff faf8 	bl	8000330 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000d40:	2004      	movs	r0, #4
 8000d42:	f7ff fb0b 	bl	800035c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000d46:	4622      	mov	r2, r4
 8000d48:	4621      	mov	r1, r4
 8000d4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d4e:	f7ff faaf 	bl	80002b0 <HAL_NVIC_SetPriority>
}
 8000d52:	b010      	add	sp, #64	; 0x40
 8000d54:	bd10      	pop	{r4, pc}
	...

08000d58 <main>:
{
 8000d58:	b500      	push	{lr}
 8000d5a:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8000d5c:	f7ff fa5e 	bl	800021c <HAL_Init>
  SystemClock_Config();
 8000d60:	f7ff ffca 	bl	8000cf8 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d64:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <main+0xa4>)
 8000d66:	695a      	ldr	r2, [r3, #20]
 8000d68:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000d6c:	615a      	str	r2, [r3, #20]
 8000d6e:	695b      	ldr	r3, [r3, #20]
 8000d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000d78:	2160      	movs	r1, #96	; 0x60
 8000d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : IQR_PIN_Pin */
  GPIO_InitStruct.Pin = IQR_PIN_Pin;
 8000d7e:	2401      	movs	r4, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d80:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000d82:	f7ff fbd3 	bl	800052c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d86:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <main+0xa8>)
 8000d88:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(IQR_PIN_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	a903      	add	r1, sp, #12
 8000d8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : DATA_PIN_Pin */
  GPIO_InitStruct.Pin = DATA_PIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d90:	2500      	movs	r5, #0
  GPIO_InitStruct.Pin = IQR_PIN_Pin;
 8000d92:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d94:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = DATA_PIN_Pin;
 8000d96:	2602      	movs	r6, #2
  HAL_GPIO_Init(IQR_PIN_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f7ff faf2 	bl	8000380 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(DATA_PIN_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	a903      	add	r1, sp, #12
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = DATA_PIN_Pin;
 8000da4:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da6:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(DATA_PIN_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f7ff faea 	bl	8000380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000dac:	2360      	movs	r3, #96	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	a903      	add	r1, sp, #12
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000db4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f7ff fae0 	bl	8000380 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000dc0:	462a      	mov	r2, r5
 8000dc2:	4629      	mov	r1, r5
 8000dc4:	2006      	movs	r0, #6
 8000dc6:	f7ff fa73 	bl	80002b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000dca:	2006      	movs	r0, #6
 8000dcc:	f7ff faa4 	bl	8000318 <HAL_NVIC_EnableIRQ>
  HAL_GetTick();
 8000dd0:	f7ff fa42 	bl	8000258 <HAL_GetTick>
  keyboardBegin(pKeyboard, data_port, data_pin, iqr_port, iqr_pin);
 8000dd4:	480b      	ldr	r0, [pc, #44]	; (8000e04 <main+0xac>)
 8000dd6:	9400      	str	r4, [sp, #0]
 8000dd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ddc:	4632      	mov	r2, r6
 8000dde:	4619      	mov	r1, r3
 8000de0:	6800      	ldr	r0, [r0, #0]
  {   HAL_GPIO_TogglePin(GPIOA, x);
 8000de2:	4c09      	ldr	r4, [pc, #36]	; (8000e08 <main+0xb0>)
  keyboardBegin(pKeyboard, data_port, data_pin, iqr_port, iqr_pin);
 8000de4:	f7ff ff64 	bl	8000cb0 <keyboardBegin>
  {   HAL_GPIO_TogglePin(GPIOA, x);
 8000de8:	8821      	ldrh	r1, [r4, #0]
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dee:	f7ff fba2 	bl	8000536 <HAL_GPIO_TogglePin>
	  HAL_Delay(400);
 8000df2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000df6:	f7ff fa35 	bl	8000264 <HAL_Delay>
 8000dfa:	e7f5      	b.n	8000de8 <main+0x90>
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	10210000 	.word	0x10210000
 8000e04:	20000008 	.word	0x20000008
 8000e08:	2000000c 	.word	0x2000000c

08000e0c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0c:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <HAL_MspInit+0x88>)
{
 8000e0e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e10:	699a      	ldr	r2, [r3, #24]
 8000e12:	f042 0201 	orr.w	r2, r2, #1
 8000e16:	619a      	str	r2, [r3, #24]
 8000e18:	699a      	ldr	r2, [r3, #24]
 8000e1a:	f002 0201 	and.w	r2, r2, #1
 8000e1e:	9200      	str	r2, [sp, #0]
 8000e20:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	69da      	ldr	r2, [r3, #28]
 8000e24:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e28:	61da      	str	r2, [r3, #28]
 8000e2a:	69db      	ldr	r3, [r3, #28]
 8000e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e30:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e32:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e34:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e36:	f7ff fa29 	bl	800028c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	f06f 000b 	mvn.w	r0, #11
 8000e42:	f7ff fa35 	bl	80002b0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	4611      	mov	r1, r2
 8000e4a:	f06f 000a 	mvn.w	r0, #10
 8000e4e:	f7ff fa2f 	bl	80002b0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	4611      	mov	r1, r2
 8000e56:	f06f 0009 	mvn.w	r0, #9
 8000e5a:	f7ff fa29 	bl	80002b0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	4611      	mov	r1, r2
 8000e62:	f06f 0004 	mvn.w	r0, #4
 8000e66:	f7ff fa23 	bl	80002b0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	f06f 0003 	mvn.w	r0, #3
 8000e72:	f7ff fa1d 	bl	80002b0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	4611      	mov	r1, r2
 8000e7a:	f06f 0001 	mvn.w	r0, #1
 8000e7e:	f7ff fa17 	bl	80002b0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	4611      	mov	r1, r2
 8000e86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e8a:	f7ff fa11 	bl	80002b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8e:	b003      	add	sp, #12
 8000e90:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e94:	40021000 	.word	0x40021000

08000e98 <NMI_Handler>:
 8000e98:	4770      	bx	lr

08000e9a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000e9a:	e7fe      	b.n	8000e9a <HardFault_Handler>

08000e9c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000e9c:	e7fe      	b.n	8000e9c <MemManage_Handler>

08000e9e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000e9e:	e7fe      	b.n	8000e9e <BusFault_Handler>

08000ea0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000ea0:	e7fe      	b.n	8000ea0 <UsageFault_Handler>

08000ea2 <SVC_Handler>:
 8000ea2:	4770      	bx	lr

08000ea4 <DebugMon_Handler>:
 8000ea4:	4770      	bx	lr

08000ea6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000ea6:	4770      	bx	lr

08000ea8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000ea8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eaa:	f7ff f9c9 	bl	8000240 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8000eb2:	f7ff ba60 	b.w	8000376 <HAL_SYSTICK_IRQHandler>

08000eb6 <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 8000eb6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	interrupcao();
 8000eb8:	f7ff ff0e 	bl	8000cd8 <interrupcao>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ebc:	2001      	movs	r0, #1
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ebe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ec2:	f7ff bb3d 	b.w	8000540 <HAL_GPIO_EXTI_IRQHandler>
	...

08000ec8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec8:	4915      	ldr	r1, [pc, #84]	; (8000f20 <SystemInit+0x58>)
 8000eca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000ece:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000ed6:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <SystemInit+0x5c>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	f042 0201 	orr.w	r2, r2, #1
 8000ede:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000ee0:	6858      	ldr	r0, [r3, #4]
 8000ee2:	4a11      	ldr	r2, [pc, #68]	; (8000f28 <SystemInit+0x60>)
 8000ee4:	4002      	ands	r2, r0
 8000ee6:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000eee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ef2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000efa:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000f02:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8000f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f06:	f022 020f 	bic.w	r2, r2, #15
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000f0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000f0e:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <SystemInit+0x64>)
 8000f10:	4002      	ands	r2, r0
 8000f12:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000f1c:	608b      	str	r3, [r1, #8]
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00
 8000f24:	40021000 	.word	0x40021000
 8000f28:	f87fc00c 	.word	0xf87fc00c
 8000f2c:	ff00fccc 	.word	0xff00fccc

08000f30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f68 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f36:	e003      	b.n	8000f40 <LoopCopyDataInit>

08000f38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f3e:	3104      	adds	r1, #4

08000f40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f40:	480b      	ldr	r0, [pc, #44]	; (8000f70 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f48:	d3f6      	bcc.n	8000f38 <CopyDataInit>
	ldr	r2, =_sbss
 8000f4a:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f4c:	e002      	b.n	8000f54 <LoopFillZerobss>

08000f4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f50:	f842 3b04 	str.w	r3, [r2], #4

08000f54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <LoopForever+0x16>)
	cmp	r2, r3
 8000f56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f58:	d3f9      	bcc.n	8000f4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f5a:	f7ff ffb5 	bl	8000ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f5e:	f000 f811 	bl	8000f84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f62:	f7ff fef9 	bl	8000d58 <main>

08000f66 <LoopForever>:

LoopForever:
    b LoopForever
 8000f66:	e7fe      	b.n	8000f66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f68:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000f6c:	0800101c 	.word	0x0800101c
	ldr	r0, =_sdata
 8000f70:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f74:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8000f78:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8000f7c:	20000080 	.word	0x20000080

08000f80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC1_2_IRQHandler>
	...

08000f84 <__libc_init_array>:
 8000f84:	b570      	push	{r4, r5, r6, lr}
 8000f86:	4e0d      	ldr	r6, [pc, #52]	; (8000fbc <__libc_init_array+0x38>)
 8000f88:	4c0d      	ldr	r4, [pc, #52]	; (8000fc0 <__libc_init_array+0x3c>)
 8000f8a:	1ba4      	subs	r4, r4, r6
 8000f8c:	10a4      	asrs	r4, r4, #2
 8000f8e:	2500      	movs	r5, #0
 8000f90:	42a5      	cmp	r5, r4
 8000f92:	d109      	bne.n	8000fa8 <__libc_init_array+0x24>
 8000f94:	4e0b      	ldr	r6, [pc, #44]	; (8000fc4 <__libc_init_array+0x40>)
 8000f96:	4c0c      	ldr	r4, [pc, #48]	; (8000fc8 <__libc_init_array+0x44>)
 8000f98:	f000 f818 	bl	8000fcc <_init>
 8000f9c:	1ba4      	subs	r4, r4, r6
 8000f9e:	10a4      	asrs	r4, r4, #2
 8000fa0:	2500      	movs	r5, #0
 8000fa2:	42a5      	cmp	r5, r4
 8000fa4:	d105      	bne.n	8000fb2 <__libc_init_array+0x2e>
 8000fa6:	bd70      	pop	{r4, r5, r6, pc}
 8000fa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fac:	4798      	blx	r3
 8000fae:	3501      	adds	r5, #1
 8000fb0:	e7ee      	b.n	8000f90 <__libc_init_array+0xc>
 8000fb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fb6:	4798      	blx	r3
 8000fb8:	3501      	adds	r5, #1
 8000fba:	e7f2      	b.n	8000fa2 <__libc_init_array+0x1e>
 8000fbc:	08001014 	.word	0x08001014
 8000fc0:	08001014 	.word	0x08001014
 8000fc4:	08001014 	.word	0x08001014
 8000fc8:	08001018 	.word	0x08001018

08000fcc <_init>:
 8000fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fce:	bf00      	nop
 8000fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fd2:	bc08      	pop	{r3}
 8000fd4:	469e      	mov	lr, r3
 8000fd6:	4770      	bx	lr

08000fd8 <_fini>:
 8000fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fda:	bf00      	nop
 8000fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fde:	bc08      	pop	{r3}
 8000fe0:	469e      	mov	lr, r3
 8000fe2:	4770      	bx	lr
