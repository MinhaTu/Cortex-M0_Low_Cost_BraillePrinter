
nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08002274  08002274  00012274  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002350  08002350  00012350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002354  08002354  00012354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08002358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  7 .bss          00000154  20000074  20000074  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001c8  200001c8  00020074  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000dbfc  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001f8b  00000000  00000000  0002dca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000335d  00000000  00000000  0002fc2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000005a0  00000000  00000000  00032f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000838  00000000  00000000  00033528  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003b1e  00000000  00000000  00033d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002872  00000000  00000000  0003787e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003a0f0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000118c  00000000  00000000  0003a16c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800225c 	.word	0x0800225c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800225c 	.word	0x0800225c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000290:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000292:	4a0e      	ldr	r2, [pc, #56]	; (80002cc <HAL_InitTick+0x3c>)
 8000294:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <HAL_InitTick+0x40>)
{
 8000296:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000298:	7818      	ldrb	r0, [r3, #0]
 800029a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800029e:	fbb3 f3f0 	udiv	r3, r3, r0
 80002a2:	6810      	ldr	r0, [r2, #0]
 80002a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80002a8:	f000 f8a0 	bl	80003ec <HAL_SYSTICK_Config>
 80002ac:	4604      	mov	r4, r0
 80002ae:	b958      	cbnz	r0, 80002c8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002b0:	2d0f      	cmp	r5, #15
 80002b2:	d809      	bhi.n	80002c8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002b4:	4602      	mov	r2, r0
 80002b6:	4629      	mov	r1, r5
 80002b8:	f04f 30ff 	mov.w	r0, #4294967295
 80002bc:	f000 f856 	bl	800036c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002c0:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <HAL_InitTick+0x44>)
 80002c2:	4620      	mov	r0, r4
 80002c4:	601d      	str	r5, [r3, #0]
 80002c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80002c8:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80002ca:	bd38      	pop	{r3, r4, r5, pc}
 80002cc:	2000000c 	.word	0x2000000c
 80002d0:	20000000 	.word	0x20000000
 80002d4:	20000004 	.word	0x20000004

080002d8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002d8:	4a07      	ldr	r2, [pc, #28]	; (80002f8 <HAL_Init+0x20>)
{
 80002da:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002dc:	6813      	ldr	r3, [r2, #0]
 80002de:	f043 0310 	orr.w	r3, r3, #16
 80002e2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002e4:	2003      	movs	r0, #3
 80002e6:	f000 f82f 	bl	8000348 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002ea:	2000      	movs	r0, #0
 80002ec:	f7ff ffd0 	bl	8000290 <HAL_InitTick>
  HAL_MspInit();
 80002f0:	f001 fa7e 	bl	80017f0 <HAL_MspInit>
}
 80002f4:	2000      	movs	r0, #0
 80002f6:	bd08      	pop	{r3, pc}
 80002f8:	40022000 	.word	0x40022000

080002fc <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002fc:	4a03      	ldr	r2, [pc, #12]	; (800030c <HAL_IncTick+0x10>)
 80002fe:	4b04      	ldr	r3, [pc, #16]	; (8000310 <HAL_IncTick+0x14>)
 8000300:	6811      	ldr	r1, [r2, #0]
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	440b      	add	r3, r1
 8000306:	6013      	str	r3, [r2, #0]
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	200000a8 	.word	0x200000a8
 8000310:	20000000 	.word	0x20000000

08000314 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000314:	4b01      	ldr	r3, [pc, #4]	; (800031c <HAL_GetTick+0x8>)
 8000316:	6818      	ldr	r0, [r3, #0]
}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	200000a8 	.word	0x200000a8

08000320 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000320:	b538      	push	{r3, r4, r5, lr}
 8000322:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000324:	f7ff fff6 	bl	8000314 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000328:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800032a:	bf1c      	itt	ne
 800032c:	4b05      	ldrne	r3, [pc, #20]	; (8000344 <HAL_Delay+0x24>)
 800032e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000330:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000332:	bf18      	it	ne
 8000334:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000336:	f7ff ffed 	bl	8000314 <HAL_GetTick>
 800033a:	1b40      	subs	r0, r0, r5
 800033c:	4284      	cmp	r4, r0
 800033e:	d8fa      	bhi.n	8000336 <HAL_Delay+0x16>
  {
  }
}
 8000340:	bd38      	pop	{r3, r4, r5, pc}
 8000342:	bf00      	nop
 8000344:	20000000 	.word	0x20000000

08000348 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000348:	4a07      	ldr	r2, [pc, #28]	; (8000368 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800034a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800034c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000350:	041b      	lsls	r3, r3, #16
 8000352:	0c1b      	lsrs	r3, r3, #16
 8000354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000358:	0200      	lsls	r0, r0, #8
 800035a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800035e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000362:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000364:	60d3      	str	r3, [r2, #12]
 8000366:	4770      	bx	lr
 8000368:	e000ed00 	.word	0xe000ed00

0800036c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800036c:	4b17      	ldr	r3, [pc, #92]	; (80003cc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800036e:	b530      	push	{r4, r5, lr}
 8000370:	68dc      	ldr	r4, [r3, #12]
 8000372:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000376:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800037a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800037c:	2b04      	cmp	r3, #4
 800037e:	bf28      	it	cs
 8000380:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000382:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000384:	f04f 0501 	mov.w	r5, #1
 8000388:	fa05 f303 	lsl.w	r3, r5, r3
 800038c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000390:	bf8c      	ite	hi
 8000392:	3c03      	subhi	r4, #3
 8000394:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000396:	4019      	ands	r1, r3
 8000398:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800039a:	fa05 f404 	lsl.w	r4, r5, r4
 800039e:	3c01      	subs	r4, #1
 80003a0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80003a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a4:	ea42 0201 	orr.w	r2, r2, r1
 80003a8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ac:	bfaf      	iteee	ge
 80003ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b2:	f000 000f 	andlt.w	r0, r0, #15
 80003b6:	4b06      	ldrlt	r3, [pc, #24]	; (80003d0 <HAL_NVIC_SetPriority+0x64>)
 80003b8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ba:	bfa5      	ittet	ge
 80003bc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80003c0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	bf00      	nop
 80003cc:	e000ed00 	.word	0xe000ed00
 80003d0:	e000ed14 	.word	0xe000ed14

080003d4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003d4:	0942      	lsrs	r2, r0, #5
 80003d6:	2301      	movs	r3, #1
 80003d8:	f000 001f 	and.w	r0, r0, #31
 80003dc:	fa03 f000 	lsl.w	r0, r3, r0
 80003e0:	4b01      	ldr	r3, [pc, #4]	; (80003e8 <HAL_NVIC_EnableIRQ+0x14>)
 80003e2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80003e6:	4770      	bx	lr
 80003e8:	e000e100 	.word	0xe000e100

080003ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003ec:	3801      	subs	r0, #1
 80003ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003f2:	d20a      	bcs.n	800040a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f6:	4a07      	ldr	r2, [pc, #28]	; (8000414 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003f8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003fa:	21f0      	movs	r1, #240	; 0xf0
 80003fc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000400:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000402:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000404:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800040a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	e000e010 	.word	0xe000e010
 8000414:	e000ed00 	.word	0xe000ed00

08000418 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000418:	4b04      	ldr	r3, [pc, #16]	; (800042c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800041a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800041c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800041e:	bf0c      	ite	eq
 8000420:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000424:	f022 0204 	bicne.w	r2, r2, #4
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	4770      	bx	lr
 800042c:	e000e010 	.word	0xe000e010

08000430 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000430:	4770      	bx	lr

08000432 <HAL_SYSTICK_IRQHandler>:
{
 8000432:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000434:	f7ff fffc 	bl	8000430 <HAL_SYSTICK_Callback>
 8000438:	bd08      	pop	{r3, pc}
	...

0800043c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800043c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000440:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000444:	f8df 9190 	ldr.w	r9, [pc, #400]	; 80005d8 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000448:	4a61      	ldr	r2, [pc, #388]	; (80005d0 <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 800044a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800044c:	fa38 f403 	lsrs.w	r4, r8, r3
 8000450:	d102      	bne.n	8000458 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000452:	b003      	add	sp, #12
 8000454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000458:	f04f 0e01 	mov.w	lr, #1
 800045c:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000460:	ea18 060e 	ands.w	r6, r8, lr
 8000464:	f000 80a6 	beq.w	80005b4 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000468:	684c      	ldr	r4, [r1, #4]
 800046a:	f024 0710 	bic.w	r7, r4, #16
 800046e:	2f02      	cmp	r7, #2
 8000470:	d116      	bne.n	80004a0 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8000472:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000476:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800047a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800047e:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000482:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000486:	f04f 0c0f 	mov.w	ip, #15
 800048a:	fa0c fc0b 	lsl.w	ip, ip, fp
 800048e:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000492:	690d      	ldr	r5, [r1, #16]
 8000494:	fa05 f50b 	lsl.w	r5, r5, fp
 8000498:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 800049c:	f8ca 5020 	str.w	r5, [sl, #32]
 80004a0:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004a4:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80004a6:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004aa:	fa05 f50a 	lsl.w	r5, r5, sl
 80004ae:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004b0:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004b4:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004b8:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004bc:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004be:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004c2:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80004c4:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004c8:	d811      	bhi.n	80004ee <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80004ca:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80004cc:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80004d0:	68cf      	ldr	r7, [r1, #12]
 80004d2:	fa07 fc0a 	lsl.w	ip, r7, sl
 80004d6:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80004da:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80004dc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80004de:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80004e2:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80004e6:	409f      	lsls	r7, r3
 80004e8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80004ec:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80004ee:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80004f0:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80004f2:	688f      	ldr	r7, [r1, #8]
 80004f4:	fa07 f70a 	lsl.w	r7, r7, sl
 80004f8:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80004fa:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80004fc:	00e5      	lsls	r5, r4, #3
 80004fe:	d559      	bpl.n	80005b4 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000500:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000504:	f045 0501 	orr.w	r5, r5, #1
 8000508:	f8c9 5018 	str.w	r5, [r9, #24]
 800050c:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000510:	f023 0703 	bic.w	r7, r3, #3
 8000514:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000518:	f005 0501 	and.w	r5, r5, #1
 800051c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000520:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000522:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000526:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000528:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800052a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800052e:	f04f 0e0f 	mov.w	lr, #15
 8000532:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000536:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800053a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800053e:	d03b      	beq.n	80005b8 <HAL_GPIO_Init+0x17c>
 8000540:	4d24      	ldr	r5, [pc, #144]	; (80005d4 <HAL_GPIO_Init+0x198>)
 8000542:	42a8      	cmp	r0, r5
 8000544:	d03a      	beq.n	80005bc <HAL_GPIO_Init+0x180>
 8000546:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800054a:	42a8      	cmp	r0, r5
 800054c:	d038      	beq.n	80005c0 <HAL_GPIO_Init+0x184>
 800054e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000552:	42a8      	cmp	r0, r5
 8000554:	d036      	beq.n	80005c4 <HAL_GPIO_Init+0x188>
 8000556:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800055a:	42a8      	cmp	r0, r5
 800055c:	d034      	beq.n	80005c8 <HAL_GPIO_Init+0x18c>
 800055e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000562:	42a8      	cmp	r0, r5
 8000564:	d032      	beq.n	80005cc <HAL_GPIO_Init+0x190>
 8000566:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800056a:	42a8      	cmp	r0, r5
 800056c:	bf14      	ite	ne
 800056e:	2507      	movne	r5, #7
 8000570:	2506      	moveq	r5, #6
 8000572:	fa05 f50c 	lsl.w	r5, r5, ip
 8000576:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800057a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800057c:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800057e:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000580:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000584:	bf0c      	ite	eq
 8000586:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000588:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 800058a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800058c:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800058e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000592:	bf0c      	ite	eq
 8000594:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000596:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000598:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800059a:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800059c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80005a0:	bf0c      	ite	eq
 80005a2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80005a4:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 80005a6:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80005a8:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80005aa:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80005ac:	bf54      	ite	pl
 80005ae:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80005b0:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 80005b2:	60d5      	str	r5, [r2, #12]
    position++;
 80005b4:	3301      	adds	r3, #1
 80005b6:	e749      	b.n	800044c <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80005b8:	2500      	movs	r5, #0
 80005ba:	e7da      	b.n	8000572 <HAL_GPIO_Init+0x136>
 80005bc:	2501      	movs	r5, #1
 80005be:	e7d8      	b.n	8000572 <HAL_GPIO_Init+0x136>
 80005c0:	2502      	movs	r5, #2
 80005c2:	e7d6      	b.n	8000572 <HAL_GPIO_Init+0x136>
 80005c4:	2503      	movs	r5, #3
 80005c6:	e7d4      	b.n	8000572 <HAL_GPIO_Init+0x136>
 80005c8:	2504      	movs	r5, #4
 80005ca:	e7d2      	b.n	8000572 <HAL_GPIO_Init+0x136>
 80005cc:	2505      	movs	r5, #5
 80005ce:	e7d0      	b.n	8000572 <HAL_GPIO_Init+0x136>
 80005d0:	40010400 	.word	0x40010400
 80005d4:	48000400 	.word	0x48000400
 80005d8:	40021000 	.word	0x40021000

080005dc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80005dc:	6903      	ldr	r3, [r0, #16]
 80005de:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80005e0:	bf14      	ite	ne
 80005e2:	2001      	movne	r0, #1
 80005e4:	2000      	moveq	r0, #0
 80005e6:	4770      	bx	lr

080005e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80005e8:	b10a      	cbz	r2, 80005ee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80005ea:	6181      	str	r1, [r0, #24]
 80005ec:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80005ee:	6281      	str	r1, [r0, #40]	; 0x28
 80005f0:	4770      	bx	lr

080005f2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005f2:	4770      	bx	lr

080005f4 <HAL_GPIO_EXTI_IRQHandler>:
{
 80005f4:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80005f6:	4b04      	ldr	r3, [pc, #16]	; (8000608 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80005f8:	6959      	ldr	r1, [r3, #20]
 80005fa:	4201      	tst	r1, r0
 80005fc:	d002      	beq.n	8000604 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80005fe:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000600:	f7ff fff7 	bl	80005f2 <HAL_GPIO_EXTI_Callback>
 8000604:	bd08      	pop	{r3, pc}
 8000606:	bf00      	nop
 8000608:	40010400 	.word	0x40010400

0800060c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800060c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000610:	4605      	mov	r5, r0
 8000612:	b918      	cbnz	r0, 800061c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000614:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000616:	b002      	add	sp, #8
 8000618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800061c:	6803      	ldr	r3, [r0, #0]
 800061e:	07df      	lsls	r7, r3, #31
 8000620:	d411      	bmi.n	8000646 <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000622:	682b      	ldr	r3, [r5, #0]
 8000624:	079e      	lsls	r6, r3, #30
 8000626:	f100 8088 	bmi.w	800073a <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800062a:	682b      	ldr	r3, [r5, #0]
 800062c:	071c      	lsls	r4, r3, #28
 800062e:	f100 80fc 	bmi.w	800082a <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000632:	682b      	ldr	r3, [r5, #0]
 8000634:	0758      	lsls	r0, r3, #29
 8000636:	f100 8145 	bmi.w	80008c4 <HAL_RCC_OscConfig+0x2b8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800063a:	69aa      	ldr	r2, [r5, #24]
 800063c:	2a00      	cmp	r2, #0
 800063e:	f040 81dc 	bne.w	80009fa <HAL_RCC_OscConfig+0x3ee>
  return HAL_OK;
 8000642:	2000      	movs	r0, #0
 8000644:	e7e7      	b.n	8000616 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000646:	4cbd      	ldr	r4, [pc, #756]	; (800093c <HAL_RCC_OscConfig+0x330>)
 8000648:	6863      	ldr	r3, [r4, #4]
 800064a:	f003 030c 	and.w	r3, r3, #12
 800064e:	2b04      	cmp	r3, #4
 8000650:	d00a      	beq.n	8000668 <HAL_RCC_OscConfig+0x5c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000652:	6863      	ldr	r3, [r4, #4]
 8000654:	f003 030c 	and.w	r3, r3, #12
 8000658:	2b08      	cmp	r3, #8
 800065a:	d119      	bne.n	8000690 <HAL_RCC_OscConfig+0x84>
 800065c:	6863      	ldr	r3, [r4, #4]
 800065e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000666:	d113      	bne.n	8000690 <HAL_RCC_OscConfig+0x84>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000668:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800066c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000670:	6821      	ldr	r1, [r4, #0]
 8000672:	fa93 f3a3 	rbit	r3, r3
 8000676:	fab3 f383 	clz	r3, r3
 800067a:	f003 031f 	and.w	r3, r3, #31
 800067e:	2201      	movs	r2, #1
 8000680:	fa02 f303 	lsl.w	r3, r2, r3
 8000684:	420b      	tst	r3, r1
 8000686:	d0cc      	beq.n	8000622 <HAL_RCC_OscConfig+0x16>
 8000688:	686b      	ldr	r3, [r5, #4]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1c9      	bne.n	8000622 <HAL_RCC_OscConfig+0x16>
 800068e:	e7c1      	b.n	8000614 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000690:	686b      	ldr	r3, [r5, #4]
 8000692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000696:	d11e      	bne.n	80006d6 <HAL_RCC_OscConfig+0xca>
 8000698:	6823      	ldr	r3, [r4, #0]
 800069a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800069e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006a0:	f7ff fe38 	bl	8000314 <HAL_GetTick>
 80006a4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80006a8:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006aa:	2701      	movs	r7, #1
 80006ac:	fa96 f3a6 	rbit	r3, r6
 80006b0:	6822      	ldr	r2, [r4, #0]
 80006b2:	fa96 f3a6 	rbit	r3, r6
 80006b6:	fab3 f383 	clz	r3, r3
 80006ba:	f003 031f 	and.w	r3, r3, #31
 80006be:	fa07 f303 	lsl.w	r3, r7, r3
 80006c2:	4213      	tst	r3, r2
 80006c4:	d1ad      	bne.n	8000622 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006c6:	f7ff fe25 	bl	8000314 <HAL_GetTick>
 80006ca:	eba0 0008 	sub.w	r0, r0, r8
 80006ce:	2864      	cmp	r0, #100	; 0x64
 80006d0:	d9ec      	bls.n	80006ac <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 80006d2:	2003      	movs	r0, #3
 80006d4:	e79f      	b.n	8000616 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006d6:	bb0b      	cbnz	r3, 800071c <HAL_RCC_OscConfig+0x110>
 80006d8:	6823      	ldr	r3, [r4, #0]
 80006da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006de:	6023      	str	r3, [r4, #0]
 80006e0:	6823      	ldr	r3, [r4, #0]
 80006e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006e6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006e8:	f7ff fe14 	bl	8000314 <HAL_GetTick>
 80006ec:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80006f0:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006f2:	2701      	movs	r7, #1
 80006f4:	fa96 f3a6 	rbit	r3, r6
 80006f8:	6822      	ldr	r2, [r4, #0]
 80006fa:	fa96 f3a6 	rbit	r3, r6
 80006fe:	fab3 f383 	clz	r3, r3
 8000702:	f003 031f 	and.w	r3, r3, #31
 8000706:	fa07 f303 	lsl.w	r3, r7, r3
 800070a:	4213      	tst	r3, r2
 800070c:	d089      	beq.n	8000622 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800070e:	f7ff fe01 	bl	8000314 <HAL_GetTick>
 8000712:	eba0 0008 	sub.w	r0, r0, r8
 8000716:	2864      	cmp	r0, #100	; 0x64
 8000718:	d9ec      	bls.n	80006f4 <HAL_RCC_OscConfig+0xe8>
 800071a:	e7da      	b.n	80006d2 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800071c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000720:	6823      	ldr	r3, [r4, #0]
 8000722:	d103      	bne.n	800072c <HAL_RCC_OscConfig+0x120>
 8000724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000728:	6023      	str	r3, [r4, #0]
 800072a:	e7b5      	b.n	8000698 <HAL_RCC_OscConfig+0x8c>
 800072c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000730:	6023      	str	r3, [r4, #0]
 8000732:	6823      	ldr	r3, [r4, #0]
 8000734:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000738:	e7b1      	b.n	800069e <HAL_RCC_OscConfig+0x92>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800073a:	4c80      	ldr	r4, [pc, #512]	; (800093c <HAL_RCC_OscConfig+0x330>)
 800073c:	6863      	ldr	r3, [r4, #4]
 800073e:	f013 0f0c 	tst.w	r3, #12
 8000742:	d00a      	beq.n	800075a <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000744:	6863      	ldr	r3, [r4, #4]
 8000746:	f003 030c 	and.w	r3, r3, #12
 800074a:	2b08      	cmp	r3, #8
 800074c:	d125      	bne.n	800079a <HAL_RCC_OscConfig+0x18e>
 800074e:	6863      	ldr	r3, [r4, #4]
 8000750:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000754:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000758:	d11f      	bne.n	800079a <HAL_RCC_OscConfig+0x18e>
 800075a:	2302      	movs	r3, #2
 800075c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000760:	6821      	ldr	r1, [r4, #0]
 8000762:	fa93 f3a3 	rbit	r3, r3
 8000766:	fab3 f383 	clz	r3, r3
 800076a:	f003 031f 	and.w	r3, r3, #31
 800076e:	2201      	movs	r2, #1
 8000770:	fa02 f303 	lsl.w	r3, r2, r3
 8000774:	420b      	tst	r3, r1
 8000776:	d003      	beq.n	8000780 <HAL_RCC_OscConfig+0x174>
 8000778:	68eb      	ldr	r3, [r5, #12]
 800077a:	4293      	cmp	r3, r2
 800077c:	f47f af4a 	bne.w	8000614 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000780:	6821      	ldr	r1, [r4, #0]
 8000782:	23f8      	movs	r3, #248	; 0xf8
 8000784:	fa93 f3a3 	rbit	r3, r3
 8000788:	fab3 f283 	clz	r2, r3
 800078c:	692b      	ldr	r3, [r5, #16]
 800078e:	4093      	lsls	r3, r2
 8000790:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000794:	4313      	orrs	r3, r2
 8000796:	6023      	str	r3, [r4, #0]
 8000798:	e747      	b.n	800062a <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800079a:	68ea      	ldr	r2, [r5, #12]
 800079c:	2601      	movs	r6, #1
 800079e:	b30a      	cbz	r2, 80007e4 <HAL_RCC_OscConfig+0x1d8>
 80007a0:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80007a4:	fab3 f383 	clz	r3, r3
 80007a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80007ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	2702      	movs	r7, #2
 80007b4:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80007b6:	f7ff fdad 	bl	8000314 <HAL_GetTick>
 80007ba:	4680      	mov	r8, r0
 80007bc:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80007c0:	6822      	ldr	r2, [r4, #0]
 80007c2:	fa97 f3a7 	rbit	r3, r7
 80007c6:	fab3 f383 	clz	r3, r3
 80007ca:	f003 031f 	and.w	r3, r3, #31
 80007ce:	fa06 f303 	lsl.w	r3, r6, r3
 80007d2:	4213      	tst	r3, r2
 80007d4:	d1d4      	bne.n	8000780 <HAL_RCC_OscConfig+0x174>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007d6:	f7ff fd9d 	bl	8000314 <HAL_GetTick>
 80007da:	eba0 0008 	sub.w	r0, r0, r8
 80007de:	2802      	cmp	r0, #2
 80007e0:	d9ec      	bls.n	80007bc <HAL_RCC_OscConfig+0x1b0>
 80007e2:	e776      	b.n	80006d2 <HAL_RCC_OscConfig+0xc6>
 80007e4:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80007e8:	fab3 f383 	clz	r3, r3
 80007ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80007f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	2702      	movs	r7, #2
 80007f8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007fa:	f7ff fd8b 	bl	8000314 <HAL_GetTick>
 80007fe:	4680      	mov	r8, r0
 8000800:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000804:	6822      	ldr	r2, [r4, #0]
 8000806:	fa97 f3a7 	rbit	r3, r7
 800080a:	fab3 f383 	clz	r3, r3
 800080e:	f003 031f 	and.w	r3, r3, #31
 8000812:	fa06 f303 	lsl.w	r3, r6, r3
 8000816:	4213      	tst	r3, r2
 8000818:	f43f af07 	beq.w	800062a <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800081c:	f7ff fd7a 	bl	8000314 <HAL_GetTick>
 8000820:	eba0 0008 	sub.w	r0, r0, r8
 8000824:	2802      	cmp	r0, #2
 8000826:	d9eb      	bls.n	8000800 <HAL_RCC_OscConfig+0x1f4>
 8000828:	e753      	b.n	80006d2 <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800082a:	696a      	ldr	r2, [r5, #20]
 800082c:	4e43      	ldr	r6, [pc, #268]	; (800093c <HAL_RCC_OscConfig+0x330>)
 800082e:	4944      	ldr	r1, [pc, #272]	; (8000940 <HAL_RCC_OscConfig+0x334>)
 8000830:	2401      	movs	r4, #1
 8000832:	b31a      	cbz	r2, 800087c <HAL_RCC_OscConfig+0x270>
 8000834:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000838:	fab3 f383 	clz	r3, r3
 800083c:	440b      	add	r3, r1
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	2702      	movs	r7, #2
 8000842:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000844:	f7ff fd66 	bl	8000314 <HAL_GetTick>
 8000848:	4680      	mov	r8, r0
 800084a:	fa97 f3a7 	rbit	r3, r7
 800084e:	fa97 f3a7 	rbit	r3, r7
 8000852:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000856:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000858:	fa97 f3a7 	rbit	r3, r7
 800085c:	fab3 f383 	clz	r3, r3
 8000860:	f003 031f 	and.w	r3, r3, #31
 8000864:	fa04 f303 	lsl.w	r3, r4, r3
 8000868:	4213      	tst	r3, r2
 800086a:	f47f aee2 	bne.w	8000632 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800086e:	f7ff fd51 	bl	8000314 <HAL_GetTick>
 8000872:	eba0 0008 	sub.w	r0, r0, r8
 8000876:	2802      	cmp	r0, #2
 8000878:	d9e7      	bls.n	800084a <HAL_RCC_OscConfig+0x23e>
 800087a:	e72a      	b.n	80006d2 <HAL_RCC_OscConfig+0xc6>
 800087c:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000880:	fab3 f383 	clz	r3, r3
 8000884:	440b      	add	r3, r1
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	2702      	movs	r7, #2
 800088a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800088c:	f7ff fd42 	bl	8000314 <HAL_GetTick>
 8000890:	4680      	mov	r8, r0
 8000892:	fa97 f3a7 	rbit	r3, r7
 8000896:	fa97 f3a7 	rbit	r3, r7
 800089a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800089e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80008a0:	fa97 f3a7 	rbit	r3, r7
 80008a4:	fab3 f383 	clz	r3, r3
 80008a8:	f003 031f 	and.w	r3, r3, #31
 80008ac:	fa04 f303 	lsl.w	r3, r4, r3
 80008b0:	4213      	tst	r3, r2
 80008b2:	f43f aebe 	beq.w	8000632 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008b6:	f7ff fd2d 	bl	8000314 <HAL_GetTick>
 80008ba:	eba0 0008 	sub.w	r0, r0, r8
 80008be:	2802      	cmp	r0, #2
 80008c0:	d9e7      	bls.n	8000892 <HAL_RCC_OscConfig+0x286>
 80008c2:	e706      	b.n	80006d2 <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80008c4:	4c1d      	ldr	r4, [pc, #116]	; (800093c <HAL_RCC_OscConfig+0x330>)
 80008c6:	69e3      	ldr	r3, [r4, #28]
 80008c8:	00d9      	lsls	r1, r3, #3
 80008ca:	d434      	bmi.n	8000936 <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80008cc:	69e3      	ldr	r3, [r4, #28]
 80008ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d2:	61e3      	str	r3, [r4, #28]
 80008d4:	69e3      	ldr	r3, [r4, #28]
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	9301      	str	r3, [sp, #4]
 80008dc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80008de:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008e0:	4f18      	ldr	r7, [pc, #96]	; (8000944 <HAL_RCC_OscConfig+0x338>)
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	05da      	lsls	r2, r3, #23
 80008e6:	d52f      	bpl.n	8000948 <HAL_RCC_OscConfig+0x33c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008e8:	68ab      	ldr	r3, [r5, #8]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d13d      	bne.n	800096a <HAL_RCC_OscConfig+0x35e>
 80008ee:	6a23      	ldr	r3, [r4, #32]
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80008f6:	f7ff fd0d 	bl	8000314 <HAL_GetTick>
 80008fa:	2702      	movs	r7, #2
 80008fc:	4682      	mov	sl, r0
 80008fe:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000900:	f04f 0801 	mov.w	r8, #1
 8000904:	fa97 f3a7 	rbit	r3, r7
 8000908:	fa97 f3a7 	rbit	r3, r7
 800090c:	2b00      	cmp	r3, #0
 800090e:	d06c      	beq.n	80009ea <HAL_RCC_OscConfig+0x3de>
 8000910:	6a22      	ldr	r2, [r4, #32]
 8000912:	fa99 f3a9 	rbit	r3, r9
 8000916:	fab3 f383 	clz	r3, r3
 800091a:	f003 031f 	and.w	r3, r3, #31
 800091e:	fa08 f303 	lsl.w	r3, r8, r3
 8000922:	4213      	tst	r3, r2
 8000924:	d058      	beq.n	80009d8 <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 8000926:	2e00      	cmp	r6, #0
 8000928:	f43f ae87 	beq.w	800063a <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800092c:	69e3      	ldr	r3, [r4, #28]
 800092e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000932:	61e3      	str	r3, [r4, #28]
 8000934:	e681      	b.n	800063a <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 8000936:	2600      	movs	r6, #0
 8000938:	e7d2      	b.n	80008e0 <HAL_RCC_OscConfig+0x2d4>
 800093a:	bf00      	nop
 800093c:	40021000 	.word	0x40021000
 8000940:	10908120 	.word	0x10908120
 8000944:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000950:	f7ff fce0 	bl	8000314 <HAL_GetTick>
 8000954:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	05db      	lsls	r3, r3, #23
 800095a:	d4c5      	bmi.n	80008e8 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800095c:	f7ff fcda 	bl	8000314 <HAL_GetTick>
 8000960:	eba0 0008 	sub.w	r0, r0, r8
 8000964:	2864      	cmp	r0, #100	; 0x64
 8000966:	d9f6      	bls.n	8000956 <HAL_RCC_OscConfig+0x34a>
 8000968:	e6b3      	b.n	80006d2 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800096a:	bb3b      	cbnz	r3, 80009bc <HAL_RCC_OscConfig+0x3b0>
 800096c:	6a23      	ldr	r3, [r4, #32]
 800096e:	f023 0301 	bic.w	r3, r3, #1
 8000972:	6223      	str	r3, [r4, #32]
 8000974:	6a23      	ldr	r3, [r4, #32]
 8000976:	f023 0304 	bic.w	r3, r3, #4
 800097a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800097c:	f7ff fcca 	bl	8000314 <HAL_GetTick>
 8000980:	2702      	movs	r7, #2
 8000982:	4682      	mov	sl, r0
 8000984:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000986:	f04f 0801 	mov.w	r8, #1
 800098a:	fa97 f3a7 	rbit	r3, r7
 800098e:	fa97 f3a7 	rbit	r3, r7
 8000992:	b373      	cbz	r3, 80009f2 <HAL_RCC_OscConfig+0x3e6>
 8000994:	6a22      	ldr	r2, [r4, #32]
 8000996:	fa99 f3a9 	rbit	r3, r9
 800099a:	fab3 f383 	clz	r3, r3
 800099e:	f003 031f 	and.w	r3, r3, #31
 80009a2:	fa08 f303 	lsl.w	r3, r8, r3
 80009a6:	4213      	tst	r3, r2
 80009a8:	d0bd      	beq.n	8000926 <HAL_RCC_OscConfig+0x31a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009aa:	f7ff fcb3 	bl	8000314 <HAL_GetTick>
 80009ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80009b2:	eba0 000a 	sub.w	r0, r0, sl
 80009b6:	4298      	cmp	r0, r3
 80009b8:	d9e7      	bls.n	800098a <HAL_RCC_OscConfig+0x37e>
 80009ba:	e68a      	b.n	80006d2 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009bc:	2b05      	cmp	r3, #5
 80009be:	6a23      	ldr	r3, [r4, #32]
 80009c0:	d103      	bne.n	80009ca <HAL_RCC_OscConfig+0x3be>
 80009c2:	f043 0304 	orr.w	r3, r3, #4
 80009c6:	6223      	str	r3, [r4, #32]
 80009c8:	e791      	b.n	80008ee <HAL_RCC_OscConfig+0x2e2>
 80009ca:	f023 0301 	bic.w	r3, r3, #1
 80009ce:	6223      	str	r3, [r4, #32]
 80009d0:	6a23      	ldr	r3, [r4, #32]
 80009d2:	f023 0304 	bic.w	r3, r3, #4
 80009d6:	e78d      	b.n	80008f4 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009d8:	f7ff fc9c 	bl	8000314 <HAL_GetTick>
 80009dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80009e0:	eba0 000a 	sub.w	r0, r0, sl
 80009e4:	4298      	cmp	r0, r3
 80009e6:	d98d      	bls.n	8000904 <HAL_RCC_OscConfig+0x2f8>
 80009e8:	e673      	b.n	80006d2 <HAL_RCC_OscConfig+0xc6>
 80009ea:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80009f0:	e78f      	b.n	8000912 <HAL_RCC_OscConfig+0x306>
 80009f2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80009f8:	e7cd      	b.n	8000996 <HAL_RCC_OscConfig+0x38a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009fa:	4c44      	ldr	r4, [pc, #272]	; (8000b0c <HAL_RCC_OscConfig+0x500>)
 80009fc:	6863      	ldr	r3, [r4, #4]
 80009fe:	f003 030c 	and.w	r3, r3, #12
 8000a02:	2b08      	cmp	r3, #8
 8000a04:	f43f ae06 	beq.w	8000614 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a08:	2a02      	cmp	r2, #2
 8000a0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a0e:	d158      	bne.n	8000ac2 <HAL_RCC_OscConfig+0x4b6>
 8000a10:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000a14:	fab3 f383 	clz	r3, r3
 8000a18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a26:	f7ff fc75 	bl	8000314 <HAL_GetTick>
 8000a2a:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000a2e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a30:	2601      	movs	r6, #1
 8000a32:	fa97 f3a7 	rbit	r3, r7
 8000a36:	6822      	ldr	r2, [r4, #0]
 8000a38:	fa97 f3a7 	rbit	r3, r7
 8000a3c:	fab3 f383 	clz	r3, r3
 8000a40:	f003 031f 	and.w	r3, r3, #31
 8000a44:	fa06 f303 	lsl.w	r3, r6, r3
 8000a48:	4213      	tst	r3, r2
 8000a4a:	d133      	bne.n	8000ab4 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a4e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000a50:	f023 030f 	bic.w	r3, r3, #15
 8000a54:	4313      	orrs	r3, r2
 8000a56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a58:	6862      	ldr	r2, [r4, #4]
 8000a5a:	6a2b      	ldr	r3, [r5, #32]
 8000a5c:	69e9      	ldr	r1, [r5, #28]
 8000a5e:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8000a62:	430b      	orrs	r3, r1
 8000a64:	4313      	orrs	r3, r2
 8000a66:	6063      	str	r3, [r4, #4]
 8000a68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a6c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000a70:	fab3 f383 	clz	r3, r3
 8000a74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000a82:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000a84:	f7ff fc46 	bl	8000314 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a88:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000a8a:	4607      	mov	r7, r0
 8000a8c:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a90:	6822      	ldr	r2, [r4, #0]
 8000a92:	fa95 f3a5 	rbit	r3, r5
 8000a96:	fab3 f383 	clz	r3, r3
 8000a9a:	f003 031f 	and.w	r3, r3, #31
 8000a9e:	fa06 f303 	lsl.w	r3, r6, r3
 8000aa2:	4213      	tst	r3, r2
 8000aa4:	f47f adcd 	bne.w	8000642 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000aa8:	f7ff fc34 	bl	8000314 <HAL_GetTick>
 8000aac:	1bc0      	subs	r0, r0, r7
 8000aae:	2802      	cmp	r0, #2
 8000ab0:	d9ec      	bls.n	8000a8c <HAL_RCC_OscConfig+0x480>
 8000ab2:	e60e      	b.n	80006d2 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ab4:	f7ff fc2e 	bl	8000314 <HAL_GetTick>
 8000ab8:	eba0 0008 	sub.w	r0, r0, r8
 8000abc:	2802      	cmp	r0, #2
 8000abe:	d9b8      	bls.n	8000a32 <HAL_RCC_OscConfig+0x426>
 8000ac0:	e607      	b.n	80006d2 <HAL_RCC_OscConfig+0xc6>
 8000ac2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000ac6:	fab3 f383 	clz	r3, r3
 8000aca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ace:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ad8:	f7ff fc1c 	bl	8000314 <HAL_GetTick>
 8000adc:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000ae0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ae2:	2601      	movs	r6, #1
 8000ae4:	fa95 f3a5 	rbit	r3, r5
 8000ae8:	6822      	ldr	r2, [r4, #0]
 8000aea:	fa95 f3a5 	rbit	r3, r5
 8000aee:	fab3 f383 	clz	r3, r3
 8000af2:	f003 031f 	and.w	r3, r3, #31
 8000af6:	fa06 f303 	lsl.w	r3, r6, r3
 8000afa:	4213      	tst	r3, r2
 8000afc:	f43f ada1 	beq.w	8000642 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b00:	f7ff fc08 	bl	8000314 <HAL_GetTick>
 8000b04:	1bc0      	subs	r0, r0, r7
 8000b06:	2802      	cmp	r0, #2
 8000b08:	d9ec      	bls.n	8000ae4 <HAL_RCC_OscConfig+0x4d8>
 8000b0a:	e5e2      	b.n	80006d2 <HAL_RCC_OscConfig+0xc6>
 8000b0c:	40021000 	.word	0x40021000

08000b10 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000b10:	4911      	ldr	r1, [pc, #68]	; (8000b58 <HAL_RCC_GetSysClockFreq+0x48>)
 8000b12:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000b14:	f003 020c 	and.w	r2, r3, #12
 8000b18:	2a08      	cmp	r2, #8
 8000b1a:	d11a      	bne.n	8000b52 <HAL_RCC_GetSysClockFreq+0x42>
 8000b1c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000b20:	fa92 f2a2 	rbit	r2, r2
 8000b24:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000b26:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000b2a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000b2c:	fa90 f0a0 	rbit	r0, r0
 8000b30:	fab0 f080 	clz	r0, r0
 8000b34:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000b38:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000b3c:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000b3e:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000b40:	4a06      	ldr	r2, [pc, #24]	; (8000b5c <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000b42:	4807      	ldr	r0, [pc, #28]	; (8000b60 <HAL_RCC_GetSysClockFreq+0x50>)
 8000b44:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000b46:	4807      	ldr	r0, [pc, #28]	; (8000b64 <HAL_RCC_GetSysClockFreq+0x54>)
 8000b48:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000b4c:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000b4e:	4348      	muls	r0, r1
 8000b50:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000b52:	4804      	ldr	r0, [pc, #16]	; (8000b64 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	08002274 	.word	0x08002274
 8000b60:	08002284 	.word	0x08002284
 8000b64:	007a1200 	.word	0x007a1200

08000b68 <HAL_RCC_ClockConfig>:
{
 8000b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b6c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b6e:	4604      	mov	r4, r0
 8000b70:	b910      	cbnz	r0, 8000b78 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b72:	2001      	movs	r0, #1
 8000b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b78:	4a4c      	ldr	r2, [pc, #304]	; (8000cac <HAL_RCC_ClockConfig+0x144>)
 8000b7a:	6813      	ldr	r3, [r2, #0]
 8000b7c:	f003 0307 	and.w	r3, r3, #7
 8000b80:	428b      	cmp	r3, r1
 8000b82:	d32e      	bcc.n	8000be2 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b84:	6822      	ldr	r2, [r4, #0]
 8000b86:	0791      	lsls	r1, r2, #30
 8000b88:	d436      	bmi.n	8000bf8 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b8a:	07d2      	lsls	r2, r2, #31
 8000b8c:	d43c      	bmi.n	8000c08 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b8e:	4a47      	ldr	r2, [pc, #284]	; (8000cac <HAL_RCC_ClockConfig+0x144>)
 8000b90:	6813      	ldr	r3, [r2, #0]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	429d      	cmp	r5, r3
 8000b98:	d375      	bcc.n	8000c86 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b9a:	6822      	ldr	r2, [r4, #0]
 8000b9c:	4d44      	ldr	r5, [pc, #272]	; (8000cb0 <HAL_RCC_ClockConfig+0x148>)
 8000b9e:	f012 0f04 	tst.w	r2, #4
 8000ba2:	d17c      	bne.n	8000c9e <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ba4:	0713      	lsls	r3, r2, #28
 8000ba6:	d506      	bpl.n	8000bb6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ba8:	686b      	ldr	r3, [r5, #4]
 8000baa:	6922      	ldr	r2, [r4, #16]
 8000bac:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000bb0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000bb4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000bb6:	f7ff ffab 	bl	8000b10 <HAL_RCC_GetSysClockFreq>
 8000bba:	686b      	ldr	r3, [r5, #4]
 8000bbc:	22f0      	movs	r2, #240	; 0xf0
 8000bbe:	fa92 f2a2 	rbit	r2, r2
 8000bc2:	fab2 f282 	clz	r2, r2
 8000bc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bca:	40d3      	lsrs	r3, r2
 8000bcc:	4a39      	ldr	r2, [pc, #228]	; (8000cb4 <HAL_RCC_ClockConfig+0x14c>)
 8000bce:	5cd3      	ldrb	r3, [r2, r3]
 8000bd0:	40d8      	lsrs	r0, r3
 8000bd2:	4b39      	ldr	r3, [pc, #228]	; (8000cb8 <HAL_RCC_ClockConfig+0x150>)
 8000bd4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff fb5a 	bl	8000290 <HAL_InitTick>
  return HAL_OK;
 8000bdc:	2000      	movs	r0, #0
 8000bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000be2:	6813      	ldr	r3, [r2, #0]
 8000be4:	f023 0307 	bic.w	r3, r3, #7
 8000be8:	430b      	orrs	r3, r1
 8000bea:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bec:	6813      	ldr	r3, [r2, #0]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	d1bd      	bne.n	8000b72 <HAL_RCC_ClockConfig+0xa>
 8000bf6:	e7c5      	b.n	8000b84 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bf8:	492d      	ldr	r1, [pc, #180]	; (8000cb0 <HAL_RCC_ClockConfig+0x148>)
 8000bfa:	68a0      	ldr	r0, [r4, #8]
 8000bfc:	684b      	ldr	r3, [r1, #4]
 8000bfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c02:	4303      	orrs	r3, r0
 8000c04:	604b      	str	r3, [r1, #4]
 8000c06:	e7c0      	b.n	8000b8a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c08:	6862      	ldr	r2, [r4, #4]
 8000c0a:	4e29      	ldr	r6, [pc, #164]	; (8000cb0 <HAL_RCC_ClockConfig+0x148>)
 8000c0c:	2a01      	cmp	r2, #1
 8000c0e:	d127      	bne.n	8000c60 <HAL_RCC_ClockConfig+0xf8>
 8000c10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c14:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c18:	6831      	ldr	r1, [r6, #0]
 8000c1a:	fa93 f3a3 	rbit	r3, r3
 8000c1e:	fab3 f383 	clz	r3, r3
 8000c22:	f003 031f 	and.w	r3, r3, #31
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c2c:	d0a1      	beq.n	8000b72 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c2e:	6873      	ldr	r3, [r6, #4]
 8000c30:	f023 0303 	bic.w	r3, r3, #3
 8000c34:	431a      	orrs	r2, r3
 8000c36:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8000c38:	f7ff fb6c 	bl	8000314 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c3c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c40:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c42:	6873      	ldr	r3, [r6, #4]
 8000c44:	6862      	ldr	r2, [r4, #4]
 8000c46:	f003 030c 	and.w	r3, r3, #12
 8000c4a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c4e:	d09e      	beq.n	8000b8e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c50:	f7ff fb60 	bl	8000314 <HAL_GetTick>
 8000c54:	1bc0      	subs	r0, r0, r7
 8000c56:	4540      	cmp	r0, r8
 8000c58:	d9f3      	bls.n	8000c42 <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8000c5a:	2003      	movs	r0, #3
}
 8000c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c60:	2a02      	cmp	r2, #2
 8000c62:	bf0c      	ite	eq
 8000c64:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000c68:	2302      	movne	r3, #2
 8000c6a:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c6e:	6830      	ldr	r0, [r6, #0]
 8000c70:	fa93 f3a3 	rbit	r3, r3
 8000c74:	fab3 f383 	clz	r3, r3
 8000c78:	f003 031f 	and.w	r3, r3, #31
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	4203      	tst	r3, r0
 8000c84:	e7d2      	b.n	8000c2c <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c86:	6813      	ldr	r3, [r2, #0]
 8000c88:	f023 0307 	bic.w	r3, r3, #7
 8000c8c:	432b      	orrs	r3, r5
 8000c8e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c90:	6813      	ldr	r3, [r2, #0]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	429d      	cmp	r5, r3
 8000c98:	f47f af6b 	bne.w	8000b72 <HAL_RCC_ClockConfig+0xa>
 8000c9c:	e77d      	b.n	8000b9a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c9e:	686b      	ldr	r3, [r5, #4]
 8000ca0:	68e1      	ldr	r1, [r4, #12]
 8000ca2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ca6:	430b      	orrs	r3, r1
 8000ca8:	606b      	str	r3, [r5, #4]
 8000caa:	e77b      	b.n	8000ba4 <HAL_RCC_ClockConfig+0x3c>
 8000cac:	40022000 	.word	0x40022000
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	08002303 	.word	0x08002303
 8000cb8:	2000000c 	.word	0x2000000c

08000cbc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000cbc:	4b01      	ldr	r3, [pc, #4]	; (8000cc4 <HAL_RCC_GetHCLKFreq+0x8>)
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	2000000c 	.word	0x2000000c

08000cc8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8000cca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	fa92 f2a2 	rbit	r2, r2
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000cdc:	40d3      	lsrs	r3, r2
 8000cde:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000ce4:	6810      	ldr	r0, [r2, #0]
}    
 8000ce6:	40d8      	lsrs	r0, r3
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	08002313 	.word	0x08002313
 8000cf4:	2000000c 	.word	0x2000000c

08000cf8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000cfa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	fa92 f2a2 	rbit	r2, r2
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000d0c:	40d3      	lsrs	r3, r2
 8000d0e:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000d10:	5cd3      	ldrb	r3, [r2, r3]
 8000d12:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000d14:	6810      	ldr	r0, [r2, #0]
} 
 8000d16:	40d8      	lsrs	r0, r3
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	08002313 	.word	0x08002313
 8000d24:	2000000c 	.word	0x2000000c

08000d28 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000d28:	6803      	ldr	r3, [r0, #0]
{
 8000d2a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000d2e:	03df      	lsls	r7, r3, #15
{
 8000d30:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000d32:	d523      	bpl.n	8000d7c <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d34:	4d9b      	ldr	r5, [pc, #620]	; (8000fa4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d36:	69eb      	ldr	r3, [r5, #28]
 8000d38:	00de      	lsls	r6, r3, #3
 8000d3a:	f100 80d7 	bmi.w	8000eec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	69eb      	ldr	r3, [r5, #28]
 8000d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d44:	61eb      	str	r3, [r5, #28]
 8000d46:	69eb      	ldr	r3, [r5, #28]
 8000d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	9301      	str	r3, [sp, #4]
 8000d4e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d50:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d52:	4f95      	ldr	r7, [pc, #596]	; (8000fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	05d8      	lsls	r0, r3, #23
 8000d58:	f140 80ca 	bpl.w	8000ef0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000d5c:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000d5e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000d62:	f040 80da 	bne.w	8000f1a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000d66:	6a2b      	ldr	r3, [r5, #32]
 8000d68:	6862      	ldr	r2, [r4, #4]
 8000d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000d72:	b11e      	cbz	r6, 8000d7c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d74:	69eb      	ldr	r3, [r5, #28]
 8000d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000d7c:	6820      	ldr	r0, [r4, #0]
 8000d7e:	07c3      	lsls	r3, r0, #31
 8000d80:	d506      	bpl.n	8000d90 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000d82:	4a88      	ldr	r2, [pc, #544]	; (8000fa4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d84:	68a1      	ldr	r1, [r4, #8]
 8000d86:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d88:	f023 0303 	bic.w	r3, r3, #3
 8000d8c:	430b      	orrs	r3, r1
 8000d8e:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000d90:	0787      	lsls	r7, r0, #30
 8000d92:	d506      	bpl.n	8000da2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000d94:	4a83      	ldr	r2, [pc, #524]	; (8000fa4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d96:	68e1      	ldr	r1, [r4, #12]
 8000d98:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d9a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000d9e:	430b      	orrs	r3, r1
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8000da2:	0746      	lsls	r6, r0, #29
 8000da4:	d506      	bpl.n	8000db4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8000da6:	4a7f      	ldr	r2, [pc, #508]	; (8000fa4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000da8:	6921      	ldr	r1, [r4, #16]
 8000daa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dac:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000db0:	430b      	orrs	r3, r1
 8000db2:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000db4:	0685      	lsls	r5, r0, #26
 8000db6:	d506      	bpl.n	8000dc6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000db8:	4a7a      	ldr	r2, [pc, #488]	; (8000fa4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000dba:	69e1      	ldr	r1, [r4, #28]
 8000dbc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dbe:	f023 0310 	bic.w	r3, r3, #16
 8000dc2:	430b      	orrs	r3, r1
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000dc6:	0381      	lsls	r1, r0, #14
 8000dc8:	d506      	bpl.n	8000dd8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8000dca:	4a76      	ldr	r2, [pc, #472]	; (8000fa4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000dcc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000dce:	6853      	ldr	r3, [r2, #4]
 8000dd0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000dd4:	430b      	orrs	r3, r1
 8000dd6:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8000dd8:	0642      	lsls	r2, r0, #25
 8000dda:	d506      	bpl.n	8000dea <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8000ddc:	4a71      	ldr	r2, [pc, #452]	; (8000fa4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000dde:	6a21      	ldr	r1, [r4, #32]
 8000de0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000de2:	f023 0320 	bic.w	r3, r3, #32
 8000de6:	430b      	orrs	r3, r1
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000dea:	0343      	lsls	r3, r0, #13
 8000dec:	d506      	bpl.n	8000dfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000dee:	4a6d      	ldr	r2, [pc, #436]	; (8000fa4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000df0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000df2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000df8:	430b      	orrs	r3, r1
 8000dfa:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8000dfc:	0707      	lsls	r7, r0, #28
 8000dfe:	d506      	bpl.n	8000e0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8000e00:	4a68      	ldr	r2, [pc, #416]	; (8000fa4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000e02:	6961      	ldr	r1, [r4, #20]
 8000e04:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e06:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000e0a:	430b      	orrs	r3, r1
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8000e0e:	06c6      	lsls	r6, r0, #27
 8000e10:	d506      	bpl.n	8000e20 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8000e12:	4a64      	ldr	r2, [pc, #400]	; (8000fa4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000e14:	69a1      	ldr	r1, [r4, #24]
 8000e16:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e18:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000e1c:	430b      	orrs	r3, r1
 8000e1e:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8000e20:	0585      	lsls	r5, r0, #22
 8000e22:	d506      	bpl.n	8000e32 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000e24:	4a5f      	ldr	r2, [pc, #380]	; (8000fa4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000e26:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000e28:	6853      	ldr	r3, [r2, #4]
 8000e2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e2e:	430b      	orrs	r3, r1
 8000e30:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8000e32:	0601      	lsls	r1, r0, #24
 8000e34:	d506      	bpl.n	8000e44 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8000e36:	4a5b      	ldr	r2, [pc, #364]	; (8000fa4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000e38:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000e3a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000e3c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000e40:	430b      	orrs	r3, r1
 8000e42:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8000e44:	05c2      	lsls	r2, r0, #23
 8000e46:	d506      	bpl.n	8000e56 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8000e48:	4a56      	ldr	r2, [pc, #344]	; (8000fa4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000e4a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000e4c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000e4e:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8000e52:	430b      	orrs	r3, r1
 8000e54:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8000e56:	04c3      	lsls	r3, r0, #19
 8000e58:	d506      	bpl.n	8000e68 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8000e5a:	4a52      	ldr	r2, [pc, #328]	; (8000fa4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000e5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e5e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e64:	430b      	orrs	r3, r1
 8000e66:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8000e68:	0487      	lsls	r7, r0, #18
 8000e6a:	d506      	bpl.n	8000e7a <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8000e6c:	4a4d      	ldr	r2, [pc, #308]	; (8000fa4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000e6e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000e70:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e72:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e76:	430b      	orrs	r3, r1
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8000e7a:	02c6      	lsls	r6, r0, #11
 8000e7c:	d506      	bpl.n	8000e8c <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8000e7e:	4a49      	ldr	r2, [pc, #292]	; (8000fa4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000e80:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000e82:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e88:	430b      	orrs	r3, r1
 8000e8a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8000e8c:	0285      	lsls	r5, r0, #10
 8000e8e:	d506      	bpl.n	8000e9e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8000e90:	4a44      	ldr	r2, [pc, #272]	; (8000fa4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000e92:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000e94:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e96:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000e9a:	430b      	orrs	r3, r1
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8000e9e:	0241      	lsls	r1, r0, #9
 8000ea0:	d506      	bpl.n	8000eb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8000ea2:	4a40      	ldr	r2, [pc, #256]	; (8000fa4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000ea4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000ea6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ea8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000eac:	430b      	orrs	r3, r1
 8000eae:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8000eb0:	0202      	lsls	r2, r0, #8
 8000eb2:	d506      	bpl.n	8000ec2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8000eb4:	4a3b      	ldr	r2, [pc, #236]	; (8000fa4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000eb6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000eb8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000eba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ebe:	430b      	orrs	r3, r1
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8000ec2:	01c3      	lsls	r3, r0, #7
 8000ec4:	d506      	bpl.n	8000ed4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8000ec6:	4a37      	ldr	r2, [pc, #220]	; (8000fa4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000ec8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8000eca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ecc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ed0:	430b      	orrs	r3, r1
 8000ed2:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8000ed4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8000ed8:	d01c      	beq.n	8000f14 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8000eda:	4a32      	ldr	r2, [pc, #200]	; (8000fa4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000edc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000ede:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ee0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ee4:	430b      	orrs	r3, r1
 8000ee6:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8000ee8:	2000      	movs	r0, #0
 8000eea:	e013      	b.n	8000f14 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 8000eec:	2600      	movs	r6, #0
 8000eee:	e730      	b.n	8000d52 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000ef8:	f7ff fa0c 	bl	8000314 <HAL_GetTick>
 8000efc:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	05d9      	lsls	r1, r3, #23
 8000f02:	f53f af2b 	bmi.w	8000d5c <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f06:	f7ff fa05 	bl	8000314 <HAL_GetTick>
 8000f0a:	eba0 0008 	sub.w	r0, r0, r8
 8000f0e:	2864      	cmp	r0, #100	; 0x64
 8000f10:	d9f5      	bls.n	8000efe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 8000f12:	2003      	movs	r0, #3
}
 8000f14:	b002      	add	sp, #8
 8000f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000f1a:	6862      	ldr	r2, [r4, #4]
 8000f1c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000f20:	4293      	cmp	r3, r2
 8000f22:	f43f af20 	beq.w	8000d66 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f26:	6a29      	ldr	r1, [r5, #32]
 8000f28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f2c:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8000f30:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f34:	f8df e074 	ldr.w	lr, [pc, #116]	; 8000fac <HAL_RCCEx_PeriphCLKConfig+0x284>
 8000f38:	fab2 f282 	clz	r2, r2
 8000f3c:	4472      	add	r2, lr
 8000f3e:	0092      	lsls	r2, r2, #2
 8000f40:	2701      	movs	r7, #1
 8000f42:	6017      	str	r7, [r2, #0]
 8000f44:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000f48:	fab3 f383 	clz	r3, r3
 8000f4c:	4473      	add	r3, lr
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000f54:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8000f56:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000f58:	f57f af05 	bpl.w	8000d66 <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8000f5c:	f7ff f9da 	bl	8000314 <HAL_GetTick>
 8000f60:	f04f 0802 	mov.w	r8, #2
 8000f64:	4682      	mov	sl, r0
 8000f66:	46c1      	mov	r9, r8
 8000f68:	fa98 f3a8 	rbit	r3, r8
 8000f6c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f70:	b1a3      	cbz	r3, 8000f9c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8000f72:	6a2a      	ldr	r2, [r5, #32]
 8000f74:	fa99 f3a9 	rbit	r3, r9
 8000f78:	fab3 f383 	clz	r3, r3
 8000f7c:	f003 031f 	and.w	r3, r3, #31
 8000f80:	fa07 f303 	lsl.w	r3, r7, r3
 8000f84:	4213      	tst	r3, r2
 8000f86:	f47f aeee 	bne.w	8000d66 <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f8a:	f7ff f9c3 	bl	8000314 <HAL_GetTick>
 8000f8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f92:	eba0 000a 	sub.w	r0, r0, sl
 8000f96:	4298      	cmp	r0, r3
 8000f98:	d9e6      	bls.n	8000f68 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8000f9a:	e7ba      	b.n	8000f12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8000f9c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fa0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000fa2:	e7e7      	b.n	8000f74 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40007000 	.word	0x40007000
 8000fac:	10908100 	.word	0x10908100

08000fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000fb0:	b538      	push	{r3, r4, r5, lr}
 8000fb2:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000fb4:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000fb6:	6921      	ldr	r1, [r4, #16]
 8000fb8:	68a2      	ldr	r2, [r4, #8]
 8000fba:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000fbc:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	6961      	ldr	r1, [r4, #20]
 8000fc2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000fc4:	4977      	ldr	r1, [pc, #476]	; (80011a4 <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000fc6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000fc8:	4001      	ands	r1, r0
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000fce:	686a      	ldr	r2, [r5, #4]
 8000fd0:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000fd2:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000fd4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000fdc:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000fde:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000fe0:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000fe4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000fea:	4a6f      	ldr	r2, [pc, #444]	; (80011a8 <UART_SetConfig+0x1f8>)
 8000fec:	4295      	cmp	r5, r2
 8000fee:	d112      	bne.n	8001016 <UART_SetConfig+0x66>
 8000ff0:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8000ff4:	496d      	ldr	r1, [pc, #436]	; (80011ac <UART_SetConfig+0x1fc>)
 8000ff6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000ff8:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001000:	5c8a      	ldrb	r2, [r1, r2]
 8001002:	d066      	beq.n	80010d2 <UART_SetConfig+0x122>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8001004:	2a08      	cmp	r2, #8
 8001006:	d819      	bhi.n	800103c <UART_SetConfig+0x8c>
 8001008:	e8df f002 	tbb	[pc, r2]
 800100c:	189e92c2 	.word	0x189e92c2
 8001010:	181818a9 	.word	0x181818a9
 8001014:	ac          	.byte	0xac
 8001015:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001016:	4a66      	ldr	r2, [pc, #408]	; (80011b0 <UART_SetConfig+0x200>)
 8001018:	4295      	cmp	r5, r2
 800101a:	d124      	bne.n	8001066 <UART_SetConfig+0xb6>
 800101c:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8001020:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001022:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8001026:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800102a:	f000 80a0 	beq.w	800116e <UART_SetConfig+0x1be>
 800102e:	d807      	bhi.n	8001040 <UART_SetConfig+0x90>
 8001030:	2a00      	cmp	r2, #0
 8001032:	f000 80aa 	beq.w	800118a <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800103a:	d076      	beq.n	800112a <UART_SetConfig+0x17a>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800103c:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 800103e:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001040:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8001044:	f000 8099 	beq.w	800117a <UART_SetConfig+0x1ca>
 8001048:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 800104c:	d1f3      	bne.n	8001036 <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800104e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001052:	d179      	bne.n	8001148 <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001054:	6860      	ldr	r0, [r4, #4]
 8001056:	0843      	lsrs	r3, r0, #1
 8001058:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800105c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001060:	fbb3 f3f0 	udiv	r3, r3, r0
 8001064:	e054      	b.n	8001110 <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001066:	4a53      	ldr	r2, [pc, #332]	; (80011b4 <UART_SetConfig+0x204>)
 8001068:	4295      	cmp	r5, r2
 800106a:	d10e      	bne.n	800108a <UART_SetConfig+0xda>
 800106c:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8001070:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001072:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8001076:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800107a:	d078      	beq.n	800116e <UART_SetConfig+0x1be>
 800107c:	d9d8      	bls.n	8001030 <UART_SetConfig+0x80>
 800107e:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8001082:	d07a      	beq.n	800117a <UART_SetConfig+0x1ca>
 8001084:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8001088:	e7e0      	b.n	800104c <UART_SetConfig+0x9c>
 800108a:	4a4b      	ldr	r2, [pc, #300]	; (80011b8 <UART_SetConfig+0x208>)
 800108c:	4295      	cmp	r5, r2
 800108e:	d10e      	bne.n	80010ae <UART_SetConfig+0xfe>
 8001090:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8001094:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001096:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800109a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800109e:	d066      	beq.n	800116e <UART_SetConfig+0x1be>
 80010a0:	d9c6      	bls.n	8001030 <UART_SetConfig+0x80>
 80010a2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80010a6:	d068      	beq.n	800117a <UART_SetConfig+0x1ca>
 80010a8:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80010ac:	e7ce      	b.n	800104c <UART_SetConfig+0x9c>
 80010ae:	4a43      	ldr	r2, [pc, #268]	; (80011bc <UART_SetConfig+0x20c>)
 80010b0:	4295      	cmp	r5, r2
 80010b2:	d1c0      	bne.n	8001036 <UART_SetConfig+0x86>
 80010b4:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80010b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80010ba:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 80010be:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80010c2:	d054      	beq.n	800116e <UART_SetConfig+0x1be>
 80010c4:	d9b4      	bls.n	8001030 <UART_SetConfig+0x80>
 80010c6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80010ca:	d056      	beq.n	800117a <UART_SetConfig+0x1ca>
 80010cc:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 80010d0:	e7bc      	b.n	800104c <UART_SetConfig+0x9c>
    switch (clocksource)
 80010d2:	2a08      	cmp	r2, #8
 80010d4:	d829      	bhi.n	800112a <UART_SetConfig+0x17a>
 80010d6:	a301      	add	r3, pc, #4	; (adr r3, 80010dc <UART_SetConfig+0x12c>)
 80010d8:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80010dc:	08001101 	.word	0x08001101
 80010e0:	08001125 	.word	0x08001125
 80010e4:	08001055 	.word	0x08001055
 80010e8:	0800112b 	.word	0x0800112b
 80010ec:	08001175 	.word	0x08001175
 80010f0:	0800112b 	.word	0x0800112b
 80010f4:	0800112b 	.word	0x0800112b
 80010f8:	0800112b 	.word	0x0800112b
 80010fc:	08001181 	.word	0x08001181
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001100:	f7ff fde2 	bl	8000cc8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001104:	6861      	ldr	r1, [r4, #4]
 8001106:	084a      	lsrs	r2, r1, #1
 8001108:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800110c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001110:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001112:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001114:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8001118:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800111a:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800111e:	4313      	orrs	r3, r2
 8001120:	60cb      	str	r3, [r1, #12]
 8001122:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001124:	f7ff fde8 	bl	8000cf8 <HAL_RCC_GetPCLK2Freq>
 8001128:	e7ec      	b.n	8001104 <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 800112a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800112c:	2300      	movs	r3, #0
 800112e:	e7f1      	b.n	8001114 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001130:	f7ff fde2 	bl	8000cf8 <HAL_RCC_GetPCLK2Freq>
 8001134:	6863      	ldr	r3, [r4, #4]
 8001136:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800113a:	fbb0 f0f3 	udiv	r0, r0, r3
 800113e:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <UART_SetConfig+0x1f8>)
 8001140:	b280      	uxth	r0, r0
 8001142:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001144:	2000      	movs	r0, #0
        break;
 8001146:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001148:	6862      	ldr	r2, [r4, #4]
 800114a:	0853      	lsrs	r3, r2, #1
 800114c:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001150:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001154:	fbb3 f3f2 	udiv	r3, r3, r2
 8001158:	b29b      	uxth	r3, r3
 800115a:	60eb      	str	r3, [r5, #12]
 800115c:	e7f2      	b.n	8001144 <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800115e:	f7ff fcd7 	bl	8000b10 <HAL_RCC_GetSysClockFreq>
 8001162:	e017      	b.n	8001194 <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001164:	6862      	ldr	r2, [r4, #4]
 8001166:	0853      	lsrs	r3, r2, #1
 8001168:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800116c:	e7f2      	b.n	8001154 <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800116e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001172:	d1f4      	bne.n	800115e <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001174:	f7ff fccc 	bl	8000b10 <HAL_RCC_GetSysClockFreq>
 8001178:	e7c4      	b.n	8001104 <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800117a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800117e:	d1f1      	bne.n	8001164 <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001180:	6860      	ldr	r0, [r4, #4]
 8001182:	0843      	lsrs	r3, r0, #1
 8001184:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001188:	e76a      	b.n	8001060 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800118a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800118e:	d0b7      	beq.n	8001100 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001190:	f7ff fd9a 	bl	8000cc8 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001194:	6863      	ldr	r3, [r4, #4]
 8001196:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800119a:	fbb0 f0f3 	udiv	r0, r0, r3
 800119e:	b280      	uxth	r0, r0
 80011a0:	60e8      	str	r0, [r5, #12]
 80011a2:	e7cf      	b.n	8001144 <UART_SetConfig+0x194>
 80011a4:	efff69f3 	.word	0xefff69f3
 80011a8:	40013800 	.word	0x40013800
 80011ac:	08002294 	.word	0x08002294
 80011b0:	40004400 	.word	0x40004400
 80011b4:	40004800 	.word	0x40004800
 80011b8:	40004c00 	.word	0x40004c00
 80011bc:	40005000 	.word	0x40005000

080011c0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80011c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80011c2:	07da      	lsls	r2, r3, #31
{
 80011c4:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80011c6:	d506      	bpl.n	80011d6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80011c8:	6801      	ldr	r1, [r0, #0]
 80011ca:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80011cc:	684a      	ldr	r2, [r1, #4]
 80011ce:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80011d2:	4322      	orrs	r2, r4
 80011d4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80011d6:	079c      	lsls	r4, r3, #30
 80011d8:	d506      	bpl.n	80011e8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80011da:	6801      	ldr	r1, [r0, #0]
 80011dc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80011de:	684a      	ldr	r2, [r1, #4]
 80011e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011e4:	4322      	orrs	r2, r4
 80011e6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80011e8:	0759      	lsls	r1, r3, #29
 80011ea:	d506      	bpl.n	80011fa <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80011ec:	6801      	ldr	r1, [r0, #0]
 80011ee:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80011f0:	684a      	ldr	r2, [r1, #4]
 80011f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011f6:	4322      	orrs	r2, r4
 80011f8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80011fa:	071a      	lsls	r2, r3, #28
 80011fc:	d506      	bpl.n	800120c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80011fe:	6801      	ldr	r1, [r0, #0]
 8001200:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001202:	684a      	ldr	r2, [r1, #4]
 8001204:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001208:	4322      	orrs	r2, r4
 800120a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800120c:	06dc      	lsls	r4, r3, #27
 800120e:	d506      	bpl.n	800121e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001210:	6801      	ldr	r1, [r0, #0]
 8001212:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001214:	688a      	ldr	r2, [r1, #8]
 8001216:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800121a:	4322      	orrs	r2, r4
 800121c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800121e:	0699      	lsls	r1, r3, #26
 8001220:	d506      	bpl.n	8001230 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001222:	6801      	ldr	r1, [r0, #0]
 8001224:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001226:	688a      	ldr	r2, [r1, #8]
 8001228:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800122c:	4322      	orrs	r2, r4
 800122e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001230:	065a      	lsls	r2, r3, #25
 8001232:	d50f      	bpl.n	8001254 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001234:	6801      	ldr	r1, [r0, #0]
 8001236:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001238:	684a      	ldr	r2, [r1, #4]
 800123a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800123e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001240:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001244:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001246:	d105      	bne.n	8001254 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001248:	684a      	ldr	r2, [r1, #4]
 800124a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800124c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001250:	4322      	orrs	r2, r4
 8001252:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001254:	061b      	lsls	r3, r3, #24
 8001256:	d506      	bpl.n	8001266 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001258:	6802      	ldr	r2, [r0, #0]
 800125a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800125c:	6853      	ldr	r3, [r2, #4]
 800125e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001262:	430b      	orrs	r3, r1
 8001264:	6053      	str	r3, [r2, #4]
 8001266:	bd10      	pop	{r4, pc}

08001268 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800126c:	9d06      	ldr	r5, [sp, #24]
 800126e:	4604      	mov	r4, r0
 8001270:	460f      	mov	r7, r1
 8001272:	4616      	mov	r6, r2
 8001274:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001276:	6821      	ldr	r1, [r4, #0]
 8001278:	69ca      	ldr	r2, [r1, #28]
 800127a:	ea37 0302 	bics.w	r3, r7, r2
 800127e:	bf0c      	ite	eq
 8001280:	2201      	moveq	r2, #1
 8001282:	2200      	movne	r2, #0
 8001284:	42b2      	cmp	r2, r6
 8001286:	d002      	beq.n	800128e <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001288:	2000      	movs	r0, #0
}
 800128a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800128e:	1c6b      	adds	r3, r5, #1
 8001290:	d0f2      	beq.n	8001278 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001292:	b99d      	cbnz	r5, 80012bc <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001294:	6823      	ldr	r3, [r4, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800129c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	f022 0201 	bic.w	r2, r2, #1
 80012a4:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80012a6:	2320      	movs	r3, #32
 80012a8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80012ac:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80012b0:	2300      	movs	r3, #0
 80012b2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80012b6:	2003      	movs	r0, #3
 80012b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80012bc:	f7ff f82a 	bl	8000314 <HAL_GetTick>
 80012c0:	eba0 0008 	sub.w	r0, r0, r8
 80012c4:	4285      	cmp	r5, r0
 80012c6:	d2d6      	bcs.n	8001276 <UART_WaitOnFlagUntilTimeout+0xe>
 80012c8:	e7e4      	b.n	8001294 <UART_WaitOnFlagUntilTimeout+0x2c>

080012ca <HAL_UART_Transmit>:
{
 80012ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80012ce:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80012d0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80012d4:	2b20      	cmp	r3, #32
{
 80012d6:	4604      	mov	r4, r0
 80012d8:	460d      	mov	r5, r1
 80012da:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80012dc:	d14c      	bne.n	8001378 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 80012de:	2900      	cmp	r1, #0
 80012e0:	d048      	beq.n	8001374 <HAL_UART_Transmit+0xaa>
 80012e2:	2a00      	cmp	r2, #0
 80012e4:	d046      	beq.n	8001374 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 80012e6:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d044      	beq.n	8001378 <HAL_UART_Transmit+0xae>
 80012ee:	2301      	movs	r3, #1
 80012f0:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80012f8:	2321      	movs	r3, #33	; 0x21
 80012fa:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 80012fe:	f7ff f809 	bl	8000314 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001302:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001306:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001308:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800130c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001310:	b292      	uxth	r2, r2
 8001312:	b962      	cbnz	r2, 800132e <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001314:	9700      	str	r7, [sp, #0]
 8001316:	4633      	mov	r3, r6
 8001318:	2140      	movs	r1, #64	; 0x40
 800131a:	4620      	mov	r0, r4
 800131c:	f7ff ffa4 	bl	8001268 <UART_WaitOnFlagUntilTimeout>
 8001320:	b998      	cbnz	r0, 800134a <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8001322:	2320      	movs	r3, #32
 8001324:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8001328:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 800132c:	e00e      	b.n	800134c <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 800132e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001332:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8001334:	3b01      	subs	r3, #1
 8001336:	b29b      	uxth	r3, r3
 8001338:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800133c:	2200      	movs	r2, #0
 800133e:	4633      	mov	r3, r6
 8001340:	2180      	movs	r1, #128	; 0x80
 8001342:	4620      	mov	r0, r4
 8001344:	f7ff ff90 	bl	8001268 <UART_WaitOnFlagUntilTimeout>
 8001348:	b118      	cbz	r0, 8001352 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 800134a:	2003      	movs	r0, #3
}
 800134c:	b002      	add	sp, #8
 800134e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001352:	68a3      	ldr	r3, [r4, #8]
 8001354:	6822      	ldr	r2, [r4, #0]
 8001356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800135a:	d107      	bne.n	800136c <HAL_UART_Transmit+0xa2>
 800135c:	6923      	ldr	r3, [r4, #16]
 800135e:	b92b      	cbnz	r3, 800136c <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001360:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001368:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 800136a:	e7cf      	b.n	800130c <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800136c:	782b      	ldrb	r3, [r5, #0]
 800136e:	8513      	strh	r3, [r2, #40]	; 0x28
 8001370:	3501      	adds	r5, #1
 8001372:	e7cb      	b.n	800130c <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001374:	2001      	movs	r0, #1
 8001376:	e7e9      	b.n	800134c <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001378:	2002      	movs	r0, #2
 800137a:	e7e7      	b.n	800134c <HAL_UART_Transmit+0x82>

0800137c <UART_CheckIdleState>:
{
 800137c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800137e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001380:	2600      	movs	r6, #0
 8001382:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001384:	f7fe ffc6 	bl	8000314 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001388:	6823      	ldr	r3, [r4, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800138e:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001390:	d417      	bmi.n	80013c2 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001392:	6823      	ldr	r3, [r4, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	075b      	lsls	r3, r3, #29
 8001398:	d50a      	bpl.n	80013b0 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800139a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2200      	movs	r2, #0
 80013a2:	462b      	mov	r3, r5
 80013a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80013a8:	4620      	mov	r0, r4
 80013aa:	f7ff ff5d 	bl	8001268 <UART_WaitOnFlagUntilTimeout>
 80013ae:	b9a0      	cbnz	r0, 80013da <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 80013b0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80013b2:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80013b4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80013b8:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80013bc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 80013c0:	e00c      	b.n	80013dc <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80013c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	4632      	mov	r2, r6
 80013ca:	4603      	mov	r3, r0
 80013cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80013d0:	4620      	mov	r0, r4
 80013d2:	f7ff ff49 	bl	8001268 <UART_WaitOnFlagUntilTimeout>
 80013d6:	2800      	cmp	r0, #0
 80013d8:	d0db      	beq.n	8001392 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80013da:	2003      	movs	r0, #3
}
 80013dc:	b002      	add	sp, #8
 80013de:	bd70      	pop	{r4, r5, r6, pc}

080013e0 <HAL_UART_Init>:
{
 80013e0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80013e2:	4604      	mov	r4, r0
 80013e4:	b360      	cbz	r0, 8001440 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80013e6:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80013ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013ee:	b91b      	cbnz	r3, 80013f8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80013f0:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80013f4:	f000 fa42 	bl	800187c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80013f8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80013fa:	2324      	movs	r3, #36	; 0x24
 80013fc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001400:	6813      	ldr	r3, [r2, #0]
 8001402:	f023 0301 	bic.w	r3, r3, #1
 8001406:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001408:	4620      	mov	r0, r4
 800140a:	f7ff fdd1 	bl	8000fb0 <UART_SetConfig>
 800140e:	2801      	cmp	r0, #1
 8001410:	d016      	beq.n	8001440 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001412:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001414:	b113      	cbz	r3, 800141c <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001416:	4620      	mov	r0, r4
 8001418:	f7ff fed2 	bl	80011c0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800141c:	6823      	ldr	r3, [r4, #0]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001424:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800142c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001434:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001436:	601a      	str	r2, [r3, #0]
}
 8001438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800143c:	f7ff bf9e 	b.w	800137c <UART_CheckIdleState>
}
 8001440:	2001      	movs	r0, #1
 8001442:	bd10      	pop	{r4, pc}

08001444 <get_iso8859_code>:
#define SHIFT_L   0x04
#define SHIFT_R   0x08
#define ALTGR     0x10

static char get_iso8859_code(Keyboard_TypeDef* keyboard)
{
 8001444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001446:	4d3c      	ldr	r5, [pc, #240]	; (8001538 <get_iso8859_code+0xf4>)
 8001448:	4e3c      	ldr	r6, [pc, #240]	; (800153c <get_iso8859_code+0xf8>)
 800144a:	782b      	ldrb	r3, [r5, #0]
 800144c:	4604      	mov	r4, r0
 800144e:	2100      	movs	r1, #0
	i = keyboard->tail;
 8001450:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
	if (i == keyboard->head) return 0;
 8001454:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
	i = keyboard->tail;
 8001458:	b2d2      	uxtb	r2, r2
	if (i == keyboard->head) return 0;
 800145a:	4282      	cmp	r2, r0
 800145c:	d103      	bne.n	8001466 <get_iso8859_code+0x22>
 800145e:	b101      	cbz	r1, 8001462 <get_iso8859_code+0x1e>
 8001460:	702b      	strb	r3, [r5, #0]
	uint8_t s;
	char c;

	while (1) {
		s = get_scan_code(keyboard);
		if (!s) return 0;
 8001462:	2000      	movs	r0, #0
 8001464:	bdf0      	pop	{r4, r5, r6, r7, pc}
	i++;
 8001466:	3201      	adds	r2, #1
 8001468:	b2d2      	uxtb	r2, r2
	if (i >= BUFFER_SIZE) i = 0;
 800146a:	2a2d      	cmp	r2, #45	; 0x2d
 800146c:	bf28      	it	cs
 800146e:	2200      	movcs	r2, #0
	c = keyboard->buffer[i];
 8001470:	5ca0      	ldrb	r0, [r4, r2]
	keyboard->tail = i;
 8001472:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
		if (!s) return 0;
 8001476:	f000 02ff 	and.w	r2, r0, #255	; 0xff
 800147a:	2800      	cmp	r0, #0
 800147c:	d0ef      	beq.n	800145e <get_iso8859_code+0x1a>
		if (s == 0xF0) {
 800147e:	2af0      	cmp	r2, #240	; 0xf0
 8001480:	d103      	bne.n	800148a <get_iso8859_code+0x46>
			state |= BREAK;
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	2101      	movs	r1, #1
 8001488:	e7e2      	b.n	8001450 <get_iso8859_code+0xc>
		} else if (s == 0xE0) {
 800148a:	2ae0      	cmp	r2, #224	; 0xe0
 800148c:	d102      	bne.n	8001494 <get_iso8859_code+0x50>
			state |= MODIFIER;
 800148e:	f043 0302 	orr.w	r3, r3, #2
 8001492:	e7f8      	b.n	8001486 <get_iso8859_code+0x42>
		} else {
			if (state & BREAK) {
 8001494:	07d9      	lsls	r1, r3, #31
 8001496:	d512      	bpl.n	80014be <get_iso8859_code+0x7a>
				if (s == 0x12) {
 8001498:	2a12      	cmp	r2, #18
 800149a:	d104      	bne.n	80014a6 <get_iso8859_code+0x62>
					state &= ~SHIFT_L;
 800149c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
				} else if (s == 0x11 && (state & MODIFIER)) {
					state &= ~ALTGR;
				}
				// CTRL, ALT & WIN keys could be added
				// but is that really worth the overkeyboard->head?
				state &= ~(BREAK | MODIFIER);
 80014a0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
				continue;
 80014a4:	e7ef      	b.n	8001486 <get_iso8859_code+0x42>
				} else if (s == 0x59) {
 80014a6:	2a59      	cmp	r2, #89	; 0x59
 80014a8:	d102      	bne.n	80014b0 <get_iso8859_code+0x6c>
					state &= ~SHIFT_R;
 80014aa:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 80014ae:	e7f7      	b.n	80014a0 <get_iso8859_code+0x5c>
				} else if (s == 0x11 && (state & MODIFIER)) {
 80014b0:	2a11      	cmp	r2, #17
 80014b2:	d1f5      	bne.n	80014a0 <get_iso8859_code+0x5c>
 80014b4:	079a      	lsls	r2, r3, #30
					state &= ~ALTGR;
 80014b6:	bf48      	it	mi
 80014b8:	f003 03ef 	andmi.w	r3, r3, #239	; 0xef
 80014bc:	e7f0      	b.n	80014a0 <get_iso8859_code+0x5c>
			}
			if (s == 0x12) {
 80014be:	2a12      	cmp	r2, #18
 80014c0:	d102      	bne.n	80014c8 <get_iso8859_code+0x84>
				state |= SHIFT_L;
 80014c2:	f043 0304 	orr.w	r3, r3, #4
				continue;
 80014c6:	e7de      	b.n	8001486 <get_iso8859_code+0x42>
			} else if (s == 0x59) {
 80014c8:	2a59      	cmp	r2, #89	; 0x59
 80014ca:	d102      	bne.n	80014d2 <get_iso8859_code+0x8e>
				state |= SHIFT_R;
 80014cc:	f043 0308 	orr.w	r3, r3, #8
				continue;
 80014d0:	e7d9      	b.n	8001486 <get_iso8859_code+0x42>
			} else if (s == 0x11 && (state & MODIFIER)) {
 80014d2:	2a11      	cmp	r2, #17
 80014d4:	d103      	bne.n	80014de <get_iso8859_code+0x9a>
 80014d6:	079f      	lsls	r7, r3, #30
				state |= ALTGR;
 80014d8:	bf48      	it	mi
 80014da:	f043 0310 	orrmi.w	r3, r3, #16
			}
			c = 0;
			if (state & MODIFIER) {
 80014de:	f013 0102 	ands.w	r1, r3, #2
 80014e2:	d00a      	beq.n	80014fa <get_iso8859_code+0xb6>
 80014e4:	3a4a      	subs	r2, #74	; 0x4a
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	2a33      	cmp	r2, #51	; 0x33
 80014ea:	d821      	bhi.n	8001530 <get_iso8859_code+0xec>
 80014ec:	5cb0      	ldrb	r0, [r6, r2]
					c = pgm_read_byte(keyboard->keymap->shift + s);
			} else {
				if (s < PS2_KEYMAP_SIZE)
					c = pgm_read_byte(keyboard->keymap->noshift + s);
			}
			state &= ~(BREAK | MODIFIER);
 80014ee:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
			if (c) return c;
 80014f2:	2800      	cmp	r0, #0
 80014f4:	d0c7      	beq.n	8001486 <get_iso8859_code+0x42>
 80014f6:	702b      	strb	r3, [r5, #0]
		}
	}
}
 80014f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			} else if ((state & ALTGR) && keyboard->keymap->uses_altgr) {
 80014fa:	06d8      	lsls	r0, r3, #27
 80014fc:	d509      	bpl.n	8001512 <get_iso8859_code+0xce>
 80014fe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001500:	f8d0 7110 	ldr.w	r7, [r0, #272]	; 0x110
 8001504:	b12f      	cbz	r7, 8001512 <get_iso8859_code+0xce>
				if (s < PS2_KEYMAP_SIZE)
 8001506:	2a87      	cmp	r2, #135	; 0x87
 8001508:	d814      	bhi.n	8001534 <get_iso8859_code+0xf0>
					c = pgm_read_byte(keyboard->keymap->altgr + s); // MUDAR
 800150a:	4402      	add	r2, r0
 800150c:	f892 0114 	ldrb.w	r0, [r2, #276]	; 0x114
 8001510:	e7ed      	b.n	80014ee <get_iso8859_code+0xaa>
			} else if (state & (SHIFT_L | SHIFT_R)) {
 8001512:	f013 010c 	ands.w	r1, r3, #12
 8001516:	d006      	beq.n	8001526 <get_iso8859_code+0xe2>
				if (s < PS2_KEYMAP_SIZE)
 8001518:	2a87      	cmp	r2, #135	; 0x87
 800151a:	d809      	bhi.n	8001530 <get_iso8859_code+0xec>
					c = pgm_read_byte(keyboard->keymap->shift + s);
 800151c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800151e:	440a      	add	r2, r1
 8001520:	f892 0088 	ldrb.w	r0, [r2, #136]	; 0x88
 8001524:	e7e3      	b.n	80014ee <get_iso8859_code+0xaa>
				if (s < PS2_KEYMAP_SIZE)
 8001526:	2a87      	cmp	r2, #135	; 0x87
 8001528:	d804      	bhi.n	8001534 <get_iso8859_code+0xf0>
					c = pgm_read_byte(keyboard->keymap->noshift + s);
 800152a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800152c:	5c88      	ldrb	r0, [r1, r2]
 800152e:	e7de      	b.n	80014ee <get_iso8859_code+0xaa>
 8001530:	2000      	movs	r0, #0
 8001532:	e7dc      	b.n	80014ee <get_iso8859_code+0xaa>
 8001534:	4608      	mov	r0, r1
 8001536:	e7da      	b.n	80014ee <get_iso8859_code+0xaa>
 8001538:	20000098 	.word	0x20000098
 800153c:	08002298 	.word	0x08002298

08001540 <ps2interrupt>:
{
 8001540:	b570      	push	{r4, r5, r6, lr}
 8001542:	4604      	mov	r4, r0
	val = HAL_GPIO_ReadPin(keyboard->DataPort, keyboard->DataPin); //MUDAR
 8001544:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
 8001548:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800154a:	f7ff f847 	bl	80005dc <HAL_GPIO_ReadPin>
 800154e:	4605      	mov	r5, r0
	now_ms = HAL_GetTick() ;//MUDAR millis N SEI SE FUNCIONA POSSIVEL ERRO
 8001550:	f7fe fee0 	bl	8000314 <HAL_GetTick>
	if (now_ms - prev_ms > 450) {
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <ps2interrupt+0x84>)
 8001556:	491c      	ldr	r1, [pc, #112]	; (80015c8 <ps2interrupt+0x88>)
 8001558:	681a      	ldr	r2, [r3, #0]
	prev_ms = now_ms;
 800155a:	6018      	str	r0, [r3, #0]
	if (now_ms - prev_ms > 450) {
 800155c:	1a82      	subs	r2, r0, r2
 800155e:	f5b2 7fe1 	cmp.w	r2, #450	; 0x1c2
 8001562:	4a1a      	ldr	r2, [pc, #104]	; (80015cc <ps2interrupt+0x8c>)
		bitcount = 0;
 8001564:	bf84      	itt	hi
 8001566:	2600      	movhi	r6, #0
 8001568:	7016      	strbhi	r6, [r2, #0]
	n = bitcount - 1;
 800156a:	7813      	ldrb	r3, [r2, #0]
		incoming = 0;
 800156c:	bf88      	it	hi
 800156e:	700e      	strbhi	r6, [r1, #0]
	n = bitcount - 1;
 8001570:	1e58      	subs	r0, r3, #1
 8001572:	b2c0      	uxtb	r0, r0
	if (n <= 7) {
 8001574:	2807      	cmp	r0, #7
		incoming |= (val << n);
 8001576:	bf9c      	itt	ls
 8001578:	4085      	lslls	r5, r0
 800157a:	7808      	ldrbls	r0, [r1, #0]
	bitcount++;
 800157c:	f103 0301 	add.w	r3, r3, #1
		incoming |= (val << n);
 8001580:	bf98      	it	ls
 8001582:	4305      	orrls	r5, r0
	bitcount++;
 8001584:	b2db      	uxtb	r3, r3
		incoming |= (val << n);
 8001586:	bf98      	it	ls
 8001588:	700d      	strbls	r5, [r1, #0]
	if (bitcount == 11) {
 800158a:	2b0b      	cmp	r3, #11
	bitcount++;
 800158c:	7013      	strb	r3, [r2, #0]
	if (bitcount == 11) {
 800158e:	d111      	bne.n	80015b4 <ps2interrupt+0x74>
		uint8_t i = keyboard->head + 1;
 8001590:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
		if (i != keyboard->tail) {
 8001594:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
		uint8_t i = keyboard->head + 1;
 8001598:	3301      	adds	r3, #1
 800159a:	b2db      	uxtb	r3, r3
		if (i >= BUFFER_SIZE) i = 0;
 800159c:	2b2d      	cmp	r3, #45	; 0x2d
 800159e:	bf28      	it	cs
 80015a0:	2300      	movcs	r3, #0
		if (i != keyboard->tail) {
 80015a2:	4283      	cmp	r3, r0
			keyboard->buffer[i] = incoming;
 80015a4:	bf1e      	ittt	ne
 80015a6:	7808      	ldrbne	r0, [r1, #0]
 80015a8:	54e0      	strbne	r0, [r4, r3]
			keyboard->head = i;
 80015aa:	f884 302d 	strbne.w	r3, [r4, #45]	; 0x2d
		bitcount = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	7013      	strb	r3, [r2, #0]
		incoming = 0;
 80015b2:	700b      	strb	r3, [r1, #0]
	print("incoming = %d, bitcount= %d\r\n", incoming, bitcount);
 80015b4:	7812      	ldrb	r2, [r2, #0]
 80015b6:	7809      	ldrb	r1, [r1, #0]
 80015b8:	4805      	ldr	r0, [pc, #20]	; (80015d0 <ps2interrupt+0x90>)
}
 80015ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	print("incoming = %d, bitcount= %d\r\n", incoming, bitcount);
 80015be:	f000 b843 	b.w	8001648 <print>
 80015c2:	bf00      	nop
 80015c4:	20000094 	.word	0x20000094
 80015c8:	20000091 	.word	0x20000091
 80015cc:	20000090 	.word	0x20000090
 80015d0:	080022cc 	.word	0x080022cc

080015d4 <keyboardRead>:
uint8_t keyboardReadScanCode(Keyboard_TypeDef* keyboard) // MUDEI
{
	return get_scan_code(keyboard);
}

int keyboardRead(Keyboard_TypeDef* keyboard) { //MUDEI
 80015d4:	b510      	push	{r4, lr}
	uint8_t result;

	result = keyboard->UTF8next;
 80015d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
int keyboardRead(Keyboard_TypeDef* keyboard) { //MUDEI
 80015da:	4604      	mov	r4, r0
	if (result) {
 80015dc:	b123      	cbz	r3, 80015e8 <keyboardRead+0x14>
		keyboard->UTF8next = 0;
 80015de:	2200      	movs	r2, #0
 80015e0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
			keyboard->UTF8next = (result & 0x3F) | 0x80;
			result = ((result >> 6) & 0x1F) | 0xC0;
		}
	}
	if (!result) return -1;
	return result;
 80015e4:	4618      	mov	r0, r3
 80015e6:	bd10      	pop	{r4, pc}
		result = keyboard->CharBuffer;
 80015e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		if (result) {
 80015ec:	b183      	cbz	r3, 8001610 <keyboardRead+0x3c>
			keyboard->CharBuffer = 0;
 80015ee:	2200      	movs	r2, #0
 80015f0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
		if (result >= 128) {
 80015f4:	b25a      	sxtb	r2, r3
 80015f6:	2a00      	cmp	r2, #0
 80015f8:	da0e      	bge.n	8001618 <keyboardRead+0x44>
			keyboard->UTF8next = (result & 0x3F) | 0x80;
 80015fa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80015fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
			result = ((result >> 6) & 0x1F) | 0xC0;
 8001602:	f3c3 1385 	ubfx	r3, r3, #6, #6
			keyboard->UTF8next = (result & 0x3F) | 0x80;
 8001606:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
			result = ((result >> 6) & 0x1F) | 0xC0;
 800160a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800160e:	e7e9      	b.n	80015e4 <keyboardRead+0x10>
			result = get_iso8859_code(keyboard);
 8001610:	f7ff ff18 	bl	8001444 <get_iso8859_code>
 8001614:	4603      	mov	r3, r0
 8001616:	e7ed      	b.n	80015f4 <keyboardRead+0x20>
	if (!result) return -1;
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1e3      	bne.n	80015e4 <keyboardRead+0x10>
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001620:	bd10      	pop	{r4, pc}

08001622 <keyboardBegin>:
  //uint8_t irq_num=255;
  // irq data e port
  keyboard->DataPort = data_port;
  keyboard->DataPin = data_pin;

  keyboard->IQRPort = iqr_port;
 8001622:	6383      	str	r3, [r0, #56]	; 0x38
  keyboard->IQRPin = iqr_pin;
 8001624:	f89d 3000 	ldrb.w	r3, [sp]
 8001628:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
//  pinMode(data_pin, INPUT_PULLUP);
//#ifdef CORE_INT_EVERY_PIN
//  irq_num = irq_pin;
//
//
  keyboard->head = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  keyboard->DataPort = data_port;
 8001632:	6301      	str	r1, [r0, #48]	; 0x30
  keyboard->DataPin = data_pin;
 8001634:	f880 202f 	strb.w	r2, [r0, #47]	; 0x2f
  keyboard->tail = 0;
 8001638:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
  keyboard->CharBuffer = 0;
 800163c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  keyboard->UTF8next = 0;
 8001640:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  keyboard->keymap = 0;
 8001644:	6403      	str	r3, [r0, #64]	; 0x40
 8001646:	4770      	bx	lr

08001648 <print>:
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
char buffer[100];
void print(const char *format,  ...){
 8001648:	b40f      	push	{r0, r1, r2, r3}
 800164a:	b513      	push	{r0, r1, r4, lr}

	va_list args;
	va_start(args, format);
	vsprintf(buffer, format, args);
 800164c:	4c0d      	ldr	r4, [pc, #52]	; (8001684 <print+0x3c>)
void print(const char *format,  ...){
 800164e:	aa04      	add	r2, sp, #16
	vsprintf(buffer, format, args);
 8001650:	4620      	mov	r0, r4
void print(const char *format,  ...){
 8001652:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, format);
 8001656:	9201      	str	r2, [sp, #4]
	vsprintf(buffer, format, args);
 8001658:	f000 f9ee 	bl	8001a38 <vsiprintf>
	va_end(args);

	HAL_UART_Transmit(&huart2, buffer, 100, 1000);
 800165c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001660:	4621      	mov	r1, r4
 8001662:	2264      	movs	r2, #100	; 0x64
 8001664:	4808      	ldr	r0, [pc, #32]	; (8001688 <print+0x40>)
 8001666:	f7ff fe30 	bl	80012ca <HAL_UART_Transmit>
	memset(buffer,0,strlen(buffer));
 800166a:	4620      	mov	r0, r4
 800166c:	f7fe fdb8 	bl	80001e0 <strlen>
 8001670:	2100      	movs	r1, #0
 8001672:	4602      	mov	r2, r0
 8001674:	4620      	mov	r0, r4
 8001676:	f000 f9bf 	bl	80019f8 <memset>

}
 800167a:	b002      	add	sp, #8
 800167c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001680:	b004      	add	sp, #16
 8001682:	4770      	bx	lr
 8001684:	200000f0 	.word	0x200000f0
 8001688:	20000154 	.word	0x20000154

0800168c <interrupcao>:

/* USER CODE BEGIN 0 */
Keyboard_TypeDef keyboard;
Keyboard_TypeDef* pKeyboard = &keyboard;
	void interrupcao(){
		ps2interrupt(pKeyboard);
 800168c:	4b01      	ldr	r3, [pc, #4]	; (8001694 <interrupcao+0x8>)
 800168e:	6818      	ldr	r0, [r3, #0]
 8001690:	f7ff bf56 	b.w	8001540 <ps2interrupt>
 8001694:	20000008 	.word	0x20000008

08001698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001698:	b510      	push	{r4, lr}
 800169a:	b0a6      	sub	sp, #152	; 0x98
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800169c:	2301      	movs	r3, #1
 800169e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80016a0:	2310      	movs	r3, #16
 80016a2:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016a4:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016a6:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a8:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016aa:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016ac:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ae:	f7fe ffad 	bl	800060c <HAL_RCC_OscConfig>
 80016b2:	4601      	mov	r1, r0
 80016b4:	b100      	cbz	r0, 80016b8 <SystemClock_Config+0x20>
 80016b6:	e7fe      	b.n	80016b6 <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b8:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016ba:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016bc:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016be:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016c0:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016c2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c4:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016c6:	f7ff fa4f 	bl	8000b68 <HAL_RCC_ClockConfig>
 80016ca:	b100      	cbz	r0, 80016ce <SystemClock_Config+0x36>
 80016cc:	e7fe      	b.n	80016cc <SystemClock_Config+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016ce:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d0:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016d2:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d4:	f7ff fb28 	bl	8000d28 <HAL_RCCEx_PeriphCLKConfig>
 80016d8:	4604      	mov	r4, r0
 80016da:	b100      	cbz	r0, 80016de <SystemClock_Config+0x46>
 80016dc:	e7fe      	b.n	80016dc <SystemClock_Config+0x44>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80016de:	f7ff faed 	bl	8000cbc <HAL_RCC_GetHCLKFreq>
 80016e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80016ea:	f7fe fe7f 	bl	80003ec <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80016ee:	2004      	movs	r0, #4
 80016f0:	f7fe fe92 	bl	8000418 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80016f4:	4622      	mov	r2, r4
 80016f6:	4621      	mov	r1, r4
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f7fe fe36 	bl	800036c <HAL_NVIC_SetPriority>
}
 8001700:	b026      	add	sp, #152	; 0x98
 8001702:	bd10      	pop	{r4, pc}

08001704 <main>:
{
 8001704:	b570      	push	{r4, r5, r6, lr}
 8001706:	b088      	sub	sp, #32
  HAL_Init();
 8001708:	f7fe fde6 	bl	80002d8 <HAL_Init>
  SystemClock_Config();
 800170c:	f7ff ffc4 	bl	8001698 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001710:	4b30      	ldr	r3, [pc, #192]	; (80017d4 <main+0xd0>)
 8001712:	695a      	ldr	r2, [r3, #20]
 8001714:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001718:	615a      	str	r2, [r3, #20]
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001720:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001724:	2160      	movs	r1, #96	; 0x60
 8001726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : IQR_PIN_Pin */
  GPIO_InitStruct.Pin = IQR_PIN_Pin;
 800172a:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800172e:	f7fe ff5b 	bl	80005e8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001732:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <main+0xd4>)
 8001734:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(IQR_PIN_GPIO_Port, &GPIO_InitStruct);
 8001736:	a903      	add	r1, sp, #12
 8001738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : DATA_PIN_Pin */
  GPIO_InitStruct.Pin = DATA_PIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173c:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = IQR_PIN_Pin;
 800173e:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001740:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pin = DATA_PIN_Pin;
 8001742:	2602      	movs	r6, #2
  HAL_GPIO_Init(IQR_PIN_GPIO_Port, &GPIO_InitStruct);
 8001744:	f7fe fe7a 	bl	800043c <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(DATA_PIN_GPIO_Port, &GPIO_InitStruct);
 8001748:	a903      	add	r1, sp, #12
 800174a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = DATA_PIN_Pin;
 800174e:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001750:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001752:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(DATA_PIN_GPIO_Port, &GPIO_InitStruct);
 8001754:	f7fe fe72 	bl	800043c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001758:	2360      	movs	r3, #96	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175a:	a903      	add	r1, sp, #12
 800175c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001760:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001762:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	f7fe fe68 	bl	800043c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800176c:	4622      	mov	r2, r4
 800176e:	4621      	mov	r1, r4
 8001770:	2006      	movs	r0, #6
 8001772:	f7fe fdfb 	bl	800036c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001776:	2006      	movs	r0, #6
 8001778:	f7fe fe2c 	bl	80003d4 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 800177c:	4817      	ldr	r0, [pc, #92]	; (80017dc <main+0xd8>)
  huart2.Init.BaudRate = 38400;
 800177e:	4a18      	ldr	r2, [pc, #96]	; (80017e0 <main+0xdc>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001780:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 38400;
 8001782:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001786:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 800178a:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800178c:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800178e:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001790:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001794:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001796:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001798:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800179a:	f7ff fe21 	bl	80013e0 <HAL_UART_Init>
 800179e:	b100      	cbz	r0, 80017a2 <main+0x9e>
 80017a0:	e7fe      	b.n	80017a0 <main+0x9c>
  keyboardBegin(pKeyboard, data_port, data_pin, iqr_port, iqr_pin);
 80017a2:	4c10      	ldr	r4, [pc, #64]	; (80017e4 <main+0xe0>)
 80017a4:	9500      	str	r5, [sp, #0]
 80017a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80017aa:	4632      	mov	r2, r6
 80017ac:	4619      	mov	r1, r3
 80017ae:	6820      	ldr	r0, [r4, #0]
	  print("Resultado = %d\r\n", c);
 80017b0:	4d0d      	ldr	r5, [pc, #52]	; (80017e8 <main+0xe4>)
  keyboardBegin(pKeyboard, data_port, data_pin, iqr_port, iqr_pin);
 80017b2:	f7ff ff36 	bl	8001622 <keyboardBegin>
  print("teste\r\n");
 80017b6:	480d      	ldr	r0, [pc, #52]	; (80017ec <main+0xe8>)
 80017b8:	f7ff ff46 	bl	8001648 <print>
	  char c = keyboardRead(pKeyboard);
 80017bc:	6820      	ldr	r0, [r4, #0]
 80017be:	f7ff ff09 	bl	80015d4 <keyboardRead>
	  print("Resultado = %d\r\n", c);
 80017c2:	b2c1      	uxtb	r1, r0
 80017c4:	4628      	mov	r0, r5
 80017c6:	f7ff ff3f 	bl	8001648 <print>
	  HAL_Delay(1000);
 80017ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017ce:	f7fe fda7 	bl	8000320 <HAL_Delay>
 80017d2:	e7f3      	b.n	80017bc <main+0xb8>
 80017d4:	40021000 	.word	0x40021000
 80017d8:	10210000 	.word	0x10210000
 80017dc:	20000154 	.word	0x20000154
 80017e0:	40004400 	.word	0x40004400
 80017e4:	20000008 	.word	0x20000008
 80017e8:	080022f2 	.word	0x080022f2
 80017ec:	080022ea 	.word	0x080022ea

080017f0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f0:	4b21      	ldr	r3, [pc, #132]	; (8001878 <HAL_MspInit+0x88>)
{
 80017f2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f4:	699a      	ldr	r2, [r3, #24]
 80017f6:	f042 0201 	orr.w	r2, r2, #1
 80017fa:	619a      	str	r2, [r3, #24]
 80017fc:	699a      	ldr	r2, [r3, #24]
 80017fe:	f002 0201 	and.w	r2, r2, #1
 8001802:	9200      	str	r2, [sp, #0]
 8001804:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	69da      	ldr	r2, [r3, #28]
 8001808:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800180c:	61da      	str	r2, [r3, #28]
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001814:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001816:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8001818:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181a:	f7fe fd95 	bl	8000348 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	4611      	mov	r1, r2
 8001822:	f06f 000b 	mvn.w	r0, #11
 8001826:	f7fe fda1 	bl	800036c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	4611      	mov	r1, r2
 800182e:	f06f 000a 	mvn.w	r0, #10
 8001832:	f7fe fd9b 	bl	800036c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	4611      	mov	r1, r2
 800183a:	f06f 0009 	mvn.w	r0, #9
 800183e:	f7fe fd95 	bl	800036c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	4611      	mov	r1, r2
 8001846:	f06f 0004 	mvn.w	r0, #4
 800184a:	f7fe fd8f 	bl	800036c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	4611      	mov	r1, r2
 8001852:	f06f 0003 	mvn.w	r0, #3
 8001856:	f7fe fd89 	bl	800036c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	4611      	mov	r1, r2
 800185e:	f06f 0001 	mvn.w	r0, #1
 8001862:	f7fe fd83 	bl	800036c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	4611      	mov	r1, r2
 800186a:	f04f 30ff 	mov.w	r0, #4294967295
 800186e:	f7fe fd7d 	bl	800036c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001872:	b003      	add	sp, #12
 8001874:	f85d fb04 	ldr.w	pc, [sp], #4
 8001878:	40021000 	.word	0x40021000

0800187c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800187c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800187e:	6802      	ldr	r2, [r0, #0]
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <HAL_UART_MspInit+0x44>)
 8001882:	429a      	cmp	r2, r3
 8001884:	d119      	bne.n	80018ba <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001886:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 800188c:	69da      	ldr	r2, [r3, #28]
 800188e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001892:	61da      	str	r2, [r3, #28]
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800189e:	230c      	movs	r3, #12
 80018a0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018aa:	2303      	movs	r3, #3
 80018ac:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018b2:	2307      	movs	r3, #7
 80018b4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f7fe fdc1 	bl	800043c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018ba:	b007      	add	sp, #28
 80018bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80018c0:	40004400 	.word	0x40004400

080018c4 <NMI_Handler>:
 80018c4:	4770      	bx	lr

080018c6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80018c6:	e7fe      	b.n	80018c6 <HardFault_Handler>

080018c8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80018c8:	e7fe      	b.n	80018c8 <MemManage_Handler>

080018ca <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80018ca:	e7fe      	b.n	80018ca <BusFault_Handler>

080018cc <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80018cc:	e7fe      	b.n	80018cc <UsageFault_Handler>

080018ce <SVC_Handler>:
 80018ce:	4770      	bx	lr

080018d0 <DebugMon_Handler>:
 80018d0:	4770      	bx	lr

080018d2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80018d2:	4770      	bx	lr

080018d4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80018d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d6:	f7fe fd11 	bl	80002fc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80018de:	f7fe bda8 	b.w	8000432 <HAL_SYSTICK_IRQHandler>

080018e2 <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 80018e2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	interrupcao();
 80018e4:	f7ff fed2 	bl	800168c <interrupcao>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80018e8:	2001      	movs	r0, #1
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80018ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80018ee:	f7fe be81 	b.w	80005f4 <HAL_GPIO_EXTI_IRQHandler>
	...

080018f4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f4:	4915      	ldr	r1, [pc, #84]	; (800194c <SystemInit+0x58>)
 80018f6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80018fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <SystemInit+0x5c>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800190c:	6858      	ldr	r0, [r3, #4]
 800190e:	4a11      	ldr	r2, [pc, #68]	; (8001954 <SystemInit+0x60>)
 8001910:	4002      	ands	r2, r0
 8001912:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800191a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800191e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001926:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800192e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001932:	f022 020f 	bic.w	r2, r2, #15
 8001936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001938:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800193a:	4a07      	ldr	r2, [pc, #28]	; (8001958 <SystemInit+0x64>)
 800193c:	4002      	ands	r2, r0
 800193e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001944:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001948:	608b      	str	r3, [r1, #8]
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00
 8001950:	40021000 	.word	0x40021000
 8001954:	f87fc00c 	.word	0xf87fc00c
 8001958:	ff00fccc 	.word	0xff00fccc

0800195c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800195c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001994 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001960:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001962:	e003      	b.n	800196c <LoopCopyDataInit>

08001964 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001966:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001968:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800196a:	3104      	adds	r1, #4

0800196c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800196c:	480b      	ldr	r0, [pc, #44]	; (800199c <LoopForever+0xa>)
	ldr	r3, =_edata
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001970:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001972:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001974:	d3f6      	bcc.n	8001964 <CopyDataInit>
	ldr	r2, =_sbss
 8001976:	4a0b      	ldr	r2, [pc, #44]	; (80019a4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001978:	e002      	b.n	8001980 <LoopFillZerobss>

0800197a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800197a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800197c:	f842 3b04 	str.w	r3, [r2], #4

08001980 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <LoopForever+0x16>)
	cmp	r2, r3
 8001982:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001984:	d3f9      	bcc.n	800197a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001986:	f7ff ffb5 	bl	80018f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800198a:	f000 f811 	bl	80019b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800198e:	f7ff feb9 	bl	8001704 <main>

08001992 <LoopForever>:

LoopForever:
    b LoopForever
 8001992:	e7fe      	b.n	8001992 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001994:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001998:	08002358 	.word	0x08002358
	ldr	r0, =_sdata
 800199c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80019a0:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 80019a4:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 80019a8:	200001c8 	.word	0x200001c8

080019ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019ac:	e7fe      	b.n	80019ac <ADC1_2_IRQHandler>
	...

080019b0 <__libc_init_array>:
 80019b0:	b570      	push	{r4, r5, r6, lr}
 80019b2:	4e0d      	ldr	r6, [pc, #52]	; (80019e8 <__libc_init_array+0x38>)
 80019b4:	4c0d      	ldr	r4, [pc, #52]	; (80019ec <__libc_init_array+0x3c>)
 80019b6:	1ba4      	subs	r4, r4, r6
 80019b8:	10a4      	asrs	r4, r4, #2
 80019ba:	2500      	movs	r5, #0
 80019bc:	42a5      	cmp	r5, r4
 80019be:	d109      	bne.n	80019d4 <__libc_init_array+0x24>
 80019c0:	4e0b      	ldr	r6, [pc, #44]	; (80019f0 <__libc_init_array+0x40>)
 80019c2:	4c0c      	ldr	r4, [pc, #48]	; (80019f4 <__libc_init_array+0x44>)
 80019c4:	f000 fc4a 	bl	800225c <_init>
 80019c8:	1ba4      	subs	r4, r4, r6
 80019ca:	10a4      	asrs	r4, r4, #2
 80019cc:	2500      	movs	r5, #0
 80019ce:	42a5      	cmp	r5, r4
 80019d0:	d105      	bne.n	80019de <__libc_init_array+0x2e>
 80019d2:	bd70      	pop	{r4, r5, r6, pc}
 80019d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019d8:	4798      	blx	r3
 80019da:	3501      	adds	r5, #1
 80019dc:	e7ee      	b.n	80019bc <__libc_init_array+0xc>
 80019de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019e2:	4798      	blx	r3
 80019e4:	3501      	adds	r5, #1
 80019e6:	e7f2      	b.n	80019ce <__libc_init_array+0x1e>
 80019e8:	08002350 	.word	0x08002350
 80019ec:	08002350 	.word	0x08002350
 80019f0:	08002350 	.word	0x08002350
 80019f4:	08002354 	.word	0x08002354

080019f8 <memset>:
 80019f8:	4402      	add	r2, r0
 80019fa:	4603      	mov	r3, r0
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d100      	bne.n	8001a02 <memset+0xa>
 8001a00:	4770      	bx	lr
 8001a02:	f803 1b01 	strb.w	r1, [r3], #1
 8001a06:	e7f9      	b.n	80019fc <memset+0x4>

08001a08 <_vsiprintf_r>:
 8001a08:	b510      	push	{r4, lr}
 8001a0a:	b09a      	sub	sp, #104	; 0x68
 8001a0c:	f44f 7402 	mov.w	r4, #520	; 0x208
 8001a10:	9100      	str	r1, [sp, #0]
 8001a12:	9104      	str	r1, [sp, #16]
 8001a14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001a18:	9102      	str	r1, [sp, #8]
 8001a1a:	9105      	str	r1, [sp, #20]
 8001a1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a20:	f8ad 100e 	strh.w	r1, [sp, #14]
 8001a24:	4669      	mov	r1, sp
 8001a26:	f8ad 400c 	strh.w	r4, [sp, #12]
 8001a2a:	f000 f86b 	bl	8001b04 <_svfiprintf_r>
 8001a2e:	9b00      	ldr	r3, [sp, #0]
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
 8001a34:	b01a      	add	sp, #104	; 0x68
 8001a36:	bd10      	pop	{r4, pc}

08001a38 <vsiprintf>:
 8001a38:	4613      	mov	r3, r2
 8001a3a:	460a      	mov	r2, r1
 8001a3c:	4601      	mov	r1, r0
 8001a3e:	4802      	ldr	r0, [pc, #8]	; (8001a48 <vsiprintf+0x10>)
 8001a40:	6800      	ldr	r0, [r0, #0]
 8001a42:	f7ff bfe1 	b.w	8001a08 <_vsiprintf_r>
 8001a46:	bf00      	nop
 8001a48:	20000010 	.word	0x20000010

08001a4c <__ssputs_r>:
 8001a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a50:	688e      	ldr	r6, [r1, #8]
 8001a52:	429e      	cmp	r6, r3
 8001a54:	4682      	mov	sl, r0
 8001a56:	460c      	mov	r4, r1
 8001a58:	4691      	mov	r9, r2
 8001a5a:	4698      	mov	r8, r3
 8001a5c:	d835      	bhi.n	8001aca <__ssputs_r+0x7e>
 8001a5e:	898a      	ldrh	r2, [r1, #12]
 8001a60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001a64:	d031      	beq.n	8001aca <__ssputs_r+0x7e>
 8001a66:	6825      	ldr	r5, [r4, #0]
 8001a68:	6909      	ldr	r1, [r1, #16]
 8001a6a:	1a6f      	subs	r7, r5, r1
 8001a6c:	6965      	ldr	r5, [r4, #20]
 8001a6e:	2302      	movs	r3, #2
 8001a70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001a74:	fb95 f5f3 	sdiv	r5, r5, r3
 8001a78:	f108 0301 	add.w	r3, r8, #1
 8001a7c:	443b      	add	r3, r7
 8001a7e:	429d      	cmp	r5, r3
 8001a80:	bf38      	it	cc
 8001a82:	461d      	movcc	r5, r3
 8001a84:	0553      	lsls	r3, r2, #21
 8001a86:	d531      	bpl.n	8001aec <__ssputs_r+0xa0>
 8001a88:	4629      	mov	r1, r5
 8001a8a:	f000 fb39 	bl	8002100 <_malloc_r>
 8001a8e:	4606      	mov	r6, r0
 8001a90:	b950      	cbnz	r0, 8001aa8 <__ssputs_r+0x5c>
 8001a92:	230c      	movs	r3, #12
 8001a94:	f8ca 3000 	str.w	r3, [sl]
 8001a98:	89a3      	ldrh	r3, [r4, #12]
 8001a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a9e:	81a3      	strh	r3, [r4, #12]
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001aa8:	463a      	mov	r2, r7
 8001aaa:	6921      	ldr	r1, [r4, #16]
 8001aac:	f000 fab4 	bl	8002018 <memcpy>
 8001ab0:	89a3      	ldrh	r3, [r4, #12]
 8001ab2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aba:	81a3      	strh	r3, [r4, #12]
 8001abc:	6126      	str	r6, [r4, #16]
 8001abe:	6165      	str	r5, [r4, #20]
 8001ac0:	443e      	add	r6, r7
 8001ac2:	1bed      	subs	r5, r5, r7
 8001ac4:	6026      	str	r6, [r4, #0]
 8001ac6:	60a5      	str	r5, [r4, #8]
 8001ac8:	4646      	mov	r6, r8
 8001aca:	4546      	cmp	r6, r8
 8001acc:	bf28      	it	cs
 8001ace:	4646      	movcs	r6, r8
 8001ad0:	4632      	mov	r2, r6
 8001ad2:	4649      	mov	r1, r9
 8001ad4:	6820      	ldr	r0, [r4, #0]
 8001ad6:	f000 faaa 	bl	800202e <memmove>
 8001ada:	68a3      	ldr	r3, [r4, #8]
 8001adc:	1b9b      	subs	r3, r3, r6
 8001ade:	60a3      	str	r3, [r4, #8]
 8001ae0:	6823      	ldr	r3, [r4, #0]
 8001ae2:	441e      	add	r6, r3
 8001ae4:	6026      	str	r6, [r4, #0]
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001aec:	462a      	mov	r2, r5
 8001aee:	f000 fb65 	bl	80021bc <_realloc_r>
 8001af2:	4606      	mov	r6, r0
 8001af4:	2800      	cmp	r0, #0
 8001af6:	d1e1      	bne.n	8001abc <__ssputs_r+0x70>
 8001af8:	6921      	ldr	r1, [r4, #16]
 8001afa:	4650      	mov	r0, sl
 8001afc:	f000 fab2 	bl	8002064 <_free_r>
 8001b00:	e7c7      	b.n	8001a92 <__ssputs_r+0x46>
	...

08001b04 <_svfiprintf_r>:
 8001b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b08:	b09d      	sub	sp, #116	; 0x74
 8001b0a:	4680      	mov	r8, r0
 8001b0c:	9303      	str	r3, [sp, #12]
 8001b0e:	898b      	ldrh	r3, [r1, #12]
 8001b10:	061c      	lsls	r4, r3, #24
 8001b12:	460d      	mov	r5, r1
 8001b14:	4616      	mov	r6, r2
 8001b16:	d50f      	bpl.n	8001b38 <_svfiprintf_r+0x34>
 8001b18:	690b      	ldr	r3, [r1, #16]
 8001b1a:	b96b      	cbnz	r3, 8001b38 <_svfiprintf_r+0x34>
 8001b1c:	2140      	movs	r1, #64	; 0x40
 8001b1e:	f000 faef 	bl	8002100 <_malloc_r>
 8001b22:	6028      	str	r0, [r5, #0]
 8001b24:	6128      	str	r0, [r5, #16]
 8001b26:	b928      	cbnz	r0, 8001b34 <_svfiprintf_r+0x30>
 8001b28:	230c      	movs	r3, #12
 8001b2a:	f8c8 3000 	str.w	r3, [r8]
 8001b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b32:	e0c5      	b.n	8001cc0 <_svfiprintf_r+0x1bc>
 8001b34:	2340      	movs	r3, #64	; 0x40
 8001b36:	616b      	str	r3, [r5, #20]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8001b3c:	2320      	movs	r3, #32
 8001b3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b42:	2330      	movs	r3, #48	; 0x30
 8001b44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001b48:	f04f 0b01 	mov.w	fp, #1
 8001b4c:	4637      	mov	r7, r6
 8001b4e:	463c      	mov	r4, r7
 8001b50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d13c      	bne.n	8001bd2 <_svfiprintf_r+0xce>
 8001b58:	ebb7 0a06 	subs.w	sl, r7, r6
 8001b5c:	d00b      	beq.n	8001b76 <_svfiprintf_r+0x72>
 8001b5e:	4653      	mov	r3, sl
 8001b60:	4632      	mov	r2, r6
 8001b62:	4629      	mov	r1, r5
 8001b64:	4640      	mov	r0, r8
 8001b66:	f7ff ff71 	bl	8001a4c <__ssputs_r>
 8001b6a:	3001      	adds	r0, #1
 8001b6c:	f000 80a3 	beq.w	8001cb6 <_svfiprintf_r+0x1b2>
 8001b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b72:	4453      	add	r3, sl
 8001b74:	9309      	str	r3, [sp, #36]	; 0x24
 8001b76:	783b      	ldrb	r3, [r7, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 809c 	beq.w	8001cb6 <_svfiprintf_r+0x1b2>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f04f 32ff 	mov.w	r2, #4294967295
 8001b84:	9304      	str	r3, [sp, #16]
 8001b86:	9307      	str	r3, [sp, #28]
 8001b88:	9205      	str	r2, [sp, #20]
 8001b8a:	9306      	str	r3, [sp, #24]
 8001b8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001b90:	931a      	str	r3, [sp, #104]	; 0x68
 8001b92:	2205      	movs	r2, #5
 8001b94:	7821      	ldrb	r1, [r4, #0]
 8001b96:	4850      	ldr	r0, [pc, #320]	; (8001cd8 <_svfiprintf_r+0x1d4>)
 8001b98:	f7fe fb2a 	bl	80001f0 <memchr>
 8001b9c:	1c67      	adds	r7, r4, #1
 8001b9e:	9b04      	ldr	r3, [sp, #16]
 8001ba0:	b9d8      	cbnz	r0, 8001bda <_svfiprintf_r+0xd6>
 8001ba2:	06d9      	lsls	r1, r3, #27
 8001ba4:	bf44      	itt	mi
 8001ba6:	2220      	movmi	r2, #32
 8001ba8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001bac:	071a      	lsls	r2, r3, #28
 8001bae:	bf44      	itt	mi
 8001bb0:	222b      	movmi	r2, #43	; 0x2b
 8001bb2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001bb6:	7822      	ldrb	r2, [r4, #0]
 8001bb8:	2a2a      	cmp	r2, #42	; 0x2a
 8001bba:	d016      	beq.n	8001bea <_svfiprintf_r+0xe6>
 8001bbc:	9a07      	ldr	r2, [sp, #28]
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	200a      	movs	r0, #10
 8001bc2:	4627      	mov	r7, r4
 8001bc4:	3401      	adds	r4, #1
 8001bc6:	783b      	ldrb	r3, [r7, #0]
 8001bc8:	3b30      	subs	r3, #48	; 0x30
 8001bca:	2b09      	cmp	r3, #9
 8001bcc:	d951      	bls.n	8001c72 <_svfiprintf_r+0x16e>
 8001bce:	b1c9      	cbz	r1, 8001c04 <_svfiprintf_r+0x100>
 8001bd0:	e011      	b.n	8001bf6 <_svfiprintf_r+0xf2>
 8001bd2:	2b25      	cmp	r3, #37	; 0x25
 8001bd4:	d0c0      	beq.n	8001b58 <_svfiprintf_r+0x54>
 8001bd6:	4627      	mov	r7, r4
 8001bd8:	e7b9      	b.n	8001b4e <_svfiprintf_r+0x4a>
 8001bda:	4a3f      	ldr	r2, [pc, #252]	; (8001cd8 <_svfiprintf_r+0x1d4>)
 8001bdc:	1a80      	subs	r0, r0, r2
 8001bde:	fa0b f000 	lsl.w	r0, fp, r0
 8001be2:	4318      	orrs	r0, r3
 8001be4:	9004      	str	r0, [sp, #16]
 8001be6:	463c      	mov	r4, r7
 8001be8:	e7d3      	b.n	8001b92 <_svfiprintf_r+0x8e>
 8001bea:	9a03      	ldr	r2, [sp, #12]
 8001bec:	1d11      	adds	r1, r2, #4
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	9103      	str	r1, [sp, #12]
 8001bf2:	2a00      	cmp	r2, #0
 8001bf4:	db01      	blt.n	8001bfa <_svfiprintf_r+0xf6>
 8001bf6:	9207      	str	r2, [sp, #28]
 8001bf8:	e004      	b.n	8001c04 <_svfiprintf_r+0x100>
 8001bfa:	4252      	negs	r2, r2
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	9207      	str	r2, [sp, #28]
 8001c02:	9304      	str	r3, [sp, #16]
 8001c04:	783b      	ldrb	r3, [r7, #0]
 8001c06:	2b2e      	cmp	r3, #46	; 0x2e
 8001c08:	d10e      	bne.n	8001c28 <_svfiprintf_r+0x124>
 8001c0a:	787b      	ldrb	r3, [r7, #1]
 8001c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8001c0e:	f107 0101 	add.w	r1, r7, #1
 8001c12:	d132      	bne.n	8001c7a <_svfiprintf_r+0x176>
 8001c14:	9b03      	ldr	r3, [sp, #12]
 8001c16:	1d1a      	adds	r2, r3, #4
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	9203      	str	r2, [sp, #12]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bfb8      	it	lt
 8001c20:	f04f 33ff 	movlt.w	r3, #4294967295
 8001c24:	3702      	adds	r7, #2
 8001c26:	9305      	str	r3, [sp, #20]
 8001c28:	4c2c      	ldr	r4, [pc, #176]	; (8001cdc <_svfiprintf_r+0x1d8>)
 8001c2a:	7839      	ldrb	r1, [r7, #0]
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	4620      	mov	r0, r4
 8001c30:	f7fe fade 	bl	80001f0 <memchr>
 8001c34:	b138      	cbz	r0, 8001c46 <_svfiprintf_r+0x142>
 8001c36:	2340      	movs	r3, #64	; 0x40
 8001c38:	1b00      	subs	r0, r0, r4
 8001c3a:	fa03 f000 	lsl.w	r0, r3, r0
 8001c3e:	9b04      	ldr	r3, [sp, #16]
 8001c40:	4303      	orrs	r3, r0
 8001c42:	9304      	str	r3, [sp, #16]
 8001c44:	3701      	adds	r7, #1
 8001c46:	7839      	ldrb	r1, [r7, #0]
 8001c48:	4825      	ldr	r0, [pc, #148]	; (8001ce0 <_svfiprintf_r+0x1dc>)
 8001c4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001c4e:	2206      	movs	r2, #6
 8001c50:	1c7e      	adds	r6, r7, #1
 8001c52:	f7fe facd 	bl	80001f0 <memchr>
 8001c56:	2800      	cmp	r0, #0
 8001c58:	d035      	beq.n	8001cc6 <_svfiprintf_r+0x1c2>
 8001c5a:	4b22      	ldr	r3, [pc, #136]	; (8001ce4 <_svfiprintf_r+0x1e0>)
 8001c5c:	b9fb      	cbnz	r3, 8001c9e <_svfiprintf_r+0x19a>
 8001c5e:	9b03      	ldr	r3, [sp, #12]
 8001c60:	3307      	adds	r3, #7
 8001c62:	f023 0307 	bic.w	r3, r3, #7
 8001c66:	3308      	adds	r3, #8
 8001c68:	9303      	str	r3, [sp, #12]
 8001c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c6c:	444b      	add	r3, r9
 8001c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8001c70:	e76c      	b.n	8001b4c <_svfiprintf_r+0x48>
 8001c72:	fb00 3202 	mla	r2, r0, r2, r3
 8001c76:	2101      	movs	r1, #1
 8001c78:	e7a3      	b.n	8001bc2 <_svfiprintf_r+0xbe>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	9305      	str	r3, [sp, #20]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	240a      	movs	r4, #10
 8001c82:	460f      	mov	r7, r1
 8001c84:	3101      	adds	r1, #1
 8001c86:	783a      	ldrb	r2, [r7, #0]
 8001c88:	3a30      	subs	r2, #48	; 0x30
 8001c8a:	2a09      	cmp	r2, #9
 8001c8c:	d903      	bls.n	8001c96 <_svfiprintf_r+0x192>
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0ca      	beq.n	8001c28 <_svfiprintf_r+0x124>
 8001c92:	9005      	str	r0, [sp, #20]
 8001c94:	e7c8      	b.n	8001c28 <_svfiprintf_r+0x124>
 8001c96:	fb04 2000 	mla	r0, r4, r0, r2
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e7f1      	b.n	8001c82 <_svfiprintf_r+0x17e>
 8001c9e:	ab03      	add	r3, sp, #12
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	462a      	mov	r2, r5
 8001ca4:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <_svfiprintf_r+0x1e4>)
 8001ca6:	a904      	add	r1, sp, #16
 8001ca8:	4640      	mov	r0, r8
 8001caa:	f3af 8000 	nop.w
 8001cae:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001cb2:	4681      	mov	r9, r0
 8001cb4:	d1d9      	bne.n	8001c6a <_svfiprintf_r+0x166>
 8001cb6:	89ab      	ldrh	r3, [r5, #12]
 8001cb8:	065b      	lsls	r3, r3, #25
 8001cba:	f53f af38 	bmi.w	8001b2e <_svfiprintf_r+0x2a>
 8001cbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001cc0:	b01d      	add	sp, #116	; 0x74
 8001cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cc6:	ab03      	add	r3, sp, #12
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	462a      	mov	r2, r5
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <_svfiprintf_r+0x1e4>)
 8001cce:	a904      	add	r1, sp, #16
 8001cd0:	4640      	mov	r0, r8
 8001cd2:	f000 f881 	bl	8001dd8 <_printf_i>
 8001cd6:	e7ea      	b.n	8001cae <_svfiprintf_r+0x1aa>
 8001cd8:	0800231b 	.word	0x0800231b
 8001cdc:	08002321 	.word	0x08002321
 8001ce0:	08002325 	.word	0x08002325
 8001ce4:	00000000 	.word	0x00000000
 8001ce8:	08001a4d 	.word	0x08001a4d

08001cec <_printf_common>:
 8001cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cf0:	4691      	mov	r9, r2
 8001cf2:	461f      	mov	r7, r3
 8001cf4:	688a      	ldr	r2, [r1, #8]
 8001cf6:	690b      	ldr	r3, [r1, #16]
 8001cf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	bfb8      	it	lt
 8001d00:	4613      	movlt	r3, r2
 8001d02:	f8c9 3000 	str.w	r3, [r9]
 8001d06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001d0a:	4606      	mov	r6, r0
 8001d0c:	460c      	mov	r4, r1
 8001d0e:	b112      	cbz	r2, 8001d16 <_printf_common+0x2a>
 8001d10:	3301      	adds	r3, #1
 8001d12:	f8c9 3000 	str.w	r3, [r9]
 8001d16:	6823      	ldr	r3, [r4, #0]
 8001d18:	0699      	lsls	r1, r3, #26
 8001d1a:	bf42      	ittt	mi
 8001d1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001d20:	3302      	addmi	r3, #2
 8001d22:	f8c9 3000 	strmi.w	r3, [r9]
 8001d26:	6825      	ldr	r5, [r4, #0]
 8001d28:	f015 0506 	ands.w	r5, r5, #6
 8001d2c:	d107      	bne.n	8001d3e <_printf_common+0x52>
 8001d2e:	f104 0a19 	add.w	sl, r4, #25
 8001d32:	68e3      	ldr	r3, [r4, #12]
 8001d34:	f8d9 2000 	ldr.w	r2, [r9]
 8001d38:	1a9b      	subs	r3, r3, r2
 8001d3a:	429d      	cmp	r5, r3
 8001d3c:	db29      	blt.n	8001d92 <_printf_common+0xa6>
 8001d3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001d42:	6822      	ldr	r2, [r4, #0]
 8001d44:	3300      	adds	r3, #0
 8001d46:	bf18      	it	ne
 8001d48:	2301      	movne	r3, #1
 8001d4a:	0692      	lsls	r2, r2, #26
 8001d4c:	d42e      	bmi.n	8001dac <_printf_common+0xc0>
 8001d4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001d52:	4639      	mov	r1, r7
 8001d54:	4630      	mov	r0, r6
 8001d56:	47c0      	blx	r8
 8001d58:	3001      	adds	r0, #1
 8001d5a:	d021      	beq.n	8001da0 <_printf_common+0xb4>
 8001d5c:	6823      	ldr	r3, [r4, #0]
 8001d5e:	68e5      	ldr	r5, [r4, #12]
 8001d60:	f8d9 2000 	ldr.w	r2, [r9]
 8001d64:	f003 0306 	and.w	r3, r3, #6
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	bf08      	it	eq
 8001d6c:	1aad      	subeq	r5, r5, r2
 8001d6e:	68a3      	ldr	r3, [r4, #8]
 8001d70:	6922      	ldr	r2, [r4, #16]
 8001d72:	bf0c      	ite	eq
 8001d74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d78:	2500      	movne	r5, #0
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	bfc4      	itt	gt
 8001d7e:	1a9b      	subgt	r3, r3, r2
 8001d80:	18ed      	addgt	r5, r5, r3
 8001d82:	f04f 0900 	mov.w	r9, #0
 8001d86:	341a      	adds	r4, #26
 8001d88:	454d      	cmp	r5, r9
 8001d8a:	d11b      	bne.n	8001dc4 <_printf_common+0xd8>
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d92:	2301      	movs	r3, #1
 8001d94:	4652      	mov	r2, sl
 8001d96:	4639      	mov	r1, r7
 8001d98:	4630      	mov	r0, r6
 8001d9a:	47c0      	blx	r8
 8001d9c:	3001      	adds	r0, #1
 8001d9e:	d103      	bne.n	8001da8 <_printf_common+0xbc>
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001da8:	3501      	adds	r5, #1
 8001daa:	e7c2      	b.n	8001d32 <_printf_common+0x46>
 8001dac:	18e1      	adds	r1, r4, r3
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	2030      	movs	r0, #48	; 0x30
 8001db2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001db6:	4422      	add	r2, r4
 8001db8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001dbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	e7c4      	b.n	8001d4e <_printf_common+0x62>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	4622      	mov	r2, r4
 8001dc8:	4639      	mov	r1, r7
 8001dca:	4630      	mov	r0, r6
 8001dcc:	47c0      	blx	r8
 8001dce:	3001      	adds	r0, #1
 8001dd0:	d0e6      	beq.n	8001da0 <_printf_common+0xb4>
 8001dd2:	f109 0901 	add.w	r9, r9, #1
 8001dd6:	e7d7      	b.n	8001d88 <_printf_common+0x9c>

08001dd8 <_printf_i>:
 8001dd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ddc:	4617      	mov	r7, r2
 8001dde:	7e0a      	ldrb	r2, [r1, #24]
 8001de0:	b085      	sub	sp, #20
 8001de2:	2a6e      	cmp	r2, #110	; 0x6e
 8001de4:	4698      	mov	r8, r3
 8001de6:	4606      	mov	r6, r0
 8001de8:	460c      	mov	r4, r1
 8001dea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001dec:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001df0:	f000 80bc 	beq.w	8001f6c <_printf_i+0x194>
 8001df4:	d81a      	bhi.n	8001e2c <_printf_i+0x54>
 8001df6:	2a63      	cmp	r2, #99	; 0x63
 8001df8:	d02e      	beq.n	8001e58 <_printf_i+0x80>
 8001dfa:	d80a      	bhi.n	8001e12 <_printf_i+0x3a>
 8001dfc:	2a00      	cmp	r2, #0
 8001dfe:	f000 80c8 	beq.w	8001f92 <_printf_i+0x1ba>
 8001e02:	2a58      	cmp	r2, #88	; 0x58
 8001e04:	f000 808a 	beq.w	8001f1c <_printf_i+0x144>
 8001e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e0c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001e10:	e02a      	b.n	8001e68 <_printf_i+0x90>
 8001e12:	2a64      	cmp	r2, #100	; 0x64
 8001e14:	d001      	beq.n	8001e1a <_printf_i+0x42>
 8001e16:	2a69      	cmp	r2, #105	; 0x69
 8001e18:	d1f6      	bne.n	8001e08 <_printf_i+0x30>
 8001e1a:	6821      	ldr	r1, [r4, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001e22:	d023      	beq.n	8001e6c <_printf_i+0x94>
 8001e24:	1d11      	adds	r1, r2, #4
 8001e26:	6019      	str	r1, [r3, #0]
 8001e28:	6813      	ldr	r3, [r2, #0]
 8001e2a:	e027      	b.n	8001e7c <_printf_i+0xa4>
 8001e2c:	2a73      	cmp	r2, #115	; 0x73
 8001e2e:	f000 80b4 	beq.w	8001f9a <_printf_i+0x1c2>
 8001e32:	d808      	bhi.n	8001e46 <_printf_i+0x6e>
 8001e34:	2a6f      	cmp	r2, #111	; 0x6f
 8001e36:	d02a      	beq.n	8001e8e <_printf_i+0xb6>
 8001e38:	2a70      	cmp	r2, #112	; 0x70
 8001e3a:	d1e5      	bne.n	8001e08 <_printf_i+0x30>
 8001e3c:	680a      	ldr	r2, [r1, #0]
 8001e3e:	f042 0220 	orr.w	r2, r2, #32
 8001e42:	600a      	str	r2, [r1, #0]
 8001e44:	e003      	b.n	8001e4e <_printf_i+0x76>
 8001e46:	2a75      	cmp	r2, #117	; 0x75
 8001e48:	d021      	beq.n	8001e8e <_printf_i+0xb6>
 8001e4a:	2a78      	cmp	r2, #120	; 0x78
 8001e4c:	d1dc      	bne.n	8001e08 <_printf_i+0x30>
 8001e4e:	2278      	movs	r2, #120	; 0x78
 8001e50:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001e54:	496e      	ldr	r1, [pc, #440]	; (8002010 <_printf_i+0x238>)
 8001e56:	e064      	b.n	8001f22 <_printf_i+0x14a>
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001e5e:	1d11      	adds	r1, r2, #4
 8001e60:	6019      	str	r1, [r3, #0]
 8001e62:	6813      	ldr	r3, [r2, #0]
 8001e64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0a3      	b.n	8001fb4 <_printf_i+0x1dc>
 8001e6c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001e70:	f102 0104 	add.w	r1, r2, #4
 8001e74:	6019      	str	r1, [r3, #0]
 8001e76:	d0d7      	beq.n	8001e28 <_printf_i+0x50>
 8001e78:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	da03      	bge.n	8001e88 <_printf_i+0xb0>
 8001e80:	222d      	movs	r2, #45	; 0x2d
 8001e82:	425b      	negs	r3, r3
 8001e84:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001e88:	4962      	ldr	r1, [pc, #392]	; (8002014 <_printf_i+0x23c>)
 8001e8a:	220a      	movs	r2, #10
 8001e8c:	e017      	b.n	8001ebe <_printf_i+0xe6>
 8001e8e:	6820      	ldr	r0, [r4, #0]
 8001e90:	6819      	ldr	r1, [r3, #0]
 8001e92:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001e96:	d003      	beq.n	8001ea0 <_printf_i+0xc8>
 8001e98:	1d08      	adds	r0, r1, #4
 8001e9a:	6018      	str	r0, [r3, #0]
 8001e9c:	680b      	ldr	r3, [r1, #0]
 8001e9e:	e006      	b.n	8001eae <_printf_i+0xd6>
 8001ea0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001ea4:	f101 0004 	add.w	r0, r1, #4
 8001ea8:	6018      	str	r0, [r3, #0]
 8001eaa:	d0f7      	beq.n	8001e9c <_printf_i+0xc4>
 8001eac:	880b      	ldrh	r3, [r1, #0]
 8001eae:	4959      	ldr	r1, [pc, #356]	; (8002014 <_printf_i+0x23c>)
 8001eb0:	2a6f      	cmp	r2, #111	; 0x6f
 8001eb2:	bf14      	ite	ne
 8001eb4:	220a      	movne	r2, #10
 8001eb6:	2208      	moveq	r2, #8
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001ebe:	6865      	ldr	r5, [r4, #4]
 8001ec0:	60a5      	str	r5, [r4, #8]
 8001ec2:	2d00      	cmp	r5, #0
 8001ec4:	f2c0 809c 	blt.w	8002000 <_printf_i+0x228>
 8001ec8:	6820      	ldr	r0, [r4, #0]
 8001eca:	f020 0004 	bic.w	r0, r0, #4
 8001ece:	6020      	str	r0, [r4, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d13f      	bne.n	8001f54 <_printf_i+0x17c>
 8001ed4:	2d00      	cmp	r5, #0
 8001ed6:	f040 8095 	bne.w	8002004 <_printf_i+0x22c>
 8001eda:	4675      	mov	r5, lr
 8001edc:	2a08      	cmp	r2, #8
 8001ede:	d10b      	bne.n	8001ef8 <_printf_i+0x120>
 8001ee0:	6823      	ldr	r3, [r4, #0]
 8001ee2:	07da      	lsls	r2, r3, #31
 8001ee4:	d508      	bpl.n	8001ef8 <_printf_i+0x120>
 8001ee6:	6923      	ldr	r3, [r4, #16]
 8001ee8:	6862      	ldr	r2, [r4, #4]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	bfde      	ittt	le
 8001eee:	2330      	movle	r3, #48	; 0x30
 8001ef0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001ef4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001ef8:	ebae 0305 	sub.w	r3, lr, r5
 8001efc:	6123      	str	r3, [r4, #16]
 8001efe:	f8cd 8000 	str.w	r8, [sp]
 8001f02:	463b      	mov	r3, r7
 8001f04:	aa03      	add	r2, sp, #12
 8001f06:	4621      	mov	r1, r4
 8001f08:	4630      	mov	r0, r6
 8001f0a:	f7ff feef 	bl	8001cec <_printf_common>
 8001f0e:	3001      	adds	r0, #1
 8001f10:	d155      	bne.n	8001fbe <_printf_i+0x1e6>
 8001f12:	f04f 30ff 	mov.w	r0, #4294967295
 8001f16:	b005      	add	sp, #20
 8001f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f1c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001f20:	493c      	ldr	r1, [pc, #240]	; (8002014 <_printf_i+0x23c>)
 8001f22:	6822      	ldr	r2, [r4, #0]
 8001f24:	6818      	ldr	r0, [r3, #0]
 8001f26:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001f2a:	f100 0504 	add.w	r5, r0, #4
 8001f2e:	601d      	str	r5, [r3, #0]
 8001f30:	d001      	beq.n	8001f36 <_printf_i+0x15e>
 8001f32:	6803      	ldr	r3, [r0, #0]
 8001f34:	e002      	b.n	8001f3c <_printf_i+0x164>
 8001f36:	0655      	lsls	r5, r2, #25
 8001f38:	d5fb      	bpl.n	8001f32 <_printf_i+0x15a>
 8001f3a:	8803      	ldrh	r3, [r0, #0]
 8001f3c:	07d0      	lsls	r0, r2, #31
 8001f3e:	bf44      	itt	mi
 8001f40:	f042 0220 	orrmi.w	r2, r2, #32
 8001f44:	6022      	strmi	r2, [r4, #0]
 8001f46:	b91b      	cbnz	r3, 8001f50 <_printf_i+0x178>
 8001f48:	6822      	ldr	r2, [r4, #0]
 8001f4a:	f022 0220 	bic.w	r2, r2, #32
 8001f4e:	6022      	str	r2, [r4, #0]
 8001f50:	2210      	movs	r2, #16
 8001f52:	e7b1      	b.n	8001eb8 <_printf_i+0xe0>
 8001f54:	4675      	mov	r5, lr
 8001f56:	fbb3 f0f2 	udiv	r0, r3, r2
 8001f5a:	fb02 3310 	mls	r3, r2, r0, r3
 8001f5e:	5ccb      	ldrb	r3, [r1, r3]
 8001f60:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001f64:	4603      	mov	r3, r0
 8001f66:	2800      	cmp	r0, #0
 8001f68:	d1f5      	bne.n	8001f56 <_printf_i+0x17e>
 8001f6a:	e7b7      	b.n	8001edc <_printf_i+0x104>
 8001f6c:	6808      	ldr	r0, [r1, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	6949      	ldr	r1, [r1, #20]
 8001f72:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001f76:	d004      	beq.n	8001f82 <_printf_i+0x1aa>
 8001f78:	1d10      	adds	r0, r2, #4
 8001f7a:	6018      	str	r0, [r3, #0]
 8001f7c:	6813      	ldr	r3, [r2, #0]
 8001f7e:	6019      	str	r1, [r3, #0]
 8001f80:	e007      	b.n	8001f92 <_printf_i+0x1ba>
 8001f82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001f86:	f102 0004 	add.w	r0, r2, #4
 8001f8a:	6018      	str	r0, [r3, #0]
 8001f8c:	6813      	ldr	r3, [r2, #0]
 8001f8e:	d0f6      	beq.n	8001f7e <_printf_i+0x1a6>
 8001f90:	8019      	strh	r1, [r3, #0]
 8001f92:	2300      	movs	r3, #0
 8001f94:	6123      	str	r3, [r4, #16]
 8001f96:	4675      	mov	r5, lr
 8001f98:	e7b1      	b.n	8001efe <_printf_i+0x126>
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	1d11      	adds	r1, r2, #4
 8001f9e:	6019      	str	r1, [r3, #0]
 8001fa0:	6815      	ldr	r5, [r2, #0]
 8001fa2:	6862      	ldr	r2, [r4, #4]
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4628      	mov	r0, r5
 8001fa8:	f7fe f922 	bl	80001f0 <memchr>
 8001fac:	b108      	cbz	r0, 8001fb2 <_printf_i+0x1da>
 8001fae:	1b40      	subs	r0, r0, r5
 8001fb0:	6060      	str	r0, [r4, #4]
 8001fb2:	6863      	ldr	r3, [r4, #4]
 8001fb4:	6123      	str	r3, [r4, #16]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001fbc:	e79f      	b.n	8001efe <_printf_i+0x126>
 8001fbe:	6923      	ldr	r3, [r4, #16]
 8001fc0:	462a      	mov	r2, r5
 8001fc2:	4639      	mov	r1, r7
 8001fc4:	4630      	mov	r0, r6
 8001fc6:	47c0      	blx	r8
 8001fc8:	3001      	adds	r0, #1
 8001fca:	d0a2      	beq.n	8001f12 <_printf_i+0x13a>
 8001fcc:	6823      	ldr	r3, [r4, #0]
 8001fce:	079b      	lsls	r3, r3, #30
 8001fd0:	d507      	bpl.n	8001fe2 <_printf_i+0x20a>
 8001fd2:	2500      	movs	r5, #0
 8001fd4:	f104 0919 	add.w	r9, r4, #25
 8001fd8:	68e3      	ldr	r3, [r4, #12]
 8001fda:	9a03      	ldr	r2, [sp, #12]
 8001fdc:	1a9b      	subs	r3, r3, r2
 8001fde:	429d      	cmp	r5, r3
 8001fe0:	db05      	blt.n	8001fee <_printf_i+0x216>
 8001fe2:	68e0      	ldr	r0, [r4, #12]
 8001fe4:	9b03      	ldr	r3, [sp, #12]
 8001fe6:	4298      	cmp	r0, r3
 8001fe8:	bfb8      	it	lt
 8001fea:	4618      	movlt	r0, r3
 8001fec:	e793      	b.n	8001f16 <_printf_i+0x13e>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	464a      	mov	r2, r9
 8001ff2:	4639      	mov	r1, r7
 8001ff4:	4630      	mov	r0, r6
 8001ff6:	47c0      	blx	r8
 8001ff8:	3001      	adds	r0, #1
 8001ffa:	d08a      	beq.n	8001f12 <_printf_i+0x13a>
 8001ffc:	3501      	adds	r5, #1
 8001ffe:	e7eb      	b.n	8001fd8 <_printf_i+0x200>
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1a7      	bne.n	8001f54 <_printf_i+0x17c>
 8002004:	780b      	ldrb	r3, [r1, #0]
 8002006:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800200a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800200e:	e765      	b.n	8001edc <_printf_i+0x104>
 8002010:	0800233d 	.word	0x0800233d
 8002014:	0800232c 	.word	0x0800232c

08002018 <memcpy>:
 8002018:	b510      	push	{r4, lr}
 800201a:	1e43      	subs	r3, r0, #1
 800201c:	440a      	add	r2, r1
 800201e:	4291      	cmp	r1, r2
 8002020:	d100      	bne.n	8002024 <memcpy+0xc>
 8002022:	bd10      	pop	{r4, pc}
 8002024:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002028:	f803 4f01 	strb.w	r4, [r3, #1]!
 800202c:	e7f7      	b.n	800201e <memcpy+0x6>

0800202e <memmove>:
 800202e:	4288      	cmp	r0, r1
 8002030:	b510      	push	{r4, lr}
 8002032:	eb01 0302 	add.w	r3, r1, r2
 8002036:	d803      	bhi.n	8002040 <memmove+0x12>
 8002038:	1e42      	subs	r2, r0, #1
 800203a:	4299      	cmp	r1, r3
 800203c:	d10c      	bne.n	8002058 <memmove+0x2a>
 800203e:	bd10      	pop	{r4, pc}
 8002040:	4298      	cmp	r0, r3
 8002042:	d2f9      	bcs.n	8002038 <memmove+0xa>
 8002044:	1881      	adds	r1, r0, r2
 8002046:	1ad2      	subs	r2, r2, r3
 8002048:	42d3      	cmn	r3, r2
 800204a:	d100      	bne.n	800204e <memmove+0x20>
 800204c:	bd10      	pop	{r4, pc}
 800204e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002052:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002056:	e7f7      	b.n	8002048 <memmove+0x1a>
 8002058:	f811 4b01 	ldrb.w	r4, [r1], #1
 800205c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002060:	e7eb      	b.n	800203a <memmove+0xc>
	...

08002064 <_free_r>:
 8002064:	b538      	push	{r3, r4, r5, lr}
 8002066:	4605      	mov	r5, r0
 8002068:	2900      	cmp	r1, #0
 800206a:	d045      	beq.n	80020f8 <_free_r+0x94>
 800206c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002070:	1f0c      	subs	r4, r1, #4
 8002072:	2b00      	cmp	r3, #0
 8002074:	bfb8      	it	lt
 8002076:	18e4      	addlt	r4, r4, r3
 8002078:	f000 f8d6 	bl	8002228 <__malloc_lock>
 800207c:	4a1f      	ldr	r2, [pc, #124]	; (80020fc <_free_r+0x98>)
 800207e:	6813      	ldr	r3, [r2, #0]
 8002080:	4610      	mov	r0, r2
 8002082:	b933      	cbnz	r3, 8002092 <_free_r+0x2e>
 8002084:	6063      	str	r3, [r4, #4]
 8002086:	6014      	str	r4, [r2, #0]
 8002088:	4628      	mov	r0, r5
 800208a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800208e:	f000 b8cc 	b.w	800222a <__malloc_unlock>
 8002092:	42a3      	cmp	r3, r4
 8002094:	d90c      	bls.n	80020b0 <_free_r+0x4c>
 8002096:	6821      	ldr	r1, [r4, #0]
 8002098:	1862      	adds	r2, r4, r1
 800209a:	4293      	cmp	r3, r2
 800209c:	bf04      	itt	eq
 800209e:	681a      	ldreq	r2, [r3, #0]
 80020a0:	685b      	ldreq	r3, [r3, #4]
 80020a2:	6063      	str	r3, [r4, #4]
 80020a4:	bf04      	itt	eq
 80020a6:	1852      	addeq	r2, r2, r1
 80020a8:	6022      	streq	r2, [r4, #0]
 80020aa:	6004      	str	r4, [r0, #0]
 80020ac:	e7ec      	b.n	8002088 <_free_r+0x24>
 80020ae:	4613      	mov	r3, r2
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	b10a      	cbz	r2, 80020b8 <_free_r+0x54>
 80020b4:	42a2      	cmp	r2, r4
 80020b6:	d9fa      	bls.n	80020ae <_free_r+0x4a>
 80020b8:	6819      	ldr	r1, [r3, #0]
 80020ba:	1858      	adds	r0, r3, r1
 80020bc:	42a0      	cmp	r0, r4
 80020be:	d10b      	bne.n	80020d8 <_free_r+0x74>
 80020c0:	6820      	ldr	r0, [r4, #0]
 80020c2:	4401      	add	r1, r0
 80020c4:	1858      	adds	r0, r3, r1
 80020c6:	4282      	cmp	r2, r0
 80020c8:	6019      	str	r1, [r3, #0]
 80020ca:	d1dd      	bne.n	8002088 <_free_r+0x24>
 80020cc:	6810      	ldr	r0, [r2, #0]
 80020ce:	6852      	ldr	r2, [r2, #4]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	4401      	add	r1, r0
 80020d4:	6019      	str	r1, [r3, #0]
 80020d6:	e7d7      	b.n	8002088 <_free_r+0x24>
 80020d8:	d902      	bls.n	80020e0 <_free_r+0x7c>
 80020da:	230c      	movs	r3, #12
 80020dc:	602b      	str	r3, [r5, #0]
 80020de:	e7d3      	b.n	8002088 <_free_r+0x24>
 80020e0:	6820      	ldr	r0, [r4, #0]
 80020e2:	1821      	adds	r1, r4, r0
 80020e4:	428a      	cmp	r2, r1
 80020e6:	bf04      	itt	eq
 80020e8:	6811      	ldreq	r1, [r2, #0]
 80020ea:	6852      	ldreq	r2, [r2, #4]
 80020ec:	6062      	str	r2, [r4, #4]
 80020ee:	bf04      	itt	eq
 80020f0:	1809      	addeq	r1, r1, r0
 80020f2:	6021      	streq	r1, [r4, #0]
 80020f4:	605c      	str	r4, [r3, #4]
 80020f6:	e7c7      	b.n	8002088 <_free_r+0x24>
 80020f8:	bd38      	pop	{r3, r4, r5, pc}
 80020fa:	bf00      	nop
 80020fc:	2000009c 	.word	0x2000009c

08002100 <_malloc_r>:
 8002100:	b570      	push	{r4, r5, r6, lr}
 8002102:	1ccd      	adds	r5, r1, #3
 8002104:	f025 0503 	bic.w	r5, r5, #3
 8002108:	3508      	adds	r5, #8
 800210a:	2d0c      	cmp	r5, #12
 800210c:	bf38      	it	cc
 800210e:	250c      	movcc	r5, #12
 8002110:	2d00      	cmp	r5, #0
 8002112:	4606      	mov	r6, r0
 8002114:	db01      	blt.n	800211a <_malloc_r+0x1a>
 8002116:	42a9      	cmp	r1, r5
 8002118:	d903      	bls.n	8002122 <_malloc_r+0x22>
 800211a:	230c      	movs	r3, #12
 800211c:	6033      	str	r3, [r6, #0]
 800211e:	2000      	movs	r0, #0
 8002120:	bd70      	pop	{r4, r5, r6, pc}
 8002122:	f000 f881 	bl	8002228 <__malloc_lock>
 8002126:	4a23      	ldr	r2, [pc, #140]	; (80021b4 <_malloc_r+0xb4>)
 8002128:	6814      	ldr	r4, [r2, #0]
 800212a:	4621      	mov	r1, r4
 800212c:	b991      	cbnz	r1, 8002154 <_malloc_r+0x54>
 800212e:	4c22      	ldr	r4, [pc, #136]	; (80021b8 <_malloc_r+0xb8>)
 8002130:	6823      	ldr	r3, [r4, #0]
 8002132:	b91b      	cbnz	r3, 800213c <_malloc_r+0x3c>
 8002134:	4630      	mov	r0, r6
 8002136:	f000 f867 	bl	8002208 <_sbrk_r>
 800213a:	6020      	str	r0, [r4, #0]
 800213c:	4629      	mov	r1, r5
 800213e:	4630      	mov	r0, r6
 8002140:	f000 f862 	bl	8002208 <_sbrk_r>
 8002144:	1c43      	adds	r3, r0, #1
 8002146:	d126      	bne.n	8002196 <_malloc_r+0x96>
 8002148:	230c      	movs	r3, #12
 800214a:	6033      	str	r3, [r6, #0]
 800214c:	4630      	mov	r0, r6
 800214e:	f000 f86c 	bl	800222a <__malloc_unlock>
 8002152:	e7e4      	b.n	800211e <_malloc_r+0x1e>
 8002154:	680b      	ldr	r3, [r1, #0]
 8002156:	1b5b      	subs	r3, r3, r5
 8002158:	d41a      	bmi.n	8002190 <_malloc_r+0x90>
 800215a:	2b0b      	cmp	r3, #11
 800215c:	d90f      	bls.n	800217e <_malloc_r+0x7e>
 800215e:	600b      	str	r3, [r1, #0]
 8002160:	50cd      	str	r5, [r1, r3]
 8002162:	18cc      	adds	r4, r1, r3
 8002164:	4630      	mov	r0, r6
 8002166:	f000 f860 	bl	800222a <__malloc_unlock>
 800216a:	f104 000b 	add.w	r0, r4, #11
 800216e:	1d23      	adds	r3, r4, #4
 8002170:	f020 0007 	bic.w	r0, r0, #7
 8002174:	1ac3      	subs	r3, r0, r3
 8002176:	d01b      	beq.n	80021b0 <_malloc_r+0xb0>
 8002178:	425a      	negs	r2, r3
 800217a:	50e2      	str	r2, [r4, r3]
 800217c:	bd70      	pop	{r4, r5, r6, pc}
 800217e:	428c      	cmp	r4, r1
 8002180:	bf0d      	iteet	eq
 8002182:	6863      	ldreq	r3, [r4, #4]
 8002184:	684b      	ldrne	r3, [r1, #4]
 8002186:	6063      	strne	r3, [r4, #4]
 8002188:	6013      	streq	r3, [r2, #0]
 800218a:	bf18      	it	ne
 800218c:	460c      	movne	r4, r1
 800218e:	e7e9      	b.n	8002164 <_malloc_r+0x64>
 8002190:	460c      	mov	r4, r1
 8002192:	6849      	ldr	r1, [r1, #4]
 8002194:	e7ca      	b.n	800212c <_malloc_r+0x2c>
 8002196:	1cc4      	adds	r4, r0, #3
 8002198:	f024 0403 	bic.w	r4, r4, #3
 800219c:	42a0      	cmp	r0, r4
 800219e:	d005      	beq.n	80021ac <_malloc_r+0xac>
 80021a0:	1a21      	subs	r1, r4, r0
 80021a2:	4630      	mov	r0, r6
 80021a4:	f000 f830 	bl	8002208 <_sbrk_r>
 80021a8:	3001      	adds	r0, #1
 80021aa:	d0cd      	beq.n	8002148 <_malloc_r+0x48>
 80021ac:	6025      	str	r5, [r4, #0]
 80021ae:	e7d9      	b.n	8002164 <_malloc_r+0x64>
 80021b0:	bd70      	pop	{r4, r5, r6, pc}
 80021b2:	bf00      	nop
 80021b4:	2000009c 	.word	0x2000009c
 80021b8:	200000a0 	.word	0x200000a0

080021bc <_realloc_r>:
 80021bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021be:	4607      	mov	r7, r0
 80021c0:	4614      	mov	r4, r2
 80021c2:	460e      	mov	r6, r1
 80021c4:	b921      	cbnz	r1, 80021d0 <_realloc_r+0x14>
 80021c6:	4611      	mov	r1, r2
 80021c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80021cc:	f7ff bf98 	b.w	8002100 <_malloc_r>
 80021d0:	b922      	cbnz	r2, 80021dc <_realloc_r+0x20>
 80021d2:	f7ff ff47 	bl	8002064 <_free_r>
 80021d6:	4625      	mov	r5, r4
 80021d8:	4628      	mov	r0, r5
 80021da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021dc:	f000 f826 	bl	800222c <_malloc_usable_size_r>
 80021e0:	4284      	cmp	r4, r0
 80021e2:	d90f      	bls.n	8002204 <_realloc_r+0x48>
 80021e4:	4621      	mov	r1, r4
 80021e6:	4638      	mov	r0, r7
 80021e8:	f7ff ff8a 	bl	8002100 <_malloc_r>
 80021ec:	4605      	mov	r5, r0
 80021ee:	2800      	cmp	r0, #0
 80021f0:	d0f2      	beq.n	80021d8 <_realloc_r+0x1c>
 80021f2:	4631      	mov	r1, r6
 80021f4:	4622      	mov	r2, r4
 80021f6:	f7ff ff0f 	bl	8002018 <memcpy>
 80021fa:	4631      	mov	r1, r6
 80021fc:	4638      	mov	r0, r7
 80021fe:	f7ff ff31 	bl	8002064 <_free_r>
 8002202:	e7e9      	b.n	80021d8 <_realloc_r+0x1c>
 8002204:	4635      	mov	r5, r6
 8002206:	e7e7      	b.n	80021d8 <_realloc_r+0x1c>

08002208 <_sbrk_r>:
 8002208:	b538      	push	{r3, r4, r5, lr}
 800220a:	4c06      	ldr	r4, [pc, #24]	; (8002224 <_sbrk_r+0x1c>)
 800220c:	2300      	movs	r3, #0
 800220e:	4605      	mov	r5, r0
 8002210:	4608      	mov	r0, r1
 8002212:	6023      	str	r3, [r4, #0]
 8002214:	f000 f814 	bl	8002240 <_sbrk>
 8002218:	1c43      	adds	r3, r0, #1
 800221a:	d102      	bne.n	8002222 <_sbrk_r+0x1a>
 800221c:	6823      	ldr	r3, [r4, #0]
 800221e:	b103      	cbz	r3, 8002222 <_sbrk_r+0x1a>
 8002220:	602b      	str	r3, [r5, #0]
 8002222:	bd38      	pop	{r3, r4, r5, pc}
 8002224:	200001c4 	.word	0x200001c4

08002228 <__malloc_lock>:
 8002228:	4770      	bx	lr

0800222a <__malloc_unlock>:
 800222a:	4770      	bx	lr

0800222c <_malloc_usable_size_r>:
 800222c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002230:	2800      	cmp	r0, #0
 8002232:	f1a0 0004 	sub.w	r0, r0, #4
 8002236:	bfbc      	itt	lt
 8002238:	580b      	ldrlt	r3, [r1, r0]
 800223a:	18c0      	addlt	r0, r0, r3
 800223c:	4770      	bx	lr
	...

08002240 <_sbrk>:
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <_sbrk+0x14>)
 8002242:	6819      	ldr	r1, [r3, #0]
 8002244:	4602      	mov	r2, r0
 8002246:	b909      	cbnz	r1, 800224c <_sbrk+0xc>
 8002248:	4903      	ldr	r1, [pc, #12]	; (8002258 <_sbrk+0x18>)
 800224a:	6019      	str	r1, [r3, #0]
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	4402      	add	r2, r0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	4770      	bx	lr
 8002254:	200000a4 	.word	0x200000a4
 8002258:	200001c8 	.word	0x200001c8

0800225c <_init>:
 800225c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800225e:	bf00      	nop
 8002260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002262:	bc08      	pop	{r3}
 8002264:	469e      	mov	lr, r3
 8002266:	4770      	bx	lr

08002268 <_fini>:
 8002268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800226a:	bf00      	nop
 800226c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800226e:	bc08      	pop	{r3}
 8002270:	469e      	mov	lr, r3
 8002272:	4770      	bx	lr
