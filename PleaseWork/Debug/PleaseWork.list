
PleaseWork.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ba0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08003c60  08003c60  00013c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003e94  08003e94  00013e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003e98  08003e98  00013e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000128  20000000  08003e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000280  20000128  08003fc4  00020128  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200003a8  08003fc4  000203a8  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f6d3  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000219f  00000000  00000000  0002f823  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000948  00000000  00000000  000319c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000868  00000000  00000000  00032310  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004736  00000000  00000000  00032b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002b87  00000000  00000000  000372ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00039e35  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000213c  00000000  00000000  00039eb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000128 	.word	0x20000128
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c48 	.word	0x08003c48

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000012c 	.word	0x2000012c
 8000104:	08003c48 	.word	0x08003c48

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdrcmple>:
 8000230:	4684      	mov	ip, r0
 8000232:	1c10      	adds	r0, r2, #0
 8000234:	4662      	mov	r2, ip
 8000236:	468c      	mov	ip, r1
 8000238:	1c19      	adds	r1, r3, #0
 800023a:	4663      	mov	r3, ip
 800023c:	e000      	b.n	8000240 <__aeabi_cdcmpeq>
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <__aeabi_cdcmpeq>:
 8000240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000242:	f000 f8ef 	bl	8000424 <__ledf2>
 8000246:	2800      	cmp	r0, #0
 8000248:	d401      	bmi.n	800024e <__aeabi_cdcmpeq+0xe>
 800024a:	2100      	movs	r1, #0
 800024c:	42c8      	cmn	r0, r1
 800024e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000250 <__aeabi_dcmpeq>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 f849 	bl	80002e8 <__eqdf2>
 8000256:	4240      	negs	r0, r0
 8000258:	3001      	adds	r0, #1
 800025a:	bd10      	pop	{r4, pc}

0800025c <__aeabi_dcmplt>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f000 f8e1 	bl	8000424 <__ledf2>
 8000262:	2800      	cmp	r0, #0
 8000264:	db01      	blt.n	800026a <__aeabi_dcmplt+0xe>
 8000266:	2000      	movs	r0, #0
 8000268:	bd10      	pop	{r4, pc}
 800026a:	2001      	movs	r0, #1
 800026c:	bd10      	pop	{r4, pc}
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_dcmple>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f000 f8d7 	bl	8000424 <__ledf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	dd01      	ble.n	800027e <__aeabi_dcmple+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_dcmpgt>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f000 f869 	bl	800035c <__gedf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	dc01      	bgt.n	8000292 <__aeabi_dcmpgt+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_dcmpge>:
 8000298:	b510      	push	{r4, lr}
 800029a:	f000 f85f 	bl	800035c <__gedf2>
 800029e:	2800      	cmp	r0, #0
 80002a0:	da01      	bge.n	80002a6 <__aeabi_dcmpge+0xe>
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	2001      	movs	r0, #1
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)

080002ac <__aeabi_d2uiz>:
 80002ac:	b570      	push	{r4, r5, r6, lr}
 80002ae:	2200      	movs	r2, #0
 80002b0:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <__aeabi_d2uiz+0x38>)
 80002b2:	0004      	movs	r4, r0
 80002b4:	000d      	movs	r5, r1
 80002b6:	f7ff ffef 	bl	8000298 <__aeabi_dcmpge>
 80002ba:	2800      	cmp	r0, #0
 80002bc:	d104      	bne.n	80002c8 <__aeabi_d2uiz+0x1c>
 80002be:	0020      	movs	r0, r4
 80002c0:	0029      	movs	r1, r5
 80002c2:	f000 fc27 	bl	8000b14 <__aeabi_d2iz>
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <__aeabi_d2uiz+0x38>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	0020      	movs	r0, r4
 80002ce:	0029      	movs	r1, r5
 80002d0:	f000 f90a 	bl	80004e8 <__aeabi_dsub>
 80002d4:	f000 fc1e 	bl	8000b14 <__aeabi_d2iz>
 80002d8:	2380      	movs	r3, #128	; 0x80
 80002da:	061b      	lsls	r3, r3, #24
 80002dc:	469c      	mov	ip, r3
 80002de:	4460      	add	r0, ip
 80002e0:	e7f1      	b.n	80002c6 <__aeabi_d2uiz+0x1a>
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	41e00000 	.word	0x41e00000

080002e8 <__eqdf2>:
 80002e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ea:	464f      	mov	r7, r9
 80002ec:	4646      	mov	r6, r8
 80002ee:	46d6      	mov	lr, sl
 80002f0:	005c      	lsls	r4, r3, #1
 80002f2:	b5c0      	push	{r6, r7, lr}
 80002f4:	031f      	lsls	r7, r3, #12
 80002f6:	0fdb      	lsrs	r3, r3, #31
 80002f8:	469a      	mov	sl, r3
 80002fa:	4b17      	ldr	r3, [pc, #92]	; (8000358 <__eqdf2+0x70>)
 80002fc:	030e      	lsls	r6, r1, #12
 80002fe:	004d      	lsls	r5, r1, #1
 8000300:	4684      	mov	ip, r0
 8000302:	4680      	mov	r8, r0
 8000304:	0b36      	lsrs	r6, r6, #12
 8000306:	0d6d      	lsrs	r5, r5, #21
 8000308:	0fc9      	lsrs	r1, r1, #31
 800030a:	4691      	mov	r9, r2
 800030c:	0b3f      	lsrs	r7, r7, #12
 800030e:	0d64      	lsrs	r4, r4, #21
 8000310:	2001      	movs	r0, #1
 8000312:	429d      	cmp	r5, r3
 8000314:	d008      	beq.n	8000328 <__eqdf2+0x40>
 8000316:	429c      	cmp	r4, r3
 8000318:	d001      	beq.n	800031e <__eqdf2+0x36>
 800031a:	42a5      	cmp	r5, r4
 800031c:	d00b      	beq.n	8000336 <__eqdf2+0x4e>
 800031e:	bc1c      	pop	{r2, r3, r4}
 8000320:	4690      	mov	r8, r2
 8000322:	4699      	mov	r9, r3
 8000324:	46a2      	mov	sl, r4
 8000326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000328:	4663      	mov	r3, ip
 800032a:	4333      	orrs	r3, r6
 800032c:	d1f7      	bne.n	800031e <__eqdf2+0x36>
 800032e:	42ac      	cmp	r4, r5
 8000330:	d1f5      	bne.n	800031e <__eqdf2+0x36>
 8000332:	433a      	orrs	r2, r7
 8000334:	d1f3      	bne.n	800031e <__eqdf2+0x36>
 8000336:	2001      	movs	r0, #1
 8000338:	42be      	cmp	r6, r7
 800033a:	d1f0      	bne.n	800031e <__eqdf2+0x36>
 800033c:	45c8      	cmp	r8, r9
 800033e:	d1ee      	bne.n	800031e <__eqdf2+0x36>
 8000340:	4551      	cmp	r1, sl
 8000342:	d007      	beq.n	8000354 <__eqdf2+0x6c>
 8000344:	2d00      	cmp	r5, #0
 8000346:	d1ea      	bne.n	800031e <__eqdf2+0x36>
 8000348:	4663      	mov	r3, ip
 800034a:	431e      	orrs	r6, r3
 800034c:	0030      	movs	r0, r6
 800034e:	1e46      	subs	r6, r0, #1
 8000350:	41b0      	sbcs	r0, r6
 8000352:	e7e4      	b.n	800031e <__eqdf2+0x36>
 8000354:	2000      	movs	r0, #0
 8000356:	e7e2      	b.n	800031e <__eqdf2+0x36>
 8000358:	000007ff 	.word	0x000007ff

0800035c <__gedf2>:
 800035c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800035e:	4645      	mov	r5, r8
 8000360:	46de      	mov	lr, fp
 8000362:	4657      	mov	r7, sl
 8000364:	464e      	mov	r6, r9
 8000366:	b5e0      	push	{r5, r6, r7, lr}
 8000368:	031f      	lsls	r7, r3, #12
 800036a:	0b3d      	lsrs	r5, r7, #12
 800036c:	4f2c      	ldr	r7, [pc, #176]	; (8000420 <__gedf2+0xc4>)
 800036e:	030e      	lsls	r6, r1, #12
 8000370:	004c      	lsls	r4, r1, #1
 8000372:	46ab      	mov	fp, r5
 8000374:	005d      	lsls	r5, r3, #1
 8000376:	4684      	mov	ip, r0
 8000378:	0b36      	lsrs	r6, r6, #12
 800037a:	0d64      	lsrs	r4, r4, #21
 800037c:	0fc9      	lsrs	r1, r1, #31
 800037e:	4690      	mov	r8, r2
 8000380:	0d6d      	lsrs	r5, r5, #21
 8000382:	0fdb      	lsrs	r3, r3, #31
 8000384:	42bc      	cmp	r4, r7
 8000386:	d02a      	beq.n	80003de <__gedf2+0x82>
 8000388:	4f25      	ldr	r7, [pc, #148]	; (8000420 <__gedf2+0xc4>)
 800038a:	42bd      	cmp	r5, r7
 800038c:	d02d      	beq.n	80003ea <__gedf2+0x8e>
 800038e:	2c00      	cmp	r4, #0
 8000390:	d10f      	bne.n	80003b2 <__gedf2+0x56>
 8000392:	4330      	orrs	r0, r6
 8000394:	0007      	movs	r7, r0
 8000396:	4681      	mov	r9, r0
 8000398:	4278      	negs	r0, r7
 800039a:	4178      	adcs	r0, r7
 800039c:	b2c0      	uxtb	r0, r0
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d117      	bne.n	80003d2 <__gedf2+0x76>
 80003a2:	465f      	mov	r7, fp
 80003a4:	433a      	orrs	r2, r7
 80003a6:	d114      	bne.n	80003d2 <__gedf2+0x76>
 80003a8:	464b      	mov	r3, r9
 80003aa:	2000      	movs	r0, #0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d00a      	beq.n	80003c6 <__gedf2+0x6a>
 80003b0:	e006      	b.n	80003c0 <__gedf2+0x64>
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d102      	bne.n	80003bc <__gedf2+0x60>
 80003b6:	4658      	mov	r0, fp
 80003b8:	4302      	orrs	r2, r0
 80003ba:	d001      	beq.n	80003c0 <__gedf2+0x64>
 80003bc:	4299      	cmp	r1, r3
 80003be:	d018      	beq.n	80003f2 <__gedf2+0x96>
 80003c0:	4248      	negs	r0, r1
 80003c2:	2101      	movs	r1, #1
 80003c4:	4308      	orrs	r0, r1
 80003c6:	bc3c      	pop	{r2, r3, r4, r5}
 80003c8:	4690      	mov	r8, r2
 80003ca:	4699      	mov	r9, r3
 80003cc:	46a2      	mov	sl, r4
 80003ce:	46ab      	mov	fp, r5
 80003d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003d2:	2800      	cmp	r0, #0
 80003d4:	d0f2      	beq.n	80003bc <__gedf2+0x60>
 80003d6:	2001      	movs	r0, #1
 80003d8:	3b01      	subs	r3, #1
 80003da:	4318      	orrs	r0, r3
 80003dc:	e7f3      	b.n	80003c6 <__gedf2+0x6a>
 80003de:	0037      	movs	r7, r6
 80003e0:	4307      	orrs	r7, r0
 80003e2:	d0d1      	beq.n	8000388 <__gedf2+0x2c>
 80003e4:	2002      	movs	r0, #2
 80003e6:	4240      	negs	r0, r0
 80003e8:	e7ed      	b.n	80003c6 <__gedf2+0x6a>
 80003ea:	465f      	mov	r7, fp
 80003ec:	4317      	orrs	r7, r2
 80003ee:	d0ce      	beq.n	800038e <__gedf2+0x32>
 80003f0:	e7f8      	b.n	80003e4 <__gedf2+0x88>
 80003f2:	42ac      	cmp	r4, r5
 80003f4:	dce4      	bgt.n	80003c0 <__gedf2+0x64>
 80003f6:	da03      	bge.n	8000400 <__gedf2+0xa4>
 80003f8:	1e48      	subs	r0, r1, #1
 80003fa:	2101      	movs	r1, #1
 80003fc:	4308      	orrs	r0, r1
 80003fe:	e7e2      	b.n	80003c6 <__gedf2+0x6a>
 8000400:	455e      	cmp	r6, fp
 8000402:	d8dd      	bhi.n	80003c0 <__gedf2+0x64>
 8000404:	d006      	beq.n	8000414 <__gedf2+0xb8>
 8000406:	2000      	movs	r0, #0
 8000408:	455e      	cmp	r6, fp
 800040a:	d2dc      	bcs.n	80003c6 <__gedf2+0x6a>
 800040c:	2301      	movs	r3, #1
 800040e:	1e48      	subs	r0, r1, #1
 8000410:	4318      	orrs	r0, r3
 8000412:	e7d8      	b.n	80003c6 <__gedf2+0x6a>
 8000414:	45c4      	cmp	ip, r8
 8000416:	d8d3      	bhi.n	80003c0 <__gedf2+0x64>
 8000418:	2000      	movs	r0, #0
 800041a:	45c4      	cmp	ip, r8
 800041c:	d3f6      	bcc.n	800040c <__gedf2+0xb0>
 800041e:	e7d2      	b.n	80003c6 <__gedf2+0x6a>
 8000420:	000007ff 	.word	0x000007ff

08000424 <__ledf2>:
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	464e      	mov	r6, r9
 8000428:	4645      	mov	r5, r8
 800042a:	46de      	mov	lr, fp
 800042c:	4657      	mov	r7, sl
 800042e:	005c      	lsls	r4, r3, #1
 8000430:	b5e0      	push	{r5, r6, r7, lr}
 8000432:	031f      	lsls	r7, r3, #12
 8000434:	0fdb      	lsrs	r3, r3, #31
 8000436:	4699      	mov	r9, r3
 8000438:	4b2a      	ldr	r3, [pc, #168]	; (80004e4 <__ledf2+0xc0>)
 800043a:	030e      	lsls	r6, r1, #12
 800043c:	004d      	lsls	r5, r1, #1
 800043e:	0fc9      	lsrs	r1, r1, #31
 8000440:	4684      	mov	ip, r0
 8000442:	0b36      	lsrs	r6, r6, #12
 8000444:	0d6d      	lsrs	r5, r5, #21
 8000446:	468b      	mov	fp, r1
 8000448:	4690      	mov	r8, r2
 800044a:	0b3f      	lsrs	r7, r7, #12
 800044c:	0d64      	lsrs	r4, r4, #21
 800044e:	429d      	cmp	r5, r3
 8000450:	d020      	beq.n	8000494 <__ledf2+0x70>
 8000452:	4b24      	ldr	r3, [pc, #144]	; (80004e4 <__ledf2+0xc0>)
 8000454:	429c      	cmp	r4, r3
 8000456:	d022      	beq.n	800049e <__ledf2+0x7a>
 8000458:	2d00      	cmp	r5, #0
 800045a:	d112      	bne.n	8000482 <__ledf2+0x5e>
 800045c:	4330      	orrs	r0, r6
 800045e:	4243      	negs	r3, r0
 8000460:	4143      	adcs	r3, r0
 8000462:	b2db      	uxtb	r3, r3
 8000464:	2c00      	cmp	r4, #0
 8000466:	d01f      	beq.n	80004a8 <__ledf2+0x84>
 8000468:	2b00      	cmp	r3, #0
 800046a:	d00c      	beq.n	8000486 <__ledf2+0x62>
 800046c:	464b      	mov	r3, r9
 800046e:	2001      	movs	r0, #1
 8000470:	3b01      	subs	r3, #1
 8000472:	4303      	orrs	r3, r0
 8000474:	0018      	movs	r0, r3
 8000476:	bc3c      	pop	{r2, r3, r4, r5}
 8000478:	4690      	mov	r8, r2
 800047a:	4699      	mov	r9, r3
 800047c:	46a2      	mov	sl, r4
 800047e:	46ab      	mov	fp, r5
 8000480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000482:	2c00      	cmp	r4, #0
 8000484:	d016      	beq.n	80004b4 <__ledf2+0x90>
 8000486:	45cb      	cmp	fp, r9
 8000488:	d017      	beq.n	80004ba <__ledf2+0x96>
 800048a:	465b      	mov	r3, fp
 800048c:	4259      	negs	r1, r3
 800048e:	2301      	movs	r3, #1
 8000490:	430b      	orrs	r3, r1
 8000492:	e7ef      	b.n	8000474 <__ledf2+0x50>
 8000494:	0031      	movs	r1, r6
 8000496:	2302      	movs	r3, #2
 8000498:	4301      	orrs	r1, r0
 800049a:	d1eb      	bne.n	8000474 <__ledf2+0x50>
 800049c:	e7d9      	b.n	8000452 <__ledf2+0x2e>
 800049e:	0039      	movs	r1, r7
 80004a0:	2302      	movs	r3, #2
 80004a2:	4311      	orrs	r1, r2
 80004a4:	d1e6      	bne.n	8000474 <__ledf2+0x50>
 80004a6:	e7d7      	b.n	8000458 <__ledf2+0x34>
 80004a8:	433a      	orrs	r2, r7
 80004aa:	d1dd      	bne.n	8000468 <__ledf2+0x44>
 80004ac:	2300      	movs	r3, #0
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d0e0      	beq.n	8000474 <__ledf2+0x50>
 80004b2:	e7ea      	b.n	800048a <__ledf2+0x66>
 80004b4:	433a      	orrs	r2, r7
 80004b6:	d1e6      	bne.n	8000486 <__ledf2+0x62>
 80004b8:	e7e7      	b.n	800048a <__ledf2+0x66>
 80004ba:	42a5      	cmp	r5, r4
 80004bc:	dce5      	bgt.n	800048a <__ledf2+0x66>
 80004be:	db05      	blt.n	80004cc <__ledf2+0xa8>
 80004c0:	42be      	cmp	r6, r7
 80004c2:	d8e2      	bhi.n	800048a <__ledf2+0x66>
 80004c4:	d007      	beq.n	80004d6 <__ledf2+0xb2>
 80004c6:	2300      	movs	r3, #0
 80004c8:	42be      	cmp	r6, r7
 80004ca:	d2d3      	bcs.n	8000474 <__ledf2+0x50>
 80004cc:	4659      	mov	r1, fp
 80004ce:	2301      	movs	r3, #1
 80004d0:	3901      	subs	r1, #1
 80004d2:	430b      	orrs	r3, r1
 80004d4:	e7ce      	b.n	8000474 <__ledf2+0x50>
 80004d6:	45c4      	cmp	ip, r8
 80004d8:	d8d7      	bhi.n	800048a <__ledf2+0x66>
 80004da:	2300      	movs	r3, #0
 80004dc:	45c4      	cmp	ip, r8
 80004de:	d3f5      	bcc.n	80004cc <__ledf2+0xa8>
 80004e0:	e7c8      	b.n	8000474 <__ledf2+0x50>
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	000007ff 	.word	0x000007ff

080004e8 <__aeabi_dsub>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	4646      	mov	r6, r8
 80004ec:	46d6      	mov	lr, sl
 80004ee:	464f      	mov	r7, r9
 80004f0:	030c      	lsls	r4, r1, #12
 80004f2:	b5c0      	push	{r6, r7, lr}
 80004f4:	0fcd      	lsrs	r5, r1, #31
 80004f6:	004e      	lsls	r6, r1, #1
 80004f8:	0a61      	lsrs	r1, r4, #9
 80004fa:	0f44      	lsrs	r4, r0, #29
 80004fc:	430c      	orrs	r4, r1
 80004fe:	00c1      	lsls	r1, r0, #3
 8000500:	0058      	lsls	r0, r3, #1
 8000502:	0d40      	lsrs	r0, r0, #21
 8000504:	4684      	mov	ip, r0
 8000506:	468a      	mov	sl, r1
 8000508:	000f      	movs	r7, r1
 800050a:	0319      	lsls	r1, r3, #12
 800050c:	0f50      	lsrs	r0, r2, #29
 800050e:	0a49      	lsrs	r1, r1, #9
 8000510:	4301      	orrs	r1, r0
 8000512:	48c6      	ldr	r0, [pc, #792]	; (800082c <__aeabi_dsub+0x344>)
 8000514:	0d76      	lsrs	r6, r6, #21
 8000516:	46a8      	mov	r8, r5
 8000518:	0fdb      	lsrs	r3, r3, #31
 800051a:	00d2      	lsls	r2, r2, #3
 800051c:	4584      	cmp	ip, r0
 800051e:	d100      	bne.n	8000522 <__aeabi_dsub+0x3a>
 8000520:	e0d8      	b.n	80006d4 <__aeabi_dsub+0x1ec>
 8000522:	2001      	movs	r0, #1
 8000524:	4043      	eors	r3, r0
 8000526:	42ab      	cmp	r3, r5
 8000528:	d100      	bne.n	800052c <__aeabi_dsub+0x44>
 800052a:	e0a6      	b.n	800067a <__aeabi_dsub+0x192>
 800052c:	4660      	mov	r0, ip
 800052e:	1a35      	subs	r5, r6, r0
 8000530:	2d00      	cmp	r5, #0
 8000532:	dc00      	bgt.n	8000536 <__aeabi_dsub+0x4e>
 8000534:	e105      	b.n	8000742 <__aeabi_dsub+0x25a>
 8000536:	2800      	cmp	r0, #0
 8000538:	d110      	bne.n	800055c <__aeabi_dsub+0x74>
 800053a:	000b      	movs	r3, r1
 800053c:	4313      	orrs	r3, r2
 800053e:	d100      	bne.n	8000542 <__aeabi_dsub+0x5a>
 8000540:	e0d7      	b.n	80006f2 <__aeabi_dsub+0x20a>
 8000542:	1e6b      	subs	r3, r5, #1
 8000544:	2b00      	cmp	r3, #0
 8000546:	d000      	beq.n	800054a <__aeabi_dsub+0x62>
 8000548:	e14b      	b.n	80007e2 <__aeabi_dsub+0x2fa>
 800054a:	4653      	mov	r3, sl
 800054c:	1a9f      	subs	r7, r3, r2
 800054e:	45ba      	cmp	sl, r7
 8000550:	4180      	sbcs	r0, r0
 8000552:	1a64      	subs	r4, r4, r1
 8000554:	4240      	negs	r0, r0
 8000556:	1a24      	subs	r4, r4, r0
 8000558:	2601      	movs	r6, #1
 800055a:	e01e      	b.n	800059a <__aeabi_dsub+0xb2>
 800055c:	4bb3      	ldr	r3, [pc, #716]	; (800082c <__aeabi_dsub+0x344>)
 800055e:	429e      	cmp	r6, r3
 8000560:	d048      	beq.n	80005f4 <__aeabi_dsub+0x10c>
 8000562:	2380      	movs	r3, #128	; 0x80
 8000564:	041b      	lsls	r3, r3, #16
 8000566:	4319      	orrs	r1, r3
 8000568:	2d38      	cmp	r5, #56	; 0x38
 800056a:	dd00      	ble.n	800056e <__aeabi_dsub+0x86>
 800056c:	e119      	b.n	80007a2 <__aeabi_dsub+0x2ba>
 800056e:	2d1f      	cmp	r5, #31
 8000570:	dd00      	ble.n	8000574 <__aeabi_dsub+0x8c>
 8000572:	e14c      	b.n	800080e <__aeabi_dsub+0x326>
 8000574:	2320      	movs	r3, #32
 8000576:	000f      	movs	r7, r1
 8000578:	1b5b      	subs	r3, r3, r5
 800057a:	0010      	movs	r0, r2
 800057c:	409a      	lsls	r2, r3
 800057e:	409f      	lsls	r7, r3
 8000580:	40e8      	lsrs	r0, r5
 8000582:	1e53      	subs	r3, r2, #1
 8000584:	419a      	sbcs	r2, r3
 8000586:	40e9      	lsrs	r1, r5
 8000588:	4307      	orrs	r7, r0
 800058a:	4317      	orrs	r7, r2
 800058c:	4653      	mov	r3, sl
 800058e:	1bdf      	subs	r7, r3, r7
 8000590:	1a61      	subs	r1, r4, r1
 8000592:	45ba      	cmp	sl, r7
 8000594:	41a4      	sbcs	r4, r4
 8000596:	4264      	negs	r4, r4
 8000598:	1b0c      	subs	r4, r1, r4
 800059a:	0223      	lsls	r3, r4, #8
 800059c:	d400      	bmi.n	80005a0 <__aeabi_dsub+0xb8>
 800059e:	e0c5      	b.n	800072c <__aeabi_dsub+0x244>
 80005a0:	0264      	lsls	r4, r4, #9
 80005a2:	0a65      	lsrs	r5, r4, #9
 80005a4:	2d00      	cmp	r5, #0
 80005a6:	d100      	bne.n	80005aa <__aeabi_dsub+0xc2>
 80005a8:	e0f6      	b.n	8000798 <__aeabi_dsub+0x2b0>
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 fb1e 	bl	8000bec <__clzsi2>
 80005b0:	0003      	movs	r3, r0
 80005b2:	3b08      	subs	r3, #8
 80005b4:	2b1f      	cmp	r3, #31
 80005b6:	dd00      	ble.n	80005ba <__aeabi_dsub+0xd2>
 80005b8:	e0e9      	b.n	800078e <__aeabi_dsub+0x2a6>
 80005ba:	2220      	movs	r2, #32
 80005bc:	003c      	movs	r4, r7
 80005be:	1ad2      	subs	r2, r2, r3
 80005c0:	409d      	lsls	r5, r3
 80005c2:	40d4      	lsrs	r4, r2
 80005c4:	409f      	lsls	r7, r3
 80005c6:	4325      	orrs	r5, r4
 80005c8:	429e      	cmp	r6, r3
 80005ca:	dd00      	ble.n	80005ce <__aeabi_dsub+0xe6>
 80005cc:	e0db      	b.n	8000786 <__aeabi_dsub+0x29e>
 80005ce:	1b9e      	subs	r6, r3, r6
 80005d0:	1c73      	adds	r3, r6, #1
 80005d2:	2b1f      	cmp	r3, #31
 80005d4:	dd00      	ble.n	80005d8 <__aeabi_dsub+0xf0>
 80005d6:	e10a      	b.n	80007ee <__aeabi_dsub+0x306>
 80005d8:	2220      	movs	r2, #32
 80005da:	0038      	movs	r0, r7
 80005dc:	1ad2      	subs	r2, r2, r3
 80005de:	0029      	movs	r1, r5
 80005e0:	4097      	lsls	r7, r2
 80005e2:	002c      	movs	r4, r5
 80005e4:	4091      	lsls	r1, r2
 80005e6:	40d8      	lsrs	r0, r3
 80005e8:	1e7a      	subs	r2, r7, #1
 80005ea:	4197      	sbcs	r7, r2
 80005ec:	40dc      	lsrs	r4, r3
 80005ee:	2600      	movs	r6, #0
 80005f0:	4301      	orrs	r1, r0
 80005f2:	430f      	orrs	r7, r1
 80005f4:	077b      	lsls	r3, r7, #29
 80005f6:	d009      	beq.n	800060c <__aeabi_dsub+0x124>
 80005f8:	230f      	movs	r3, #15
 80005fa:	403b      	ands	r3, r7
 80005fc:	2b04      	cmp	r3, #4
 80005fe:	d005      	beq.n	800060c <__aeabi_dsub+0x124>
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	42bb      	cmp	r3, r7
 8000604:	41bf      	sbcs	r7, r7
 8000606:	427f      	negs	r7, r7
 8000608:	19e4      	adds	r4, r4, r7
 800060a:	001f      	movs	r7, r3
 800060c:	0223      	lsls	r3, r4, #8
 800060e:	d525      	bpl.n	800065c <__aeabi_dsub+0x174>
 8000610:	4b86      	ldr	r3, [pc, #536]	; (800082c <__aeabi_dsub+0x344>)
 8000612:	3601      	adds	r6, #1
 8000614:	429e      	cmp	r6, r3
 8000616:	d100      	bne.n	800061a <__aeabi_dsub+0x132>
 8000618:	e0af      	b.n	800077a <__aeabi_dsub+0x292>
 800061a:	4b85      	ldr	r3, [pc, #532]	; (8000830 <__aeabi_dsub+0x348>)
 800061c:	2501      	movs	r5, #1
 800061e:	401c      	ands	r4, r3
 8000620:	4643      	mov	r3, r8
 8000622:	0762      	lsls	r2, r4, #29
 8000624:	08ff      	lsrs	r7, r7, #3
 8000626:	0264      	lsls	r4, r4, #9
 8000628:	0576      	lsls	r6, r6, #21
 800062a:	4317      	orrs	r7, r2
 800062c:	0b24      	lsrs	r4, r4, #12
 800062e:	0d76      	lsrs	r6, r6, #21
 8000630:	401d      	ands	r5, r3
 8000632:	2100      	movs	r1, #0
 8000634:	0324      	lsls	r4, r4, #12
 8000636:	0b23      	lsrs	r3, r4, #12
 8000638:	0d0c      	lsrs	r4, r1, #20
 800063a:	4a7e      	ldr	r2, [pc, #504]	; (8000834 <__aeabi_dsub+0x34c>)
 800063c:	0524      	lsls	r4, r4, #20
 800063e:	431c      	orrs	r4, r3
 8000640:	4014      	ands	r4, r2
 8000642:	0533      	lsls	r3, r6, #20
 8000644:	4323      	orrs	r3, r4
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	07ed      	lsls	r5, r5, #31
 800064a:	085b      	lsrs	r3, r3, #1
 800064c:	432b      	orrs	r3, r5
 800064e:	0038      	movs	r0, r7
 8000650:	0019      	movs	r1, r3
 8000652:	bc1c      	pop	{r2, r3, r4}
 8000654:	4690      	mov	r8, r2
 8000656:	4699      	mov	r9, r3
 8000658:	46a2      	mov	sl, r4
 800065a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800065c:	2501      	movs	r5, #1
 800065e:	4643      	mov	r3, r8
 8000660:	0762      	lsls	r2, r4, #29
 8000662:	08ff      	lsrs	r7, r7, #3
 8000664:	4317      	orrs	r7, r2
 8000666:	08e4      	lsrs	r4, r4, #3
 8000668:	401d      	ands	r5, r3
 800066a:	4b70      	ldr	r3, [pc, #448]	; (800082c <__aeabi_dsub+0x344>)
 800066c:	429e      	cmp	r6, r3
 800066e:	d036      	beq.n	80006de <__aeabi_dsub+0x1f6>
 8000670:	0324      	lsls	r4, r4, #12
 8000672:	0576      	lsls	r6, r6, #21
 8000674:	0b24      	lsrs	r4, r4, #12
 8000676:	0d76      	lsrs	r6, r6, #21
 8000678:	e7db      	b.n	8000632 <__aeabi_dsub+0x14a>
 800067a:	4663      	mov	r3, ip
 800067c:	1af3      	subs	r3, r6, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	dc00      	bgt.n	8000684 <__aeabi_dsub+0x19c>
 8000682:	e094      	b.n	80007ae <__aeabi_dsub+0x2c6>
 8000684:	4660      	mov	r0, ip
 8000686:	2800      	cmp	r0, #0
 8000688:	d035      	beq.n	80006f6 <__aeabi_dsub+0x20e>
 800068a:	4868      	ldr	r0, [pc, #416]	; (800082c <__aeabi_dsub+0x344>)
 800068c:	4286      	cmp	r6, r0
 800068e:	d0b1      	beq.n	80005f4 <__aeabi_dsub+0x10c>
 8000690:	2780      	movs	r7, #128	; 0x80
 8000692:	043f      	lsls	r7, r7, #16
 8000694:	4339      	orrs	r1, r7
 8000696:	2b38      	cmp	r3, #56	; 0x38
 8000698:	dc00      	bgt.n	800069c <__aeabi_dsub+0x1b4>
 800069a:	e0fd      	b.n	8000898 <__aeabi_dsub+0x3b0>
 800069c:	430a      	orrs	r2, r1
 800069e:	0017      	movs	r7, r2
 80006a0:	2100      	movs	r1, #0
 80006a2:	1e7a      	subs	r2, r7, #1
 80006a4:	4197      	sbcs	r7, r2
 80006a6:	4457      	add	r7, sl
 80006a8:	4557      	cmp	r7, sl
 80006aa:	4180      	sbcs	r0, r0
 80006ac:	1909      	adds	r1, r1, r4
 80006ae:	4244      	negs	r4, r0
 80006b0:	190c      	adds	r4, r1, r4
 80006b2:	0223      	lsls	r3, r4, #8
 80006b4:	d53a      	bpl.n	800072c <__aeabi_dsub+0x244>
 80006b6:	4b5d      	ldr	r3, [pc, #372]	; (800082c <__aeabi_dsub+0x344>)
 80006b8:	3601      	adds	r6, #1
 80006ba:	429e      	cmp	r6, r3
 80006bc:	d100      	bne.n	80006c0 <__aeabi_dsub+0x1d8>
 80006be:	e14b      	b.n	8000958 <__aeabi_dsub+0x470>
 80006c0:	2201      	movs	r2, #1
 80006c2:	4b5b      	ldr	r3, [pc, #364]	; (8000830 <__aeabi_dsub+0x348>)
 80006c4:	401c      	ands	r4, r3
 80006c6:	087b      	lsrs	r3, r7, #1
 80006c8:	4017      	ands	r7, r2
 80006ca:	431f      	orrs	r7, r3
 80006cc:	07e2      	lsls	r2, r4, #31
 80006ce:	4317      	orrs	r7, r2
 80006d0:	0864      	lsrs	r4, r4, #1
 80006d2:	e78f      	b.n	80005f4 <__aeabi_dsub+0x10c>
 80006d4:	0008      	movs	r0, r1
 80006d6:	4310      	orrs	r0, r2
 80006d8:	d000      	beq.n	80006dc <__aeabi_dsub+0x1f4>
 80006da:	e724      	b.n	8000526 <__aeabi_dsub+0x3e>
 80006dc:	e721      	b.n	8000522 <__aeabi_dsub+0x3a>
 80006de:	0023      	movs	r3, r4
 80006e0:	433b      	orrs	r3, r7
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dsub+0x1fe>
 80006e4:	e1b9      	b.n	8000a5a <__aeabi_dsub+0x572>
 80006e6:	2280      	movs	r2, #128	; 0x80
 80006e8:	0312      	lsls	r2, r2, #12
 80006ea:	4314      	orrs	r4, r2
 80006ec:	0324      	lsls	r4, r4, #12
 80006ee:	0b24      	lsrs	r4, r4, #12
 80006f0:	e79f      	b.n	8000632 <__aeabi_dsub+0x14a>
 80006f2:	002e      	movs	r6, r5
 80006f4:	e77e      	b.n	80005f4 <__aeabi_dsub+0x10c>
 80006f6:	0008      	movs	r0, r1
 80006f8:	4310      	orrs	r0, r2
 80006fa:	d100      	bne.n	80006fe <__aeabi_dsub+0x216>
 80006fc:	e0ca      	b.n	8000894 <__aeabi_dsub+0x3ac>
 80006fe:	1e58      	subs	r0, r3, #1
 8000700:	4684      	mov	ip, r0
 8000702:	2800      	cmp	r0, #0
 8000704:	d000      	beq.n	8000708 <__aeabi_dsub+0x220>
 8000706:	e0e7      	b.n	80008d8 <__aeabi_dsub+0x3f0>
 8000708:	4452      	add	r2, sl
 800070a:	4552      	cmp	r2, sl
 800070c:	4180      	sbcs	r0, r0
 800070e:	1864      	adds	r4, r4, r1
 8000710:	4240      	negs	r0, r0
 8000712:	1824      	adds	r4, r4, r0
 8000714:	0017      	movs	r7, r2
 8000716:	2601      	movs	r6, #1
 8000718:	0223      	lsls	r3, r4, #8
 800071a:	d507      	bpl.n	800072c <__aeabi_dsub+0x244>
 800071c:	2602      	movs	r6, #2
 800071e:	e7cf      	b.n	80006c0 <__aeabi_dsub+0x1d8>
 8000720:	4664      	mov	r4, ip
 8000722:	432c      	orrs	r4, r5
 8000724:	d100      	bne.n	8000728 <__aeabi_dsub+0x240>
 8000726:	e1b3      	b.n	8000a90 <__aeabi_dsub+0x5a8>
 8000728:	002c      	movs	r4, r5
 800072a:	4667      	mov	r7, ip
 800072c:	077b      	lsls	r3, r7, #29
 800072e:	d000      	beq.n	8000732 <__aeabi_dsub+0x24a>
 8000730:	e762      	b.n	80005f8 <__aeabi_dsub+0x110>
 8000732:	0763      	lsls	r3, r4, #29
 8000734:	08ff      	lsrs	r7, r7, #3
 8000736:	431f      	orrs	r7, r3
 8000738:	2501      	movs	r5, #1
 800073a:	4643      	mov	r3, r8
 800073c:	08e4      	lsrs	r4, r4, #3
 800073e:	401d      	ands	r5, r3
 8000740:	e793      	b.n	800066a <__aeabi_dsub+0x182>
 8000742:	2d00      	cmp	r5, #0
 8000744:	d178      	bne.n	8000838 <__aeabi_dsub+0x350>
 8000746:	1c75      	adds	r5, r6, #1
 8000748:	056d      	lsls	r5, r5, #21
 800074a:	0d6d      	lsrs	r5, r5, #21
 800074c:	2d01      	cmp	r5, #1
 800074e:	dc00      	bgt.n	8000752 <__aeabi_dsub+0x26a>
 8000750:	e0f2      	b.n	8000938 <__aeabi_dsub+0x450>
 8000752:	4650      	mov	r0, sl
 8000754:	1a80      	subs	r0, r0, r2
 8000756:	4582      	cmp	sl, r0
 8000758:	41bf      	sbcs	r7, r7
 800075a:	1a65      	subs	r5, r4, r1
 800075c:	427f      	negs	r7, r7
 800075e:	1bed      	subs	r5, r5, r7
 8000760:	4684      	mov	ip, r0
 8000762:	0228      	lsls	r0, r5, #8
 8000764:	d400      	bmi.n	8000768 <__aeabi_dsub+0x280>
 8000766:	e08c      	b.n	8000882 <__aeabi_dsub+0x39a>
 8000768:	4650      	mov	r0, sl
 800076a:	1a17      	subs	r7, r2, r0
 800076c:	42ba      	cmp	r2, r7
 800076e:	4192      	sbcs	r2, r2
 8000770:	1b0c      	subs	r4, r1, r4
 8000772:	4255      	negs	r5, r2
 8000774:	1b65      	subs	r5, r4, r5
 8000776:	4698      	mov	r8, r3
 8000778:	e714      	b.n	80005a4 <__aeabi_dsub+0xbc>
 800077a:	2501      	movs	r5, #1
 800077c:	4643      	mov	r3, r8
 800077e:	2400      	movs	r4, #0
 8000780:	401d      	ands	r5, r3
 8000782:	2700      	movs	r7, #0
 8000784:	e755      	b.n	8000632 <__aeabi_dsub+0x14a>
 8000786:	4c2a      	ldr	r4, [pc, #168]	; (8000830 <__aeabi_dsub+0x348>)
 8000788:	1af6      	subs	r6, r6, r3
 800078a:	402c      	ands	r4, r5
 800078c:	e732      	b.n	80005f4 <__aeabi_dsub+0x10c>
 800078e:	003d      	movs	r5, r7
 8000790:	3828      	subs	r0, #40	; 0x28
 8000792:	4085      	lsls	r5, r0
 8000794:	2700      	movs	r7, #0
 8000796:	e717      	b.n	80005c8 <__aeabi_dsub+0xe0>
 8000798:	0038      	movs	r0, r7
 800079a:	f000 fa27 	bl	8000bec <__clzsi2>
 800079e:	3020      	adds	r0, #32
 80007a0:	e706      	b.n	80005b0 <__aeabi_dsub+0xc8>
 80007a2:	430a      	orrs	r2, r1
 80007a4:	0017      	movs	r7, r2
 80007a6:	2100      	movs	r1, #0
 80007a8:	1e7a      	subs	r2, r7, #1
 80007aa:	4197      	sbcs	r7, r2
 80007ac:	e6ee      	b.n	800058c <__aeabi_dsub+0xa4>
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d000      	beq.n	80007b4 <__aeabi_dsub+0x2cc>
 80007b2:	e0e5      	b.n	8000980 <__aeabi_dsub+0x498>
 80007b4:	1c73      	adds	r3, r6, #1
 80007b6:	469c      	mov	ip, r3
 80007b8:	055b      	lsls	r3, r3, #21
 80007ba:	0d5b      	lsrs	r3, r3, #21
 80007bc:	2b01      	cmp	r3, #1
 80007be:	dc00      	bgt.n	80007c2 <__aeabi_dsub+0x2da>
 80007c0:	e09f      	b.n	8000902 <__aeabi_dsub+0x41a>
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <__aeabi_dsub+0x344>)
 80007c4:	459c      	cmp	ip, r3
 80007c6:	d100      	bne.n	80007ca <__aeabi_dsub+0x2e2>
 80007c8:	e0c5      	b.n	8000956 <__aeabi_dsub+0x46e>
 80007ca:	4452      	add	r2, sl
 80007cc:	4552      	cmp	r2, sl
 80007ce:	4180      	sbcs	r0, r0
 80007d0:	1864      	adds	r4, r4, r1
 80007d2:	4240      	negs	r0, r0
 80007d4:	1824      	adds	r4, r4, r0
 80007d6:	07e7      	lsls	r7, r4, #31
 80007d8:	0852      	lsrs	r2, r2, #1
 80007da:	4317      	orrs	r7, r2
 80007dc:	0864      	lsrs	r4, r4, #1
 80007de:	4666      	mov	r6, ip
 80007e0:	e708      	b.n	80005f4 <__aeabi_dsub+0x10c>
 80007e2:	4812      	ldr	r0, [pc, #72]	; (800082c <__aeabi_dsub+0x344>)
 80007e4:	4285      	cmp	r5, r0
 80007e6:	d100      	bne.n	80007ea <__aeabi_dsub+0x302>
 80007e8:	e085      	b.n	80008f6 <__aeabi_dsub+0x40e>
 80007ea:	001d      	movs	r5, r3
 80007ec:	e6bc      	b.n	8000568 <__aeabi_dsub+0x80>
 80007ee:	0029      	movs	r1, r5
 80007f0:	3e1f      	subs	r6, #31
 80007f2:	40f1      	lsrs	r1, r6
 80007f4:	2b20      	cmp	r3, #32
 80007f6:	d100      	bne.n	80007fa <__aeabi_dsub+0x312>
 80007f8:	e07f      	b.n	80008fa <__aeabi_dsub+0x412>
 80007fa:	2240      	movs	r2, #64	; 0x40
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	409d      	lsls	r5, r3
 8000800:	432f      	orrs	r7, r5
 8000802:	1e7d      	subs	r5, r7, #1
 8000804:	41af      	sbcs	r7, r5
 8000806:	2400      	movs	r4, #0
 8000808:	430f      	orrs	r7, r1
 800080a:	2600      	movs	r6, #0
 800080c:	e78e      	b.n	800072c <__aeabi_dsub+0x244>
 800080e:	002b      	movs	r3, r5
 8000810:	000f      	movs	r7, r1
 8000812:	3b20      	subs	r3, #32
 8000814:	40df      	lsrs	r7, r3
 8000816:	2d20      	cmp	r5, #32
 8000818:	d071      	beq.n	80008fe <__aeabi_dsub+0x416>
 800081a:	2340      	movs	r3, #64	; 0x40
 800081c:	1b5d      	subs	r5, r3, r5
 800081e:	40a9      	lsls	r1, r5
 8000820:	430a      	orrs	r2, r1
 8000822:	1e51      	subs	r1, r2, #1
 8000824:	418a      	sbcs	r2, r1
 8000826:	2100      	movs	r1, #0
 8000828:	4317      	orrs	r7, r2
 800082a:	e6af      	b.n	800058c <__aeabi_dsub+0xa4>
 800082c:	000007ff 	.word	0x000007ff
 8000830:	ff7fffff 	.word	0xff7fffff
 8000834:	800fffff 	.word	0x800fffff
 8000838:	2e00      	cmp	r6, #0
 800083a:	d03e      	beq.n	80008ba <__aeabi_dsub+0x3d2>
 800083c:	4eb3      	ldr	r6, [pc, #716]	; (8000b0c <__aeabi_dsub+0x624>)
 800083e:	45b4      	cmp	ip, r6
 8000840:	d045      	beq.n	80008ce <__aeabi_dsub+0x3e6>
 8000842:	2680      	movs	r6, #128	; 0x80
 8000844:	0436      	lsls	r6, r6, #16
 8000846:	426d      	negs	r5, r5
 8000848:	4334      	orrs	r4, r6
 800084a:	2d38      	cmp	r5, #56	; 0x38
 800084c:	dd00      	ble.n	8000850 <__aeabi_dsub+0x368>
 800084e:	e0a8      	b.n	80009a2 <__aeabi_dsub+0x4ba>
 8000850:	2d1f      	cmp	r5, #31
 8000852:	dd00      	ble.n	8000856 <__aeabi_dsub+0x36e>
 8000854:	e11f      	b.n	8000a96 <__aeabi_dsub+0x5ae>
 8000856:	2620      	movs	r6, #32
 8000858:	0027      	movs	r7, r4
 800085a:	4650      	mov	r0, sl
 800085c:	1b76      	subs	r6, r6, r5
 800085e:	40b7      	lsls	r7, r6
 8000860:	40e8      	lsrs	r0, r5
 8000862:	4307      	orrs	r7, r0
 8000864:	4650      	mov	r0, sl
 8000866:	40b0      	lsls	r0, r6
 8000868:	1e46      	subs	r6, r0, #1
 800086a:	41b0      	sbcs	r0, r6
 800086c:	40ec      	lsrs	r4, r5
 800086e:	4338      	orrs	r0, r7
 8000870:	1a17      	subs	r7, r2, r0
 8000872:	42ba      	cmp	r2, r7
 8000874:	4192      	sbcs	r2, r2
 8000876:	1b0c      	subs	r4, r1, r4
 8000878:	4252      	negs	r2, r2
 800087a:	1aa4      	subs	r4, r4, r2
 800087c:	4666      	mov	r6, ip
 800087e:	4698      	mov	r8, r3
 8000880:	e68b      	b.n	800059a <__aeabi_dsub+0xb2>
 8000882:	4664      	mov	r4, ip
 8000884:	4667      	mov	r7, ip
 8000886:	432c      	orrs	r4, r5
 8000888:	d000      	beq.n	800088c <__aeabi_dsub+0x3a4>
 800088a:	e68b      	b.n	80005a4 <__aeabi_dsub+0xbc>
 800088c:	2500      	movs	r5, #0
 800088e:	2600      	movs	r6, #0
 8000890:	2700      	movs	r7, #0
 8000892:	e6ea      	b.n	800066a <__aeabi_dsub+0x182>
 8000894:	001e      	movs	r6, r3
 8000896:	e6ad      	b.n	80005f4 <__aeabi_dsub+0x10c>
 8000898:	2b1f      	cmp	r3, #31
 800089a:	dc60      	bgt.n	800095e <__aeabi_dsub+0x476>
 800089c:	2720      	movs	r7, #32
 800089e:	1af8      	subs	r0, r7, r3
 80008a0:	000f      	movs	r7, r1
 80008a2:	4684      	mov	ip, r0
 80008a4:	4087      	lsls	r7, r0
 80008a6:	0010      	movs	r0, r2
 80008a8:	40d8      	lsrs	r0, r3
 80008aa:	4307      	orrs	r7, r0
 80008ac:	4660      	mov	r0, ip
 80008ae:	4082      	lsls	r2, r0
 80008b0:	1e50      	subs	r0, r2, #1
 80008b2:	4182      	sbcs	r2, r0
 80008b4:	40d9      	lsrs	r1, r3
 80008b6:	4317      	orrs	r7, r2
 80008b8:	e6f5      	b.n	80006a6 <__aeabi_dsub+0x1be>
 80008ba:	0026      	movs	r6, r4
 80008bc:	4650      	mov	r0, sl
 80008be:	4306      	orrs	r6, r0
 80008c0:	d005      	beq.n	80008ce <__aeabi_dsub+0x3e6>
 80008c2:	43ed      	mvns	r5, r5
 80008c4:	2d00      	cmp	r5, #0
 80008c6:	d0d3      	beq.n	8000870 <__aeabi_dsub+0x388>
 80008c8:	4e90      	ldr	r6, [pc, #576]	; (8000b0c <__aeabi_dsub+0x624>)
 80008ca:	45b4      	cmp	ip, r6
 80008cc:	d1bd      	bne.n	800084a <__aeabi_dsub+0x362>
 80008ce:	000c      	movs	r4, r1
 80008d0:	0017      	movs	r7, r2
 80008d2:	4666      	mov	r6, ip
 80008d4:	4698      	mov	r8, r3
 80008d6:	e68d      	b.n	80005f4 <__aeabi_dsub+0x10c>
 80008d8:	488c      	ldr	r0, [pc, #560]	; (8000b0c <__aeabi_dsub+0x624>)
 80008da:	4283      	cmp	r3, r0
 80008dc:	d00b      	beq.n	80008f6 <__aeabi_dsub+0x40e>
 80008de:	4663      	mov	r3, ip
 80008e0:	e6d9      	b.n	8000696 <__aeabi_dsub+0x1ae>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d000      	beq.n	80008e8 <__aeabi_dsub+0x400>
 80008e6:	e096      	b.n	8000a16 <__aeabi_dsub+0x52e>
 80008e8:	0008      	movs	r0, r1
 80008ea:	4310      	orrs	r0, r2
 80008ec:	d100      	bne.n	80008f0 <__aeabi_dsub+0x408>
 80008ee:	e0e2      	b.n	8000ab6 <__aeabi_dsub+0x5ce>
 80008f0:	000c      	movs	r4, r1
 80008f2:	0017      	movs	r7, r2
 80008f4:	4698      	mov	r8, r3
 80008f6:	4e85      	ldr	r6, [pc, #532]	; (8000b0c <__aeabi_dsub+0x624>)
 80008f8:	e67c      	b.n	80005f4 <__aeabi_dsub+0x10c>
 80008fa:	2500      	movs	r5, #0
 80008fc:	e780      	b.n	8000800 <__aeabi_dsub+0x318>
 80008fe:	2100      	movs	r1, #0
 8000900:	e78e      	b.n	8000820 <__aeabi_dsub+0x338>
 8000902:	0023      	movs	r3, r4
 8000904:	4650      	mov	r0, sl
 8000906:	4303      	orrs	r3, r0
 8000908:	2e00      	cmp	r6, #0
 800090a:	d000      	beq.n	800090e <__aeabi_dsub+0x426>
 800090c:	e0a8      	b.n	8000a60 <__aeabi_dsub+0x578>
 800090e:	2b00      	cmp	r3, #0
 8000910:	d100      	bne.n	8000914 <__aeabi_dsub+0x42c>
 8000912:	e0de      	b.n	8000ad2 <__aeabi_dsub+0x5ea>
 8000914:	000b      	movs	r3, r1
 8000916:	4313      	orrs	r3, r2
 8000918:	d100      	bne.n	800091c <__aeabi_dsub+0x434>
 800091a:	e66b      	b.n	80005f4 <__aeabi_dsub+0x10c>
 800091c:	4452      	add	r2, sl
 800091e:	4552      	cmp	r2, sl
 8000920:	4180      	sbcs	r0, r0
 8000922:	1864      	adds	r4, r4, r1
 8000924:	4240      	negs	r0, r0
 8000926:	1824      	adds	r4, r4, r0
 8000928:	0017      	movs	r7, r2
 800092a:	0223      	lsls	r3, r4, #8
 800092c:	d400      	bmi.n	8000930 <__aeabi_dsub+0x448>
 800092e:	e6fd      	b.n	800072c <__aeabi_dsub+0x244>
 8000930:	4b77      	ldr	r3, [pc, #476]	; (8000b10 <__aeabi_dsub+0x628>)
 8000932:	4666      	mov	r6, ip
 8000934:	401c      	ands	r4, r3
 8000936:	e65d      	b.n	80005f4 <__aeabi_dsub+0x10c>
 8000938:	0025      	movs	r5, r4
 800093a:	4650      	mov	r0, sl
 800093c:	4305      	orrs	r5, r0
 800093e:	2e00      	cmp	r6, #0
 8000940:	d1cf      	bne.n	80008e2 <__aeabi_dsub+0x3fa>
 8000942:	2d00      	cmp	r5, #0
 8000944:	d14f      	bne.n	80009e6 <__aeabi_dsub+0x4fe>
 8000946:	000c      	movs	r4, r1
 8000948:	4314      	orrs	r4, r2
 800094a:	d100      	bne.n	800094e <__aeabi_dsub+0x466>
 800094c:	e0a0      	b.n	8000a90 <__aeabi_dsub+0x5a8>
 800094e:	000c      	movs	r4, r1
 8000950:	0017      	movs	r7, r2
 8000952:	4698      	mov	r8, r3
 8000954:	e64e      	b.n	80005f4 <__aeabi_dsub+0x10c>
 8000956:	4666      	mov	r6, ip
 8000958:	2400      	movs	r4, #0
 800095a:	2700      	movs	r7, #0
 800095c:	e685      	b.n	800066a <__aeabi_dsub+0x182>
 800095e:	001f      	movs	r7, r3
 8000960:	0008      	movs	r0, r1
 8000962:	3f20      	subs	r7, #32
 8000964:	40f8      	lsrs	r0, r7
 8000966:	0007      	movs	r7, r0
 8000968:	2b20      	cmp	r3, #32
 800096a:	d100      	bne.n	800096e <__aeabi_dsub+0x486>
 800096c:	e08e      	b.n	8000a8c <__aeabi_dsub+0x5a4>
 800096e:	2040      	movs	r0, #64	; 0x40
 8000970:	1ac3      	subs	r3, r0, r3
 8000972:	4099      	lsls	r1, r3
 8000974:	430a      	orrs	r2, r1
 8000976:	1e51      	subs	r1, r2, #1
 8000978:	418a      	sbcs	r2, r1
 800097a:	2100      	movs	r1, #0
 800097c:	4317      	orrs	r7, r2
 800097e:	e692      	b.n	80006a6 <__aeabi_dsub+0x1be>
 8000980:	2e00      	cmp	r6, #0
 8000982:	d114      	bne.n	80009ae <__aeabi_dsub+0x4c6>
 8000984:	0026      	movs	r6, r4
 8000986:	4650      	mov	r0, sl
 8000988:	4306      	orrs	r6, r0
 800098a:	d062      	beq.n	8000a52 <__aeabi_dsub+0x56a>
 800098c:	43db      	mvns	r3, r3
 800098e:	2b00      	cmp	r3, #0
 8000990:	d15c      	bne.n	8000a4c <__aeabi_dsub+0x564>
 8000992:	1887      	adds	r7, r0, r2
 8000994:	4297      	cmp	r7, r2
 8000996:	4192      	sbcs	r2, r2
 8000998:	1864      	adds	r4, r4, r1
 800099a:	4252      	negs	r2, r2
 800099c:	18a4      	adds	r4, r4, r2
 800099e:	4666      	mov	r6, ip
 80009a0:	e687      	b.n	80006b2 <__aeabi_dsub+0x1ca>
 80009a2:	4650      	mov	r0, sl
 80009a4:	4320      	orrs	r0, r4
 80009a6:	1e44      	subs	r4, r0, #1
 80009a8:	41a0      	sbcs	r0, r4
 80009aa:	2400      	movs	r4, #0
 80009ac:	e760      	b.n	8000870 <__aeabi_dsub+0x388>
 80009ae:	4e57      	ldr	r6, [pc, #348]	; (8000b0c <__aeabi_dsub+0x624>)
 80009b0:	45b4      	cmp	ip, r6
 80009b2:	d04e      	beq.n	8000a52 <__aeabi_dsub+0x56a>
 80009b4:	2680      	movs	r6, #128	; 0x80
 80009b6:	0436      	lsls	r6, r6, #16
 80009b8:	425b      	negs	r3, r3
 80009ba:	4334      	orrs	r4, r6
 80009bc:	2b38      	cmp	r3, #56	; 0x38
 80009be:	dd00      	ble.n	80009c2 <__aeabi_dsub+0x4da>
 80009c0:	e07f      	b.n	8000ac2 <__aeabi_dsub+0x5da>
 80009c2:	2b1f      	cmp	r3, #31
 80009c4:	dd00      	ble.n	80009c8 <__aeabi_dsub+0x4e0>
 80009c6:	e08b      	b.n	8000ae0 <__aeabi_dsub+0x5f8>
 80009c8:	2620      	movs	r6, #32
 80009ca:	0027      	movs	r7, r4
 80009cc:	4650      	mov	r0, sl
 80009ce:	1af6      	subs	r6, r6, r3
 80009d0:	40b7      	lsls	r7, r6
 80009d2:	40d8      	lsrs	r0, r3
 80009d4:	4307      	orrs	r7, r0
 80009d6:	4650      	mov	r0, sl
 80009d8:	40b0      	lsls	r0, r6
 80009da:	1e46      	subs	r6, r0, #1
 80009dc:	41b0      	sbcs	r0, r6
 80009de:	4307      	orrs	r7, r0
 80009e0:	40dc      	lsrs	r4, r3
 80009e2:	18bf      	adds	r7, r7, r2
 80009e4:	e7d6      	b.n	8000994 <__aeabi_dsub+0x4ac>
 80009e6:	000d      	movs	r5, r1
 80009e8:	4315      	orrs	r5, r2
 80009ea:	d100      	bne.n	80009ee <__aeabi_dsub+0x506>
 80009ec:	e602      	b.n	80005f4 <__aeabi_dsub+0x10c>
 80009ee:	4650      	mov	r0, sl
 80009f0:	1a80      	subs	r0, r0, r2
 80009f2:	4582      	cmp	sl, r0
 80009f4:	41bf      	sbcs	r7, r7
 80009f6:	1a65      	subs	r5, r4, r1
 80009f8:	427f      	negs	r7, r7
 80009fa:	1bed      	subs	r5, r5, r7
 80009fc:	4684      	mov	ip, r0
 80009fe:	0228      	lsls	r0, r5, #8
 8000a00:	d400      	bmi.n	8000a04 <__aeabi_dsub+0x51c>
 8000a02:	e68d      	b.n	8000720 <__aeabi_dsub+0x238>
 8000a04:	4650      	mov	r0, sl
 8000a06:	1a17      	subs	r7, r2, r0
 8000a08:	42ba      	cmp	r2, r7
 8000a0a:	4192      	sbcs	r2, r2
 8000a0c:	1b0c      	subs	r4, r1, r4
 8000a0e:	4252      	negs	r2, r2
 8000a10:	1aa4      	subs	r4, r4, r2
 8000a12:	4698      	mov	r8, r3
 8000a14:	e5ee      	b.n	80005f4 <__aeabi_dsub+0x10c>
 8000a16:	000d      	movs	r5, r1
 8000a18:	4315      	orrs	r5, r2
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_dsub+0x536>
 8000a1c:	e76b      	b.n	80008f6 <__aeabi_dsub+0x40e>
 8000a1e:	4650      	mov	r0, sl
 8000a20:	0767      	lsls	r7, r4, #29
 8000a22:	08c0      	lsrs	r0, r0, #3
 8000a24:	4307      	orrs	r7, r0
 8000a26:	2080      	movs	r0, #128	; 0x80
 8000a28:	08e4      	lsrs	r4, r4, #3
 8000a2a:	0300      	lsls	r0, r0, #12
 8000a2c:	4204      	tst	r4, r0
 8000a2e:	d007      	beq.n	8000a40 <__aeabi_dsub+0x558>
 8000a30:	08cd      	lsrs	r5, r1, #3
 8000a32:	4205      	tst	r5, r0
 8000a34:	d104      	bne.n	8000a40 <__aeabi_dsub+0x558>
 8000a36:	002c      	movs	r4, r5
 8000a38:	4698      	mov	r8, r3
 8000a3a:	08d7      	lsrs	r7, r2, #3
 8000a3c:	0749      	lsls	r1, r1, #29
 8000a3e:	430f      	orrs	r7, r1
 8000a40:	0f7b      	lsrs	r3, r7, #29
 8000a42:	00e4      	lsls	r4, r4, #3
 8000a44:	431c      	orrs	r4, r3
 8000a46:	00ff      	lsls	r7, r7, #3
 8000a48:	4e30      	ldr	r6, [pc, #192]	; (8000b0c <__aeabi_dsub+0x624>)
 8000a4a:	e5d3      	b.n	80005f4 <__aeabi_dsub+0x10c>
 8000a4c:	4e2f      	ldr	r6, [pc, #188]	; (8000b0c <__aeabi_dsub+0x624>)
 8000a4e:	45b4      	cmp	ip, r6
 8000a50:	d1b4      	bne.n	80009bc <__aeabi_dsub+0x4d4>
 8000a52:	000c      	movs	r4, r1
 8000a54:	0017      	movs	r7, r2
 8000a56:	4666      	mov	r6, ip
 8000a58:	e5cc      	b.n	80005f4 <__aeabi_dsub+0x10c>
 8000a5a:	2700      	movs	r7, #0
 8000a5c:	2400      	movs	r4, #0
 8000a5e:	e5e8      	b.n	8000632 <__aeabi_dsub+0x14a>
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d039      	beq.n	8000ad8 <__aeabi_dsub+0x5f0>
 8000a64:	000b      	movs	r3, r1
 8000a66:	4313      	orrs	r3, r2
 8000a68:	d100      	bne.n	8000a6c <__aeabi_dsub+0x584>
 8000a6a:	e744      	b.n	80008f6 <__aeabi_dsub+0x40e>
 8000a6c:	08c0      	lsrs	r0, r0, #3
 8000a6e:	0767      	lsls	r7, r4, #29
 8000a70:	4307      	orrs	r7, r0
 8000a72:	2080      	movs	r0, #128	; 0x80
 8000a74:	08e4      	lsrs	r4, r4, #3
 8000a76:	0300      	lsls	r0, r0, #12
 8000a78:	4204      	tst	r4, r0
 8000a7a:	d0e1      	beq.n	8000a40 <__aeabi_dsub+0x558>
 8000a7c:	08cb      	lsrs	r3, r1, #3
 8000a7e:	4203      	tst	r3, r0
 8000a80:	d1de      	bne.n	8000a40 <__aeabi_dsub+0x558>
 8000a82:	08d7      	lsrs	r7, r2, #3
 8000a84:	0749      	lsls	r1, r1, #29
 8000a86:	430f      	orrs	r7, r1
 8000a88:	001c      	movs	r4, r3
 8000a8a:	e7d9      	b.n	8000a40 <__aeabi_dsub+0x558>
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	e771      	b.n	8000974 <__aeabi_dsub+0x48c>
 8000a90:	2500      	movs	r5, #0
 8000a92:	2700      	movs	r7, #0
 8000a94:	e5e9      	b.n	800066a <__aeabi_dsub+0x182>
 8000a96:	002e      	movs	r6, r5
 8000a98:	0027      	movs	r7, r4
 8000a9a:	3e20      	subs	r6, #32
 8000a9c:	40f7      	lsrs	r7, r6
 8000a9e:	2d20      	cmp	r5, #32
 8000aa0:	d02f      	beq.n	8000b02 <__aeabi_dsub+0x61a>
 8000aa2:	2640      	movs	r6, #64	; 0x40
 8000aa4:	1b75      	subs	r5, r6, r5
 8000aa6:	40ac      	lsls	r4, r5
 8000aa8:	4650      	mov	r0, sl
 8000aaa:	4320      	orrs	r0, r4
 8000aac:	1e44      	subs	r4, r0, #1
 8000aae:	41a0      	sbcs	r0, r4
 8000ab0:	2400      	movs	r4, #0
 8000ab2:	4338      	orrs	r0, r7
 8000ab4:	e6dc      	b.n	8000870 <__aeabi_dsub+0x388>
 8000ab6:	2480      	movs	r4, #128	; 0x80
 8000ab8:	2500      	movs	r5, #0
 8000aba:	0324      	lsls	r4, r4, #12
 8000abc:	4e13      	ldr	r6, [pc, #76]	; (8000b0c <__aeabi_dsub+0x624>)
 8000abe:	2700      	movs	r7, #0
 8000ac0:	e5d3      	b.n	800066a <__aeabi_dsub+0x182>
 8000ac2:	4650      	mov	r0, sl
 8000ac4:	4320      	orrs	r0, r4
 8000ac6:	0007      	movs	r7, r0
 8000ac8:	1e78      	subs	r0, r7, #1
 8000aca:	4187      	sbcs	r7, r0
 8000acc:	2400      	movs	r4, #0
 8000ace:	18bf      	adds	r7, r7, r2
 8000ad0:	e760      	b.n	8000994 <__aeabi_dsub+0x4ac>
 8000ad2:	000c      	movs	r4, r1
 8000ad4:	0017      	movs	r7, r2
 8000ad6:	e58d      	b.n	80005f4 <__aeabi_dsub+0x10c>
 8000ad8:	000c      	movs	r4, r1
 8000ada:	0017      	movs	r7, r2
 8000adc:	4e0b      	ldr	r6, [pc, #44]	; (8000b0c <__aeabi_dsub+0x624>)
 8000ade:	e589      	b.n	80005f4 <__aeabi_dsub+0x10c>
 8000ae0:	001e      	movs	r6, r3
 8000ae2:	0027      	movs	r7, r4
 8000ae4:	3e20      	subs	r6, #32
 8000ae6:	40f7      	lsrs	r7, r6
 8000ae8:	2b20      	cmp	r3, #32
 8000aea:	d00c      	beq.n	8000b06 <__aeabi_dsub+0x61e>
 8000aec:	2640      	movs	r6, #64	; 0x40
 8000aee:	1af3      	subs	r3, r6, r3
 8000af0:	409c      	lsls	r4, r3
 8000af2:	4650      	mov	r0, sl
 8000af4:	4320      	orrs	r0, r4
 8000af6:	1e44      	subs	r4, r0, #1
 8000af8:	41a0      	sbcs	r0, r4
 8000afa:	4307      	orrs	r7, r0
 8000afc:	2400      	movs	r4, #0
 8000afe:	18bf      	adds	r7, r7, r2
 8000b00:	e748      	b.n	8000994 <__aeabi_dsub+0x4ac>
 8000b02:	2400      	movs	r4, #0
 8000b04:	e7d0      	b.n	8000aa8 <__aeabi_dsub+0x5c0>
 8000b06:	2400      	movs	r4, #0
 8000b08:	e7f3      	b.n	8000af2 <__aeabi_dsub+0x60a>
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	000007ff 	.word	0x000007ff
 8000b10:	ff7fffff 	.word	0xff7fffff

08000b14 <__aeabi_d2iz>:
 8000b14:	b530      	push	{r4, r5, lr}
 8000b16:	4d13      	ldr	r5, [pc, #76]	; (8000b64 <__aeabi_d2iz+0x50>)
 8000b18:	030a      	lsls	r2, r1, #12
 8000b1a:	004b      	lsls	r3, r1, #1
 8000b1c:	0b12      	lsrs	r2, r2, #12
 8000b1e:	0d5b      	lsrs	r3, r3, #21
 8000b20:	0fc9      	lsrs	r1, r1, #31
 8000b22:	2400      	movs	r4, #0
 8000b24:	42ab      	cmp	r3, r5
 8000b26:	dd10      	ble.n	8000b4a <__aeabi_d2iz+0x36>
 8000b28:	4c0f      	ldr	r4, [pc, #60]	; (8000b68 <__aeabi_d2iz+0x54>)
 8000b2a:	42a3      	cmp	r3, r4
 8000b2c:	dc0f      	bgt.n	8000b4e <__aeabi_d2iz+0x3a>
 8000b2e:	2480      	movs	r4, #128	; 0x80
 8000b30:	4d0e      	ldr	r5, [pc, #56]	; (8000b6c <__aeabi_d2iz+0x58>)
 8000b32:	0364      	lsls	r4, r4, #13
 8000b34:	4322      	orrs	r2, r4
 8000b36:	1aed      	subs	r5, r5, r3
 8000b38:	2d1f      	cmp	r5, #31
 8000b3a:	dd0b      	ble.n	8000b54 <__aeabi_d2iz+0x40>
 8000b3c:	480c      	ldr	r0, [pc, #48]	; (8000b70 <__aeabi_d2iz+0x5c>)
 8000b3e:	1ac3      	subs	r3, r0, r3
 8000b40:	40da      	lsrs	r2, r3
 8000b42:	4254      	negs	r4, r2
 8000b44:	2900      	cmp	r1, #0
 8000b46:	d100      	bne.n	8000b4a <__aeabi_d2iz+0x36>
 8000b48:	0014      	movs	r4, r2
 8000b4a:	0020      	movs	r0, r4
 8000b4c:	bd30      	pop	{r4, r5, pc}
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <__aeabi_d2iz+0x60>)
 8000b50:	18cc      	adds	r4, r1, r3
 8000b52:	e7fa      	b.n	8000b4a <__aeabi_d2iz+0x36>
 8000b54:	4c08      	ldr	r4, [pc, #32]	; (8000b78 <__aeabi_d2iz+0x64>)
 8000b56:	40e8      	lsrs	r0, r5
 8000b58:	46a4      	mov	ip, r4
 8000b5a:	4463      	add	r3, ip
 8000b5c:	409a      	lsls	r2, r3
 8000b5e:	4302      	orrs	r2, r0
 8000b60:	e7ef      	b.n	8000b42 <__aeabi_d2iz+0x2e>
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	000003fe 	.word	0x000003fe
 8000b68:	0000041d 	.word	0x0000041d
 8000b6c:	00000433 	.word	0x00000433
 8000b70:	00000413 	.word	0x00000413
 8000b74:	7fffffff 	.word	0x7fffffff
 8000b78:	fffffbed 	.word	0xfffffbed

08000b7c <__aeabi_ui2d>:
 8000b7c:	b510      	push	{r4, lr}
 8000b7e:	1e04      	subs	r4, r0, #0
 8000b80:	d028      	beq.n	8000bd4 <__aeabi_ui2d+0x58>
 8000b82:	f000 f833 	bl	8000bec <__clzsi2>
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <__aeabi_ui2d+0x60>)
 8000b88:	4a15      	ldr	r2, [pc, #84]	; (8000be0 <__aeabi_ui2d+0x64>)
 8000b8a:	1a1b      	subs	r3, r3, r0
 8000b8c:	1ad2      	subs	r2, r2, r3
 8000b8e:	2a1f      	cmp	r2, #31
 8000b90:	dd15      	ble.n	8000bbe <__aeabi_ui2d+0x42>
 8000b92:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <__aeabi_ui2d+0x68>)
 8000b94:	1ad2      	subs	r2, r2, r3
 8000b96:	4094      	lsls	r4, r2
 8000b98:	2200      	movs	r2, #0
 8000b9a:	0324      	lsls	r4, r4, #12
 8000b9c:	055b      	lsls	r3, r3, #21
 8000b9e:	0b24      	lsrs	r4, r4, #12
 8000ba0:	0d5b      	lsrs	r3, r3, #21
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	0010      	movs	r0, r2
 8000ba6:	0324      	lsls	r4, r4, #12
 8000ba8:	0d0a      	lsrs	r2, r1, #20
 8000baa:	0b24      	lsrs	r4, r4, #12
 8000bac:	0512      	lsls	r2, r2, #20
 8000bae:	4322      	orrs	r2, r4
 8000bb0:	4c0d      	ldr	r4, [pc, #52]	; (8000be8 <__aeabi_ui2d+0x6c>)
 8000bb2:	051b      	lsls	r3, r3, #20
 8000bb4:	4022      	ands	r2, r4
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	0859      	lsrs	r1, r3, #1
 8000bbc:	bd10      	pop	{r4, pc}
 8000bbe:	0021      	movs	r1, r4
 8000bc0:	4091      	lsls	r1, r2
 8000bc2:	000a      	movs	r2, r1
 8000bc4:	210b      	movs	r1, #11
 8000bc6:	1a08      	subs	r0, r1, r0
 8000bc8:	40c4      	lsrs	r4, r0
 8000bca:	055b      	lsls	r3, r3, #21
 8000bcc:	0324      	lsls	r4, r4, #12
 8000bce:	0b24      	lsrs	r4, r4, #12
 8000bd0:	0d5b      	lsrs	r3, r3, #21
 8000bd2:	e7e6      	b.n	8000ba2 <__aeabi_ui2d+0x26>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	2400      	movs	r4, #0
 8000bd8:	2200      	movs	r2, #0
 8000bda:	e7e2      	b.n	8000ba2 <__aeabi_ui2d+0x26>
 8000bdc:	0000041e 	.word	0x0000041e
 8000be0:	00000433 	.word	0x00000433
 8000be4:	00000413 	.word	0x00000413
 8000be8:	800fffff 	.word	0x800fffff

08000bec <__clzsi2>:
 8000bec:	211c      	movs	r1, #28
 8000bee:	2301      	movs	r3, #1
 8000bf0:	041b      	lsls	r3, r3, #16
 8000bf2:	4298      	cmp	r0, r3
 8000bf4:	d301      	bcc.n	8000bfa <__clzsi2+0xe>
 8000bf6:	0c00      	lsrs	r0, r0, #16
 8000bf8:	3910      	subs	r1, #16
 8000bfa:	0a1b      	lsrs	r3, r3, #8
 8000bfc:	4298      	cmp	r0, r3
 8000bfe:	d301      	bcc.n	8000c04 <__clzsi2+0x18>
 8000c00:	0a00      	lsrs	r0, r0, #8
 8000c02:	3908      	subs	r1, #8
 8000c04:	091b      	lsrs	r3, r3, #4
 8000c06:	4298      	cmp	r0, r3
 8000c08:	d301      	bcc.n	8000c0e <__clzsi2+0x22>
 8000c0a:	0900      	lsrs	r0, r0, #4
 8000c0c:	3904      	subs	r1, #4
 8000c0e:	a202      	add	r2, pc, #8	; (adr r2, 8000c18 <__clzsi2+0x2c>)
 8000c10:	5c10      	ldrb	r0, [r2, r0]
 8000c12:	1840      	adds	r0, r0, r1
 8000c14:	4770      	bx	lr
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	02020304 	.word	0x02020304
 8000c1c:	01010101 	.word	0x01010101
	...

08000c28 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <HAL_Init+0x24>)
 8000c2e:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <HAL_Init+0x24>)
 8000c30:	6812      	ldr	r2, [r2, #0]
 8000c32:	2110      	movs	r1, #16
 8000c34:	430a      	orrs	r2, r1
 8000c36:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f000 f809 	bl	8000c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c3e:	f002 fc97 	bl	8003570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
}
 8000c44:	0018      	movs	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	40022000 	.word	0x40022000

08000c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000c58:	f000 ff5a 	bl	8001b10 <HAL_RCC_GetHCLKFreq>
 8000c5c:	0002      	movs	r2, r0
 8000c5e:	23fa      	movs	r3, #250	; 0xfa
 8000c60:	0099      	lsls	r1, r3, #2
 8000c62:	0010      	movs	r0, r2
 8000c64:	f7ff fa58 	bl	8000118 <__udivsi3>
 8000c68:	0003      	movs	r3, r0
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f000 f90e 	bl	8000e8c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000c70:	6879      	ldr	r1, [r7, #4]
 8000c72:	2301      	movs	r3, #1
 8000c74:	425b      	negs	r3, r3
 8000c76:	2200      	movs	r2, #0
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f000 f8e1 	bl	8000e40 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	0018      	movs	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b002      	add	sp, #8
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick++;
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <HAL_IncTick+0x14>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	1c5a      	adds	r2, r3, #1
 8000c92:	4b02      	ldr	r3, [pc, #8]	; (8000c9c <HAL_IncTick+0x14>)
 8000c94:	601a      	str	r2, [r3, #0]
}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	2000014c 	.word	0x2000014c

08000ca0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca4:	4b02      	ldr	r3, [pc, #8]	; (8000cb0 <HAL_GetTick+0x10>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
}
 8000ca8:	0018      	movs	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	2000014c 	.word	0x2000014c

08000cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cbc:	f7ff fff0 	bl	8000ca0 <HAL_GetTick>
 8000cc0:	0003      	movs	r3, r0
 8000cc2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	d002      	beq.n	8000cd4 <HAL_Delay+0x20>
  {
     wait++;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	f7ff ffe3 	bl	8000ca0 <HAL_GetTick>
 8000cda:	0002      	movs	r2, r0
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	1ad2      	subs	r2, r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d3f7      	bcc.n	8000cd6 <HAL_Delay+0x22>
  {
  }
}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b004      	add	sp, #16
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	0002      	movs	r2, r0
 8000cf8:	1dfb      	adds	r3, r7, #7
 8000cfa:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <NVIC_EnableIRQ+0x28>)
 8000cfe:	1dfa      	adds	r2, r7, #7
 8000d00:	7812      	ldrb	r2, [r2, #0]
 8000d02:	0011      	movs	r1, r2
 8000d04:	221f      	movs	r2, #31
 8000d06:	400a      	ands	r2, r1
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4091      	lsls	r1, r2
 8000d0c:	000a      	movs	r2, r1
 8000d0e:	601a      	str	r2, [r3, #0]
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b002      	add	sp, #8
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	e000e100 	.word	0xe000e100

08000d1c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d1c:	b5b0      	push	{r4, r5, r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	0002      	movs	r2, r0
 8000d24:	6039      	str	r1, [r7, #0]
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d30:	d932      	bls.n	8000d98 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d32:	4c2f      	ldr	r4, [pc, #188]	; (8000df0 <NVIC_SetPriority+0xd4>)
 8000d34:	1dfb      	adds	r3, r7, #7
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	001a      	movs	r2, r3
 8000d3a:	230f      	movs	r3, #15
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	3b08      	subs	r3, #8
 8000d40:	0899      	lsrs	r1, r3, #2
 8000d42:	4a2b      	ldr	r2, [pc, #172]	; (8000df0 <NVIC_SetPriority+0xd4>)
 8000d44:	1dfb      	adds	r3, r7, #7
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	0018      	movs	r0, r3
 8000d4a:	230f      	movs	r3, #15
 8000d4c:	4003      	ands	r3, r0
 8000d4e:	3b08      	subs	r3, #8
 8000d50:	089b      	lsrs	r3, r3, #2
 8000d52:	3306      	adds	r3, #6
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	18d3      	adds	r3, r2, r3
 8000d58:	3304      	adds	r3, #4
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	1dfa      	adds	r2, r7, #7
 8000d5e:	7812      	ldrb	r2, [r2, #0]
 8000d60:	0010      	movs	r0, r2
 8000d62:	2203      	movs	r2, #3
 8000d64:	4002      	ands	r2, r0
 8000d66:	00d2      	lsls	r2, r2, #3
 8000d68:	20ff      	movs	r0, #255	; 0xff
 8000d6a:	4090      	lsls	r0, r2
 8000d6c:	0002      	movs	r2, r0
 8000d6e:	43d2      	mvns	r2, r2
 8000d70:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	019b      	lsls	r3, r3, #6
 8000d76:	20ff      	movs	r0, #255	; 0xff
 8000d78:	4018      	ands	r0, r3
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	001d      	movs	r5, r3
 8000d80:	2303      	movs	r3, #3
 8000d82:	402b      	ands	r3, r5
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	4098      	lsls	r0, r3
 8000d88:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d8a:	431a      	orrs	r2, r3
 8000d8c:	1d8b      	adds	r3, r1, #6
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	18e3      	adds	r3, r4, r3
 8000d92:	3304      	adds	r3, #4
 8000d94:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d96:	e027      	b.n	8000de8 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d98:	4c16      	ldr	r4, [pc, #88]	; (8000df4 <NVIC_SetPriority+0xd8>)
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	b25b      	sxtb	r3, r3
 8000da0:	089b      	lsrs	r3, r3, #2
 8000da2:	4914      	ldr	r1, [pc, #80]	; (8000df4 <NVIC_SetPriority+0xd8>)
 8000da4:	1dfa      	adds	r2, r7, #7
 8000da6:	7812      	ldrb	r2, [r2, #0]
 8000da8:	b252      	sxtb	r2, r2
 8000daa:	0892      	lsrs	r2, r2, #2
 8000dac:	32c0      	adds	r2, #192	; 0xc0
 8000dae:	0092      	lsls	r2, r2, #2
 8000db0:	5852      	ldr	r2, [r2, r1]
 8000db2:	1df9      	adds	r1, r7, #7
 8000db4:	7809      	ldrb	r1, [r1, #0]
 8000db6:	0008      	movs	r0, r1
 8000db8:	2103      	movs	r1, #3
 8000dba:	4001      	ands	r1, r0
 8000dbc:	00c9      	lsls	r1, r1, #3
 8000dbe:	20ff      	movs	r0, #255	; 0xff
 8000dc0:	4088      	lsls	r0, r1
 8000dc2:	0001      	movs	r1, r0
 8000dc4:	43c9      	mvns	r1, r1
 8000dc6:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dc8:	683a      	ldr	r2, [r7, #0]
 8000dca:	0192      	lsls	r2, r2, #6
 8000dcc:	20ff      	movs	r0, #255	; 0xff
 8000dce:	4010      	ands	r0, r2
 8000dd0:	1dfa      	adds	r2, r7, #7
 8000dd2:	7812      	ldrb	r2, [r2, #0]
 8000dd4:	0015      	movs	r5, r2
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	402a      	ands	r2, r5
 8000dda:	00d2      	lsls	r2, r2, #3
 8000ddc:	4090      	lsls	r0, r2
 8000dde:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de0:	430a      	orrs	r2, r1
 8000de2:	33c0      	adds	r3, #192	; 0xc0
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	511a      	str	r2, [r3, r4]
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b002      	add	sp, #8
 8000dee:	bdb0      	pop	{r4, r5, r7, pc}
 8000df0:	e000ed00 	.word	0xe000ed00
 8000df4:	e000e100 	.word	0xe000e100

08000df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	4a0c      	ldr	r2, [pc, #48]	; (8000e38 <SysTick_Config+0x40>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d901      	bls.n	8000e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e010      	b.n	8000e30 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <SysTick_Config+0x44>)
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	3a01      	subs	r2, #1
 8000e14:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e16:	2301      	movs	r3, #1
 8000e18:	425b      	negs	r3, r3
 8000e1a:	2103      	movs	r1, #3
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f7ff ff7d 	bl	8000d1c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <SysTick_Config+0x44>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <SysTick_Config+0x44>)
 8000e2a:	2207      	movs	r2, #7
 8000e2c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e2e:	2300      	movs	r3, #0
}
 8000e30:	0018      	movs	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b002      	add	sp, #8
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	00ffffff 	.word	0x00ffffff
 8000e3c:	e000e010 	.word	0xe000e010

08000e40 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	230f      	movs	r3, #15
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	1c02      	adds	r2, r0, #0
 8000e50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	230f      	movs	r3, #15
 8000e56:	18fb      	adds	r3, r7, r3
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b25b      	sxtb	r3, r3
 8000e5c:	0011      	movs	r1, r2
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f7ff ff5c 	bl	8000d1c <NVIC_SetPriority>
}
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b004      	add	sp, #16
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	0002      	movs	r2, r0
 8000e74:	1dfb      	adds	r3, r7, #7
 8000e76:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e78:	1dfb      	adds	r3, r7, #7
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	b25b      	sxtb	r3, r3
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f7ff ff36 	bl	8000cf0 <NVIC_EnableIRQ>
}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	b002      	add	sp, #8
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	0018      	movs	r0, r3
 8000e98:	f7ff ffae 	bl	8000df8 <SysTick_Config>
 8000e9c:	0003      	movs	r3, r0
}
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b002      	add	sp, #8
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d106      	bne.n	8000ec4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000eb8:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000eba:	6812      	ldr	r2, [r2, #0]
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000ec2:	e005      	b.n	8000ed0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000ec6:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000ec8:	6812      	ldr	r2, [r2, #0]
 8000eca:	2104      	movs	r1, #4
 8000ecc:	438a      	bics	r2, r1
 8000ece:	601a      	str	r2, [r3, #0]
}
 8000ed0:	46c0      	nop			; (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	b002      	add	sp, #8
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	e000e010 	.word	0xe000e010

08000edc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000ee0:	f000 f803 	bl	8000eea <HAL_SYSTICK_Callback>
}
 8000ee4:	46c0      	nop			; (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000f0a:	e14f      	b.n	80011ac <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2101      	movs	r1, #1
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4091      	lsls	r1, r2
 8000f16:	000a      	movs	r2, r1
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d100      	bne.n	8000f24 <HAL_GPIO_Init+0x30>
 8000f22:	e140      	b.n	80011a6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x40>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b12      	cmp	r3, #18
 8000f32:	d123      	bne.n	8000f7c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	08da      	lsrs	r2, r3, #3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3208      	adds	r2, #8
 8000f3c:	0092      	lsls	r2, r2, #2
 8000f3e:	58d3      	ldr	r3, [r2, r3]
 8000f40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	2207      	movs	r2, #7
 8000f46:	4013      	ands	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	409a      	lsls	r2, r3
 8000f4e:	0013      	movs	r3, r2
 8000f50:	43da      	mvns	r2, r3
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	2107      	movs	r1, #7
 8000f60:	400b      	ands	r3, r1
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	409a      	lsls	r2, r3
 8000f66:	0013      	movs	r3, r2
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	08da      	lsrs	r2, r3, #3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3208      	adds	r2, #8
 8000f76:	0092      	lsls	r2, r2, #2
 8000f78:	6939      	ldr	r1, [r7, #16]
 8000f7a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	409a      	lsls	r2, r3
 8000f8a:	0013      	movs	r3, r2
 8000f8c:	43da      	mvns	r2, r3
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2203      	movs	r2, #3
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	409a      	lsls	r2, r3
 8000fa2:	0013      	movs	r3, r2
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d00b      	beq.n	8000fd0 <HAL_GPIO_Init+0xdc>
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d007      	beq.n	8000fd0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fc4:	2b11      	cmp	r3, #17
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b12      	cmp	r3, #18
 8000fce:	d130      	bne.n	8001032 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	409a      	lsls	r2, r3
 8000fde:	0013      	movs	r3, r2
 8000fe0:	43da      	mvns	r2, r3
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	409a      	lsls	r2, r3
 8000ff2:	0013      	movs	r3, r2
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001006:	2201      	movs	r2, #1
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	409a      	lsls	r2, r3
 800100c:	0013      	movs	r3, r2
 800100e:	43da      	mvns	r2, r3
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	091b      	lsrs	r3, r3, #4
 800101c:	2201      	movs	r2, #1
 800101e:	401a      	ands	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	409a      	lsls	r2, r3
 8001024:	0013      	movs	r3, r2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2203      	movs	r2, #3
 800103e:	409a      	lsls	r2, r3
 8001040:	0013      	movs	r3, r2
 8001042:	43da      	mvns	r2, r3
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	409a      	lsls	r2, r3
 8001054:	0013      	movs	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	2380      	movs	r3, #128	; 0x80
 8001068:	055b      	lsls	r3, r3, #21
 800106a:	4013      	ands	r3, r2
 800106c:	d100      	bne.n	8001070 <HAL_GPIO_Init+0x17c>
 800106e:	e09a      	b.n	80011a6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001070:	4b54      	ldr	r3, [pc, #336]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 8001072:	4a54      	ldr	r2, [pc, #336]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 8001074:	6992      	ldr	r2, [r2, #24]
 8001076:	2101      	movs	r1, #1
 8001078:	430a      	orrs	r2, r1
 800107a:	619a      	str	r2, [r3, #24]
 800107c:	4b51      	ldr	r3, [pc, #324]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	2201      	movs	r2, #1
 8001082:	4013      	ands	r3, r2
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8001088:	4a4f      	ldr	r2, [pc, #316]	; (80011c8 <HAL_GPIO_Init+0x2d4>)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3302      	adds	r3, #2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	589b      	ldr	r3, [r3, r2]
 8001094:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	2203      	movs	r2, #3
 800109a:	4013      	ands	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	409a      	lsls	r2, r3
 80010a2:	0013      	movs	r3, r2
 80010a4:	43da      	mvns	r2, r3
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	2390      	movs	r3, #144	; 0x90
 80010b0:	05db      	lsls	r3, r3, #23
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d013      	beq.n	80010de <HAL_GPIO_Init+0x1ea>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a44      	ldr	r2, [pc, #272]	; (80011cc <HAL_GPIO_Init+0x2d8>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d00d      	beq.n	80010da <HAL_GPIO_Init+0x1e6>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a43      	ldr	r2, [pc, #268]	; (80011d0 <HAL_GPIO_Init+0x2dc>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d007      	beq.n	80010d6 <HAL_GPIO_Init+0x1e2>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a42      	ldr	r2, [pc, #264]	; (80011d4 <HAL_GPIO_Init+0x2e0>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d101      	bne.n	80010d2 <HAL_GPIO_Init+0x1de>
 80010ce:	2303      	movs	r3, #3
 80010d0:	e006      	b.n	80010e0 <HAL_GPIO_Init+0x1ec>
 80010d2:	2305      	movs	r3, #5
 80010d4:	e004      	b.n	80010e0 <HAL_GPIO_Init+0x1ec>
 80010d6:	2302      	movs	r3, #2
 80010d8:	e002      	b.n	80010e0 <HAL_GPIO_Init+0x1ec>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <HAL_GPIO_Init+0x1ec>
 80010de:	2300      	movs	r3, #0
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	2103      	movs	r1, #3
 80010e4:	400a      	ands	r2, r1
 80010e6:	0092      	lsls	r2, r2, #2
 80010e8:	4093      	lsls	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80010f0:	4935      	ldr	r1, [pc, #212]	; (80011c8 <HAL_GPIO_Init+0x2d4>)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	089b      	lsrs	r3, r3, #2
 80010f6:	3302      	adds	r3, #2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010fe:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <HAL_GPIO_Init+0x2e4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	43da      	mvns	r2, r3
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	025b      	lsls	r3, r3, #9
 8001116:	4013      	ands	r3, r2
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001122:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_GPIO_Init+0x2e4>)
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001128:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <HAL_GPIO_Init+0x2e4>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	43da      	mvns	r2, r3
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	029b      	lsls	r3, r3, #10
 8001140:	4013      	ands	r3, r2
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800114c:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <HAL_GPIO_Init+0x2e4>)
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001152:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <HAL_GPIO_Init+0x2e4>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	43da      	mvns	r2, r3
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	035b      	lsls	r3, r3, #13
 800116a:	4013      	ands	r3, r2
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_GPIO_Init+0x2e4>)
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800117c:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <HAL_GPIO_Init+0x2e4>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	43da      	mvns	r2, r3
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	039b      	lsls	r3, r3, #14
 8001194:	4013      	ands	r3, r2
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <HAL_GPIO_Init+0x2e4>)
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	3301      	adds	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	40da      	lsrs	r2, r3
 80011b4:	1e13      	subs	r3, r2, #0
 80011b6:	d000      	beq.n	80011ba <HAL_GPIO_Init+0x2c6>
 80011b8:	e6a8      	b.n	8000f0c <HAL_GPIO_Init+0x18>
  } 
}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	46bd      	mov	sp, r7
 80011be:	b006      	add	sp, #24
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40010000 	.word	0x40010000
 80011cc:	48000400 	.word	0x48000400
 80011d0:	48000800 	.word	0x48000800
 80011d4:	48000c00 	.word	0x48000c00
 80011d8:	40010400 	.word	0x40010400

080011dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	000a      	movs	r2, r1
 80011e6:	1cbb      	adds	r3, r7, #2
 80011e8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	1cba      	adds	r2, r7, #2
 80011f0:	8812      	ldrh	r2, [r2, #0]
 80011f2:	4013      	ands	r3, r2
 80011f4:	d004      	beq.n	8001200 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80011f6:	230f      	movs	r3, #15
 80011f8:	18fb      	adds	r3, r7, r3
 80011fa:	2201      	movs	r2, #1
 80011fc:	701a      	strb	r2, [r3, #0]
 80011fe:	e003      	b.n	8001208 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001200:	230f      	movs	r3, #15
 8001202:	18fb      	adds	r3, r7, r3
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001208:	230f      	movs	r3, #15
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	781b      	ldrb	r3, [r3, #0]
  }
 800120e:	0018      	movs	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	b004      	add	sp, #16
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	0008      	movs	r0, r1
 8001220:	0011      	movs	r1, r2
 8001222:	1cbb      	adds	r3, r7, #2
 8001224:	1c02      	adds	r2, r0, #0
 8001226:	801a      	strh	r2, [r3, #0]
 8001228:	1c7b      	adds	r3, r7, #1
 800122a:	1c0a      	adds	r2, r1, #0
 800122c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800122e:	1c7b      	adds	r3, r7, #1
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d004      	beq.n	8001240 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001236:	1cbb      	adds	r3, r7, #2
 8001238:	881a      	ldrh	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800123e:	e003      	b.n	8001248 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001240:	1cbb      	adds	r3, r7, #2
 8001242:	881a      	ldrh	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001248:	46c0      	nop			; (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	b002      	add	sp, #8
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	0002      	movs	r2, r0
 8001258:	1dbb      	adds	r3, r7, #6
 800125a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	1dba      	adds	r2, r7, #6
 8001262:	8812      	ldrh	r2, [r2, #0]
 8001264:	4013      	ands	r3, r2
 8001266:	d008      	beq.n	800127a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800126a:	1dba      	adds	r2, r7, #6
 800126c:	8812      	ldrh	r2, [r2, #0]
 800126e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001270:	1dbb      	adds	r3, r7, #6
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	0018      	movs	r0, r3
 8001276:	f000 f807 	bl	8001288 <HAL_GPIO_EXTI_Callback>
  }
}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	46bd      	mov	sp, r7
 800127e:	b002      	add	sp, #8
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	40010400 	.word	0x40010400

08001288 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	0002      	movs	r2, r0
 8001290:	1dbb      	adds	r3, r7, #6
 8001292:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001294:	46c0      	nop			; (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	b002      	add	sp, #8
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2201      	movs	r2, #1
 80012ae:	4013      	ands	r3, r2
 80012b0:	d100      	bne.n	80012b4 <HAL_RCC_OscConfig+0x18>
 80012b2:	e08d      	b.n	80013d0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012b4:	4bc3      	ldr	r3, [pc, #780]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	220c      	movs	r2, #12
 80012ba:	4013      	ands	r3, r2
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d00e      	beq.n	80012de <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012c0:	4bc0      	ldr	r3, [pc, #768]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	220c      	movs	r2, #12
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b08      	cmp	r3, #8
 80012ca:	d116      	bne.n	80012fa <HAL_RCC_OscConfig+0x5e>
 80012cc:	4bbd      	ldr	r3, [pc, #756]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	025b      	lsls	r3, r3, #9
 80012d4:	401a      	ands	r2, r3
 80012d6:	2380      	movs	r3, #128	; 0x80
 80012d8:	025b      	lsls	r3, r3, #9
 80012da:	429a      	cmp	r2, r3
 80012dc:	d10d      	bne.n	80012fa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012de:	4bb9      	ldr	r3, [pc, #740]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	029b      	lsls	r3, r3, #10
 80012e6:	4013      	ands	r3, r2
 80012e8:	d100      	bne.n	80012ec <HAL_RCC_OscConfig+0x50>
 80012ea:	e070      	b.n	80013ce <HAL_RCC_OscConfig+0x132>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d000      	beq.n	80012f6 <HAL_RCC_OscConfig+0x5a>
 80012f4:	e06b      	b.n	80013ce <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e2b5      	b.n	8001866 <HAL_RCC_OscConfig+0x5ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d107      	bne.n	8001312 <HAL_RCC_OscConfig+0x76>
 8001302:	4bb0      	ldr	r3, [pc, #704]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 8001304:	4aaf      	ldr	r2, [pc, #700]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	2180      	movs	r1, #128	; 0x80
 800130a:	0249      	lsls	r1, r1, #9
 800130c:	430a      	orrs	r2, r1
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	e02f      	b.n	8001372 <HAL_RCC_OscConfig+0xd6>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10c      	bne.n	8001334 <HAL_RCC_OscConfig+0x98>
 800131a:	4baa      	ldr	r3, [pc, #680]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 800131c:	4aa9      	ldr	r2, [pc, #676]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 800131e:	6812      	ldr	r2, [r2, #0]
 8001320:	49a9      	ldr	r1, [pc, #676]	; (80015c8 <HAL_RCC_OscConfig+0x32c>)
 8001322:	400a      	ands	r2, r1
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	4ba7      	ldr	r3, [pc, #668]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 8001328:	4aa6      	ldr	r2, [pc, #664]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 800132a:	6812      	ldr	r2, [r2, #0]
 800132c:	49a7      	ldr	r1, [pc, #668]	; (80015cc <HAL_RCC_OscConfig+0x330>)
 800132e:	400a      	ands	r2, r1
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	e01e      	b.n	8001372 <HAL_RCC_OscConfig+0xd6>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b05      	cmp	r3, #5
 800133a:	d10e      	bne.n	800135a <HAL_RCC_OscConfig+0xbe>
 800133c:	4ba1      	ldr	r3, [pc, #644]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 800133e:	4aa1      	ldr	r2, [pc, #644]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 8001340:	6812      	ldr	r2, [r2, #0]
 8001342:	2180      	movs	r1, #128	; 0x80
 8001344:	02c9      	lsls	r1, r1, #11
 8001346:	430a      	orrs	r2, r1
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	4b9e      	ldr	r3, [pc, #632]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 800134c:	4a9d      	ldr	r2, [pc, #628]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	2180      	movs	r1, #128	; 0x80
 8001352:	0249      	lsls	r1, r1, #9
 8001354:	430a      	orrs	r2, r1
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	e00b      	b.n	8001372 <HAL_RCC_OscConfig+0xd6>
 800135a:	4b9a      	ldr	r3, [pc, #616]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 800135c:	4a99      	ldr	r2, [pc, #612]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 800135e:	6812      	ldr	r2, [r2, #0]
 8001360:	4999      	ldr	r1, [pc, #612]	; (80015c8 <HAL_RCC_OscConfig+0x32c>)
 8001362:	400a      	ands	r2, r1
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	4b97      	ldr	r3, [pc, #604]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 8001368:	4a96      	ldr	r2, [pc, #600]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 800136a:	6812      	ldr	r2, [r2, #0]
 800136c:	4997      	ldr	r1, [pc, #604]	; (80015cc <HAL_RCC_OscConfig+0x330>)
 800136e:	400a      	ands	r2, r1
 8001370:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d014      	beq.n	80013a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137a:	f7ff fc91 	bl	8000ca0 <HAL_GetTick>
 800137e:	0003      	movs	r3, r0
 8001380:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001384:	f7ff fc8c 	bl	8000ca0 <HAL_GetTick>
 8001388:	0002      	movs	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b64      	cmp	r3, #100	; 0x64
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e267      	b.n	8001866 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001396:	4b8b      	ldr	r3, [pc, #556]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	2380      	movs	r3, #128	; 0x80
 800139c:	029b      	lsls	r3, r3, #10
 800139e:	4013      	ands	r3, r2
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0xe8>
 80013a2:	e015      	b.n	80013d0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fc7c 	bl	8000ca0 <HAL_GetTick>
 80013a8:	0003      	movs	r3, r0
 80013aa:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ae:	f7ff fc77 	bl	8000ca0 <HAL_GetTick>
 80013b2:	0002      	movs	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b64      	cmp	r3, #100	; 0x64
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e252      	b.n	8001866 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c0:	4b80      	ldr	r3, [pc, #512]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	029b      	lsls	r3, r3, #10
 80013c8:	4013      	ands	r3, r2
 80013ca:	d1f0      	bne.n	80013ae <HAL_RCC_OscConfig+0x112>
 80013cc:	e000      	b.n	80013d0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2202      	movs	r2, #2
 80013d6:	4013      	ands	r3, r2
 80013d8:	d100      	bne.n	80013dc <HAL_RCC_OscConfig+0x140>
 80013da:	e069      	b.n	80014b0 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013dc:	4b79      	ldr	r3, [pc, #484]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	220c      	movs	r2, #12
 80013e2:	4013      	ands	r3, r2
 80013e4:	d00b      	beq.n	80013fe <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013e6:	4b77      	ldr	r3, [pc, #476]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	220c      	movs	r2, #12
 80013ec:	4013      	ands	r3, r2
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d11c      	bne.n	800142c <HAL_RCC_OscConfig+0x190>
 80013f2:	4b74      	ldr	r3, [pc, #464]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	025b      	lsls	r3, r3, #9
 80013fa:	4013      	ands	r3, r2
 80013fc:	d116      	bne.n	800142c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	4b71      	ldr	r3, [pc, #452]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2202      	movs	r2, #2
 8001404:	4013      	ands	r3, r2
 8001406:	d005      	beq.n	8001414 <HAL_RCC_OscConfig+0x178>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d001      	beq.n	8001414 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e228      	b.n	8001866 <HAL_RCC_OscConfig+0x5ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001414:	4a6b      	ldr	r2, [pc, #428]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 8001416:	4b6b      	ldr	r3, [pc, #428]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	21f8      	movs	r1, #248	; 0xf8
 800141c:	438b      	bics	r3, r1
 800141e:	0019      	movs	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	430b      	orrs	r3, r1
 8001428:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	e041      	b.n	80014b0 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d024      	beq.n	800147e <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001434:	4b63      	ldr	r3, [pc, #396]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 8001436:	4a63      	ldr	r2, [pc, #396]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 8001438:	6812      	ldr	r2, [r2, #0]
 800143a:	2101      	movs	r1, #1
 800143c:	430a      	orrs	r2, r1
 800143e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fc2e 	bl	8000ca0 <HAL_GetTick>
 8001444:	0003      	movs	r3, r0
 8001446:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144a:	f7ff fc29 	bl	8000ca0 <HAL_GetTick>
 800144e:	0002      	movs	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e204      	b.n	8001866 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145c:	4b59      	ldr	r3, [pc, #356]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2202      	movs	r2, #2
 8001462:	4013      	ands	r3, r2
 8001464:	d0f1      	beq.n	800144a <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001466:	4a57      	ldr	r2, [pc, #348]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 8001468:	4b56      	ldr	r3, [pc, #344]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	21f8      	movs	r1, #248	; 0xf8
 800146e:	438b      	bics	r3, r1
 8001470:	0019      	movs	r1, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	430b      	orrs	r3, r1
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	e018      	b.n	80014b0 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800147e:	4b51      	ldr	r3, [pc, #324]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 8001480:	4a50      	ldr	r2, [pc, #320]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 8001482:	6812      	ldr	r2, [r2, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	438a      	bics	r2, r1
 8001488:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148a:	f7ff fc09 	bl	8000ca0 <HAL_GetTick>
 800148e:	0003      	movs	r3, r0
 8001490:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001494:	f7ff fc04 	bl	8000ca0 <HAL_GetTick>
 8001498:	0002      	movs	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e1df      	b.n	8001866 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a6:	4b47      	ldr	r3, [pc, #284]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2202      	movs	r2, #2
 80014ac:	4013      	ands	r3, r2
 80014ae:	d1f1      	bne.n	8001494 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2208      	movs	r2, #8
 80014b6:	4013      	ands	r3, r2
 80014b8:	d036      	beq.n	8001528 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d019      	beq.n	80014f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c2:	4b40      	ldr	r3, [pc, #256]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 80014c4:	4a3f      	ldr	r2, [pc, #252]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 80014c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014c8:	2101      	movs	r1, #1
 80014ca:	430a      	orrs	r2, r1
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fbe7 	bl	8000ca0 <HAL_GetTick>
 80014d2:	0003      	movs	r3, r0
 80014d4:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d8:	f7ff fbe2 	bl	8000ca0 <HAL_GetTick>
 80014dc:	0002      	movs	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e1bd      	b.n	8001866 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ea:	4b36      	ldr	r3, [pc, #216]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	2202      	movs	r2, #2
 80014f0:	4013      	ands	r3, r2
 80014f2:	d0f1      	beq.n	80014d8 <HAL_RCC_OscConfig+0x23c>
 80014f4:	e018      	b.n	8001528 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f6:	4b33      	ldr	r3, [pc, #204]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 80014f8:	4a32      	ldr	r2, [pc, #200]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 80014fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014fc:	2101      	movs	r1, #1
 80014fe:	438a      	bics	r2, r1
 8001500:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001502:	f7ff fbcd 	bl	8000ca0 <HAL_GetTick>
 8001506:	0003      	movs	r3, r0
 8001508:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800150c:	f7ff fbc8 	bl	8000ca0 <HAL_GetTick>
 8001510:	0002      	movs	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e1a3      	b.n	8001866 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151e:	4b29      	ldr	r3, [pc, #164]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001522:	2202      	movs	r2, #2
 8001524:	4013      	ands	r3, r2
 8001526:	d1f1      	bne.n	800150c <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2204      	movs	r2, #4
 800152e:	4013      	ands	r3, r2
 8001530:	d100      	bne.n	8001534 <HAL_RCC_OscConfig+0x298>
 8001532:	e0b5      	b.n	80016a0 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001534:	2317      	movs	r3, #23
 8001536:	18fb      	adds	r3, r7, r3
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153c:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 800153e:	69da      	ldr	r2, [r3, #28]
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	055b      	lsls	r3, r3, #21
 8001544:	4013      	ands	r3, r2
 8001546:	d111      	bne.n	800156c <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001548:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 800154a:	4a1e      	ldr	r2, [pc, #120]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 800154c:	69d2      	ldr	r2, [r2, #28]
 800154e:	2180      	movs	r1, #128	; 0x80
 8001550:	0549      	lsls	r1, r1, #21
 8001552:	430a      	orrs	r2, r1
 8001554:	61da      	str	r2, [r3, #28]
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 8001558:	69da      	ldr	r2, [r3, #28]
 800155a:	2380      	movs	r3, #128	; 0x80
 800155c:	055b      	lsls	r3, r3, #21
 800155e:	4013      	ands	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001564:	2317      	movs	r3, #23
 8001566:	18fb      	adds	r3, r7, r3
 8001568:	2201      	movs	r2, #1
 800156a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156c:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <HAL_RCC_OscConfig+0x334>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4013      	ands	r3, r2
 8001576:	d11a      	bne.n	80015ae <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001578:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <HAL_RCC_OscConfig+0x334>)
 800157a:	4a15      	ldr	r2, [pc, #84]	; (80015d0 <HAL_RCC_OscConfig+0x334>)
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	2180      	movs	r1, #128	; 0x80
 8001580:	0049      	lsls	r1, r1, #1
 8001582:	430a      	orrs	r2, r1
 8001584:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001586:	f7ff fb8b 	bl	8000ca0 <HAL_GetTick>
 800158a:	0003      	movs	r3, r0
 800158c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001590:	f7ff fb86 	bl	8000ca0 <HAL_GetTick>
 8001594:	0002      	movs	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	; 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e161      	b.n	8001866 <HAL_RCC_OscConfig+0x5ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_RCC_OscConfig+0x334>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4013      	ands	r3, r2
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d10e      	bne.n	80015d4 <HAL_RCC_OscConfig+0x338>
 80015b6:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 80015b8:	4a02      	ldr	r2, [pc, #8]	; (80015c4 <HAL_RCC_OscConfig+0x328>)
 80015ba:	6a12      	ldr	r2, [r2, #32]
 80015bc:	2101      	movs	r1, #1
 80015be:	430a      	orrs	r2, r1
 80015c0:	621a      	str	r2, [r3, #32]
 80015c2:	e035      	b.n	8001630 <HAL_RCC_OscConfig+0x394>
 80015c4:	40021000 	.word	0x40021000
 80015c8:	fffeffff 	.word	0xfffeffff
 80015cc:	fffbffff 	.word	0xfffbffff
 80015d0:	40007000 	.word	0x40007000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d10c      	bne.n	80015f6 <HAL_RCC_OscConfig+0x35a>
 80015dc:	4ba4      	ldr	r3, [pc, #656]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 80015de:	4aa4      	ldr	r2, [pc, #656]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 80015e0:	6a12      	ldr	r2, [r2, #32]
 80015e2:	2101      	movs	r1, #1
 80015e4:	438a      	bics	r2, r1
 80015e6:	621a      	str	r2, [r3, #32]
 80015e8:	4ba1      	ldr	r3, [pc, #644]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 80015ea:	4aa1      	ldr	r2, [pc, #644]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 80015ec:	6a12      	ldr	r2, [r2, #32]
 80015ee:	2104      	movs	r1, #4
 80015f0:	438a      	bics	r2, r1
 80015f2:	621a      	str	r2, [r3, #32]
 80015f4:	e01c      	b.n	8001630 <HAL_RCC_OscConfig+0x394>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b05      	cmp	r3, #5
 80015fc:	d10c      	bne.n	8001618 <HAL_RCC_OscConfig+0x37c>
 80015fe:	4b9c      	ldr	r3, [pc, #624]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 8001600:	4a9b      	ldr	r2, [pc, #620]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 8001602:	6a12      	ldr	r2, [r2, #32]
 8001604:	2104      	movs	r1, #4
 8001606:	430a      	orrs	r2, r1
 8001608:	621a      	str	r2, [r3, #32]
 800160a:	4b99      	ldr	r3, [pc, #612]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 800160c:	4a98      	ldr	r2, [pc, #608]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 800160e:	6a12      	ldr	r2, [r2, #32]
 8001610:	2101      	movs	r1, #1
 8001612:	430a      	orrs	r2, r1
 8001614:	621a      	str	r2, [r3, #32]
 8001616:	e00b      	b.n	8001630 <HAL_RCC_OscConfig+0x394>
 8001618:	4b95      	ldr	r3, [pc, #596]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 800161a:	4a95      	ldr	r2, [pc, #596]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 800161c:	6a12      	ldr	r2, [r2, #32]
 800161e:	2101      	movs	r1, #1
 8001620:	438a      	bics	r2, r1
 8001622:	621a      	str	r2, [r3, #32]
 8001624:	4b92      	ldr	r3, [pc, #584]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 8001626:	4a92      	ldr	r2, [pc, #584]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 8001628:	6a12      	ldr	r2, [r2, #32]
 800162a:	2104      	movs	r1, #4
 800162c:	438a      	bics	r2, r1
 800162e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d014      	beq.n	8001662 <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001638:	f7ff fb32 	bl	8000ca0 <HAL_GetTick>
 800163c:	0003      	movs	r3, r0
 800163e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001640:	e009      	b.n	8001656 <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001642:	f7ff fb2d 	bl	8000ca0 <HAL_GetTick>
 8001646:	0002      	movs	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	4a89      	ldr	r2, [pc, #548]	; (8001874 <HAL_RCC_OscConfig+0x5d8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e107      	b.n	8001866 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001656:	4b86      	ldr	r3, [pc, #536]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	2202      	movs	r2, #2
 800165c:	4013      	ands	r3, r2
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x3a6>
 8001660:	e013      	b.n	800168a <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001662:	f7ff fb1d 	bl	8000ca0 <HAL_GetTick>
 8001666:	0003      	movs	r3, r0
 8001668:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166a:	e009      	b.n	8001680 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800166c:	f7ff fb18 	bl	8000ca0 <HAL_GetTick>
 8001670:	0002      	movs	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	4a7f      	ldr	r2, [pc, #508]	; (8001874 <HAL_RCC_OscConfig+0x5d8>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e0f2      	b.n	8001866 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001680:	4b7b      	ldr	r3, [pc, #492]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	2202      	movs	r2, #2
 8001686:	4013      	ands	r3, r2
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800168a:	2317      	movs	r3, #23
 800168c:	18fb      	adds	r3, r7, r3
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d105      	bne.n	80016a0 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001694:	4b76      	ldr	r3, [pc, #472]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 8001696:	4a76      	ldr	r2, [pc, #472]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 8001698:	69d2      	ldr	r2, [r2, #28]
 800169a:	4977      	ldr	r1, [pc, #476]	; (8001878 <HAL_RCC_OscConfig+0x5dc>)
 800169c:	400a      	ands	r2, r1
 800169e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2210      	movs	r2, #16
 80016a6:	4013      	ands	r3, r2
 80016a8:	d063      	beq.n	8001772 <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d12a      	bne.n	8001708 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016b2:	4b6f      	ldr	r3, [pc, #444]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 80016b4:	4a6e      	ldr	r2, [pc, #440]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 80016b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016b8:	2104      	movs	r1, #4
 80016ba:	430a      	orrs	r2, r1
 80016bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80016be:	4b6c      	ldr	r3, [pc, #432]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 80016c0:	4a6b      	ldr	r2, [pc, #428]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 80016c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016c4:	2101      	movs	r1, #1
 80016c6:	430a      	orrs	r2, r1
 80016c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ca:	f7ff fae9 	bl	8000ca0 <HAL_GetTick>
 80016ce:	0003      	movs	r3, r0
 80016d0:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016d4:	f7ff fae4 	bl	8000ca0 <HAL_GetTick>
 80016d8:	0002      	movs	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e0bf      	b.n	8001866 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016e6:	4b62      	ldr	r3, [pc, #392]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 80016e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ea:	2202      	movs	r2, #2
 80016ec:	4013      	ands	r3, r2
 80016ee:	d0f1      	beq.n	80016d4 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016f0:	4a5f      	ldr	r2, [pc, #380]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 80016f2:	4b5f      	ldr	r3, [pc, #380]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 80016f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f6:	21f8      	movs	r1, #248	; 0xf8
 80016f8:	438b      	bics	r3, r1
 80016fa:	0019      	movs	r1, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	430b      	orrs	r3, r1
 8001704:	6353      	str	r3, [r2, #52]	; 0x34
 8001706:	e034      	b.n	8001772 <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	3305      	adds	r3, #5
 800170e:	d111      	bne.n	8001734 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001710:	4b57      	ldr	r3, [pc, #348]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 8001712:	4a57      	ldr	r2, [pc, #348]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 8001714:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001716:	2104      	movs	r1, #4
 8001718:	438a      	bics	r2, r1
 800171a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800171c:	4a54      	ldr	r2, [pc, #336]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 800171e:	4b54      	ldr	r3, [pc, #336]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 8001720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001722:	21f8      	movs	r1, #248	; 0xf8
 8001724:	438b      	bics	r3, r1
 8001726:	0019      	movs	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	430b      	orrs	r3, r1
 8001730:	6353      	str	r3, [r2, #52]	; 0x34
 8001732:	e01e      	b.n	8001772 <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001734:	4b4e      	ldr	r3, [pc, #312]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 8001736:	4a4e      	ldr	r2, [pc, #312]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 8001738:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800173a:	2104      	movs	r1, #4
 800173c:	430a      	orrs	r2, r1
 800173e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001740:	4b4b      	ldr	r3, [pc, #300]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 8001742:	4a4b      	ldr	r2, [pc, #300]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 8001744:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001746:	2101      	movs	r1, #1
 8001748:	438a      	bics	r2, r1
 800174a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174c:	f7ff faa8 	bl	8000ca0 <HAL_GetTick>
 8001750:	0003      	movs	r3, r0
 8001752:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001756:	f7ff faa3 	bl	8000ca0 <HAL_GetTick>
 800175a:	0002      	movs	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e07e      	b.n	8001866 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001768:	4b41      	ldr	r3, [pc, #260]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 800176a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176c:	2202      	movs	r2, #2
 800176e:	4013      	ands	r3, r2
 8001770:	d1f1      	bne.n	8001756 <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d100      	bne.n	800177c <HAL_RCC_OscConfig+0x4e0>
 800177a:	e073      	b.n	8001864 <HAL_RCC_OscConfig+0x5c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800177c:	4b3c      	ldr	r3, [pc, #240]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	220c      	movs	r2, #12
 8001782:	4013      	ands	r3, r2
 8001784:	2b08      	cmp	r3, #8
 8001786:	d100      	bne.n	800178a <HAL_RCC_OscConfig+0x4ee>
 8001788:	e06a      	b.n	8001860 <HAL_RCC_OscConfig+0x5c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d14b      	bne.n	800182a <HAL_RCC_OscConfig+0x58e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001792:	4b37      	ldr	r3, [pc, #220]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 8001794:	4a36      	ldr	r2, [pc, #216]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	4938      	ldr	r1, [pc, #224]	; (800187c <HAL_RCC_OscConfig+0x5e0>)
 800179a:	400a      	ands	r2, r1
 800179c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179e:	f7ff fa7f 	bl	8000ca0 <HAL_GetTick>
 80017a2:	0003      	movs	r3, r0
 80017a4:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a8:	f7ff fa7a 	bl	8000ca0 <HAL_GetTick>
 80017ac:	0002      	movs	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e055      	b.n	8001866 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ba:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	049b      	lsls	r3, r3, #18
 80017c2:	4013      	ands	r3, r2
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c6:	4a2a      	ldr	r2, [pc, #168]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 80017c8:	4b29      	ldr	r3, [pc, #164]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	210f      	movs	r1, #15
 80017ce:	438b      	bics	r3, r1
 80017d0:	0019      	movs	r1, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d6:	430b      	orrs	r3, r1
 80017d8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80017da:	4a25      	ldr	r2, [pc, #148]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 80017dc:	4b24      	ldr	r3, [pc, #144]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	4927      	ldr	r1, [pc, #156]	; (8001880 <HAL_RCC_OscConfig+0x5e4>)
 80017e2:	4019      	ands	r1, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	4303      	orrs	r3, r0
 80017ee:	430b      	orrs	r3, r1
 80017f0:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 80017f4:	4a1e      	ldr	r2, [pc, #120]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 80017f6:	6812      	ldr	r2, [r2, #0]
 80017f8:	2180      	movs	r1, #128	; 0x80
 80017fa:	0449      	lsls	r1, r1, #17
 80017fc:	430a      	orrs	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff fa4e 	bl	8000ca0 <HAL_GetTick>
 8001804:	0003      	movs	r3, r0
 8001806:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x580>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800180a:	f7ff fa49 	bl	8000ca0 <HAL_GetTick>
 800180e:	0002      	movs	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x580>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e024      	b.n	8001866 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	049b      	lsls	r3, r3, #18
 8001824:	4013      	ands	r3, r2
 8001826:	d0f0      	beq.n	800180a <HAL_RCC_OscConfig+0x56e>
 8001828:	e01c      	b.n	8001864 <HAL_RCC_OscConfig+0x5c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 800182c:	4a10      	ldr	r2, [pc, #64]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	4912      	ldr	r1, [pc, #72]	; (800187c <HAL_RCC_OscConfig+0x5e0>)
 8001832:	400a      	ands	r2, r1
 8001834:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001836:	f7ff fa33 	bl	8000ca0 <HAL_GetTick>
 800183a:	0003      	movs	r3, r0
 800183c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x5b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001840:	f7ff fa2e 	bl	8000ca0 <HAL_GetTick>
 8001844:	0002      	movs	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e009      	b.n	8001866 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <HAL_RCC_OscConfig+0x5d4>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	2380      	movs	r3, #128	; 0x80
 8001858:	049b      	lsls	r3, r3, #18
 800185a:	4013      	ands	r3, r2
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x5a4>
 800185e:	e001      	b.n	8001864 <HAL_RCC_OscConfig+0x5c8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <HAL_RCC_OscConfig+0x5ca>
    }
  }
  
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	0018      	movs	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	b006      	add	sp, #24
 800186c:	bd80      	pop	{r7, pc}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	40021000 	.word	0x40021000
 8001874:	00001388 	.word	0x00001388
 8001878:	efffffff 	.word	0xefffffff
 800187c:	feffffff 	.word	0xfeffffff
 8001880:	ffc2ffff 	.word	0xffc2ffff

08001884 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001892:	4b69      	ldr	r3, [pc, #420]	; (8001a38 <HAL_RCC_ClockConfig+0x1b4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2201      	movs	r2, #1
 8001898:	401a      	ands	r2, r3
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d211      	bcs.n	80018c4 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a0:	4b65      	ldr	r3, [pc, #404]	; (8001a38 <HAL_RCC_ClockConfig+0x1b4>)
 80018a2:	4a65      	ldr	r2, [pc, #404]	; (8001a38 <HAL_RCC_ClockConfig+0x1b4>)
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	2101      	movs	r1, #1
 80018a8:	438a      	bics	r2, r1
 80018aa:	0011      	movs	r1, r2
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018b2:	4b61      	ldr	r3, [pc, #388]	; (8001a38 <HAL_RCC_ClockConfig+0x1b4>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2201      	movs	r2, #1
 80018b8:	401a      	ands	r2, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0b5      	b.n	8001a30 <HAL_RCC_ClockConfig+0x1ac>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2202      	movs	r2, #2
 80018ca:	4013      	ands	r3, r2
 80018cc:	d009      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ce:	4a5b      	ldr	r2, [pc, #364]	; (8001a3c <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	4b5a      	ldr	r3, [pc, #360]	; (8001a3c <HAL_RCC_ClockConfig+0x1b8>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	21f0      	movs	r1, #240	; 0xf0
 80018d6:	438b      	bics	r3, r1
 80018d8:	0019      	movs	r1, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	430b      	orrs	r3, r1
 80018e0:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2201      	movs	r2, #1
 80018e8:	4013      	ands	r3, r2
 80018ea:	d100      	bne.n	80018ee <HAL_RCC_ClockConfig+0x6a>
 80018ec:	e067      	b.n	80019be <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d107      	bne.n	8001906 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	4b51      	ldr	r3, [pc, #324]	; (8001a3c <HAL_RCC_ClockConfig+0x1b8>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	029b      	lsls	r3, r3, #10
 80018fe:	4013      	ands	r3, r2
 8001900:	d114      	bne.n	800192c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e094      	b.n	8001a30 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d107      	bne.n	800191e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190e:	4b4b      	ldr	r3, [pc, #300]	; (8001a3c <HAL_RCC_ClockConfig+0x1b8>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	049b      	lsls	r3, r3, #18
 8001916:	4013      	ands	r3, r2
 8001918:	d108      	bne.n	800192c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e088      	b.n	8001a30 <HAL_RCC_ClockConfig+0x1ac>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191e:	4b47      	ldr	r3, [pc, #284]	; (8001a3c <HAL_RCC_ClockConfig+0x1b8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2202      	movs	r2, #2
 8001924:	4013      	ands	r3, r2
 8001926:	d101      	bne.n	800192c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e081      	b.n	8001a30 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800192c:	4a43      	ldr	r2, [pc, #268]	; (8001a3c <HAL_RCC_ClockConfig+0x1b8>)
 800192e:	4b43      	ldr	r3, [pc, #268]	; (8001a3c <HAL_RCC_ClockConfig+0x1b8>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2103      	movs	r1, #3
 8001934:	438b      	bics	r3, r1
 8001936:	0019      	movs	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	430b      	orrs	r3, r1
 800193e:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001940:	f7ff f9ae 	bl	8000ca0 <HAL_GetTick>
 8001944:	0003      	movs	r3, r0
 8001946:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d111      	bne.n	8001974 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001950:	e009      	b.n	8001966 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001952:	f7ff f9a5 	bl	8000ca0 <HAL_GetTick>
 8001956:	0002      	movs	r2, r0
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	4a38      	ldr	r2, [pc, #224]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e064      	b.n	8001a30 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001966:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <HAL_RCC_ClockConfig+0x1b8>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	220c      	movs	r2, #12
 800196c:	4013      	ands	r3, r2
 800196e:	2b04      	cmp	r3, #4
 8001970:	d1ef      	bne.n	8001952 <HAL_RCC_ClockConfig+0xce>
 8001972:	e024      	b.n	80019be <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d11b      	bne.n	80019b4 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800197c:	e009      	b.n	8001992 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800197e:	f7ff f98f 	bl	8000ca0 <HAL_GetTick>
 8001982:	0002      	movs	r2, r0
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	4a2d      	ldr	r2, [pc, #180]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e04e      	b.n	8001a30 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001992:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	220c      	movs	r2, #12
 8001998:	4013      	ands	r3, r2
 800199a:	2b08      	cmp	r3, #8
 800199c:	d1ef      	bne.n	800197e <HAL_RCC_ClockConfig+0xfa>
 800199e:	e00e      	b.n	80019be <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a0:	f7ff f97e 	bl	8000ca0 <HAL_GetTick>
 80019a4:	0002      	movs	r2, r0
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	4a25      	ldr	r2, [pc, #148]	; (8001a40 <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e03d      	b.n	8001a30 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019b4:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <HAL_RCC_ClockConfig+0x1b8>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	220c      	movs	r2, #12
 80019ba:	4013      	ands	r3, r2
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80019be:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <HAL_RCC_ClockConfig+0x1b4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2201      	movs	r2, #1
 80019c4:	401a      	ands	r2, r3
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d911      	bls.n	80019f0 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019cc:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <HAL_RCC_ClockConfig+0x1b4>)
 80019ce:	4a1a      	ldr	r2, [pc, #104]	; (8001a38 <HAL_RCC_ClockConfig+0x1b4>)
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	2101      	movs	r1, #1
 80019d4:	438a      	bics	r2, r1
 80019d6:	0011      	movs	r1, r2
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <HAL_RCC_ClockConfig+0x1b4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2201      	movs	r2, #1
 80019e4:	401a      	ands	r2, r3
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d001      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e01f      	b.n	8001a30 <HAL_RCC_ClockConfig+0x1ac>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2204      	movs	r2, #4
 80019f6:	4013      	ands	r3, r2
 80019f8:	d008      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80019fa:	4a10      	ldr	r2, [pc, #64]	; (8001a3c <HAL_RCC_ClockConfig+0x1b8>)
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <HAL_RCC_ClockConfig+0x1b8>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	4910      	ldr	r1, [pc, #64]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 8001a02:	4019      	ands	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	430b      	orrs	r3, r1
 8001a0a:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a0c:	f000 f820 	bl	8001a50 <HAL_RCC_GetSysClockFreq>
 8001a10:	0001      	movs	r1, r0
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_RCC_ClockConfig+0x1b8>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	091b      	lsrs	r3, r3, #4
 8001a18:	220f      	movs	r2, #15
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	5cd3      	ldrb	r3, [r2, r3]
 8001a20:	000a      	movs	r2, r1
 8001a22:	40da      	lsrs	r2, r3
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_RCC_ClockConfig+0x1c8>)
 8001a26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f7ff f911 	bl	8000c50 <HAL_InitTick>
  
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	0018      	movs	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	b004      	add	sp, #16
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40022000 	.word	0x40022000
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	00001388 	.word	0x00001388
 8001a44:	fffff8ff 	.word	0xfffff8ff
 8001a48:	08003e84 	.word	0x08003e84
 8001a4c:	20000124 	.word	0x20000124

08001a50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b08f      	sub	sp, #60	; 0x3c
 8001a54:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001a56:	2314      	movs	r3, #20
 8001a58:	18fb      	adds	r3, r7, r3
 8001a5a:	4a28      	ldr	r2, [pc, #160]	; (8001afc <HAL_RCC_GetSysClockFreq+0xac>)
 8001a5c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a5e:	c313      	stmia	r3!, {r0, r1, r4}
 8001a60:	6812      	ldr	r2, [r2, #0]
 8001a62:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	4a26      	ldr	r2, [pc, #152]	; (8001b00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a68:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a6a:	c313      	stmia	r3!, {r0, r1, r4}
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a74:	2300      	movs	r3, #0
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a78:	2300      	movs	r3, #0
 8001a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001a84:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8c:	220c      	movs	r2, #12
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d002      	beq.n	8001a9a <HAL_RCC_GetSysClockFreq+0x4a>
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d003      	beq.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x50>
 8001a98:	e027      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x9a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a9a:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a9c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a9e:	e027      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0xa0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa2:	0c9b      	lsrs	r3, r3, #18
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2214      	movs	r2, #20
 8001aaa:	18ba      	adds	r2, r7, r2
 8001aac:	5cd3      	ldrb	r3, [r2, r3]
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ab0:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	1d3a      	adds	r2, r7, #4
 8001aba:	5cd3      	ldrb	r3, [r2, r3]
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	025b      	lsls	r3, r3, #9
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d009      	beq.n	8001adc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001ac8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001aca:	480f      	ldr	r0, [pc, #60]	; (8001b08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001acc:	f7fe fb24 	bl	8000118 <__udivsi3>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	001a      	movs	r2, r3
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	4353      	muls	r3, r2
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8001ada:	e003      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x94>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ae0:	4353      	muls	r3, r2
 8001ae2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ae8:	e002      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0xa0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001aee:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001af2:	0018      	movs	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b00f      	add	sp, #60	; 0x3c
 8001af8:	bd90      	pop	{r4, r7, pc}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	08003c60 	.word	0x08003c60
 8001b00:	08003c70 	.word	0x08003c70
 8001b04:	40021000 	.word	0x40021000
 8001b08:	007a1200 	.word	0x007a1200
 8001b0c:	003d0900 	.word	0x003d0900

08001b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b14:	4b02      	ldr	r3, [pc, #8]	; (8001b20 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	0018      	movs	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	20000124 	.word	0x20000124

08001b24 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e01e      	b.n	8001b74 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	223d      	movs	r2, #61	; 0x3d
 8001b3a:	5c9b      	ldrb	r3, [r3, r2]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d107      	bne.n	8001b52 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	223c      	movs	r2, #60	; 0x3c
 8001b46:	2100      	movs	r1, #0
 8001b48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f001 ff85 	bl	8003a5c <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	223d      	movs	r2, #61	; 0x3d
 8001b56:	2102      	movs	r1, #2
 8001b58:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3304      	adds	r3, #4
 8001b62:	0019      	movs	r1, r3
 8001b64:	0010      	movs	r0, r2
 8001b66:	f000 fa01 	bl	8001f6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	223d      	movs	r2, #61	; 0x3d
 8001b6e:	2101      	movs	r1, #1
 8001b70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	0018      	movs	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b002      	add	sp, #8
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e01e      	b.n	8001bcc <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	223d      	movs	r2, #61	; 0x3d
 8001b92:	5c9b      	ldrb	r3, [r3, r2]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d107      	bne.n	8001baa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	223c      	movs	r2, #60	; 0x3c
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f001 ff09 	bl	80039bc <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	223d      	movs	r2, #61	; 0x3d
 8001bae:	2102      	movs	r1, #2
 8001bb0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	0019      	movs	r1, r3
 8001bbc:	0010      	movs	r0, r2
 8001bbe:	f000 f9d5 	bl	8001f6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	223d      	movs	r2, #61	; 0x3d
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	0018      	movs	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b002      	add	sp, #8
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6839      	ldr	r1, [r7, #0]
 8001be4:	2201      	movs	r2, #1
 8001be6:	0018      	movs	r0, r3
 8001be8:	f000 fc26 	bl	8002438 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a13      	ldr	r2, [pc, #76]	; (8001c40 <HAL_TIM_PWM_Start+0x6c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d009      	beq.n	8001c0a <HAL_TIM_PWM_Start+0x36>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <HAL_TIM_PWM_Start+0x70>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d004      	beq.n	8001c0a <HAL_TIM_PWM_Start+0x36>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a10      	ldr	r2, [pc, #64]	; (8001c48 <HAL_TIM_PWM_Start+0x74>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d101      	bne.n	8001c0e <HAL_TIM_PWM_Start+0x3a>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <HAL_TIM_PWM_Start+0x3c>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d008      	beq.n	8001c26 <HAL_TIM_PWM_Start+0x52>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c1e:	2180      	movs	r1, #128	; 0x80
 8001c20:	0209      	lsls	r1, r1, #8
 8001c22:	430a      	orrs	r2, r1
 8001c24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6812      	ldr	r2, [r2, #0]
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	2101      	movs	r1, #1
 8001c32:	430a      	orrs	r2, r1
 8001c34:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	0018      	movs	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b002      	add	sp, #8
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40012c00 	.word	0x40012c00
 8001c44:	40014400 	.word	0x40014400
 8001c48:	40014800 	.word	0x40014800

08001c4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e07c      	b.n	8001d66 <HAL_TIM_Encoder_Init+0x11a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	223d      	movs	r2, #61	; 0x3d
 8001c70:	5c9b      	ldrb	r3, [r3, r2]
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d107      	bne.n	8001c88 <HAL_TIM_Encoder_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	223c      	movs	r2, #60	; 0x3c
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	0018      	movs	r0, r3
 8001c84:	f000 f87a 	bl	8001d7c <HAL_TIM_Encoder_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	223d      	movs	r2, #61	; 0x3d
 8001c8c:	2102      	movs	r1, #2
 8001c8e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	6892      	ldr	r2, [r2, #8]
 8001c9a:	2107      	movs	r1, #7
 8001c9c:	438a      	bics	r2, r1
 8001c9e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	0019      	movs	r1, r3
 8001caa:	0010      	movs	r0, r2
 8001cac:	f000 f95e 	bl	8001f6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4a26      	ldr	r2, [pc, #152]	; (8001d70 <HAL_TIM_Encoder_Init+0x124>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	021b      	lsls	r3, r3, #8
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]

  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4a21      	ldr	r2, [pc, #132]	; (8001d74 <HAL_TIM_Encoder_Init+0x128>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4a20      	ldr	r2, [pc, #128]	; (8001d78 <HAL_TIM_Encoder_Init+0x12c>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	4313      	orrs	r3, r2
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	011a      	lsls	r2, r3, #4
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	031b      	lsls	r3, r3, #12
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2222      	movs	r2, #34	; 0x22
 8001d26:	4393      	bics	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2288      	movs	r2, #136	; 0x88
 8001d2e:	4393      	bics	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	011b      	lsls	r3, r3, #4
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	223d      	movs	r2, #61	; 0x3d
 8001d60:	2101      	movs	r1, #1
 8001d62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	0018      	movs	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b006      	add	sp, #24
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	fffffcfc 	.word	0xfffffcfc
 8001d74:	fffff3f3 	.word	0xfffff3f3
 8001d78:	ffff0f0f 	.word	0xffff0f0f

08001d7c <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8001d84:	46c0      	nop			; (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b002      	add	sp, #8
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <HAL_TIM_Encoder_Start+0x16>
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d008      	beq.n	8001db2 <HAL_TIM_Encoder_Start+0x26>
 8001da0:	e00f      	b.n	8001dc2 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2201      	movs	r2, #1
 8001da8:	2100      	movs	r1, #0
 8001daa:	0018      	movs	r0, r3
 8001dac:	f000 fb44 	bl	8002438 <TIM_CCxChannelCmd>
      break;
 8001db0:	e016      	b.n	8001de0 <HAL_TIM_Encoder_Start+0x54>
  }
    case TIM_CHANNEL_2:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2201      	movs	r2, #1
 8001db8:	2104      	movs	r1, #4
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f000 fb3c 	bl	8002438 <TIM_CCxChannelCmd>
      break;
 8001dc0:	e00e      	b.n	8001de0 <HAL_TIM_Encoder_Start+0x54>
  }
    default :
  {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	2100      	movs	r1, #0
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f000 fb34 	bl	8002438 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2104      	movs	r1, #4
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f000 fb2d 	bl	8002438 <TIM_CCxChannelCmd>
     break;
 8001dde:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	6812      	ldr	r2, [r2, #0]
 8001dea:	2101      	movs	r1, #1
 8001dec:	430a      	orrs	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	0018      	movs	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b002      	add	sp, #8
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	223c      	movs	r2, #60	; 0x3c
 8001e0c:	5c9b      	ldrb	r3, [r3, r2]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d101      	bne.n	8001e16 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e0a4      	b.n	8001f60 <HAL_TIM_PWM_ConfigChannel+0x164>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	223c      	movs	r2, #60	; 0x3c
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	5499      	strb	r1, [r3, r2]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	223d      	movs	r2, #61	; 0x3d
 8001e22:	2102      	movs	r1, #2
 8001e24:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d029      	beq.n	8001e80 <HAL_TIM_PWM_ConfigChannel+0x84>
 8001e2c:	d802      	bhi.n	8001e34 <HAL_TIM_PWM_ConfigChannel+0x38>
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
    }
    break;

    default:
    break;
 8001e32:	e08c      	b.n	8001f4e <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d046      	beq.n	8001ec6 <HAL_TIM_PWM_ConfigChannel+0xca>
 8001e38:	2b0c      	cmp	r3, #12
 8001e3a:	d065      	beq.n	8001f08 <HAL_TIM_PWM_ConfigChannel+0x10c>
    break;
 8001e3c:	e087      	b.n	8001f4e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	0011      	movs	r1, r2
 8001e46:	0018      	movs	r0, r3
 8001e48:	f000 f8fe 	bl	8002048 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	6992      	ldr	r2, [r2, #24]
 8001e56:	2108      	movs	r1, #8
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	6992      	ldr	r2, [r2, #24]
 8001e66:	2104      	movs	r1, #4
 8001e68:	438a      	bics	r2, r1
 8001e6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	6991      	ldr	r1, [r2, #24]
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	6912      	ldr	r2, [r2, #16]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	619a      	str	r2, [r3, #24]
    break;
 8001e7e:	e066      	b.n	8001f4e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	0011      	movs	r1, r2
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f000 f961 	bl	8002150 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	6812      	ldr	r2, [r2, #0]
 8001e96:	6992      	ldr	r2, [r2, #24]
 8001e98:	2180      	movs	r1, #128	; 0x80
 8001e9a:	0109      	lsls	r1, r1, #4
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	6992      	ldr	r2, [r2, #24]
 8001eaa:	492f      	ldr	r1, [pc, #188]	; (8001f68 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8001eac:	400a      	ands	r2, r1
 8001eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	6991      	ldr	r1, [r2, #24]
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	6912      	ldr	r2, [r2, #16]
 8001ebe:	0212      	lsls	r2, r2, #8
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	619a      	str	r2, [r3, #24]
    break;
 8001ec4:	e043      	b.n	8001f4e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	0011      	movs	r1, r2
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f000 f9c2 	bl	8002258 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	69d2      	ldr	r2, [r2, #28]
 8001ede:	2108      	movs	r1, #8
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	69d2      	ldr	r2, [r2, #28]
 8001eee:	2104      	movs	r1, #4
 8001ef0:	438a      	bics	r2, r1
 8001ef2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	69d1      	ldr	r1, [r2, #28]
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	6912      	ldr	r2, [r2, #16]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	61da      	str	r2, [r3, #28]
    break;
 8001f06:	e022      	b.n	8001f4e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	0011      	movs	r1, r2
 8001f10:	0018      	movs	r0, r3
 8001f12:	f000 fa27 	bl	8002364 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	69d2      	ldr	r2, [r2, #28]
 8001f20:	2180      	movs	r1, #128	; 0x80
 8001f22:	0109      	lsls	r1, r1, #4
 8001f24:	430a      	orrs	r2, r1
 8001f26:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	69d2      	ldr	r2, [r2, #28]
 8001f32:	490d      	ldr	r1, [pc, #52]	; (8001f68 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8001f34:	400a      	ands	r2, r1
 8001f36:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	69d1      	ldr	r1, [r2, #28]
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	6912      	ldr	r2, [r2, #16]
 8001f46:	0212      	lsls	r2, r2, #8
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	61da      	str	r2, [r3, #28]
    break;
 8001f4c:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	223d      	movs	r2, #61	; 0x3d
 8001f52:	2101      	movs	r1, #1
 8001f54:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	223c      	movs	r2, #60	; 0x3c
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	0018      	movs	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b004      	add	sp, #16
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	fffffbff 	.word	0xfffffbff

08001f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a2b      	ldr	r2, [pc, #172]	; (8002030 <TIM_Base_SetConfig+0xc4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d003      	beq.n	8001f90 <TIM_Base_SetConfig+0x24>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a2a      	ldr	r2, [pc, #168]	; (8002034 <TIM_Base_SetConfig+0xc8>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d108      	bne.n	8001fa2 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2270      	movs	r2, #112	; 0x70
 8001f94:	4393      	bics	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a22      	ldr	r2, [pc, #136]	; (8002030 <TIM_Base_SetConfig+0xc4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00f      	beq.n	8001fca <TIM_Base_SetConfig+0x5e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a21      	ldr	r2, [pc, #132]	; (8002034 <TIM_Base_SetConfig+0xc8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d00b      	beq.n	8001fca <TIM_Base_SetConfig+0x5e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a20      	ldr	r2, [pc, #128]	; (8002038 <TIM_Base_SetConfig+0xcc>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d007      	beq.n	8001fca <TIM_Base_SetConfig+0x5e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a1f      	ldr	r2, [pc, #124]	; (800203c <TIM_Base_SetConfig+0xd0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d003      	beq.n	8001fca <TIM_Base_SetConfig+0x5e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a1e      	ldr	r2, [pc, #120]	; (8002040 <TIM_Base_SetConfig+0xd4>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d108      	bne.n	8001fdc <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4a1d      	ldr	r2, [pc, #116]	; (8002044 <TIM_Base_SetConfig+0xd8>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2280      	movs	r2, #128	; 0x80
 8001fe0:	4393      	bics	r3, r2
 8001fe2:	001a      	movs	r2, r3
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <TIM_Base_SetConfig+0xc4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d007      	beq.n	800201a <TIM_Base_SetConfig+0xae>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a0b      	ldr	r2, [pc, #44]	; (800203c <TIM_Base_SetConfig+0xd0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d003      	beq.n	800201a <TIM_Base_SetConfig+0xae>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <TIM_Base_SetConfig+0xd4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d103      	bne.n	8002022 <TIM_Base_SetConfig+0xb6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	691a      	ldr	r2, [r3, #16]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	615a      	str	r2, [r3, #20]
}
 8002028:	46c0      	nop			; (mov r8, r8)
 800202a:	46bd      	mov	sp, r7
 800202c:	b004      	add	sp, #16
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40012c00 	.word	0x40012c00
 8002034:	40000400 	.word	0x40000400
 8002038:	40002000 	.word	0x40002000
 800203c:	40014400 	.word	0x40014400
 8002040:	40014800 	.word	0x40014800
 8002044:	fffffcff 	.word	0xfffffcff

08002048 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	2201      	movs	r2, #1
 8002064:	4393      	bics	r3, r2
 8002066:	001a      	movs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2270      	movs	r2, #112	; 0x70
 8002082:	4393      	bics	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2203      	movs	r2, #3
 800208a:	4393      	bics	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4313      	orrs	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2202      	movs	r2, #2
 800209c:	4393      	bics	r3, r2
 800209e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a23      	ldr	r2, [pc, #140]	; (800213c <TIM_OC1_SetConfig+0xf4>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d007      	beq.n	80020c2 <TIM_OC1_SetConfig+0x7a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a22      	ldr	r2, [pc, #136]	; (8002140 <TIM_OC1_SetConfig+0xf8>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d003      	beq.n	80020c2 <TIM_OC1_SetConfig+0x7a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a21      	ldr	r2, [pc, #132]	; (8002144 <TIM_OC1_SetConfig+0xfc>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d10c      	bne.n	80020dc <TIM_OC1_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	2208      	movs	r2, #8
 80020c6:	4393      	bics	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	2204      	movs	r2, #4
 80020d8:	4393      	bics	r3, r2
 80020da:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a17      	ldr	r2, [pc, #92]	; (800213c <TIM_OC1_SetConfig+0xf4>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d007      	beq.n	80020f4 <TIM_OC1_SetConfig+0xac>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a16      	ldr	r2, [pc, #88]	; (8002140 <TIM_OC1_SetConfig+0xf8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d003      	beq.n	80020f4 <TIM_OC1_SetConfig+0xac>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a15      	ldr	r2, [pc, #84]	; (8002144 <TIM_OC1_SetConfig+0xfc>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d111      	bne.n	8002118 <TIM_OC1_SetConfig+0xd0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4a14      	ldr	r2, [pc, #80]	; (8002148 <TIM_OC1_SetConfig+0x100>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4a13      	ldr	r2, [pc, #76]	; (800214c <TIM_OC1_SetConfig+0x104>)
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	621a      	str	r2, [r3, #32]
}
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	46bd      	mov	sp, r7
 8002136:	b006      	add	sp, #24
 8002138:	bd80      	pop	{r7, pc}
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	40012c00 	.word	0x40012c00
 8002140:	40014400 	.word	0x40014400
 8002144:	40014800 	.word	0x40014800
 8002148:	fffffeff 	.word	0xfffffeff
 800214c:	fffffdff 	.word	0xfffffdff

08002150 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	2210      	movs	r2, #16
 800216c:	4393      	bics	r3, r2
 800216e:	001a      	movs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4a2c      	ldr	r2, [pc, #176]	; (800223c <TIM_OC2_SetConfig+0xec>)
 800218a:	4013      	ands	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	4a2b      	ldr	r2, [pc, #172]	; (8002240 <TIM_OC2_SetConfig+0xf0>)
 8002192:	4013      	ands	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	2220      	movs	r2, #32
 80021a6:	4393      	bics	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a22      	ldr	r2, [pc, #136]	; (8002244 <TIM_OC2_SetConfig+0xf4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d10d      	bne.n	80021da <TIM_OC2_SetConfig+0x8a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2280      	movs	r2, #128	; 0x80
 80021c2:	4393      	bics	r3, r2
 80021c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2240      	movs	r2, #64	; 0x40
 80021d6:	4393      	bics	r3, r2
 80021d8:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a19      	ldr	r2, [pc, #100]	; (8002244 <TIM_OC2_SetConfig+0xf4>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d007      	beq.n	80021f2 <TIM_OC2_SetConfig+0xa2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a18      	ldr	r2, [pc, #96]	; (8002248 <TIM_OC2_SetConfig+0xf8>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d003      	beq.n	80021f2 <TIM_OC2_SetConfig+0xa2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a17      	ldr	r2, [pc, #92]	; (800224c <TIM_OC2_SetConfig+0xfc>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d113      	bne.n	800221a <TIM_OC2_SetConfig+0xca>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4a16      	ldr	r2, [pc, #88]	; (8002250 <TIM_OC2_SetConfig+0x100>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4a15      	ldr	r2, [pc, #84]	; (8002254 <TIM_OC2_SetConfig+0x104>)
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	621a      	str	r2, [r3, #32]
}
 8002234:	46c0      	nop			; (mov r8, r8)
 8002236:	46bd      	mov	sp, r7
 8002238:	b006      	add	sp, #24
 800223a:	bd80      	pop	{r7, pc}
 800223c:	ffff8fff 	.word	0xffff8fff
 8002240:	fffffcff 	.word	0xfffffcff
 8002244:	40012c00 	.word	0x40012c00
 8002248:	40014400 	.word	0x40014400
 800224c:	40014800 	.word	0x40014800
 8002250:	fffffbff 	.word	0xfffffbff
 8002254:	fffff7ff 	.word	0xfffff7ff

08002258 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	4a33      	ldr	r2, [pc, #204]	; (8002340 <TIM_OC3_SetConfig+0xe8>)
 8002274:	401a      	ands	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2270      	movs	r2, #112	; 0x70
 8002290:	4393      	bics	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2203      	movs	r2, #3
 8002298:	4393      	bics	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	4a26      	ldr	r2, [pc, #152]	; (8002344 <TIM_OC3_SetConfig+0xec>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	021b      	lsls	r3, r3, #8
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a22      	ldr	r2, [pc, #136]	; (8002348 <TIM_OC3_SetConfig+0xf0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d10d      	bne.n	80022de <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	4a21      	ldr	r2, [pc, #132]	; (800234c <TIM_OC3_SetConfig+0xf4>)
 80022c6:	4013      	ands	r3, r2
 80022c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	4a1d      	ldr	r2, [pc, #116]	; (8002350 <TIM_OC3_SetConfig+0xf8>)
 80022da:	4013      	ands	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a19      	ldr	r2, [pc, #100]	; (8002348 <TIM_OC3_SetConfig+0xf0>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d007      	beq.n	80022f6 <TIM_OC3_SetConfig+0x9e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a1a      	ldr	r2, [pc, #104]	; (8002354 <TIM_OC3_SetConfig+0xfc>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d003      	beq.n	80022f6 <TIM_OC3_SetConfig+0x9e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a19      	ldr	r2, [pc, #100]	; (8002358 <TIM_OC3_SetConfig+0x100>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d113      	bne.n	800231e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4a18      	ldr	r2, [pc, #96]	; (800235c <TIM_OC3_SetConfig+0x104>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4a17      	ldr	r2, [pc, #92]	; (8002360 <TIM_OC3_SetConfig+0x108>)
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	621a      	str	r2, [r3, #32]
}
 8002338:	46c0      	nop			; (mov r8, r8)
 800233a:	46bd      	mov	sp, r7
 800233c:	b006      	add	sp, #24
 800233e:	bd80      	pop	{r7, pc}
 8002340:	fffffeff 	.word	0xfffffeff
 8002344:	fffffdff 	.word	0xfffffdff
 8002348:	40012c00 	.word	0x40012c00
 800234c:	fffff7ff 	.word	0xfffff7ff
 8002350:	fffffbff 	.word	0xfffffbff
 8002354:	40014400 	.word	0x40014400
 8002358:	40014800 	.word	0x40014800
 800235c:	ffffefff 	.word	0xffffefff
 8002360:	ffffdfff 	.word	0xffffdfff

08002364 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	4a26      	ldr	r2, [pc, #152]	; (8002418 <TIM_OC4_SetConfig+0xb4>)
 8002380:	401a      	ands	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4a20      	ldr	r2, [pc, #128]	; (800241c <TIM_OC4_SetConfig+0xb8>)
 800239c:	4013      	ands	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4a1f      	ldr	r2, [pc, #124]	; (8002420 <TIM_OC4_SetConfig+0xbc>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4a1b      	ldr	r2, [pc, #108]	; (8002424 <TIM_OC4_SetConfig+0xc0>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	031b      	lsls	r3, r3, #12
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a17      	ldr	r2, [pc, #92]	; (8002428 <TIM_OC4_SetConfig+0xc4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d007      	beq.n	80023e0 <TIM_OC4_SetConfig+0x7c>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a16      	ldr	r2, [pc, #88]	; (800242c <TIM_OC4_SetConfig+0xc8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d003      	beq.n	80023e0 <TIM_OC4_SetConfig+0x7c>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a15      	ldr	r2, [pc, #84]	; (8002430 <TIM_OC4_SetConfig+0xcc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d109      	bne.n	80023f4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	4a14      	ldr	r2, [pc, #80]	; (8002434 <TIM_OC4_SetConfig+0xd0>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	019b      	lsls	r3, r3, #6
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	621a      	str	r2, [r3, #32]
}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	46bd      	mov	sp, r7
 8002412:	b006      	add	sp, #24
 8002414:	bd80      	pop	{r7, pc}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	ffffefff 	.word	0xffffefff
 800241c:	ffff8fff 	.word	0xffff8fff
 8002420:	fffffcff 	.word	0xfffffcff
 8002424:	ffffdfff 	.word	0xffffdfff
 8002428:	40012c00 	.word	0x40012c00
 800242c:	40014400 	.word	0x40014400
 8002430:	40014800 	.word	0x40014800
 8002434:	ffffbfff 	.word	0xffffbfff

08002438 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002448:	2201      	movs	r2, #1
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	409a      	lsls	r2, r3
 800244e:	0013      	movs	r3, r2
 8002450:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	43d2      	mvns	r2, r2
 800245a:	401a      	ands	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a1a      	ldr	r2, [r3, #32]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	4099      	lsls	r1, r3
 800246a:	000b      	movs	r3, r1
 800246c:	431a      	orrs	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	621a      	str	r2, [r3, #32]
}
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	46bd      	mov	sp, r7
 8002476:	b006      	add	sp, #24
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	223c      	movs	r2, #60	; 0x3c
 8002488:	5c9b      	ldrb	r3, [r3, r2]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800248e:	2302      	movs	r3, #2
 8002490:	e032      	b.n	80024f8 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	223c      	movs	r2, #60	; 0x3c
 8002496:	2101      	movs	r1, #1
 8002498:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	223d      	movs	r2, #61	; 0x3d
 800249e:	2102      	movs	r1, #2
 80024a0:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6812      	ldr	r2, [r2, #0]
 80024aa:	6852      	ldr	r2, [r2, #4]
 80024ac:	2170      	movs	r1, #112	; 0x70
 80024ae:	438a      	bics	r2, r1
 80024b0:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6812      	ldr	r2, [r2, #0]
 80024ba:	6851      	ldr	r1, [r2, #4]
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	6892      	ldr	r2, [r2, #8]
 80024ce:	2180      	movs	r1, #128	; 0x80
 80024d0:	438a      	bics	r2, r1
 80024d2:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	6891      	ldr	r1, [r2, #8]
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	6852      	ldr	r2, [r2, #4]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	223d      	movs	r2, #61	; 0x3d
 80024ea:	2101      	movs	r1, #1
 80024ec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	223c      	movs	r2, #60	; 0x3c
 80024f2:	2100      	movs	r1, #0
 80024f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	0018      	movs	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b002      	add	sp, #8
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	223c      	movs	r2, #60	; 0x3c
 8002512:	5c9b      	ldrb	r3, [r3, r2]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002518:	2302      	movs	r3, #2
 800251a:	e04d      	b.n	80025b8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	223c      	movs	r2, #60	; 0x3c
 8002520:	2101      	movs	r1, #1
 8002522:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	223d      	movs	r2, #61	; 0x3d
 8002528:	2102      	movs	r1, #2
 800252a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	22ff      	movs	r2, #255	; 0xff
 8002530:	4393      	bics	r3, r2
 8002532:	001a      	movs	r2, r3
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4a20      	ldr	r2, [pc, #128]	; (80025c0 <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 8002540:	401a      	ands	r2, r3
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	4313      	orrs	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>)
 800254e:	401a      	ands	r2, r3
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	4313      	orrs	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4a1b      	ldr	r2, [pc, #108]	; (80025c8 <HAL_TIMEx_ConfigBreakDeadTime+0xc8>)
 800255c:	401a      	ands	r2, r3
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4313      	orrs	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4a18      	ldr	r2, [pc, #96]	; (80025cc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>)
 800256a:	401a      	ands	r2, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4a16      	ldr	r2, [pc, #88]	; (80025d0 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8002578:	401a      	ands	r2, r3
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	4313      	orrs	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4a13      	ldr	r2, [pc, #76]	; (80025d4 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>)
 8002586:	401a      	ands	r2, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4a11      	ldr	r2, [pc, #68]	; (80025d8 <HAL_TIMEx_ConfigBreakDeadTime+0xd8>)
 8002594:	401a      	ands	r2, r3
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	645a      	str	r2, [r3, #68]	; 0x44
  
  htim->State = HAL_TIM_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	223d      	movs	r2, #61	; 0x3d
 80025aa:	2101      	movs	r1, #1
 80025ac:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	223c      	movs	r2, #60	; 0x3c
 80025b2:	2100      	movs	r1, #0
 80025b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	0018      	movs	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b004      	add	sp, #16
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	fffffcff 	.word	0xfffffcff
 80025c4:	fffffbff 	.word	0xfffffbff
 80025c8:	fffff7ff 	.word	0xfffff7ff
 80025cc:	ffffefff 	.word	0xffffefff
 80025d0:	ffffdfff 	.word	0xffffdfff
 80025d4:	ffffbfff 	.word	0xffffbfff
 80025d8:	ffff7fff 	.word	0xffff7fff

080025dc <motorBegin>:
#include "DCMotors.h"
#include "tim.h"
#include "gpio.h"

void motorBegin(MotorControl_t* motor, GPIO_TypeDef* encoder_CE_port, uint16_t encoder_CE_pin, TIM_HandleTypeDef timer_left, TIM_HandleTypeDef timer_right, uint16_t channel_left, uint16_t channel_right){
 80025dc:	b082      	sub	sp, #8
 80025de:	b580      	push	{r7, lr}
 80025e0:	b084      	sub	sp, #16
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	60f8      	str	r0, [r7, #12]
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	0011      	movs	r1, r2
 80025ea:	2204      	movs	r2, #4
 80025ec:	2018      	movs	r0, #24
 80025ee:	4684      	mov	ip, r0
 80025f0:	44bc      	add	ip, r7
 80025f2:	4462      	add	r2, ip
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	1dbb      	adds	r3, r7, #6
 80025f8:	1c0a      	adds	r2, r1, #0
 80025fa:	801a      	strh	r2, [r3, #0]
	motor->dutyCycle = 0;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2298      	movs	r2, #152	; 0x98
 8002600:	2100      	movs	r1, #0
 8002602:	5499      	strb	r1, [r3, r2]

	motor->setPoint = 0;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
	motor->actualPoint = __HAL_TIM_GET_COUNTER(&htim3);
 800260a:	4b3a      	ldr	r3, [pc, #232]	; (80026f4 <motorBegin+0x118>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	605a      	str	r2, [r3, #4]

	motor->stepStatusOld = 0;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	721a      	strb	r2, [r3, #8]

	motor->encoder_CE_port = encoder_CE_port;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	60da      	str	r2, [r3, #12]
	motor->encoder_CE_pin = encoder_CE_pin;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1dba      	adds	r2, r7, #6
 8002624:	8812      	ldrh	r2, [r2, #0]
 8002626:	821a      	strh	r2, [r3, #16]

	HAL_GPIO_WritePin(motor->encoder_CE_port, motor->encoder_CE_pin, GPIO_PIN_RESET);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	68d8      	ldr	r0, [r3, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8a1b      	ldrh	r3, [r3, #16]
 8002630:	2200      	movs	r2, #0
 8002632:	0019      	movs	r1, r3
 8002634:	f7fe fdef 	bl	8001216 <HAL_GPIO_WritePin>

	motor->timer_left = timer_left;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2204      	movs	r2, #4
 800263c:	2118      	movs	r1, #24
 800263e:	468c      	mov	ip, r1
 8002640:	44bc      	add	ip, r7
 8002642:	4462      	add	r2, ip
 8002644:	3314      	adds	r3, #20
 8002646:	0011      	movs	r1, r2
 8002648:	2240      	movs	r2, #64	; 0x40
 800264a:	0018      	movs	r0, r3
 800264c:	f001 faea 	bl	8003c24 <memcpy>
	motor->timer_right = timer_right;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2244      	movs	r2, #68	; 0x44
 8002654:	2118      	movs	r1, #24
 8002656:	468c      	mov	ip, r1
 8002658:	44bc      	add	ip, r7
 800265a:	4462      	add	r2, ip
 800265c:	3354      	adds	r3, #84	; 0x54
 800265e:	0011      	movs	r1, r2
 8002660:	2240      	movs	r2, #64	; 0x40
 8002662:	0018      	movs	r0, r3
 8002664:	f001 fade 	bl	8003c24 <memcpy>

	motor->channel_left = channel_left;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2284      	movs	r2, #132	; 0x84
 800266c:	2118      	movs	r1, #24
 800266e:	468c      	mov	ip, r1
 8002670:	44bc      	add	ip, r7
 8002672:	4462      	add	r2, ip
 8002674:	2194      	movs	r1, #148	; 0x94
 8002676:	8812      	ldrh	r2, [r2, #0]
 8002678:	525a      	strh	r2, [r3, r1]
	motor->channel_right = channel_right;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2288      	movs	r2, #136	; 0x88
 800267e:	2118      	movs	r1, #24
 8002680:	468c      	mov	ip, r1
 8002682:	44bc      	add	ip, r7
 8002684:	4462      	add	r2, ip
 8002686:	2196      	movs	r1, #150	; 0x96
 8002688:	8812      	ldrh	r2, [r2, #0]
 800268a:	525a      	strh	r2, [r3, r1]

	HAL_TIM_PWM_Start(&motor->timer_left, motor->channel_left);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	3314      	adds	r3, #20
 8002690:	0018      	movs	r0, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2294      	movs	r2, #148	; 0x94
 8002696:	5a9b      	ldrh	r3, [r3, r2]
 8002698:	0019      	movs	r1, r3
 800269a:	f7ff fa9b 	bl	8001bd4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&motor->timer_right, motor->channel_right);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	3354      	adds	r3, #84	; 0x54
 80026a2:	0018      	movs	r0, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2296      	movs	r2, #150	; 0x96
 80026a8:	5a9b      	ldrh	r3, [r3, r2]
 80026aa:	0019      	movs	r1, r3
 80026ac:	f7ff fa92 	bl	8001bd4 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&motor->timer_left, motor->channel_left, 0);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	3334      	adds	r3, #52	; 0x34
 80026b6:	001a      	movs	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2194      	movs	r1, #148	; 0x94
 80026bc:	5a5b      	ldrh	r3, [r3, r1]
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	18d3      	adds	r3, r2, r3
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&motor->timer_right, motor->channel_right, 0);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	3334      	adds	r3, #52	; 0x34
 80026d0:	001a      	movs	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2196      	movs	r1, #150	; 0x96
 80026d6:	5a5b      	ldrh	r3, [r3, r1]
 80026d8:	089b      	lsrs	r3, r3, #2
 80026da:	b29b      	uxth	r3, r3
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	18d3      	adds	r3, r2, r3
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]

}
 80026e4:	46c0      	nop			; (mov r8, r8)
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b004      	add	sp, #16
 80026ea:	bc80      	pop	{r7}
 80026ec:	bc08      	pop	{r3}
 80026ee:	b002      	add	sp, #8
 80026f0:	4718      	bx	r3
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	200002e8 	.word	0x200002e8

080026f8 <myABS>:

double myABS(double num1){
 80026f8:	b590      	push	{r4, r7, lr}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6038      	str	r0, [r7, #0]
 8002700:	6079      	str	r1, [r7, #4]
	if(num1 < 0){
 8002702:	2200      	movs	r2, #0
 8002704:	2300      	movs	r3, #0
 8002706:	6838      	ldr	r0, [r7, #0]
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	f7fd fda7 	bl	800025c <__aeabi_dcmplt>
 800270e:	1e03      	subs	r3, r0, #0
 8002710:	d006      	beq.n	8002720 <myABS+0x28>
		num1 *= -1;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	603b      	str	r3, [r7, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2280      	movs	r2, #128	; 0x80
 800271a:	0612      	lsls	r2, r2, #24
 800271c:	4053      	eors	r3, r2
 800271e:	607b      	str	r3, [r7, #4]
	}

	return num1;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	687c      	ldr	r4, [r7, #4]
}
 8002724:	0018      	movs	r0, r3
 8002726:	0021      	movs	r1, r4
 8002728:	46bd      	mov	sp, r7
 800272a:	b003      	add	sp, #12
 800272c:	bd90      	pop	{r4, r7, pc}
	...

08002730 <atualizarEixo>:


void atualizarEixo(MotorControl_t* motor,signed long setPoint){
 8002730:	b590      	push	{r4, r7, lr}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]

	//Ativa encoder
	HAL_GPIO_WritePin(motor->encoder_CE_port, motor->encoder_CE_pin, GPIO_PIN_SET);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68d8      	ldr	r0, [r3, #12]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	8a1b      	ldrh	r3, [r3, #16]
 8002742:	2201      	movs	r2, #1
 8002744:	0019      	movs	r1, r3
 8002746:	f7fe fd66 	bl	8001216 <HAL_GPIO_WritePin>

	// Atualiza as variaveis que vamos usar
	motor->setPoint = setPoint;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	601a      	str	r2, [r3, #0]
	motor->actualPoint = __HAL_TIM_GET_COUNTER(&htim3);
 8002750:	4b57      	ldr	r3, [pc, #348]	; (80028b0 <atualizarEixo+0x180>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	605a      	str	r2, [r3, #4]

	// Cálculo PWM - Quando está próximo do destino, diminui a velocidade do motor
	motor->dutyCycle = myABS((double)(motor->setPoint - motor->actualPoint)) * (double)P_FRACTION;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	001a      	movs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	0018      	movs	r0, r3
 8002768:	f7fe fa08 	bl	8000b7c <__aeabi_ui2d>
 800276c:	0003      	movs	r3, r0
 800276e:	000c      	movs	r4, r1
 8002770:	0018      	movs	r0, r3
 8002772:	0021      	movs	r1, r4
 8002774:	f7ff ffc0 	bl	80026f8 <myABS>
 8002778:	0003      	movs	r3, r0
 800277a:	000c      	movs	r4, r1
 800277c:	0018      	movs	r0, r3
 800277e:	0021      	movs	r1, r4
 8002780:	f7fd fd94 	bl	80002ac <__aeabi_d2uiz>
 8002784:	0003      	movs	r3, r0
 8002786:	b2d9      	uxtb	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2298      	movs	r2, #152	; 0x98
 800278c:	5499      	strb	r1, [r3, r2]

	if(motor->dutyCycle < MIN_DUTYCYCLE){
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2298      	movs	r2, #152	; 0x98
 8002792:	5c9b      	ldrb	r3, [r3, r2]
 8002794:	2bae      	cmp	r3, #174	; 0xae
 8002796:	d803      	bhi.n	80027a0 <atualizarEixo+0x70>
		motor->dutyCycle = MIN_DUTYCYCLE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2298      	movs	r2, #152	; 0x98
 800279c:	21af      	movs	r1, #175	; 0xaf
 800279e:	5499      	strb	r1, [r3, r2]
	}else if(motor->dutyCycle > MAX_DUTYCYCLE){
		motor->dutyCycle = MAX_DUTYCYCLE;
	}

	if(motor->actualPoint > motor->setPoint){
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d928      	bls.n	80027fe <atualizarEixo+0xce>
		// Ativa o motor para a esquerda até chegar na posição correta
		while(motor->actualPoint > motor->setPoint){
 80027ac:	e020      	b.n	80027f0 <atualizarEixo+0xc0>
			__HAL_TIM_SET_COMPARE(&motor->timer_left, motor->channel_left, motor->dutyCycle);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	3334      	adds	r3, #52	; 0x34
 80027b4:	001a      	movs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2194      	movs	r1, #148	; 0x94
 80027ba:	5a5b      	ldrh	r3, [r3, r1]
 80027bc:	089b      	lsrs	r3, r3, #2
 80027be:	b29b      	uxth	r3, r3
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	18d3      	adds	r3, r2, r3
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	2198      	movs	r1, #152	; 0x98
 80027c8:	5c52      	ldrb	r2, [r2, r1]
 80027ca:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&motor->timer_right, motor->channel_right, 0);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d0:	3334      	adds	r3, #52	; 0x34
 80027d2:	001a      	movs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2196      	movs	r1, #150	; 0x96
 80027d8:	5a5b      	ldrh	r3, [r3, r1]
 80027da:	089b      	lsrs	r3, r3, #2
 80027dc:	b29b      	uxth	r3, r3
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	18d3      	adds	r3, r2, r3
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
			motor->actualPoint = __HAL_TIM_GET_COUNTER(&htim3);
 80027e6:	4b32      	ldr	r3, [pc, #200]	; (80028b0 <atualizarEixo+0x180>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	605a      	str	r2, [r3, #4]
		while(motor->actualPoint > motor->setPoint){
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d8d8      	bhi.n	80027ae <atualizarEixo+0x7e>
 80027fc:	e02d      	b.n	800285a <atualizarEixo+0x12a>
		}

	}else if(motor->actualPoint < motor->setPoint){
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d227      	bcs.n	800285a <atualizarEixo+0x12a>
		// Ativa o motor para a direita até chegar na posição correta
		while(motor->actualPoint < motor->setPoint){
 800280a:	e020      	b.n	800284e <atualizarEixo+0x11e>
			__HAL_TIM_SET_COMPARE(&motor->timer_left, motor->channel_left, 0);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	3334      	adds	r3, #52	; 0x34
 8002812:	001a      	movs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2194      	movs	r1, #148	; 0x94
 8002818:	5a5b      	ldrh	r3, [r3, r1]
 800281a:	089b      	lsrs	r3, r3, #2
 800281c:	b29b      	uxth	r3, r3
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	18d3      	adds	r3, r2, r3
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&motor->timer_right, motor->channel_right, motor->dutyCycle);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	3334      	adds	r3, #52	; 0x34
 800282c:	001a      	movs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2196      	movs	r1, #150	; 0x96
 8002832:	5a5b      	ldrh	r3, [r3, r1]
 8002834:	089b      	lsrs	r3, r3, #2
 8002836:	b29b      	uxth	r3, r3
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	18d3      	adds	r3, r2, r3
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	2198      	movs	r1, #152	; 0x98
 8002840:	5c52      	ldrb	r2, [r2, r1]
 8002842:	601a      	str	r2, [r3, #0]
			motor->actualPoint = __HAL_TIM_GET_COUNTER(&htim3);
 8002844:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <atualizarEixo+0x180>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	605a      	str	r2, [r3, #4]
		while(motor->actualPoint < motor->setPoint){
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d3d8      	bcc.n	800280c <atualizarEixo+0xdc>
		}

	}

	// Desliga o motor pras duas direções
	__HAL_TIM_SET_COMPARE(&motor->timer_left, motor->channel_left, 0);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	3334      	adds	r3, #52	; 0x34
 8002860:	001a      	movs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2194      	movs	r1, #148	; 0x94
 8002866:	5a5b      	ldrh	r3, [r3, r1]
 8002868:	089b      	lsrs	r3, r3, #2
 800286a:	b29b      	uxth	r3, r3
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	18d3      	adds	r3, r2, r3
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&motor->timer_right, motor->channel_right, 0);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002878:	3334      	adds	r3, #52	; 0x34
 800287a:	001a      	movs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2196      	movs	r1, #150	; 0x96
 8002880:	5a5b      	ldrh	r3, [r3, r1]
 8002882:	089b      	lsrs	r3, r3, #2
 8002884:	b29b      	uxth	r3, r3
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	18d3      	adds	r3, r2, r3
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]

	//Desliga o encoder
	HAL_GPIO_WritePin(motor->encoder_CE_port, motor->encoder_CE_pin, GPIO_PIN_RESET);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68d8      	ldr	r0, [r3, #12]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	8a1b      	ldrh	r3, [r3, #16]
 8002896:	2200      	movs	r2, #0
 8002898:	0019      	movs	r1, r3
 800289a:	f7fe fcbc 	bl	8001216 <HAL_GPIO_WritePin>

	//Atualiza posição atual
	motor->actualPoint = __HAL_TIM_GET_COUNTER(&htim3);
 800289e:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <atualizarEixo+0x180>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	605a      	str	r2, [r3, #4]

	return ;
 80028a8:	46c0      	nop			; (mov r8, r8)

}
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b003      	add	sp, #12
 80028ae:	bd90      	pop	{r4, r7, pc}
 80028b0:	200002e8 	.word	0x200002e8

080028b4 <motorSimpleBegin>:

void motorSimpleBegin(MotorControl_Simple_t* motor, GPIO_TypeDef* a_port, uint16_t a_pin, GPIO_TypeDef* b_port, uint16_t b_pin){
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	1dbb      	adds	r3, r7, #6
 80028c2:	801a      	strh	r2, [r3, #0]
	motor->A_PORT = a_port;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	601a      	str	r2, [r3, #0]
	motor->A_PIN = a_pin;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	1dba      	adds	r2, r7, #6
 80028ce:	8812      	ldrh	r2, [r2, #0]
 80028d0:	809a      	strh	r2, [r3, #4]

	motor->B_PORT = b_port;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	609a      	str	r2, [r3, #8]
	motor->B_PIN = b_pin;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2218      	movs	r2, #24
 80028dc:	18ba      	adds	r2, r7, r2
 80028de:	8812      	ldrh	r2, [r2, #0]
 80028e0:	819a      	strh	r2, [r3, #12]
}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	46bd      	mov	sp, r7
 80028e6:	b004      	add	sp, #16
 80028e8:	bd80      	pop	{r7, pc}

080028ea <motorForward>:
//Faz o motor da pin�a ir pra frente
void motorForward(MotorControl_Simple_t* motor, uint32_t time){
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
 80028f2:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(motor->A_PORT, motor->A_PIN, GPIO_PIN_SET);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6818      	ldr	r0, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	889b      	ldrh	r3, [r3, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	0019      	movs	r1, r3
 8002900:	f7fe fc89 	bl	8001216 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->B_PORT, motor->B_PIN, GPIO_PIN_RESET);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6898      	ldr	r0, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	899b      	ldrh	r3, [r3, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	0019      	movs	r1, r3
 8002910:	f7fe fc81 	bl	8001216 <HAL_GPIO_WritePin>
	HAL_Delay(time);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	0018      	movs	r0, r3
 8002918:	f7fe f9cc 	bl	8000cb4 <HAL_Delay>

	HAL_GPIO_WritePin(motor->A_PORT, motor->A_PIN, GPIO_PIN_RESET);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6818      	ldr	r0, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	889b      	ldrh	r3, [r3, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	0019      	movs	r1, r3
 8002928:	f7fe fc75 	bl	8001216 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->B_PORT, motor->B_PIN, GPIO_PIN_RESET);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6898      	ldr	r0, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	899b      	ldrh	r3, [r3, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	0019      	movs	r1, r3
 8002938:	f7fe fc6d 	bl	8001216 <HAL_GPIO_WritePin>

}
 800293c:	46c0      	nop			; (mov r8, r8)
 800293e:	46bd      	mov	sp, r7
 8002940:	b002      	add	sp, #8
 8002942:	bd80      	pop	{r7, pc}

08002944 <motorBackward>:
//Faz o motor da pin�a voltar para tr�s
void  motorBackward(MotorControl_Simple_t* motor, uint32_t time){
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(motor->A_PORT, motor->A_PIN, GPIO_PIN_RESET);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	889b      	ldrh	r3, [r3, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	0019      	movs	r1, r3
 800295a:	f7fe fc5c 	bl	8001216 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->B_PORT, motor->B_PIN, GPIO_PIN_SET);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6898      	ldr	r0, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	899b      	ldrh	r3, [r3, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	0019      	movs	r1, r3
 800296a:	f7fe fc54 	bl	8001216 <HAL_GPIO_WritePin>
	HAL_Delay(time);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	0018      	movs	r0, r3
 8002972:	f7fe f99f 	bl	8000cb4 <HAL_Delay>

	HAL_GPIO_WritePin(motor->A_PORT, motor->A_PIN, GPIO_PIN_RESET);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	889b      	ldrh	r3, [r3, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	0019      	movs	r1, r3
 8002982:	f7fe fc48 	bl	8001216 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->B_PORT, motor->B_PIN, GPIO_PIN_RESET);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6898      	ldr	r0, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	899b      	ldrh	r3, [r3, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	0019      	movs	r1, r3
 8002992:	f7fe fc40 	bl	8001216 <HAL_GPIO_WritePin>

}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	46bd      	mov	sp, r7
 800299a:	b002      	add	sp, #8
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <ps2interrupt>:



// The ISR for the external interrupt
void ps2interrupt(Keyboard_TypeDef* keyboard)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
	static uint8_t incoming=0;
	static uint32_t prev_ms=0;
	uint32_t now_ms;
	uint8_t n, val;

	val = HAL_GPIO_ReadPin(keyboard->DataPort, keyboard->DataPin); 
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	222f      	movs	r2, #47	; 0x2f
 80029b0:	5c9b      	ldrb	r3, [r3, r2]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	2216      	movs	r2, #22
 80029b6:	18bc      	adds	r4, r7, r2
 80029b8:	0019      	movs	r1, r3
 80029ba:	f7fe fc0f 	bl	80011dc <HAL_GPIO_ReadPin>
 80029be:	0003      	movs	r3, r0
 80029c0:	7023      	strb	r3, [r4, #0]
	now_ms = HAL_GetTick() ;
 80029c2:	f7fe f96d 	bl	8000ca0 <HAL_GetTick>
 80029c6:	0003      	movs	r3, r0
 80029c8:	613b      	str	r3, [r7, #16]
	if (now_ms - prev_ms > 250) {
 80029ca:	4b33      	ldr	r3, [pc, #204]	; (8002a98 <ps2interrupt+0xf8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2bfa      	cmp	r3, #250	; 0xfa
 80029d4:	d905      	bls.n	80029e2 <ps2interrupt+0x42>
		bitcount = 0;
 80029d6:	4b31      	ldr	r3, [pc, #196]	; (8002a9c <ps2interrupt+0xfc>)
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
		incoming = 0;
 80029dc:	4b30      	ldr	r3, [pc, #192]	; (8002aa0 <ps2interrupt+0x100>)
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]
	}
	prev_ms = now_ms;
 80029e2:	4b2d      	ldr	r3, [pc, #180]	; (8002a98 <ps2interrupt+0xf8>)
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	601a      	str	r2, [r3, #0]
	n = bitcount - 1;
 80029e8:	4b2c      	ldr	r3, [pc, #176]	; (8002a9c <ps2interrupt+0xfc>)
 80029ea:	781a      	ldrb	r2, [r3, #0]
 80029ec:	230f      	movs	r3, #15
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	3a01      	subs	r2, #1
 80029f2:	701a      	strb	r2, [r3, #0]
	if (n <= 7) {
 80029f4:	230f      	movs	r3, #15
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b07      	cmp	r3, #7
 80029fc:	d810      	bhi.n	8002a20 <ps2interrupt+0x80>
		incoming |= (val << n);
 80029fe:	2316      	movs	r3, #22
 8002a00:	18fb      	adds	r3, r7, r3
 8002a02:	781a      	ldrb	r2, [r3, #0]
 8002a04:	230f      	movs	r3, #15
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	0013      	movs	r3, r2
 8002a0e:	b25a      	sxtb	r2, r3
 8002a10:	4b23      	ldr	r3, [pc, #140]	; (8002aa0 <ps2interrupt+0x100>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	b25b      	sxtb	r3, r3
 8002a16:	4313      	orrs	r3, r2
 8002a18:	b25b      	sxtb	r3, r3
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <ps2interrupt+0x100>)
 8002a1e:	701a      	strb	r2, [r3, #0]
	}
	bitcount++;
 8002a20:	4b1e      	ldr	r3, [pc, #120]	; (8002a9c <ps2interrupt+0xfc>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	3301      	adds	r3, #1
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	4b1c      	ldr	r3, [pc, #112]	; (8002a9c <ps2interrupt+0xfc>)
 8002a2a:	701a      	strb	r2, [r3, #0]
	if (bitcount == 11) {
 8002a2c:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <ps2interrupt+0xfc>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b0b      	cmp	r3, #11
 8002a32:	d12c      	bne.n	8002a8e <ps2interrupt+0xee>
		uint8_t i = keyboard->head + 1;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	222d      	movs	r2, #45	; 0x2d
 8002a38:	5c9b      	ldrb	r3, [r3, r2]
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	2317      	movs	r3, #23
 8002a3e:	18fb      	adds	r3, r7, r3
 8002a40:	3201      	adds	r2, #1
 8002a42:	701a      	strb	r2, [r3, #0]
		if (i >= BUFFER_SIZE) i = 0;
 8002a44:	2317      	movs	r3, #23
 8002a46:	18fb      	adds	r3, r7, r3
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b2c      	cmp	r3, #44	; 0x2c
 8002a4c:	d903      	bls.n	8002a56 <ps2interrupt+0xb6>
 8002a4e:	2317      	movs	r3, #23
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]
		if (i != keyboard->tail) {
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	222e      	movs	r2, #46	; 0x2e
 8002a5a:	5c9b      	ldrb	r3, [r3, r2]
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2217      	movs	r2, #23
 8002a60:	18ba      	adds	r2, r7, r2
 8002a62:	7812      	ldrb	r2, [r2, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d00c      	beq.n	8002a82 <ps2interrupt+0xe2>
			keyboard->buffer[i] = incoming;
 8002a68:	2317      	movs	r3, #23
 8002a6a:	18fb      	adds	r3, r7, r3
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	4a0c      	ldr	r2, [pc, #48]	; (8002aa0 <ps2interrupt+0x100>)
 8002a70:	7811      	ldrb	r1, [r2, #0]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	54d1      	strb	r1, [r2, r3]
			keyboard->head = i;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2217      	movs	r2, #23
 8002a7a:	18ba      	adds	r2, r7, r2
 8002a7c:	212d      	movs	r1, #45	; 0x2d
 8002a7e:	7812      	ldrb	r2, [r2, #0]
 8002a80:	545a      	strb	r2, [r3, r1]
		}
		bitcount = 0;
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <ps2interrupt+0xfc>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]
		incoming = 0;
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <ps2interrupt+0x100>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
	}
}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b007      	add	sp, #28
 8002a94:	bd90      	pop	{r4, r7, pc}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	20000144 	.word	0x20000144
 8002a9c:	20000148 	.word	0x20000148
 8002aa0:	20000149 	.word	0x20000149

08002aa4 <get_scan_code>:

static inline uint8_t get_scan_code(Keyboard_TypeDef* keyboard)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
	uint8_t c, i;

	i = keyboard->tail;
 8002aac:	230f      	movs	r3, #15
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	212e      	movs	r1, #46	; 0x2e
 8002ab4:	5c52      	ldrb	r2, [r2, r1]
 8002ab6:	701a      	strb	r2, [r3, #0]
	if (i == keyboard->head) return 0;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	222d      	movs	r2, #45	; 0x2d
 8002abc:	5c9b      	ldrb	r3, [r3, r2]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	220f      	movs	r2, #15
 8002ac2:	18ba      	adds	r2, r7, r2
 8002ac4:	7812      	ldrb	r2, [r2, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d101      	bne.n	8002ace <get_scan_code+0x2a>
 8002aca:	2300      	movs	r3, #0
 8002acc:	e020      	b.n	8002b10 <get_scan_code+0x6c>
	i++;
 8002ace:	230f      	movs	r3, #15
 8002ad0:	18fb      	adds	r3, r7, r3
 8002ad2:	781a      	ldrb	r2, [r3, #0]
 8002ad4:	230f      	movs	r3, #15
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	3201      	adds	r2, #1
 8002ada:	701a      	strb	r2, [r3, #0]
	if (i >= BUFFER_SIZE) i = 0;
 8002adc:	230f      	movs	r3, #15
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b2c      	cmp	r3, #44	; 0x2c
 8002ae4:	d903      	bls.n	8002aee <get_scan_code+0x4a>
 8002ae6:	230f      	movs	r3, #15
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	2200      	movs	r2, #0
 8002aec:	701a      	strb	r2, [r3, #0]
	c = keyboard->buffer[i];
 8002aee:	230f      	movs	r3, #15
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	781a      	ldrb	r2, [r3, #0]
 8002af4:	230e      	movs	r3, #14
 8002af6:	18fb      	adds	r3, r7, r3
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	5c8a      	ldrb	r2, [r1, r2]
 8002afc:	701a      	strb	r2, [r3, #0]
	keyboard->tail = i;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	220f      	movs	r2, #15
 8002b02:	18ba      	adds	r2, r7, r2
 8002b04:	212e      	movs	r1, #46	; 0x2e
 8002b06:	7812      	ldrb	r2, [r2, #0]
 8002b08:	545a      	strb	r2, [r3, r1]
	return c;
 8002b0a:	230e      	movs	r3, #14
 8002b0c:	18fb      	adds	r3, r7, r3
 8002b0e:	781b      	ldrb	r3, [r3, #0]
}
 8002b10:	0018      	movs	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b004      	add	sp, #16
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <get_iso8859_code>:
#define SHIFT_L   0x04
#define SHIFT_R   0x08
#define ALTGR     0x10

static char get_iso8859_code(Keyboard_TypeDef* keyboard)
{
 8002b18:	b590      	push	{r4, r7, lr}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	static uint8_t state=0;
	uint8_t s;
	char c;

	while (1) {
		s = get_scan_code(keyboard);
 8002b20:	230e      	movs	r3, #14
 8002b22:	18fc      	adds	r4, r7, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	0018      	movs	r0, r3
 8002b28:	f7ff ffbc 	bl	8002aa4 <get_scan_code>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	7023      	strb	r3, [r4, #0]
		if (!s) return 0;
 8002b30:	230e      	movs	r3, #14
 8002b32:	18fb      	adds	r3, r7, r3
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <get_iso8859_code+0x26>
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	e119      	b.n	8002d72 <get_iso8859_code+0x25a>
		if (s == 0xF0) {
 8002b3e:	230e      	movs	r3, #14
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2bf0      	cmp	r3, #240	; 0xf0
 8002b46:	d107      	bne.n	8002b58 <get_iso8859_code+0x40>
			state |= BREAK;
 8002b48:	4b8c      	ldr	r3, [pc, #560]	; (8002d7c <get_iso8859_code+0x264>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4b8a      	ldr	r3, [pc, #552]	; (8002d7c <get_iso8859_code+0x264>)
 8002b54:	701a      	strb	r2, [r3, #0]
 8002b56:	e7e3      	b.n	8002b20 <get_iso8859_code+0x8>
		} else if (s == 0xE0) {
 8002b58:	230e      	movs	r3, #14
 8002b5a:	18fb      	adds	r3, r7, r3
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2be0      	cmp	r3, #224	; 0xe0
 8002b60:	d107      	bne.n	8002b72 <get_iso8859_code+0x5a>
			state |= MODIFIER;
 8002b62:	4b86      	ldr	r3, [pc, #536]	; (8002d7c <get_iso8859_code+0x264>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2202      	movs	r2, #2
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	4b83      	ldr	r3, [pc, #524]	; (8002d7c <get_iso8859_code+0x264>)
 8002b6e:	701a      	strb	r2, [r3, #0]
 8002b70:	e7d6      	b.n	8002b20 <get_iso8859_code+0x8>
		} else {
			if (state & BREAK) {
 8002b72:	4b82      	ldr	r3, [pc, #520]	; (8002d7c <get_iso8859_code+0x264>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	001a      	movs	r2, r3
 8002b78:	2301      	movs	r3, #1
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d033      	beq.n	8002be6 <get_iso8859_code+0xce>
				if (s == 0x12) {
 8002b7e:	230e      	movs	r3, #14
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b12      	cmp	r3, #18
 8002b86:	d107      	bne.n	8002b98 <get_iso8859_code+0x80>
					state &= ~SHIFT_L;
 8002b88:	4b7c      	ldr	r3, [pc, #496]	; (8002d7c <get_iso8859_code+0x264>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2204      	movs	r2, #4
 8002b8e:	4393      	bics	r3, r2
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4b7a      	ldr	r3, [pc, #488]	; (8002d7c <get_iso8859_code+0x264>)
 8002b94:	701a      	strb	r2, [r3, #0]
 8002b96:	e01e      	b.n	8002bd6 <get_iso8859_code+0xbe>
				} else if (s == 0x59) {
 8002b98:	230e      	movs	r3, #14
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b59      	cmp	r3, #89	; 0x59
 8002ba0:	d107      	bne.n	8002bb2 <get_iso8859_code+0x9a>
					state &= ~SHIFT_R;
 8002ba2:	4b76      	ldr	r3, [pc, #472]	; (8002d7c <get_iso8859_code+0x264>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2208      	movs	r2, #8
 8002ba8:	4393      	bics	r3, r2
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	4b73      	ldr	r3, [pc, #460]	; (8002d7c <get_iso8859_code+0x264>)
 8002bae:	701a      	strb	r2, [r3, #0]
 8002bb0:	e011      	b.n	8002bd6 <get_iso8859_code+0xbe>
				} else if (s == 0x11 && (state & MODIFIER)) {
 8002bb2:	230e      	movs	r3, #14
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b11      	cmp	r3, #17
 8002bba:	d10c      	bne.n	8002bd6 <get_iso8859_code+0xbe>
 8002bbc:	4b6f      	ldr	r3, [pc, #444]	; (8002d7c <get_iso8859_code+0x264>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	001a      	movs	r2, r3
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d006      	beq.n	8002bd6 <get_iso8859_code+0xbe>
					state &= ~ALTGR;
 8002bc8:	4b6c      	ldr	r3, [pc, #432]	; (8002d7c <get_iso8859_code+0x264>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2210      	movs	r2, #16
 8002bce:	4393      	bics	r3, r2
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4b6a      	ldr	r3, [pc, #424]	; (8002d7c <get_iso8859_code+0x264>)
 8002bd4:	701a      	strb	r2, [r3, #0]
				}
				// CTRL, ALT & WIN keys could be added
				// but is that really worth the overkeyboard->head?
				state &= ~(BREAK | MODIFIER);
 8002bd6:	4b69      	ldr	r3, [pc, #420]	; (8002d7c <get_iso8859_code+0x264>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2203      	movs	r2, #3
 8002bdc:	4393      	bics	r3, r2
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	4b66      	ldr	r3, [pc, #408]	; (8002d7c <get_iso8859_code+0x264>)
 8002be2:	701a      	strb	r2, [r3, #0]
				continue;
 8002be4:	e0c4      	b.n	8002d70 <get_iso8859_code+0x258>
			}
			if (s == 0x12) {
 8002be6:	230e      	movs	r3, #14
 8002be8:	18fb      	adds	r3, r7, r3
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b12      	cmp	r3, #18
 8002bee:	d107      	bne.n	8002c00 <get_iso8859_code+0xe8>
				state |= SHIFT_L;
 8002bf0:	4b62      	ldr	r3, [pc, #392]	; (8002d7c <get_iso8859_code+0x264>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4b60      	ldr	r3, [pc, #384]	; (8002d7c <get_iso8859_code+0x264>)
 8002bfc:	701a      	strb	r2, [r3, #0]
				continue;
 8002bfe:	e0b7      	b.n	8002d70 <get_iso8859_code+0x258>
			} else if (s == 0x59) {
 8002c00:	230e      	movs	r3, #14
 8002c02:	18fb      	adds	r3, r7, r3
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b59      	cmp	r3, #89	; 0x59
 8002c08:	d107      	bne.n	8002c1a <get_iso8859_code+0x102>
				state |= SHIFT_R;
 8002c0a:	4b5c      	ldr	r3, [pc, #368]	; (8002d7c <get_iso8859_code+0x264>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2208      	movs	r2, #8
 8002c10:	4313      	orrs	r3, r2
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	4b59      	ldr	r3, [pc, #356]	; (8002d7c <get_iso8859_code+0x264>)
 8002c16:	701a      	strb	r2, [r3, #0]
				continue;
 8002c18:	e0aa      	b.n	8002d70 <get_iso8859_code+0x258>
			} else if (s == 0x11 && (state & MODIFIER)) {
 8002c1a:	230e      	movs	r3, #14
 8002c1c:	18fb      	adds	r3, r7, r3
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b11      	cmp	r3, #17
 8002c22:	d10c      	bne.n	8002c3e <get_iso8859_code+0x126>
 8002c24:	4b55      	ldr	r3, [pc, #340]	; (8002d7c <get_iso8859_code+0x264>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	001a      	movs	r2, r3
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d006      	beq.n	8002c3e <get_iso8859_code+0x126>
				state |= ALTGR;
 8002c30:	4b52      	ldr	r3, [pc, #328]	; (8002d7c <get_iso8859_code+0x264>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2210      	movs	r2, #16
 8002c36:	4313      	orrs	r3, r2
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	4b50      	ldr	r3, [pc, #320]	; (8002d7c <get_iso8859_code+0x264>)
 8002c3c:	701a      	strb	r2, [r3, #0]
			}
			c = 0;
 8002c3e:	230f      	movs	r3, #15
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]
			if (state & MODIFIER) {
 8002c46:	4b4d      	ldr	r3, [pc, #308]	; (8002d7c <get_iso8859_code+0x264>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	001a      	movs	r2, r3
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d047      	beq.n	8002ce2 <get_iso8859_code+0x1ca>
				switch (s) {
 8002c52:	230e      	movs	r3, #14
 8002c54:	18fb      	adds	r3, r7, r3
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	3b4a      	subs	r3, #74	; 0x4a
 8002c5a:	2b33      	cmp	r3, #51	; 0x33
 8002c5c:	d900      	bls.n	8002c60 <get_iso8859_code+0x148>
 8002c5e:	e075      	b.n	8002d4c <get_iso8859_code+0x234>
 8002c60:	009a      	lsls	r2, r3, #2
 8002c62:	4b47      	ldr	r3, [pc, #284]	; (8002d80 <get_iso8859_code+0x268>)
 8002c64:	18d3      	adds	r3, r2, r3
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	469f      	mov	pc, r3
				  case 0x70: c = PS2_INSERT;      break;
 8002c6a:	230f      	movs	r3, #15
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
 8002c72:	e06c      	b.n	8002d4e <get_iso8859_code+0x236>
				  case 0x6C: c = PS2_HOME;        break;
 8002c74:	230f      	movs	r3, #15
 8002c76:	18fb      	adds	r3, r7, r3
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
 8002c7c:	e067      	b.n	8002d4e <get_iso8859_code+0x236>
				  case 0x7D: c = PS2_PAGEUP;      break;
 8002c7e:	230f      	movs	r3, #15
 8002c80:	18fb      	adds	r3, r7, r3
 8002c82:	2219      	movs	r2, #25
 8002c84:	701a      	strb	r2, [r3, #0]
 8002c86:	e062      	b.n	8002d4e <get_iso8859_code+0x236>
				  case 0x71: c = PS2_DELETE;      break;
 8002c88:	230f      	movs	r3, #15
 8002c8a:	18fb      	adds	r3, r7, r3
 8002c8c:	227f      	movs	r2, #127	; 0x7f
 8002c8e:	701a      	strb	r2, [r3, #0]
 8002c90:	e05d      	b.n	8002d4e <get_iso8859_code+0x236>
				  case 0x69: c = PS2_END;         break;
 8002c92:	230f      	movs	r3, #15
 8002c94:	18fb      	adds	r3, r7, r3
 8002c96:	2200      	movs	r2, #0
 8002c98:	701a      	strb	r2, [r3, #0]
 8002c9a:	e058      	b.n	8002d4e <get_iso8859_code+0x236>
				  case 0x7A: c = PS2_PAGEDOWN;    break;
 8002c9c:	230f      	movs	r3, #15
 8002c9e:	18fb      	adds	r3, r7, r3
 8002ca0:	221a      	movs	r2, #26
 8002ca2:	701a      	strb	r2, [r3, #0]
 8002ca4:	e053      	b.n	8002d4e <get_iso8859_code+0x236>
				  case 0x75: c = PS2_UPARROW;     break;
 8002ca6:	230f      	movs	r3, #15
 8002ca8:	18fb      	adds	r3, r7, r3
 8002caa:	220b      	movs	r2, #11
 8002cac:	701a      	strb	r2, [r3, #0]
 8002cae:	e04e      	b.n	8002d4e <get_iso8859_code+0x236>
				  case 0x6B: c = PS2_LEFTARROW;   break;
 8002cb0:	230f      	movs	r3, #15
 8002cb2:	18fb      	adds	r3, r7, r3
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	701a      	strb	r2, [r3, #0]
 8002cb8:	e049      	b.n	8002d4e <get_iso8859_code+0x236>
				  case 0x72: c = PS2_DOWNARROW;   break;
 8002cba:	230f      	movs	r3, #15
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	220a      	movs	r2, #10
 8002cc0:	701a      	strb	r2, [r3, #0]
 8002cc2:	e044      	b.n	8002d4e <get_iso8859_code+0x236>
				  case 0x74: c = PS2_RIGHTARROW;  break;
 8002cc4:	230f      	movs	r3, #15
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	2215      	movs	r2, #21
 8002cca:	701a      	strb	r2, [r3, #0]
 8002ccc:	e03f      	b.n	8002d4e <get_iso8859_code+0x236>
				  case 0x4A: c = '/';             break;
 8002cce:	230f      	movs	r3, #15
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	222f      	movs	r2, #47	; 0x2f
 8002cd4:	701a      	strb	r2, [r3, #0]
 8002cd6:	e03a      	b.n	8002d4e <get_iso8859_code+0x236>
				  case 0x5A: c = PS2_ENTER;       break;
 8002cd8:	230f      	movs	r3, #15
 8002cda:	18fb      	adds	r3, r7, r3
 8002cdc:	220d      	movs	r2, #13
 8002cde:	701a      	strb	r2, [r3, #0]
 8002ce0:	e035      	b.n	8002d4e <get_iso8859_code+0x236>
				  default: break;
				}
			} else if ((state & ALTGR) && keyboard->keymap->uses_altgr) {
 8002ce2:	4b26      	ldr	r3, [pc, #152]	; (8002d7c <get_iso8859_code+0x264>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	001a      	movs	r2, r3
 8002ce8:	2310      	movs	r3, #16
 8002cea:	4013      	ands	r3, r2
 8002cec:	d017      	beq.n	8002d1e <get_iso8859_code+0x206>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	2288      	movs	r2, #136	; 0x88
 8002cf4:	589b      	ldr	r3, [r3, r2]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d011      	beq.n	8002d1e <get_iso8859_code+0x206>
				if (s < PS2_KEYMAP_SIZE)
 8002cfa:	230e      	movs	r3, #14
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b87      	cmp	r3, #135	; 0x87
 8002d02:	d824      	bhi.n	8002d4e <get_iso8859_code+0x236>
					c = pgm_read_byte(keyboard->keymap->altgr + s); // MUDAR
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	338c      	adds	r3, #140	; 0x8c
 8002d0a:	001a      	movs	r2, r3
 8002d0c:	230e      	movs	r3, #14
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	18d2      	adds	r2, r2, r3
 8002d14:	230f      	movs	r3, #15
 8002d16:	18fb      	adds	r3, r7, r3
 8002d18:	7812      	ldrb	r2, [r2, #0]
 8002d1a:	701a      	strb	r2, [r3, #0]
				if (s < PS2_KEYMAP_SIZE)
 8002d1c:	e017      	b.n	8002d4e <get_iso8859_code+0x236>
			} else if (state & (SHIFT_L | SHIFT_R)) {
 8002d1e:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <get_iso8859_code+0x264>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	001a      	movs	r2, r3
 8002d24:	230c      	movs	r3, #12
 8002d26:	4013      	ands	r3, r2
 8002d28:	d111      	bne.n	8002d4e <get_iso8859_code+0x236>
//				if (s < PS2_KEYMAP_SIZE)
				//	c = pgm_read_byte(keyboard->keymap->shift + s);
			} else {
				if (s < PS2_KEYMAP_SIZE)
 8002d2a:	230e      	movs	r3, #14
 8002d2c:	18fb      	adds	r3, r7, r3
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b87      	cmp	r3, #135	; 0x87
 8002d32:	d80c      	bhi.n	8002d4e <get_iso8859_code+0x236>
					c = pgm_read_byte(keyboard->keymap->noshift + s);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	001a      	movs	r2, r3
 8002d3a:	230e      	movs	r3, #14
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	18d2      	adds	r2, r2, r3
 8002d42:	230f      	movs	r3, #15
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	7812      	ldrb	r2, [r2, #0]
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	e000      	b.n	8002d4e <get_iso8859_code+0x236>
				  default: break;
 8002d4c:	46c0      	nop			; (mov r8, r8)
			}
			state &= ~(BREAK | MODIFIER);
 8002d4e:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <get_iso8859_code+0x264>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2203      	movs	r2, #3
 8002d54:	4393      	bics	r3, r2
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <get_iso8859_code+0x264>)
 8002d5a:	701a      	strb	r2, [r3, #0]
			if (c) return c;
 8002d5c:	230f      	movs	r3, #15
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d100      	bne.n	8002d68 <get_iso8859_code+0x250>
 8002d66:	e6db      	b.n	8002b20 <get_iso8859_code+0x8>
 8002d68:	230f      	movs	r3, #15
 8002d6a:	18fb      	adds	r3, r7, r3
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	e000      	b.n	8002d72 <get_iso8859_code+0x25a>
		s = get_scan_code(keyboard);
 8002d70:	e6d6      	b.n	8002b20 <get_iso8859_code+0x8>
		}
	}
}
 8002d72:	0018      	movs	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b005      	add	sp, #20
 8002d78:	bd90      	pop	{r4, r7, pc}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	2000014a 	.word	0x2000014a
 8002d80:	08003db4 	.word	0x08003db4

08002d84 <keyboardAvailable>:

uint8_t keyboardAvailable(Keyboard_TypeDef* keyboard) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
	if (keyboard->CharBuffer || keyboard->UTF8next) return 1;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	223c      	movs	r2, #60	; 0x3c
 8002d90:	5c9b      	ldrb	r3, [r3, r2]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d104      	bne.n	8002da0 <keyboardAvailable+0x1c>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	223d      	movs	r2, #61	; 0x3d
 8002d9a:	5c9b      	ldrb	r3, [r3, r2]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <keyboardAvailable+0x20>
 8002da0:	2301      	movs	r3, #1
 8002da2:	e010      	b.n	8002dc6 <keyboardAvailable+0x42>
	keyboard->CharBuffer = get_iso8859_code(keyboard);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	0018      	movs	r0, r3
 8002da8:	f7ff feb6 	bl	8002b18 <get_iso8859_code>
 8002dac:	0003      	movs	r3, r0
 8002dae:	0019      	movs	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	223c      	movs	r2, #60	; 0x3c
 8002db4:	5499      	strb	r1, [r3, r2]
	if (keyboard->CharBuffer) return 1;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	223c      	movs	r2, #60	; 0x3c
 8002dba:	5c9b      	ldrb	r3, [r3, r2]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <keyboardAvailable+0x40>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <keyboardAvailable+0x42>
	return 0;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	b002      	add	sp, #8
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <keyboardRead>:
uint8_t keyboardReadScanCode(Keyboard_TypeDef* keyboard) 
{
	return get_scan_code(keyboard);
}

uint8_t keyboardRead(Keyboard_TypeDef* keyboard) { 
 8002dce:	b590      	push	{r4, r7, lr}
 8002dd0:	b085      	sub	sp, #20
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
	uint8_t result;

	result = keyboard->UTF8next;
 8002dd6:	230f      	movs	r3, #15
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	213d      	movs	r1, #61	; 0x3d
 8002dde:	5c52      	ldrb	r2, [r2, r1]
 8002de0:	701a      	strb	r2, [r3, #0]
	if (result) {
 8002de2:	230f      	movs	r3, #15
 8002de4:	18fb      	adds	r3, r7, r3
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d004      	beq.n	8002df6 <keyboardRead+0x28>
		keyboard->UTF8next = 0;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	223d      	movs	r2, #61	; 0x3d
 8002df0:	2100      	movs	r1, #0
 8002df2:	5499      	strb	r1, [r3, r2]
 8002df4:	e039      	b.n	8002e6a <keyboardRead+0x9c>
	} else {
		result = keyboard->CharBuffer;
 8002df6:	230f      	movs	r3, #15
 8002df8:	18fb      	adds	r3, r7, r3
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	213c      	movs	r1, #60	; 0x3c
 8002dfe:	5c52      	ldrb	r2, [r2, r1]
 8002e00:	701a      	strb	r2, [r3, #0]
		if (result) {
 8002e02:	230f      	movs	r3, #15
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d004      	beq.n	8002e16 <keyboardRead+0x48>
			keyboard->CharBuffer = 0;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	223c      	movs	r2, #60	; 0x3c
 8002e10:	2100      	movs	r1, #0
 8002e12:	5499      	strb	r1, [r3, r2]
 8002e14:	e007      	b.n	8002e26 <keyboardRead+0x58>
		} else {
			result = get_iso8859_code(keyboard);
 8002e16:	230f      	movs	r3, #15
 8002e18:	18fc      	adds	r4, r7, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f7ff fe7b 	bl	8002b18 <get_iso8859_code>
 8002e22:	0003      	movs	r3, r0
 8002e24:	7023      	strb	r3, [r4, #0]
		}
		if (result >= 128) {
 8002e26:	230f      	movs	r3, #15
 8002e28:	18fb      	adds	r3, r7, r3
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	b25b      	sxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	da1b      	bge.n	8002e6a <keyboardRead+0x9c>
			keyboard->UTF8next = (result & 0x3F) | 0x80;
 8002e32:	230f      	movs	r3, #15
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	b25b      	sxtb	r3, r3
 8002e3a:	223f      	movs	r2, #63	; 0x3f
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	b25b      	sxtb	r3, r3
 8002e40:	2280      	movs	r2, #128	; 0x80
 8002e42:	4252      	negs	r2, r2
 8002e44:	4313      	orrs	r3, r2
 8002e46:	b25b      	sxtb	r3, r3
 8002e48:	b2d9      	uxtb	r1, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	223d      	movs	r2, #61	; 0x3d
 8002e4e:	5499      	strb	r1, [r3, r2]
			result = ((result >> 6) & 0x1F) | 0xC0;
 8002e50:	230f      	movs	r3, #15
 8002e52:	18fb      	adds	r3, r7, r3
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	099b      	lsrs	r3, r3, #6
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	b25b      	sxtb	r3, r3
 8002e5c:	2240      	movs	r2, #64	; 0x40
 8002e5e:	4252      	negs	r2, r2
 8002e60:	4313      	orrs	r3, r2
 8002e62:	b25a      	sxtb	r2, r3
 8002e64:	230f      	movs	r3, #15
 8002e66:	18fb      	adds	r3, r7, r3
 8002e68:	701a      	strb	r2, [r3, #0]
		}
	}
	if (!result) return -1;
 8002e6a:	230f      	movs	r3, #15
 8002e6c:	18fb      	adds	r3, r7, r3
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <keyboardRead+0xaa>
 8002e74:	23ff      	movs	r3, #255	; 0xff
 8002e76:	e002      	b.n	8002e7e <keyboardRead+0xb0>
	return result;
 8002e78:	230f      	movs	r3, #15
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	781b      	ldrb	r3, [r3, #0]
}
 8002e7e:	0018      	movs	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b005      	add	sp, #20
 8002e84:	bd90      	pop	{r4, r7, pc}
	...

08002e88 <keyboardBegin>:


/* PIN CONFIGURATION: both DataPin and IQRPin must be iniciatized with PULLUP configuration
*/

void keyboardBegin(Keyboard_TypeDef* keyboard, GPIO_TypeDef* data_port, uint8_t data_pin, GPIO_TypeDef* iqr_port, uint8_t iqr_pin) {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	1dfb      	adds	r3, r7, #7
 8002e96:	701a      	strb	r2, [r3, #0]

  keyboard->DataPort = data_port;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	631a      	str	r2, [r3, #48]	; 0x30
  keyboard->DataPin = data_pin;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1dfa      	adds	r2, r7, #7
 8002ea2:	212f      	movs	r1, #47	; 0x2f
 8002ea4:	7812      	ldrb	r2, [r2, #0]
 8002ea6:	545a      	strb	r2, [r3, r1]

  keyboard->IQRPort = iqr_port;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	639a      	str	r2, [r3, #56]	; 0x38
  keyboard->IQRPin = iqr_pin;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2218      	movs	r2, #24
 8002eb2:	18ba      	adds	r2, r7, r2
 8002eb4:	2134      	movs	r1, #52	; 0x34
 8002eb6:	7812      	ldrb	r2, [r2, #0]
 8002eb8:	545a      	strb	r2, [r3, r1]

  keyboard->keymap = &PS2Keymap_US;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4a0a      	ldr	r2, [pc, #40]	; (8002ee8 <keyboardBegin+0x60>)
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40

  keyboard->head = 0;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	222d      	movs	r2, #45	; 0x2d
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	5499      	strb	r1, [r3, r2]
  keyboard->tail = 0;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	222e      	movs	r2, #46	; 0x2e
 8002ecc:	2100      	movs	r1, #0
 8002ece:	5499      	strb	r1, [r3, r2]
  keyboard->CharBuffer = 0;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	223c      	movs	r2, #60	; 0x3c
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	5499      	strb	r1, [r3, r2]
  keyboard->UTF8next = 0;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	223d      	movs	r2, #61	; 0x3d
 8002edc:	2100      	movs	r1, #0
 8002ede:	5499      	strb	r1, [r3, r2]

}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b004      	add	sp, #16
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	08003ca0 	.word	0x08003ca0

08002eec <fillLineWithBraille>:
	{{0,1,1,1},{0,1,1,0},{1,1,0,0}},
	{{0,1,1,1},{0,1,1,1},{1,1,0,0}},
	{{0,1,1,0},{0,1,1,1},{1,1,0,0}},
	{{0,1,0,1},{0,1,1,0},{1,1,0,0}}
									};
void fillLineWithBraille( unsigned char *lineBraille, unsigned char line, unsigned char letter){
 8002eec:	b590      	push	{r4, r7, lr}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	0008      	movs	r0, r1
 8002ef6:	0011      	movs	r1, r2
 8002ef8:	1cfb      	adds	r3, r7, #3
 8002efa:	1c02      	adds	r2, r0, #0
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	1cbb      	adds	r3, r7, #2
 8002f00:	1c0a      	adds	r2, r1, #0
 8002f02:	701a      	strb	r2, [r3, #0]

	if(letter>=48 && letter<=57){
 8002f04:	1cbb      	adds	r3, r7, #2
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b2f      	cmp	r3, #47	; 0x2f
 8002f0a:	d921      	bls.n	8002f50 <fillLineWithBraille+0x64>
 8002f0c:	1cbb      	adds	r3, r7, #2
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b39      	cmp	r3, #57	; 0x39
 8002f12:	d81d      	bhi.n	8002f50 <fillLineWithBraille+0x64>
		for(int i=0;i<4;i++){
 8002f14:	2300      	movs	r3, #0
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	e016      	b.n	8002f48 <fillLineWithBraille+0x5c>
			lineBraille[i]=numbersBraille[letter-48][line][i];
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	18d1      	adds	r1, r2, r3
 8002f20:	1cbb      	adds	r3, r7, #2
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	3b30      	subs	r3, #48	; 0x30
 8002f26:	001a      	movs	r2, r3
 8002f28:	1cfb      	adds	r3, r7, #3
 8002f2a:	781c      	ldrb	r4, [r3, #0]
 8002f2c:	482c      	ldr	r0, [pc, #176]	; (8002fe0 <fillLineWithBraille+0xf4>)
 8002f2e:	0013      	movs	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	189b      	adds	r3, r3, r2
 8002f34:	191b      	adds	r3, r3, r4
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	18c2      	adds	r2, r0, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	18d3      	adds	r3, r2, r3
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	700b      	strb	r3, [r1, #0]
		for(int i=0;i<4;i++){
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3301      	adds	r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	dde5      	ble.n	8002f1a <fillLineWithBraille+0x2e>
 8002f4e:	e042      	b.n	8002fd6 <fillLineWithBraille+0xea>
		}
	}
	else{
		if(letter>=65 && letter<=90){
 8002f50:	1cbb      	adds	r3, r7, #2
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b40      	cmp	r3, #64	; 0x40
 8002f56:	d908      	bls.n	8002f6a <fillLineWithBraille+0x7e>
 8002f58:	1cbb      	adds	r3, r7, #2
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b5a      	cmp	r3, #90	; 0x5a
 8002f5e:	d804      	bhi.n	8002f6a <fillLineWithBraille+0x7e>
			letter+=32;
 8002f60:	1cbb      	adds	r3, r7, #2
 8002f62:	1cba      	adds	r2, r7, #2
 8002f64:	7812      	ldrb	r2, [r2, #0]
 8002f66:	3220      	adds	r2, #32
 8002f68:	701a      	strb	r2, [r3, #0]
		}

		for(int i=0;i<2;i++){
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	e027      	b.n	8002fc0 <fillLineWithBraille+0xd4>
			if(letter>=97 && letter<=122){
 8002f70:	1cbb      	adds	r3, r7, #2
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b60      	cmp	r3, #96	; 0x60
 8002f76:	d917      	bls.n	8002fa8 <fillLineWithBraille+0xbc>
 8002f78:	1cbb      	adds	r3, r7, #2
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b7a      	cmp	r3, #122	; 0x7a
 8002f7e:	d813      	bhi.n	8002fa8 <fillLineWithBraille+0xbc>
				lineBraille[i]=lettersBraille[letter-97][line][i];
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	18d1      	adds	r1, r2, r3
 8002f86:	1cbb      	adds	r3, r7, #2
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	3b61      	subs	r3, #97	; 0x61
 8002f8c:	001a      	movs	r2, r3
 8002f8e:	1cfb      	adds	r3, r7, #3
 8002f90:	781c      	ldrb	r4, [r3, #0]
 8002f92:	4814      	ldr	r0, [pc, #80]	; (8002fe4 <fillLineWithBraille+0xf8>)
 8002f94:	0013      	movs	r3, r2
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	189b      	adds	r3, r3, r2
 8002f9a:	191b      	adds	r3, r3, r4
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	18c2      	adds	r2, r0, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	18d3      	adds	r3, r2, r3
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	700b      	strb	r3, [r1, #0]
			}
			if(letter==32){
 8002fa8:	1cbb      	adds	r3, r7, #2
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b20      	cmp	r3, #32
 8002fae:	d104      	bne.n	8002fba <fillLineWithBraille+0xce>
				lineBraille[i]=0;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	18d3      	adds	r3, r2, r3
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<2;i++){
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	60bb      	str	r3, [r7, #8]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	ddd4      	ble.n	8002f70 <fillLineWithBraille+0x84>
			}
		}
		lineBraille[2]='\0';
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3302      	adds	r3, #2
 8002fca:	2200      	movs	r2, #0
 8002fcc:	701a      	strb	r2, [r3, #0]
		lineBraille[3]='\0';
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3303      	adds	r3, #3
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	701a      	strb	r2, [r3, #0]


	}
}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b005      	add	sp, #20
 8002fdc:	bd90      	pop	{r4, r7, pc}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	200000a8 	.word	0x200000a8
 8002fe4:	20000000 	.word	0x20000000

08002fe8 <feedBuffer>:

/*
 * Adiciona caracteres a uma string
 */
void feedBuffer(unsigned char* buffer, short SIZE, unsigned char c){
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	0008      	movs	r0, r1
 8002ff2:	0011      	movs	r1, r2
 8002ff4:	1cbb      	adds	r3, r7, #2
 8002ff6:	1c02      	adds	r2, r0, #0
 8002ff8:	801a      	strh	r2, [r3, #0]
 8002ffa:	1c7b      	adds	r3, r7, #1
 8002ffc:	1c0a      	adds	r2, r1, #0
 8002ffe:	701a      	strb	r2, [r3, #0]
    unsigned short len = strlen((const char*)buffer);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	0018      	movs	r0, r3
 8003004:	f7fd f880 	bl	8000108 <strlen>
 8003008:	0002      	movs	r2, r0
 800300a:	230e      	movs	r3, #14
 800300c:	18fb      	adds	r3, r7, r3
 800300e:	801a      	strh	r2, [r3, #0]
    if(len != (SIZE-1)){
 8003010:	230e      	movs	r3, #14
 8003012:	18fb      	adds	r3, r7, r3
 8003014:	881a      	ldrh	r2, [r3, #0]
 8003016:	1cbb      	adds	r3, r7, #2
 8003018:	2100      	movs	r1, #0
 800301a:	5e5b      	ldrsh	r3, [r3, r1]
 800301c:	3b01      	subs	r3, #1
 800301e:	429a      	cmp	r2, r3
 8003020:	d00f      	beq.n	8003042 <feedBuffer+0x5a>
        buffer[len] = c;
 8003022:	230e      	movs	r3, #14
 8003024:	18fb      	adds	r3, r7, r3
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	18d3      	adds	r3, r2, r3
 800302c:	1c7a      	adds	r2, r7, #1
 800302e:	7812      	ldrb	r2, [r2, #0]
 8003030:	701a      	strb	r2, [r3, #0]
        buffer[len+1] = '\0';
 8003032:	230e      	movs	r3, #14
 8003034:	18fb      	adds	r3, r7, r3
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	3301      	adds	r3, #1
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	18d3      	adds	r3, r2, r3
 800303e:	2200      	movs	r2, #0
 8003040:	701a      	strb	r2, [r3, #0]
    }
}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	46bd      	mov	sp, r7
 8003046:	b004      	add	sp, #16
 8003048:	bd80      	pop	{r7, pc}

0800304a <clearBuffer>:

/*
 * Limpa uma string
 */
void clearBuffer(unsigned char* buffer){
 800304a:	b580      	push	{r7, lr}
 800304c:	b082      	sub	sp, #8
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
    buffer[0] = '\0';
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	701a      	strb	r2, [r3, #0]
}
 8003058:	46c0      	nop			; (mov r8, r8)
 800305a:	46bd      	mov	sp, r7
 800305c:	b002      	add	sp, #8
 800305e:	bd80      	pop	{r7, pc}

08003060 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003066:	4b4d      	ldr	r3, [pc, #308]	; (800319c <MX_GPIO_Init+0x13c>)
 8003068:	4a4c      	ldr	r2, [pc, #304]	; (800319c <MX_GPIO_Init+0x13c>)
 800306a:	6952      	ldr	r2, [r2, #20]
 800306c:	2180      	movs	r1, #128	; 0x80
 800306e:	03c9      	lsls	r1, r1, #15
 8003070:	430a      	orrs	r2, r1
 8003072:	615a      	str	r2, [r3, #20]
 8003074:	4b49      	ldr	r3, [pc, #292]	; (800319c <MX_GPIO_Init+0x13c>)
 8003076:	695a      	ldr	r2, [r3, #20]
 8003078:	2380      	movs	r3, #128	; 0x80
 800307a:	03db      	lsls	r3, r3, #15
 800307c:	4013      	ands	r3, r2
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003082:	4b46      	ldr	r3, [pc, #280]	; (800319c <MX_GPIO_Init+0x13c>)
 8003084:	4a45      	ldr	r2, [pc, #276]	; (800319c <MX_GPIO_Init+0x13c>)
 8003086:	6952      	ldr	r2, [r2, #20]
 8003088:	2180      	movs	r1, #128	; 0x80
 800308a:	0289      	lsls	r1, r1, #10
 800308c:	430a      	orrs	r2, r1
 800308e:	615a      	str	r2, [r3, #20]
 8003090:	4b42      	ldr	r3, [pc, #264]	; (800319c <MX_GPIO_Init+0x13c>)
 8003092:	695a      	ldr	r2, [r3, #20]
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	029b      	lsls	r3, r3, #10
 8003098:	4013      	ands	r3, r2
 800309a:	607b      	str	r3, [r7, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800309e:	4b3f      	ldr	r3, [pc, #252]	; (800319c <MX_GPIO_Init+0x13c>)
 80030a0:	4a3e      	ldr	r2, [pc, #248]	; (800319c <MX_GPIO_Init+0x13c>)
 80030a2:	6952      	ldr	r2, [r2, #20]
 80030a4:	2180      	movs	r1, #128	; 0x80
 80030a6:	02c9      	lsls	r1, r1, #11
 80030a8:	430a      	orrs	r2, r1
 80030aa:	615a      	str	r2, [r3, #20]
 80030ac:	4b3b      	ldr	r3, [pc, #236]	; (800319c <MX_GPIO_Init+0x13c>)
 80030ae:	695a      	ldr	r2, [r3, #20]
 80030b0:	2380      	movs	r3, #128	; 0x80
 80030b2:	02db      	lsls	r3, r3, #11
 80030b4:	4013      	ands	r3, r2
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, ENCODER_1_CE_Pin|ENCODER_2_CE_Pin, GPIO_PIN_RESET);
 80030ba:	4b39      	ldr	r3, [pc, #228]	; (80031a0 <MX_GPIO_Init+0x140>)
 80030bc:	2200      	movs	r2, #0
 80030be:	2103      	movs	r1, #3
 80030c0:	0018      	movs	r0, r3
 80030c2:	f7fe f8a8 	bl	8001216 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_Z_B_GPIO_Port, Motor_Z_B_Pin, GPIO_PIN_RESET);
 80030c6:	2390      	movs	r3, #144	; 0x90
 80030c8:	05db      	lsls	r3, r3, #23
 80030ca:	2200      	movs	r2, #0
 80030cc:	2108      	movs	r1, #8
 80030ce:	0018      	movs	r0, r3
 80030d0:	f7fe f8a1 	bl	8001216 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = ENCODER_1_CE_Pin|ENCODER_2_CE_Pin;
 80030d4:	230c      	movs	r3, #12
 80030d6:	18fb      	adds	r3, r7, r3
 80030d8:	2203      	movs	r2, #3
 80030da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030dc:	230c      	movs	r3, #12
 80030de:	18fb      	adds	r3, r7, r3
 80030e0:	2201      	movs	r2, #1
 80030e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e4:	230c      	movs	r3, #12
 80030e6:	18fb      	adds	r3, r7, r3
 80030e8:	2200      	movs	r2, #0
 80030ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ec:	230c      	movs	r3, #12
 80030ee:	18fb      	adds	r3, r7, r3
 80030f0:	2200      	movs	r2, #0
 80030f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80030f4:	230c      	movs	r3, #12
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	4a29      	ldr	r2, [pc, #164]	; (80031a0 <MX_GPIO_Init+0x140>)
 80030fa:	0019      	movs	r1, r3
 80030fc:	0010      	movs	r0, r2
 80030fe:	f7fd fef9 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK___Keyboard_Pin;
 8003102:	230c      	movs	r3, #12
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	2201      	movs	r2, #1
 8003108:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800310a:	230c      	movs	r3, #12
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	4a25      	ldr	r2, [pc, #148]	; (80031a4 <MX_GPIO_Init+0x144>)
 8003110:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003112:	230c      	movs	r3, #12
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	2200      	movs	r2, #0
 8003118:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CLK___Keyboard_GPIO_Port, &GPIO_InitStruct);
 800311a:	230c      	movs	r3, #12
 800311c:	18fa      	adds	r2, r7, r3
 800311e:	2390      	movs	r3, #144	; 0x90
 8003120:	05db      	lsls	r3, r3, #23
 8003122:	0011      	movs	r1, r2
 8003124:	0018      	movs	r0, r3
 8003126:	f7fd fee5 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DATA___Keyboard_Pin|Motor_Z_A_Pin;
 800312a:	230c      	movs	r3, #12
 800312c:	18fb      	adds	r3, r7, r3
 800312e:	2206      	movs	r2, #6
 8003130:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003132:	230c      	movs	r3, #12
 8003134:	18fb      	adds	r3, r7, r3
 8003136:	2200      	movs	r2, #0
 8003138:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313a:	230c      	movs	r3, #12
 800313c:	18fb      	adds	r3, r7, r3
 800313e:	2200      	movs	r2, #0
 8003140:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003142:	230c      	movs	r3, #12
 8003144:	18fa      	adds	r2, r7, r3
 8003146:	2390      	movs	r3, #144	; 0x90
 8003148:	05db      	lsls	r3, r3, #23
 800314a:	0011      	movs	r1, r2
 800314c:	0018      	movs	r0, r3
 800314e:	f7fd fed1 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Motor_Z_B_Pin;
 8003152:	230c      	movs	r3, #12
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	2208      	movs	r2, #8
 8003158:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800315a:	230c      	movs	r3, #12
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	2201      	movs	r2, #1
 8003160:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003162:	230c      	movs	r3, #12
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	2200      	movs	r2, #0
 8003168:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316a:	230c      	movs	r3, #12
 800316c:	18fb      	adds	r3, r7, r3
 800316e:	2200      	movs	r2, #0
 8003170:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Motor_Z_B_GPIO_Port, &GPIO_InitStruct);
 8003172:	230c      	movs	r3, #12
 8003174:	18fa      	adds	r2, r7, r3
 8003176:	2390      	movs	r3, #144	; 0x90
 8003178:	05db      	lsls	r3, r3, #23
 800317a:	0011      	movs	r1, r2
 800317c:	0018      	movs	r0, r3
 800317e:	f7fd feb9 	bl	8000ef4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003182:	2200      	movs	r2, #0
 8003184:	2100      	movs	r1, #0
 8003186:	2005      	movs	r0, #5
 8003188:	f7fd fe5a 	bl	8000e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800318c:	2005      	movs	r0, #5
 800318e:	f7fd fe6d 	bl	8000e6c <HAL_NVIC_EnableIRQ>

}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	46bd      	mov	sp, r7
 8003196:	b008      	add	sp, #32
 8003198:	bd80      	pop	{r7, pc}
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	40021000 	.word	0x40021000
 80031a0:	48001400 	.word	0x48001400
 80031a4:	10110000 	.word	0x10110000

080031a8 <interruption>:
/* Private function prototypes -----------------------------------------------*/
void interruption();
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void interruption(){
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
	ps2interrupt(&keyboard);
 80031ac:	4b03      	ldr	r3, [pc, #12]	; (80031bc <interruption+0x14>)
 80031ae:	0018      	movs	r0, r3
 80031b0:	f7ff fbf6 	bl	80029a0 <ps2interrupt>
}
 80031b4:	46c0      	nop			; (mov r8, r8)
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	20000150 	.word	0x20000150

080031c0 <main>:
 * @brief  The application entry point.
 *
 * @retval None
 */
int main(void)
{
 80031c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031c2:	b0a9      	sub	sp, #164	; 0xa4
 80031c4:	af22      	add	r7, sp, #136	; 0x88
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80031c6:	f7fd fd2f 	bl	8000c28 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80031ca:	f000 f973 	bl	80034b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80031ce:	f7ff ff47 	bl	8003060 <MX_GPIO_Init>
	MX_TIM3_Init();
 80031d2:	f000 fb11 	bl	80037f8 <MX_TIM3_Init>
	MX_TIM1_Init();
 80031d6:	f000 fa6d 	bl	80036b4 <MX_TIM1_Init>
	MX_TIM14_Init();
 80031da:	f000 fb9d 	bl	8003918 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80031de:	4ba7      	ldr	r3, [pc, #668]	; (800347c <main+0x2bc>)
 80031e0:	2118      	movs	r1, #24
 80031e2:	0018      	movs	r0, r3
 80031e4:	f7fe fdd2 	bl	8001d8c <HAL_TIM_Encoder_Start>

	motorBegin(&motorX, ENCODER_1_CE_GPIO_Port, ENCODER_1_CE_Pin, htim14, htim3, TIM_CHANNEL_1,  TIM_CHANNEL_4);
 80031e8:	4ca5      	ldr	r4, [pc, #660]	; (8003480 <main+0x2c0>)
 80031ea:	4ea6      	ldr	r6, [pc, #664]	; (8003484 <main+0x2c4>)
 80031ec:	4da6      	ldr	r5, [pc, #664]	; (8003488 <main+0x2c8>)
 80031ee:	230c      	movs	r3, #12
 80031f0:	9320      	str	r3, [sp, #128]	; 0x80
 80031f2:	2300      	movs	r3, #0
 80031f4:	931f      	str	r3, [sp, #124]	; 0x7c
 80031f6:	4aa1      	ldr	r2, [pc, #644]	; (800347c <main+0x2bc>)
 80031f8:	233c      	movs	r3, #60	; 0x3c
 80031fa:	446b      	add	r3, sp
 80031fc:	0018      	movs	r0, r3
 80031fe:	0011      	movs	r1, r2
 8003200:	2340      	movs	r3, #64	; 0x40
 8003202:	001a      	movs	r2, r3
 8003204:	f000 fd0e 	bl	8003c24 <memcpy>
 8003208:	466b      	mov	r3, sp
 800320a:	0018      	movs	r0, r3
 800320c:	1d23      	adds	r3, r4, #4
 800320e:	223c      	movs	r2, #60	; 0x3c
 8003210:	0019      	movs	r1, r3
 8003212:	f000 fd07 	bl	8003c24 <memcpy>
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	2201      	movs	r2, #1
 800321a:	0031      	movs	r1, r6
 800321c:	0028      	movs	r0, r5
 800321e:	f7ff f9dd 	bl	80025dc <motorBegin>
	motorBegin(&motorY, ENCODER_2_CE_GPIO_Port, ENCODER_2_CE_Pin, htim1, htim1, TIM_CHANNEL_2,  TIM_CHANNEL_3);
 8003222:	4c9a      	ldr	r4, [pc, #616]	; (800348c <main+0x2cc>)
 8003224:	4e97      	ldr	r6, [pc, #604]	; (8003484 <main+0x2c4>)
 8003226:	4d9a      	ldr	r5, [pc, #616]	; (8003490 <main+0x2d0>)
 8003228:	2308      	movs	r3, #8
 800322a:	9320      	str	r3, [sp, #128]	; 0x80
 800322c:	2304      	movs	r3, #4
 800322e:	931f      	str	r3, [sp, #124]	; 0x7c
 8003230:	4a96      	ldr	r2, [pc, #600]	; (800348c <main+0x2cc>)
 8003232:	233c      	movs	r3, #60	; 0x3c
 8003234:	446b      	add	r3, sp
 8003236:	0018      	movs	r0, r3
 8003238:	0011      	movs	r1, r2
 800323a:	2340      	movs	r3, #64	; 0x40
 800323c:	001a      	movs	r2, r3
 800323e:	f000 fcf1 	bl	8003c24 <memcpy>
 8003242:	466b      	mov	r3, sp
 8003244:	0018      	movs	r0, r3
 8003246:	1d23      	adds	r3, r4, #4
 8003248:	223c      	movs	r2, #60	; 0x3c
 800324a:	0019      	movs	r1, r3
 800324c:	f000 fcea 	bl	8003c24 <memcpy>
 8003250:	6823      	ldr	r3, [r4, #0]
 8003252:	2202      	movs	r2, #2
 8003254:	0031      	movs	r1, r6
 8003256:	0028      	movs	r0, r5
 8003258:	f7ff f9c0 	bl	80025dc <motorBegin>

	motorSimpleBegin(&motorZ, Motor_Z_A_GPIO_Port, Motor_Z_A_Pin, Motor_Z_B_GPIO_Port, Motor_Z_B_Pin);
 800325c:	2390      	movs	r3, #144	; 0x90
 800325e:	05da      	lsls	r2, r3, #23
 8003260:	2390      	movs	r3, #144	; 0x90
 8003262:	05d9      	lsls	r1, r3, #23
 8003264:	488b      	ldr	r0, [pc, #556]	; (8003494 <main+0x2d4>)
 8003266:	2308      	movs	r3, #8
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	0013      	movs	r3, r2
 800326c:	2204      	movs	r2, #4
 800326e:	f7ff fb21 	bl	80028b4 <motorSimpleBegin>

	keyboardBegin(&keyboard, PS2_DATA_PORT, PS2_DATA_PIN, PS2_IQR_PORT, PS2_IQR_PIN);
 8003272:	2390      	movs	r3, #144	; 0x90
 8003274:	05da      	lsls	r2, r3, #23
 8003276:	2390      	movs	r3, #144	; 0x90
 8003278:	05d9      	lsls	r1, r3, #23
 800327a:	4887      	ldr	r0, [pc, #540]	; (8003498 <main+0x2d8>)
 800327c:	2301      	movs	r3, #1
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	0013      	movs	r3, r2
 8003282:	2202      	movs	r2, #2
 8003284:	f7ff fe00 	bl	8002e88 <keyboardBegin>

	memset(buffer_braille, 0, sizeof(buffer_braille));
 8003288:	4b84      	ldr	r3, [pc, #528]	; (800349c <main+0x2dc>)
 800328a:	2204      	movs	r2, #4
 800328c:	2100      	movs	r1, #0
 800328e:	0018      	movs	r0, r3
 8003290:	f000 fcd1 	bl	8003c36 <memset>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		/* Faz a leitura do teclado e envia ao buffer_char */
		while(1){
			if(keyboardAvailable(&keyboard)){
 8003294:	4b80      	ldr	r3, [pc, #512]	; (8003498 <main+0x2d8>)
 8003296:	0018      	movs	r0, r3
 8003298:	f7ff fd74 	bl	8002d84 <keyboardAvailable>
 800329c:	1e03      	subs	r3, r0, #0
 800329e:	d0f9      	beq.n	8003294 <main+0xd4>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80032a0:	2390      	movs	r3, #144	; 0x90
 80032a2:	05db      	lsls	r3, r3, #23
 80032a4:	2201      	movs	r2, #1
 80032a6:	2120      	movs	r1, #32
 80032a8:	0018      	movs	r0, r3
 80032aa:	f7fd ffb4 	bl	8001216 <HAL_GPIO_WritePin>
				HAL_Delay(50);
 80032ae:	2032      	movs	r0, #50	; 0x32
 80032b0:	f7fd fd00 	bl	8000cb4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80032b4:	2390      	movs	r3, #144	; 0x90
 80032b6:	05db      	lsls	r3, r3, #23
 80032b8:	2200      	movs	r2, #0
 80032ba:	2120      	movs	r1, #32
 80032bc:	0018      	movs	r0, r3
 80032be:	f7fd ffaa 	bl	8001216 <HAL_GPIO_WritePin>
				uint8_t c = keyboardRead(&keyboard);
 80032c2:	1cfc      	adds	r4, r7, #3
 80032c4:	4b74      	ldr	r3, [pc, #464]	; (8003498 <main+0x2d8>)
 80032c6:	0018      	movs	r0, r3
 80032c8:	f7ff fd81 	bl	8002dce <keyboardRead>
 80032cc:	0003      	movs	r3, r0
 80032ce:	7023      	strb	r3, [r4, #0]
				if(c == PS2_ENTER){
 80032d0:	1cfb      	adds	r3, r7, #3
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b0d      	cmp	r3, #13
 80032d6:	d109      	bne.n	80032ec <main+0x12c>
					pressedEnter = 1;
 80032d8:	4b71      	ldr	r3, [pc, #452]	; (80034a0 <main+0x2e0>)
 80032da:	2201      	movs	r2, #1
 80032dc:	701a      	strb	r2, [r3, #0]
					break;
 80032de:	46c0      	nop			; (mov r8, r8)
				feedBuffer(buffer_char, MAX_CARACTERES, c);
			}
		}

		/* Programa leitura do teclado */
		if(pressedEnter){
 80032e0:	4b6f      	ldr	r3, [pc, #444]	; (80034a0 <main+0x2e0>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d100      	bne.n	80032ea <main+0x12a>
 80032e8:	e0c3      	b.n	8003472 <main+0x2b2>
 80032ea:	e007      	b.n	80032fc <main+0x13c>
				feedBuffer(buffer_char, MAX_CARACTERES, c);
 80032ec:	1cfb      	adds	r3, r7, #3
 80032ee:	781a      	ldrb	r2, [r3, #0]
 80032f0:	4b6c      	ldr	r3, [pc, #432]	; (80034a4 <main+0x2e4>)
 80032f2:	2105      	movs	r1, #5
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7ff fe77 	bl	8002fe8 <feedBuffer>
			if(keyboardAvailable(&keyboard)){
 80032fa:	e7cb      	b.n	8003294 <main+0xd4>

			for(int j=0;j<3;j++){
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	e0a3      	b.n	800344a <main+0x28a>
				//Imprime as linhas em braille
				if(j==1){
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d13f      	bne.n	8003388 <main+0x1c8>
					//Linhas das matrizes
					for(unsigned short i=strlen((const char*)buffer_char)-1; i>=0; --i){
 8003308:	4b66      	ldr	r3, [pc, #408]	; (80034a4 <main+0x2e4>)
 800330a:	0018      	movs	r0, r3
 800330c:	f7fc fefc 	bl	8000108 <strlen>
 8003310:	0003      	movs	r3, r0
 8003312:	b29a      	uxth	r2, r3
 8003314:	2312      	movs	r3, #18
 8003316:	18fb      	adds	r3, r7, r3
 8003318:	3a01      	subs	r2, #1
 800331a:	801a      	strh	r2, [r3, #0]

						// Recebe os pontos da linha para o caractere atual
						fillLineWithBraille(buffer_braille, j,buffer_char[i]);
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	b2d9      	uxtb	r1, r3
 8003320:	2312      	movs	r3, #18
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	4a5f      	ldr	r2, [pc, #380]	; (80034a4 <main+0x2e4>)
 8003328:	5cd2      	ldrb	r2, [r2, r3]
 800332a:	4b5c      	ldr	r3, [pc, #368]	; (800349c <main+0x2dc>)
 800332c:	0018      	movs	r0, r3
 800332e:	f7ff fddd 	bl	8002eec <fillLineWithBraille>

						// Percorre os 4 bits, no máximo, para cada caractere
						for(int x = 3; x >=0; ++x){
 8003332:	2303      	movs	r3, #3
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	e013      	b.n	8003360 <main+0x1a0>

							// Passa para a próxima iteração se o não tem ponto para furar
							if(buffer_braille[x] == '\0'){
 8003338:	4a58      	ldr	r2, [pc, #352]	; (800349c <main+0x2dc>)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	18d3      	adds	r3, r2, r3
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d009      	beq.n	8003358 <main+0x198>
							}else if(buffer_braille[x] == 1){
								//Furar
							}

							// Decrementa posição do eixo x, espaçamento entre colunas
							atualizarEixo(&motorX, motorX.setPoint - DELTA_COL_LIN);
 8003344:	4b50      	ldr	r3, [pc, #320]	; (8003488 <main+0x2c8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a57      	ldr	r2, [pc, #348]	; (80034a8 <main+0x2e8>)
 800334a:	189a      	adds	r2, r3, r2
 800334c:	4b4e      	ldr	r3, [pc, #312]	; (8003488 <main+0x2c8>)
 800334e:	0011      	movs	r1, r2
 8003350:	0018      	movs	r0, r3
 8003352:	f7ff f9ed 	bl	8002730 <atualizarEixo>
 8003356:	e000      	b.n	800335a <main+0x19a>
								continue;
 8003358:	46c0      	nop			; (mov r8, r8)
						for(int x = 3; x >=0; ++x){
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	3301      	adds	r3, #1
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	dae8      	bge.n	8003338 <main+0x178>
						}

						// Decrementa posição do eixo x, espaçamento entre char na horizontal
						atualizarEixo(&motorX, motorX.setPoint - DELTA_CHAR_H);
 8003366:	4b48      	ldr	r3, [pc, #288]	; (8003488 <main+0x2c8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a50      	ldr	r2, [pc, #320]	; (80034ac <main+0x2ec>)
 800336c:	189a      	adds	r2, r3, r2
 800336e:	4b46      	ldr	r3, [pc, #280]	; (8003488 <main+0x2c8>)
 8003370:	0011      	movs	r1, r2
 8003372:	0018      	movs	r0, r3
 8003374:	f7ff f9dc 	bl	8002730 <atualizarEixo>
					for(unsigned short i=strlen((const char*)buffer_char)-1; i>=0; --i){
 8003378:	2312      	movs	r3, #18
 800337a:	18fb      	adds	r3, r7, r3
 800337c:	2212      	movs	r2, #18
 800337e:	18ba      	adds	r2, r7, r2
 8003380:	8812      	ldrh	r2, [r2, #0]
 8003382:	3a01      	subs	r2, #1
 8003384:	801a      	strh	r2, [r3, #0]
						fillLineWithBraille(buffer_braille, j,buffer_char[i]);
 8003386:	e7c9      	b.n	800331c <main+0x15c>
					// Decrementa posição do eixo y, espaçamento entre linhas
					atualizarEixo(&motorY, motorY.setPoint + DELTA_COL_LIN);
				}else{
					unsigned short i;
					//Linhas das matrizes
					for(i=0; i<strlen((const char*)buffer_char); i++){
 8003388:	230a      	movs	r3, #10
 800338a:	18fb      	adds	r3, r7, r3
 800338c:	2200      	movs	r2, #0
 800338e:	801a      	strh	r2, [r3, #0]
 8003390:	e045      	b.n	800341e <main+0x25e>

						//Recebe os pontos da linha para o caractere atual
						fillLineWithBraille(buffer_braille, j,buffer_char[i]);
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	b2d9      	uxtb	r1, r3
 8003396:	230a      	movs	r3, #10
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	4a41      	ldr	r2, [pc, #260]	; (80034a4 <main+0x2e4>)
 800339e:	5cd2      	ldrb	r2, [r2, r3]
 80033a0:	4b3e      	ldr	r3, [pc, #248]	; (800349c <main+0x2dc>)
 80033a2:	0018      	movs	r0, r3
 80033a4:	f7ff fda2 	bl	8002eec <fillLineWithBraille>

						//Percorre os 4 bits, no máximo, para cada caractere
						for(int x = 0; x < 4; ++x){
 80033a8:	2300      	movs	r3, #0
 80033aa:	607b      	str	r3, [r7, #4]
 80033ac:	e021      	b.n	80033f2 <main+0x232>

							if(buffer_braille[x] == '\0'){
 80033ae:	4a3b      	ldr	r2, [pc, #236]	; (800349c <main+0x2dc>)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	18d3      	adds	r3, r2, r3
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d01f      	beq.n	80033fa <main+0x23a>
								break;
							}else if(buffer_braille[x] == 1){
 80033ba:	4a38      	ldr	r2, [pc, #224]	; (800349c <main+0x2dc>)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	18d3      	adds	r3, r2, r3
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d109      	bne.n	80033da <main+0x21a>
								motorForward(&motorZ, PIERCE_TIME);
 80033c6:	4b33      	ldr	r3, [pc, #204]	; (8003494 <main+0x2d4>)
 80033c8:	2164      	movs	r1, #100	; 0x64
 80033ca:	0018      	movs	r0, r3
 80033cc:	f7ff fa8d 	bl	80028ea <motorForward>
								motorBackward(&motorZ, PIERCE_TIME);
 80033d0:	4b30      	ldr	r3, [pc, #192]	; (8003494 <main+0x2d4>)
 80033d2:	2164      	movs	r1, #100	; 0x64
 80033d4:	0018      	movs	r0, r3
 80033d6:	f7ff fab5 	bl	8002944 <motorBackward>
							}

							// Incrementa posição do eixo x, espaçamento entre colunas
							atualizarEixo(&motorX, motorX.setPoint + DELTA_COL_LIN);
 80033da:	4b2b      	ldr	r3, [pc, #172]	; (8003488 <main+0x2c8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a34      	ldr	r2, [pc, #208]	; (80034b0 <main+0x2f0>)
 80033e0:	189a      	adds	r2, r3, r2
 80033e2:	4b29      	ldr	r3, [pc, #164]	; (8003488 <main+0x2c8>)
 80033e4:	0011      	movs	r1, r2
 80033e6:	0018      	movs	r0, r3
 80033e8:	f7ff f9a2 	bl	8002730 <atualizarEixo>
						for(int x = 0; x < 4; ++x){
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3301      	adds	r3, #1
 80033f0:	607b      	str	r3, [r7, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b03      	cmp	r3, #3
 80033f6:	ddda      	ble.n	80033ae <main+0x1ee>
 80033f8:	e000      	b.n	80033fc <main+0x23c>
								break;
 80033fa:	46c0      	nop			; (mov r8, r8)
						}

						// Incrementa posição do eixo x, espaçamento entre char na horizontal
						atualizarEixo(&motorX, motorX.setPoint + DELTA_CHAR_H);
 80033fc:	4b22      	ldr	r3, [pc, #136]	; (8003488 <main+0x2c8>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	22fe      	movs	r2, #254	; 0xfe
 8003402:	0092      	lsls	r2, r2, #2
 8003404:	189a      	adds	r2, r3, r2
 8003406:	4b20      	ldr	r3, [pc, #128]	; (8003488 <main+0x2c8>)
 8003408:	0011      	movs	r1, r2
 800340a:	0018      	movs	r0, r3
 800340c:	f7ff f990 	bl	8002730 <atualizarEixo>
					for(i=0; i<strlen((const char*)buffer_char); i++){
 8003410:	230a      	movs	r3, #10
 8003412:	18fb      	adds	r3, r7, r3
 8003414:	881a      	ldrh	r2, [r3, #0]
 8003416:	230a      	movs	r3, #10
 8003418:	18fb      	adds	r3, r7, r3
 800341a:	3201      	adds	r2, #1
 800341c:	801a      	strh	r2, [r3, #0]
 800341e:	230a      	movs	r3, #10
 8003420:	18fb      	adds	r3, r7, r3
 8003422:	881c      	ldrh	r4, [r3, #0]
 8003424:	4b1f      	ldr	r3, [pc, #124]	; (80034a4 <main+0x2e4>)
 8003426:	0018      	movs	r0, r3
 8003428:	f7fc fe6e 	bl	8000108 <strlen>
 800342c:	0003      	movs	r3, r0
 800342e:	429c      	cmp	r4, r3
 8003430:	d3af      	bcc.n	8003392 <main+0x1d2>

					}

					// Incrementa posição do eixo y, espaçamento entre linhas
					atualizarEixo(&motorY, motorY.setPoint + DELTA_COL_LIN);
 8003432:	4b17      	ldr	r3, [pc, #92]	; (8003490 <main+0x2d0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a1e      	ldr	r2, [pc, #120]	; (80034b0 <main+0x2f0>)
 8003438:	189a      	adds	r2, r3, r2
 800343a:	4b15      	ldr	r3, [pc, #84]	; (8003490 <main+0x2d0>)
 800343c:	0011      	movs	r1, r2
 800343e:	0018      	movs	r0, r3
 8003440:	f7ff f976 	bl	8002730 <atualizarEixo>
			for(int j=0;j<3;j++){
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	3301      	adds	r3, #1
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b02      	cmp	r3, #2
 800344e:	dc00      	bgt.n	8003452 <main+0x292>
 8003450:	e757      	b.n	8003302 <main+0x142>
				}
			}

			// Incrementa posição do eixo y, espaçamento entre char na vertical
			atualizarEixo(&motorY, motorY.setPoint + DELTA_CHAR_V - DELTA_COL_LIN);
 8003452:	4b0f      	ldr	r3, [pc, #60]	; (8003490 <main+0x2d0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	1d9a      	adds	r2, r3, #6
 8003458:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <main+0x2d0>)
 800345a:	0011      	movs	r1, r2
 800345c:	0018      	movs	r0, r3
 800345e:	f7ff f967 	bl	8002730 <atualizarEixo>

			// Seta posição eixo x para inicial
			atualizarEixo(&motorX, POS_INI);
 8003462:	4b09      	ldr	r3, [pc, #36]	; (8003488 <main+0x2c8>)
 8003464:	2100      	movs	r1, #0
 8003466:	0018      	movs	r0, r3
 8003468:	f7ff f962 	bl	8002730 <atualizarEixo>

			pressedEnter = 0;
 800346c:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <main+0x2e0>)
 800346e:	2200      	movs	r2, #0
 8003470:	701a      	strb	r2, [r3, #0]
		}
		clearBuffer(buffer_char);
 8003472:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <main+0x2e4>)
 8003474:	0018      	movs	r0, r3
 8003476:	f7ff fde8 	bl	800304a <clearBuffer>
	while (1)
 800347a:	e70b      	b.n	8003294 <main+0xd4>
 800347c:	200002e8 	.word	0x200002e8
 8003480:	20000368 	.word	0x20000368
 8003484:	48001400 	.word	0x48001400
 8003488:	200001ac 	.word	0x200001ac
 800348c:	20000328 	.word	0x20000328
 8003490:	2000024c 	.word	0x2000024c
 8003494:	2000019c 	.word	0x2000019c
 8003498:	20000150 	.word	0x20000150
 800349c:	20000248 	.word	0x20000248
 80034a0:	20000120 	.word	0x20000120
 80034a4:	20000194 	.word	0x20000194
 80034a8:	fffffc03 	.word	0xfffffc03
 80034ac:	fffffc08 	.word	0xfffffc08
 80034b0:	000003fd 	.word	0x000003fd

080034b4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b090      	sub	sp, #64	; 0x40
 80034b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80034ba:	2310      	movs	r3, #16
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	2202      	movs	r2, #2
 80034c0:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034c2:	2310      	movs	r3, #16
 80034c4:	18fb      	adds	r3, r7, r3
 80034c6:	2201      	movs	r2, #1
 80034c8:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = 16;
 80034ca:	2310      	movs	r3, #16
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	2210      	movs	r2, #16
 80034d0:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80034d2:	2310      	movs	r3, #16
 80034d4:	18fb      	adds	r3, r7, r3
 80034d6:	2200      	movs	r2, #0
 80034d8:	621a      	str	r2, [r3, #32]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034da:	2310      	movs	r3, #16
 80034dc:	18fb      	adds	r3, r7, r3
 80034de:	0018      	movs	r0, r3
 80034e0:	f7fd fedc 	bl	800129c <HAL_RCC_OscConfig>
 80034e4:	1e03      	subs	r3, r0, #0
 80034e6:	d006      	beq.n	80034f6 <SystemClock_Config+0x42>
	{
		_Error_Handler(__FILE__, __LINE__);
 80034e8:	2380      	movs	r3, #128	; 0x80
 80034ea:	005a      	lsls	r2, r3, #1
 80034ec:	4b1c      	ldr	r3, [pc, #112]	; (8003560 <SystemClock_Config+0xac>)
 80034ee:	0011      	movs	r1, r2
 80034f0:	0018      	movs	r0, r3
 80034f2:	f000 f837 	bl	8003564 <_Error_Handler>
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034f6:	003b      	movs	r3, r7
 80034f8:	2207      	movs	r2, #7
 80034fa:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80034fc:	003b      	movs	r3, r7
 80034fe:	2200      	movs	r2, #0
 8003500:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003502:	003b      	movs	r3, r7
 8003504:	2200      	movs	r2, #0
 8003506:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003508:	003b      	movs	r3, r7
 800350a:	2200      	movs	r2, #0
 800350c:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800350e:	003b      	movs	r3, r7
 8003510:	2100      	movs	r1, #0
 8003512:	0018      	movs	r0, r3
 8003514:	f7fe f9b6 	bl	8001884 <HAL_RCC_ClockConfig>
 8003518:	1e03      	subs	r3, r0, #0
 800351a:	d007      	beq.n	800352c <SystemClock_Config+0x78>
	{
		_Error_Handler(__FILE__, __LINE__);
 800351c:	230e      	movs	r3, #14
 800351e:	33ff      	adds	r3, #255	; 0xff
 8003520:	001a      	movs	r2, r3
 8003522:	4b0f      	ldr	r3, [pc, #60]	; (8003560 <SystemClock_Config+0xac>)
 8003524:	0011      	movs	r1, r2
 8003526:	0018      	movs	r0, r3
 8003528:	f000 f81c 	bl	8003564 <_Error_Handler>
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800352c:	f7fe faf0 	bl	8001b10 <HAL_RCC_GetHCLKFreq>
 8003530:	0002      	movs	r2, r0
 8003532:	23fa      	movs	r3, #250	; 0xfa
 8003534:	0099      	lsls	r1, r3, #2
 8003536:	0010      	movs	r0, r2
 8003538:	f7fc fdee 	bl	8000118 <__udivsi3>
 800353c:	0003      	movs	r3, r0
 800353e:	0018      	movs	r0, r3
 8003540:	f7fd fca4 	bl	8000e8c <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003544:	2004      	movs	r0, #4
 8003546:	f7fd fcaf 	bl	8000ea8 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800354a:	2301      	movs	r3, #1
 800354c:	425b      	negs	r3, r3
 800354e:	2200      	movs	r2, #0
 8003550:	2100      	movs	r1, #0
 8003552:	0018      	movs	r0, r3
 8003554:	f7fd fc74 	bl	8000e40 <HAL_NVIC_SetPriority>
}
 8003558:	46c0      	nop			; (mov r8, r8)
 800355a:	46bd      	mov	sp, r7
 800355c:	b010      	add	sp, #64	; 0x40
 800355e:	bd80      	pop	{r7, pc}
 8003560:	08003c80 	.word	0x08003c80

08003564 <_Error_Handler>:
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while(1)
 800356e:	e7fe      	b.n	800356e <_Error_Handler+0xa>

08003570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003576:	4b19      	ldr	r3, [pc, #100]	; (80035dc <HAL_MspInit+0x6c>)
 8003578:	4a18      	ldr	r2, [pc, #96]	; (80035dc <HAL_MspInit+0x6c>)
 800357a:	6992      	ldr	r2, [r2, #24]
 800357c:	2101      	movs	r1, #1
 800357e:	430a      	orrs	r2, r1
 8003580:	619a      	str	r2, [r3, #24]
 8003582:	4b16      	ldr	r3, [pc, #88]	; (80035dc <HAL_MspInit+0x6c>)
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2201      	movs	r2, #1
 8003588:	4013      	ands	r3, r2
 800358a:	607b      	str	r3, [r7, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800358e:	4b13      	ldr	r3, [pc, #76]	; (80035dc <HAL_MspInit+0x6c>)
 8003590:	4a12      	ldr	r2, [pc, #72]	; (80035dc <HAL_MspInit+0x6c>)
 8003592:	69d2      	ldr	r2, [r2, #28]
 8003594:	2180      	movs	r1, #128	; 0x80
 8003596:	0549      	lsls	r1, r1, #21
 8003598:	430a      	orrs	r2, r1
 800359a:	61da      	str	r2, [r3, #28]
 800359c:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <HAL_MspInit+0x6c>)
 800359e:	69da      	ldr	r2, [r3, #28]
 80035a0:	2380      	movs	r3, #128	; 0x80
 80035a2:	055b      	lsls	r3, r3, #21
 80035a4:	4013      	ands	r3, r2
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80035aa:	2305      	movs	r3, #5
 80035ac:	425b      	negs	r3, r3
 80035ae:	2200      	movs	r2, #0
 80035b0:	2100      	movs	r1, #0
 80035b2:	0018      	movs	r0, r3
 80035b4:	f7fd fc44 	bl	8000e40 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80035b8:	2302      	movs	r3, #2
 80035ba:	425b      	negs	r3, r3
 80035bc:	2200      	movs	r2, #0
 80035be:	2100      	movs	r1, #0
 80035c0:	0018      	movs	r0, r3
 80035c2:	f7fd fc3d 	bl	8000e40 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80035c6:	2301      	movs	r3, #1
 80035c8:	425b      	negs	r3, r3
 80035ca:	2200      	movs	r2, #0
 80035cc:	2100      	movs	r1, #0
 80035ce:	0018      	movs	r0, r3
 80035d0:	f7fd fc36 	bl	8000e40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035d4:	46c0      	nop			; (mov r8, r8)
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b002      	add	sp, #8
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40021000 	.word	0x40021000

080035e0 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80035e4:	46c0      	nop			; (mov r8, r8)
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035ee:	e7fe      	b.n	80035ee <HardFault_Handler+0x4>

080035f0 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80035f4:	46c0      	nop			; (mov r8, r8)
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003608:	f7fd fb3e 	bl	8000c88 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800360c:	f7fd fc66 	bl	8000edc <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003610:	46c0      	nop			; (mov r8, r8)
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <EXTI0_1_IRQHandler>:

/**
* @brief This function handles EXTI line 0 and 1 interrupts.
*/
void EXTI0_1_IRQHandler(void)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
  interruption();
 800361a:	f7ff fdc5 	bl	80031a8 <interruption>
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800361e:	2001      	movs	r0, #1
 8003620:	f7fd fe16 	bl	8001250 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003624:	46c0      	nop			; (mov r8, r8)
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8003630:	4b1a      	ldr	r3, [pc, #104]	; (800369c <SystemInit+0x70>)
 8003632:	4a1a      	ldr	r2, [pc, #104]	; (800369c <SystemInit+0x70>)
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	2101      	movs	r1, #1
 8003638:	430a      	orrs	r2, r1
 800363a:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800363c:	4b17      	ldr	r3, [pc, #92]	; (800369c <SystemInit+0x70>)
 800363e:	4a17      	ldr	r2, [pc, #92]	; (800369c <SystemInit+0x70>)
 8003640:	6852      	ldr	r2, [r2, #4]
 8003642:	4917      	ldr	r1, [pc, #92]	; (80036a0 <SystemInit+0x74>)
 8003644:	400a      	ands	r2, r1
 8003646:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8003648:	4b14      	ldr	r3, [pc, #80]	; (800369c <SystemInit+0x70>)
 800364a:	4a14      	ldr	r2, [pc, #80]	; (800369c <SystemInit+0x70>)
 800364c:	6812      	ldr	r2, [r2, #0]
 800364e:	4915      	ldr	r1, [pc, #84]	; (80036a4 <SystemInit+0x78>)
 8003650:	400a      	ands	r2, r1
 8003652:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003654:	4b11      	ldr	r3, [pc, #68]	; (800369c <SystemInit+0x70>)
 8003656:	4a11      	ldr	r2, [pc, #68]	; (800369c <SystemInit+0x70>)
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	4913      	ldr	r1, [pc, #76]	; (80036a8 <SystemInit+0x7c>)
 800365c:	400a      	ands	r2, r1
 800365e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8003660:	4b0e      	ldr	r3, [pc, #56]	; (800369c <SystemInit+0x70>)
 8003662:	4a0e      	ldr	r2, [pc, #56]	; (800369c <SystemInit+0x70>)
 8003664:	6852      	ldr	r2, [r2, #4]
 8003666:	4911      	ldr	r1, [pc, #68]	; (80036ac <SystemInit+0x80>)
 8003668:	400a      	ands	r2, r1
 800366a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800366c:	4b0b      	ldr	r3, [pc, #44]	; (800369c <SystemInit+0x70>)
 800366e:	4a0b      	ldr	r2, [pc, #44]	; (800369c <SystemInit+0x70>)
 8003670:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003672:	210f      	movs	r1, #15
 8003674:	438a      	bics	r2, r1
 8003676:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8003678:	4b08      	ldr	r3, [pc, #32]	; (800369c <SystemInit+0x70>)
 800367a:	4a08      	ldr	r2, [pc, #32]	; (800369c <SystemInit+0x70>)
 800367c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800367e:	490c      	ldr	r1, [pc, #48]	; (80036b0 <SystemInit+0x84>)
 8003680:	400a      	ands	r2, r1
 8003682:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8003684:	4b05      	ldr	r3, [pc, #20]	; (800369c <SystemInit+0x70>)
 8003686:	4a05      	ldr	r2, [pc, #20]	; (800369c <SystemInit+0x70>)
 8003688:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800368a:	2101      	movs	r1, #1
 800368c:	438a      	bics	r2, r1
 800368e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003690:	4b02      	ldr	r3, [pc, #8]	; (800369c <SystemInit+0x70>)
 8003692:	2200      	movs	r2, #0
 8003694:	609a      	str	r2, [r3, #8]

}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40021000 	.word	0x40021000
 80036a0:	08ffb80c 	.word	0x08ffb80c
 80036a4:	fef6ffff 	.word	0xfef6ffff
 80036a8:	fffbffff 	.word	0xfffbffff
 80036ac:	ffc0ffff 	.word	0xffc0ffff
 80036b0:	fffffeec 	.word	0xfffffeec

080036b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b090      	sub	sp, #64	; 0x40
 80036b8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 80036ba:	4b4c      	ldr	r3, [pc, #304]	; (80037ec <MX_TIM1_Init+0x138>)
 80036bc:	4a4c      	ldr	r2, [pc, #304]	; (80037f0 <MX_TIM1_Init+0x13c>)
 80036be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 80036c0:	4b4a      	ldr	r3, [pc, #296]	; (80037ec <MX_TIM1_Init+0x138>)
 80036c2:	2204      	movs	r2, #4
 80036c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036c6:	4b49      	ldr	r3, [pc, #292]	; (80037ec <MX_TIM1_Init+0x138>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 80036cc:	4b47      	ldr	r3, [pc, #284]	; (80037ec <MX_TIM1_Init+0x138>)
 80036ce:	22ff      	movs	r2, #255	; 0xff
 80036d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036d2:	4b46      	ldr	r3, [pc, #280]	; (80037ec <MX_TIM1_Init+0x138>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80036d8:	4b44      	ldr	r3, [pc, #272]	; (80037ec <MX_TIM1_Init+0x138>)
 80036da:	2200      	movs	r2, #0
 80036dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036de:	4b43      	ldr	r3, [pc, #268]	; (80037ec <MX_TIM1_Init+0x138>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80036e4:	4b41      	ldr	r3, [pc, #260]	; (80037ec <MX_TIM1_Init+0x138>)
 80036e6:	0018      	movs	r0, r3
 80036e8:	f7fe fa48 	bl	8001b7c <HAL_TIM_PWM_Init>
 80036ec:	1e03      	subs	r3, r0, #0
 80036ee:	d004      	beq.n	80036fa <MX_TIM1_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 80036f0:	4b40      	ldr	r3, [pc, #256]	; (80037f4 <MX_TIM1_Init+0x140>)
 80036f2:	2145      	movs	r1, #69	; 0x45
 80036f4:	0018      	movs	r0, r3
 80036f6:	f7ff ff35 	bl	8003564 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036fa:	2338      	movs	r3, #56	; 0x38
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003702:	2338      	movs	r3, #56	; 0x38
 8003704:	18fb      	adds	r3, r7, r3
 8003706:	2200      	movs	r2, #0
 8003708:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800370a:	2338      	movs	r3, #56	; 0x38
 800370c:	18fa      	adds	r2, r7, r3
 800370e:	4b37      	ldr	r3, [pc, #220]	; (80037ec <MX_TIM1_Init+0x138>)
 8003710:	0011      	movs	r1, r2
 8003712:	0018      	movs	r0, r3
 8003714:	f7fe feb1 	bl	800247a <HAL_TIMEx_MasterConfigSynchronization>
 8003718:	1e03      	subs	r3, r0, #0
 800371a:	d004      	beq.n	8003726 <MX_TIM1_Init+0x72>
  {
    _Error_Handler(__FILE__, __LINE__);
 800371c:	4b35      	ldr	r3, [pc, #212]	; (80037f4 <MX_TIM1_Init+0x140>)
 800371e:	214c      	movs	r1, #76	; 0x4c
 8003720:	0018      	movs	r0, r3
 8003722:	f7ff ff1f 	bl	8003564 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003726:	231c      	movs	r3, #28
 8003728:	18fb      	adds	r3, r7, r3
 800372a:	2260      	movs	r2, #96	; 0x60
 800372c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800372e:	231c      	movs	r3, #28
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	2200      	movs	r2, #0
 8003734:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003736:	231c      	movs	r3, #28
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	2200      	movs	r2, #0
 800373c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800373e:	231c      	movs	r3, #28
 8003740:	18fb      	adds	r3, r7, r3
 8003742:	2200      	movs	r2, #0
 8003744:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003746:	231c      	movs	r3, #28
 8003748:	18fb      	adds	r3, r7, r3
 800374a:	2200      	movs	r2, #0
 800374c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800374e:	231c      	movs	r3, #28
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	2200      	movs	r2, #0
 8003754:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003756:	231c      	movs	r3, #28
 8003758:	18fb      	adds	r3, r7, r3
 800375a:	2200      	movs	r2, #0
 800375c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800375e:	231c      	movs	r3, #28
 8003760:	18f9      	adds	r1, r7, r3
 8003762:	4b22      	ldr	r3, [pc, #136]	; (80037ec <MX_TIM1_Init+0x138>)
 8003764:	2204      	movs	r2, #4
 8003766:	0018      	movs	r0, r3
 8003768:	f7fe fb48 	bl	8001dfc <HAL_TIM_PWM_ConfigChannel>
 800376c:	1e03      	subs	r3, r0, #0
 800376e:	d004      	beq.n	800377a <MX_TIM1_Init+0xc6>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003770:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <MX_TIM1_Init+0x140>)
 8003772:	2158      	movs	r1, #88	; 0x58
 8003774:	0018      	movs	r0, r3
 8003776:	f7ff fef5 	bl	8003564 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800377a:	231c      	movs	r3, #28
 800377c:	18f9      	adds	r1, r7, r3
 800377e:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <MX_TIM1_Init+0x138>)
 8003780:	2208      	movs	r2, #8
 8003782:	0018      	movs	r0, r3
 8003784:	f7fe fb3a 	bl	8001dfc <HAL_TIM_PWM_ConfigChannel>
 8003788:	1e03      	subs	r3, r0, #0
 800378a:	d004      	beq.n	8003796 <MX_TIM1_Init+0xe2>
  {
    _Error_Handler(__FILE__, __LINE__);
 800378c:	4b19      	ldr	r3, [pc, #100]	; (80037f4 <MX_TIM1_Init+0x140>)
 800378e:	215d      	movs	r1, #93	; 0x5d
 8003790:	0018      	movs	r0, r3
 8003792:	f7ff fee7 	bl	8003564 <_Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003796:	003b      	movs	r3, r7
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800379c:	003b      	movs	r3, r7
 800379e:	2200      	movs	r2, #0
 80037a0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80037a2:	003b      	movs	r3, r7
 80037a4:	2200      	movs	r2, #0
 80037a6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80037a8:	003b      	movs	r3, r7
 80037aa:	2200      	movs	r2, #0
 80037ac:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80037ae:	003b      	movs	r3, r7
 80037b0:	2200      	movs	r2, #0
 80037b2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80037b4:	003b      	movs	r3, r7
 80037b6:	2280      	movs	r2, #128	; 0x80
 80037b8:	0192      	lsls	r2, r2, #6
 80037ba:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80037bc:	003b      	movs	r3, r7
 80037be:	2200      	movs	r2, #0
 80037c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80037c2:	003a      	movs	r2, r7
 80037c4:	4b09      	ldr	r3, [pc, #36]	; (80037ec <MX_TIM1_Init+0x138>)
 80037c6:	0011      	movs	r1, r2
 80037c8:	0018      	movs	r0, r3
 80037ca:	f7fe fe99 	bl	8002500 <HAL_TIMEx_ConfigBreakDeadTime>
 80037ce:	1e03      	subs	r3, r0, #0
 80037d0:	d004      	beq.n	80037dc <MX_TIM1_Init+0x128>
  {
    _Error_Handler(__FILE__, __LINE__);
 80037d2:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <MX_TIM1_Init+0x140>)
 80037d4:	2169      	movs	r1, #105	; 0x69
 80037d6:	0018      	movs	r0, r3
 80037d8:	f7ff fec4 	bl	8003564 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 80037dc:	4b03      	ldr	r3, [pc, #12]	; (80037ec <MX_TIM1_Init+0x138>)
 80037de:	0018      	movs	r0, r3
 80037e0:	f000 f95c 	bl	8003a9c <HAL_TIM_MspPostInit>

}
 80037e4:	46c0      	nop			; (mov r8, r8)
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b010      	add	sp, #64	; 0x40
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20000328 	.word	0x20000328
 80037f0:	40012c00 	.word	0x40012c00
 80037f4:	08003c90 	.word	0x08003c90

080037f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b092      	sub	sp, #72	; 0x48
 80037fc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
 80037fe:	4b43      	ldr	r3, [pc, #268]	; (800390c <MX_TIM3_Init+0x114>)
 8003800:	4a43      	ldr	r2, [pc, #268]	; (8003910 <MX_TIM3_Init+0x118>)
 8003802:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8003804:	4b41      	ldr	r3, [pc, #260]	; (800390c <MX_TIM3_Init+0x114>)
 8003806:	2204      	movs	r2, #4
 8003808:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800380a:	4b40      	ldr	r3, [pc, #256]	; (800390c <MX_TIM3_Init+0x114>)
 800380c:	2200      	movs	r2, #0
 800380e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8003810:	4b3e      	ldr	r3, [pc, #248]	; (800390c <MX_TIM3_Init+0x114>)
 8003812:	22ff      	movs	r2, #255	; 0xff
 8003814:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003816:	4b3d      	ldr	r3, [pc, #244]	; (800390c <MX_TIM3_Init+0x114>)
 8003818:	2200      	movs	r2, #0
 800381a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800381c:	4b3b      	ldr	r3, [pc, #236]	; (800390c <MX_TIM3_Init+0x114>)
 800381e:	2200      	movs	r2, #0
 8003820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003822:	4b3a      	ldr	r3, [pc, #232]	; (800390c <MX_TIM3_Init+0x114>)
 8003824:	0018      	movs	r0, r3
 8003826:	f7fe f9a9 	bl	8001b7c <HAL_TIM_PWM_Init>
 800382a:	1e03      	subs	r3, r0, #0
 800382c:	d004      	beq.n	8003838 <MX_TIM3_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 800382e:	4b39      	ldr	r3, [pc, #228]	; (8003914 <MX_TIM3_Init+0x11c>)
 8003830:	217e      	movs	r1, #126	; 0x7e
 8003832:	0018      	movs	r0, r3
 8003834:	f7ff fe96 	bl	8003564 <_Error_Handler>
  }

  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8003838:	2324      	movs	r3, #36	; 0x24
 800383a:	18fb      	adds	r3, r7, r3
 800383c:	2202      	movs	r2, #2
 800383e:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003840:	2324      	movs	r3, #36	; 0x24
 8003842:	18fb      	adds	r3, r7, r3
 8003844:	2202      	movs	r2, #2
 8003846:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003848:	2324      	movs	r3, #36	; 0x24
 800384a:	18fb      	adds	r3, r7, r3
 800384c:	2201      	movs	r2, #1
 800384e:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003850:	2324      	movs	r3, #36	; 0x24
 8003852:	18fb      	adds	r3, r7, r3
 8003854:	2200      	movs	r2, #0
 8003856:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8003858:	2324      	movs	r3, #36	; 0x24
 800385a:	18fb      	adds	r3, r7, r3
 800385c:	2200      	movs	r2, #0
 800385e:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003860:	2324      	movs	r3, #36	; 0x24
 8003862:	18fb      	adds	r3, r7, r3
 8003864:	2202      	movs	r2, #2
 8003866:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003868:	2324      	movs	r3, #36	; 0x24
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	2201      	movs	r2, #1
 800386e:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003870:	2324      	movs	r3, #36	; 0x24
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	2200      	movs	r2, #0
 8003876:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8003878:	2324      	movs	r3, #36	; 0x24
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	2200      	movs	r2, #0
 800387e:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003880:	2324      	movs	r3, #36	; 0x24
 8003882:	18fa      	adds	r2, r7, r3
 8003884:	4b21      	ldr	r3, [pc, #132]	; (800390c <MX_TIM3_Init+0x114>)
 8003886:	0011      	movs	r1, r2
 8003888:	0018      	movs	r0, r3
 800388a:	f7fe f9df 	bl	8001c4c <HAL_TIM_Encoder_Init>
 800388e:	1e03      	subs	r3, r0, #0
 8003890:	d004      	beq.n	800389c <MX_TIM3_Init+0xa4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003892:	4b20      	ldr	r3, [pc, #128]	; (8003914 <MX_TIM3_Init+0x11c>)
 8003894:	218c      	movs	r1, #140	; 0x8c
 8003896:	0018      	movs	r0, r3
 8003898:	f7ff fe64 	bl	8003564 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800389c:	231c      	movs	r3, #28
 800389e:	18fb      	adds	r3, r7, r3
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038a4:	231c      	movs	r3, #28
 80038a6:	18fb      	adds	r3, r7, r3
 80038a8:	2200      	movs	r2, #0
 80038aa:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038ac:	231c      	movs	r3, #28
 80038ae:	18fa      	adds	r2, r7, r3
 80038b0:	4b16      	ldr	r3, [pc, #88]	; (800390c <MX_TIM3_Init+0x114>)
 80038b2:	0011      	movs	r1, r2
 80038b4:	0018      	movs	r0, r3
 80038b6:	f7fe fde0 	bl	800247a <HAL_TIMEx_MasterConfigSynchronization>
 80038ba:	1e03      	subs	r3, r0, #0
 80038bc:	d004      	beq.n	80038c8 <MX_TIM3_Init+0xd0>
  {
    _Error_Handler(__FILE__, __LINE__);
 80038be:	4b15      	ldr	r3, [pc, #84]	; (8003914 <MX_TIM3_Init+0x11c>)
 80038c0:	2193      	movs	r1, #147	; 0x93
 80038c2:	0018      	movs	r0, r3
 80038c4:	f7ff fe4e 	bl	8003564 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038c8:	003b      	movs	r3, r7
 80038ca:	2260      	movs	r2, #96	; 0x60
 80038cc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80038ce:	003b      	movs	r3, r7
 80038d0:	2200      	movs	r2, #0
 80038d2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038d4:	003b      	movs	r3, r7
 80038d6:	2200      	movs	r2, #0
 80038d8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038da:	003b      	movs	r3, r7
 80038dc:	2200      	movs	r2, #0
 80038de:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80038e0:	0039      	movs	r1, r7
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <MX_TIM3_Init+0x114>)
 80038e4:	220c      	movs	r2, #12
 80038e6:	0018      	movs	r0, r3
 80038e8:	f7fe fa88 	bl	8001dfc <HAL_TIM_PWM_ConfigChannel>
 80038ec:	1e03      	subs	r3, r0, #0
 80038ee:	d004      	beq.n	80038fa <MX_TIM3_Init+0x102>
  {
    _Error_Handler(__FILE__, __LINE__);
 80038f0:	4b08      	ldr	r3, [pc, #32]	; (8003914 <MX_TIM3_Init+0x11c>)
 80038f2:	219c      	movs	r1, #156	; 0x9c
 80038f4:	0018      	movs	r0, r3
 80038f6:	f7ff fe35 	bl	8003564 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim3);
 80038fa:	4b04      	ldr	r3, [pc, #16]	; (800390c <MX_TIM3_Init+0x114>)
 80038fc:	0018      	movs	r0, r3
 80038fe:	f000 f8cd 	bl	8003a9c <HAL_TIM_MspPostInit>

}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	46bd      	mov	sp, r7
 8003906:	b012      	add	sp, #72	; 0x48
 8003908:	bd80      	pop	{r7, pc}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	200002e8 	.word	0x200002e8
 8003910:	40000400 	.word	0x40000400
 8003914:	08003c90 	.word	0x08003c90

08003918 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC;

  htim14.Instance = TIM14;
 800391e:	4b24      	ldr	r3, [pc, #144]	; (80039b0 <MX_TIM14_Init+0x98>)
 8003920:	4a24      	ldr	r2, [pc, #144]	; (80039b4 <MX_TIM14_Init+0x9c>)
 8003922:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4;
 8003924:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <MX_TIM14_Init+0x98>)
 8003926:	2204      	movs	r2, #4
 8003928:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800392a:	4b21      	ldr	r3, [pc, #132]	; (80039b0 <MX_TIM14_Init+0x98>)
 800392c:	2200      	movs	r2, #0
 800392e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 255;
 8003930:	4b1f      	ldr	r3, [pc, #124]	; (80039b0 <MX_TIM14_Init+0x98>)
 8003932:	22ff      	movs	r2, #255	; 0xff
 8003934:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003936:	4b1e      	ldr	r3, [pc, #120]	; (80039b0 <MX_TIM14_Init+0x98>)
 8003938:	2200      	movs	r2, #0
 800393a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800393c:	4b1c      	ldr	r3, [pc, #112]	; (80039b0 <MX_TIM14_Init+0x98>)
 800393e:	2200      	movs	r2, #0
 8003940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003942:	4b1b      	ldr	r3, [pc, #108]	; (80039b0 <MX_TIM14_Init+0x98>)
 8003944:	0018      	movs	r0, r3
 8003946:	f7fe f8ed 	bl	8001b24 <HAL_TIM_Base_Init>
 800394a:	1e03      	subs	r3, r0, #0
 800394c:	d004      	beq.n	8003958 <MX_TIM14_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 800394e:	4b1a      	ldr	r3, [pc, #104]	; (80039b8 <MX_TIM14_Init+0xa0>)
 8003950:	21af      	movs	r1, #175	; 0xaf
 8003952:	0018      	movs	r0, r3
 8003954:	f7ff fe06 	bl	8003564 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8003958:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <MX_TIM14_Init+0x98>)
 800395a:	0018      	movs	r0, r3
 800395c:	f7fe f90e 	bl	8001b7c <HAL_TIM_PWM_Init>
 8003960:	1e03      	subs	r3, r0, #0
 8003962:	d004      	beq.n	800396e <MX_TIM14_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003964:	4b14      	ldr	r3, [pc, #80]	; (80039b8 <MX_TIM14_Init+0xa0>)
 8003966:	21b4      	movs	r1, #180	; 0xb4
 8003968:	0018      	movs	r0, r3
 800396a:	f7ff fdfb 	bl	8003564 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800396e:	1d3b      	adds	r3, r7, #4
 8003970:	2260      	movs	r2, #96	; 0x60
 8003972:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003974:	1d3b      	adds	r3, r7, #4
 8003976:	2200      	movs	r2, #0
 8003978:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800397a:	1d3b      	adds	r3, r7, #4
 800397c:	2200      	movs	r2, #0
 800397e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003980:	1d3b      	adds	r3, r7, #4
 8003982:	2200      	movs	r2, #0
 8003984:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003986:	1d39      	adds	r1, r7, #4
 8003988:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <MX_TIM14_Init+0x98>)
 800398a:	2200      	movs	r2, #0
 800398c:	0018      	movs	r0, r3
 800398e:	f7fe fa35 	bl	8001dfc <HAL_TIM_PWM_ConfigChannel>
 8003992:	1e03      	subs	r3, r0, #0
 8003994:	d004      	beq.n	80039a0 <MX_TIM14_Init+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003996:	4b08      	ldr	r3, [pc, #32]	; (80039b8 <MX_TIM14_Init+0xa0>)
 8003998:	21bd      	movs	r1, #189	; 0xbd
 800399a:	0018      	movs	r0, r3
 800399c:	f7ff fde2 	bl	8003564 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim14);
 80039a0:	4b03      	ldr	r3, [pc, #12]	; (80039b0 <MX_TIM14_Init+0x98>)
 80039a2:	0018      	movs	r0, r3
 80039a4:	f000 f87a 	bl	8003a9c <HAL_TIM_MspPostInit>

}
 80039a8:	46c0      	nop			; (mov r8, r8)
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b008      	add	sp, #32
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	20000368 	.word	0x20000368
 80039b4:	40002000 	.word	0x40002000
 80039b8:	08003c90 	.word	0x08003c90

080039bc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08a      	sub	sp, #40	; 0x28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_pwmHandle->Instance==TIM1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a21      	ldr	r2, [pc, #132]	; (8003a50 <HAL_TIM_PWM_MspInit+0x94>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d10e      	bne.n	80039ec <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039ce:	4b21      	ldr	r3, [pc, #132]	; (8003a54 <HAL_TIM_PWM_MspInit+0x98>)
 80039d0:	4a20      	ldr	r2, [pc, #128]	; (8003a54 <HAL_TIM_PWM_MspInit+0x98>)
 80039d2:	6992      	ldr	r2, [r2, #24]
 80039d4:	2180      	movs	r1, #128	; 0x80
 80039d6:	0109      	lsls	r1, r1, #4
 80039d8:	430a      	orrs	r2, r1
 80039da:	619a      	str	r2, [r3, #24]
 80039dc:	4b1d      	ldr	r3, [pc, #116]	; (8003a54 <HAL_TIM_PWM_MspInit+0x98>)
 80039de:	699a      	ldr	r2, [r3, #24]
 80039e0:	2380      	movs	r3, #128	; 0x80
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	4013      	ands	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80039ea:	e02c      	b.n	8003a46 <HAL_TIM_PWM_MspInit+0x8a>
  else if(tim_pwmHandle->Instance==TIM3)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a19      	ldr	r2, [pc, #100]	; (8003a58 <HAL_TIM_PWM_MspInit+0x9c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d127      	bne.n	8003a46 <HAL_TIM_PWM_MspInit+0x8a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039f6:	4b17      	ldr	r3, [pc, #92]	; (8003a54 <HAL_TIM_PWM_MspInit+0x98>)
 80039f8:	4a16      	ldr	r2, [pc, #88]	; (8003a54 <HAL_TIM_PWM_MspInit+0x98>)
 80039fa:	69d2      	ldr	r2, [r2, #28]
 80039fc:	2102      	movs	r1, #2
 80039fe:	430a      	orrs	r2, r1
 8003a00:	61da      	str	r2, [r3, #28]
 8003a02:	4b14      	ldr	r3, [pc, #80]	; (8003a54 <HAL_TIM_PWM_MspInit+0x98>)
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	2202      	movs	r2, #2
 8003a08:	4013      	ands	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a0e:	2314      	movs	r3, #20
 8003a10:	18fb      	adds	r3, r7, r3
 8003a12:	22c0      	movs	r2, #192	; 0xc0
 8003a14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a16:	2314      	movs	r3, #20
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1e:	2314      	movs	r3, #20
 8003a20:	18fb      	adds	r3, r7, r3
 8003a22:	2200      	movs	r2, #0
 8003a24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a26:	2314      	movs	r3, #20
 8003a28:	18fb      	adds	r3, r7, r3
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003a2e:	2314      	movs	r3, #20
 8003a30:	18fb      	adds	r3, r7, r3
 8003a32:	2201      	movs	r2, #1
 8003a34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a36:	2314      	movs	r3, #20
 8003a38:	18fa      	adds	r2, r7, r3
 8003a3a:	2390      	movs	r3, #144	; 0x90
 8003a3c:	05db      	lsls	r3, r3, #23
 8003a3e:	0011      	movs	r1, r2
 8003a40:	0018      	movs	r0, r3
 8003a42:	f7fd fa57 	bl	8000ef4 <HAL_GPIO_Init>
}
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b00a      	add	sp, #40	; 0x28
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	40012c00 	.word	0x40012c00
 8003a54:	40021000 	.word	0x40021000
 8003a58:	40000400 	.word	0x40000400

08003a5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a0a      	ldr	r2, [pc, #40]	; (8003a94 <HAL_TIM_Base_MspInit+0x38>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d10d      	bne.n	8003a8a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003a6e:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <HAL_TIM_Base_MspInit+0x3c>)
 8003a70:	4a09      	ldr	r2, [pc, #36]	; (8003a98 <HAL_TIM_Base_MspInit+0x3c>)
 8003a72:	69d2      	ldr	r2, [r2, #28]
 8003a74:	2180      	movs	r1, #128	; 0x80
 8003a76:	0049      	lsls	r1, r1, #1
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	61da      	str	r2, [r3, #28]
 8003a7c:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <HAL_TIM_Base_MspInit+0x3c>)
 8003a7e:	69da      	ldr	r2, [r3, #28]
 8003a80:	2380      	movs	r3, #128	; 0x80
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	4013      	ands	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b004      	add	sp, #16
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	40002000 	.word	0x40002000
 8003a98:	40021000 	.word	0x40021000

08003a9c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a33      	ldr	r2, [pc, #204]	; (8003b78 <HAL_TIM_MspPostInit+0xdc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d11d      	bne.n	8003aea <HAL_TIM_MspPostInit+0x4e>
  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration    
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = MOTOR_Y_A_Pin|MOTOR_Y_B_Pin;
 8003aae:	230c      	movs	r3, #12
 8003ab0:	18fb      	adds	r3, r7, r3
 8003ab2:	22c0      	movs	r2, #192	; 0xc0
 8003ab4:	00d2      	lsls	r2, r2, #3
 8003ab6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab8:	230c      	movs	r3, #12
 8003aba:	18fb      	adds	r3, r7, r3
 8003abc:	2202      	movs	r2, #2
 8003abe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac0:	230c      	movs	r3, #12
 8003ac2:	18fb      	adds	r3, r7, r3
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac8:	230c      	movs	r3, #12
 8003aca:	18fb      	adds	r3, r7, r3
 8003acc:	2200      	movs	r2, #0
 8003ace:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003ad0:	230c      	movs	r3, #12
 8003ad2:	18fb      	adds	r3, r7, r3
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad8:	230c      	movs	r3, #12
 8003ada:	18fa      	adds	r2, r7, r3
 8003adc:	2390      	movs	r3, #144	; 0x90
 8003ade:	05db      	lsls	r3, r3, #23
 8003ae0:	0011      	movs	r1, r2
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f7fd fa06 	bl	8000ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8003ae8:	e041      	b.n	8003b6e <HAL_TIM_MspPostInit+0xd2>
  else if(timHandle->Instance==TIM3)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a23      	ldr	r2, [pc, #140]	; (8003b7c <HAL_TIM_MspPostInit+0xe0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d11b      	bne.n	8003b2c <HAL_TIM_MspPostInit+0x90>
    GPIO_InitStruct.Pin = MOTOR_X_B_Pin;
 8003af4:	230c      	movs	r3, #12
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	2202      	movs	r2, #2
 8003afa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afc:	230c      	movs	r3, #12
 8003afe:	18fb      	adds	r3, r7, r3
 8003b00:	2202      	movs	r2, #2
 8003b02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b04:	230c      	movs	r3, #12
 8003b06:	18fb      	adds	r3, r7, r3
 8003b08:	2200      	movs	r2, #0
 8003b0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b0c:	230c      	movs	r3, #12
 8003b0e:	18fb      	adds	r3, r7, r3
 8003b10:	2200      	movs	r2, #0
 8003b12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003b14:	230c      	movs	r3, #12
 8003b16:	18fb      	adds	r3, r7, r3
 8003b18:	2201      	movs	r2, #1
 8003b1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MOTOR_X_B_GPIO_Port, &GPIO_InitStruct);
 8003b1c:	230c      	movs	r3, #12
 8003b1e:	18fb      	adds	r3, r7, r3
 8003b20:	4a17      	ldr	r2, [pc, #92]	; (8003b80 <HAL_TIM_MspPostInit+0xe4>)
 8003b22:	0019      	movs	r1, r3
 8003b24:	0010      	movs	r0, r2
 8003b26:	f7fd f9e5 	bl	8000ef4 <HAL_GPIO_Init>
}
 8003b2a:	e020      	b.n	8003b6e <HAL_TIM_MspPostInit+0xd2>
  else if(timHandle->Instance==TIM14)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a14      	ldr	r2, [pc, #80]	; (8003b84 <HAL_TIM_MspPostInit+0xe8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d11b      	bne.n	8003b6e <HAL_TIM_MspPostInit+0xd2>
    GPIO_InitStruct.Pin = Motor_X_A_Pin;
 8003b36:	230c      	movs	r3, #12
 8003b38:	18fb      	adds	r3, r7, r3
 8003b3a:	2210      	movs	r2, #16
 8003b3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b3e:	230c      	movs	r3, #12
 8003b40:	18fb      	adds	r3, r7, r3
 8003b42:	2202      	movs	r2, #2
 8003b44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b46:	230c      	movs	r3, #12
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b4e:	230c      	movs	r3, #12
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	2200      	movs	r2, #0
 8003b54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8003b56:	230c      	movs	r3, #12
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	2204      	movs	r2, #4
 8003b5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Motor_X_A_GPIO_Port, &GPIO_InitStruct);
 8003b5e:	230c      	movs	r3, #12
 8003b60:	18fa      	adds	r2, r7, r3
 8003b62:	2390      	movs	r3, #144	; 0x90
 8003b64:	05db      	lsls	r3, r3, #23
 8003b66:	0011      	movs	r1, r2
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f7fd f9c3 	bl	8000ef4 <HAL_GPIO_Init>
}
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	46bd      	mov	sp, r7
 8003b72:	b008      	add	sp, #32
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	40012c00 	.word	0x40012c00
 8003b7c:	40000400 	.word	0x40000400
 8003b80:	48000400 	.word	0x48000400
 8003b84:	40002000 	.word	0x40002000

08003b88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b88:	480d      	ldr	r0, [pc, #52]	; (8003bc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b8a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b8c:	480d      	ldr	r0, [pc, #52]	; (8003bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b8e:	490e      	ldr	r1, [pc, #56]	; (8003bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b90:	4a0e      	ldr	r2, [pc, #56]	; (8003bcc <LoopForever+0xe>)
  movs r3, #0
 8003b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b94:	e002      	b.n	8003b9c <LoopCopyDataInit>

08003b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b9a:	3304      	adds	r3, #4

08003b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ba0:	d3f9      	bcc.n	8003b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ba2:	4a0b      	ldr	r2, [pc, #44]	; (8003bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ba4:	4c0b      	ldr	r4, [pc, #44]	; (8003bd4 <LoopForever+0x16>)
  movs r3, #0
 8003ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ba8:	e001      	b.n	8003bae <LoopFillZerobss>

08003baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bac:	3204      	adds	r2, #4

08003bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bb0:	d3fb      	bcc.n	8003baa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003bb2:	f7ff fd3b 	bl	800362c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003bb6:	f000 f811 	bl	8003bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003bba:	f7ff fb01 	bl	80031c0 <main>

08003bbe <LoopForever>:

LoopForever:
    b LoopForever
 8003bbe:	e7fe      	b.n	8003bbe <LoopForever>
  ldr   r0, =_estack
 8003bc0:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8003bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bc8:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8003bcc:	08003e9c 	.word	0x08003e9c
  ldr r2, =_sbss
 8003bd0:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8003bd4:	200003a8 	.word	0x200003a8

08003bd8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003bd8:	e7fe      	b.n	8003bd8 <ADC1_IRQHandler>
	...

08003bdc <__libc_init_array>:
 8003bdc:	b570      	push	{r4, r5, r6, lr}
 8003bde:	2600      	movs	r6, #0
 8003be0:	4d0c      	ldr	r5, [pc, #48]	; (8003c14 <__libc_init_array+0x38>)
 8003be2:	4c0d      	ldr	r4, [pc, #52]	; (8003c18 <__libc_init_array+0x3c>)
 8003be4:	1b64      	subs	r4, r4, r5
 8003be6:	10a4      	asrs	r4, r4, #2
 8003be8:	42a6      	cmp	r6, r4
 8003bea:	d109      	bne.n	8003c00 <__libc_init_array+0x24>
 8003bec:	2600      	movs	r6, #0
 8003bee:	f000 f82b 	bl	8003c48 <_init>
 8003bf2:	4d0a      	ldr	r5, [pc, #40]	; (8003c1c <__libc_init_array+0x40>)
 8003bf4:	4c0a      	ldr	r4, [pc, #40]	; (8003c20 <__libc_init_array+0x44>)
 8003bf6:	1b64      	subs	r4, r4, r5
 8003bf8:	10a4      	asrs	r4, r4, #2
 8003bfa:	42a6      	cmp	r6, r4
 8003bfc:	d105      	bne.n	8003c0a <__libc_init_array+0x2e>
 8003bfe:	bd70      	pop	{r4, r5, r6, pc}
 8003c00:	00b3      	lsls	r3, r6, #2
 8003c02:	58eb      	ldr	r3, [r5, r3]
 8003c04:	4798      	blx	r3
 8003c06:	3601      	adds	r6, #1
 8003c08:	e7ee      	b.n	8003be8 <__libc_init_array+0xc>
 8003c0a:	00b3      	lsls	r3, r6, #2
 8003c0c:	58eb      	ldr	r3, [r5, r3]
 8003c0e:	4798      	blx	r3
 8003c10:	3601      	adds	r6, #1
 8003c12:	e7f2      	b.n	8003bfa <__libc_init_array+0x1e>
 8003c14:	08003e94 	.word	0x08003e94
 8003c18:	08003e94 	.word	0x08003e94
 8003c1c:	08003e94 	.word	0x08003e94
 8003c20:	08003e98 	.word	0x08003e98

08003c24 <memcpy>:
 8003c24:	2300      	movs	r3, #0
 8003c26:	b510      	push	{r4, lr}
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d100      	bne.n	8003c2e <memcpy+0xa>
 8003c2c:	bd10      	pop	{r4, pc}
 8003c2e:	5ccc      	ldrb	r4, [r1, r3]
 8003c30:	54c4      	strb	r4, [r0, r3]
 8003c32:	3301      	adds	r3, #1
 8003c34:	e7f8      	b.n	8003c28 <memcpy+0x4>

08003c36 <memset>:
 8003c36:	0003      	movs	r3, r0
 8003c38:	1882      	adds	r2, r0, r2
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d100      	bne.n	8003c40 <memset+0xa>
 8003c3e:	4770      	bx	lr
 8003c40:	7019      	strb	r1, [r3, #0]
 8003c42:	3301      	adds	r3, #1
 8003c44:	e7f9      	b.n	8003c3a <memset+0x4>
	...

08003c48 <_init>:
 8003c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c4e:	bc08      	pop	{r3}
 8003c50:	469e      	mov	lr, r3
 8003c52:	4770      	bx	lr

08003c54 <_fini>:
 8003c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5a:	bc08      	pop	{r3}
 8003c5c:	469e      	mov	lr, r3
 8003c5e:	4770      	bx	lr
