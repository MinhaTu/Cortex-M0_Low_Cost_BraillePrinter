
BraillePrinter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003258  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003318  08003318  00013318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003358  08003358  00013358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800335c  0800335c  0001335c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000012c  20000000  08003360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000108  2000012c  0800348c  0002012c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000234  0800348c  00020234  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b896  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000017a3  00000000  00000000  0002b9ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000850  00000000  00000000  0002d190  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007a8  00000000  00000000  0002d9e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003b0c  00000000  00000000  0002e188  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002903  00000000  00000000  00031c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00034597  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001e9c  00000000  00000000  00034614  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000012c 	.word	0x2000012c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003300 	.word	0x08003300

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000130 	.word	0x20000130
 8000104:	08003300 	.word	0x08003300

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 f8d1 	bl	80003d8 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 f82b 	bl	800029c <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 f8c3 	bl	80003d8 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 f8b9 	bl	80003d8 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 f84b 	bl	8000310 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 f841 	bl	8000310 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__eqdf2>:
 800029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029e:	464f      	mov	r7, r9
 80002a0:	4646      	mov	r6, r8
 80002a2:	46d6      	mov	lr, sl
 80002a4:	005c      	lsls	r4, r3, #1
 80002a6:	b5c0      	push	{r6, r7, lr}
 80002a8:	031f      	lsls	r7, r3, #12
 80002aa:	0fdb      	lsrs	r3, r3, #31
 80002ac:	469a      	mov	sl, r3
 80002ae:	4b17      	ldr	r3, [pc, #92]	; (800030c <__eqdf2+0x70>)
 80002b0:	030e      	lsls	r6, r1, #12
 80002b2:	004d      	lsls	r5, r1, #1
 80002b4:	4684      	mov	ip, r0
 80002b6:	4680      	mov	r8, r0
 80002b8:	0b36      	lsrs	r6, r6, #12
 80002ba:	0d6d      	lsrs	r5, r5, #21
 80002bc:	0fc9      	lsrs	r1, r1, #31
 80002be:	4691      	mov	r9, r2
 80002c0:	0b3f      	lsrs	r7, r7, #12
 80002c2:	0d64      	lsrs	r4, r4, #21
 80002c4:	2001      	movs	r0, #1
 80002c6:	429d      	cmp	r5, r3
 80002c8:	d008      	beq.n	80002dc <__eqdf2+0x40>
 80002ca:	429c      	cmp	r4, r3
 80002cc:	d001      	beq.n	80002d2 <__eqdf2+0x36>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d00b      	beq.n	80002ea <__eqdf2+0x4e>
 80002d2:	bc1c      	pop	{r2, r3, r4}
 80002d4:	4690      	mov	r8, r2
 80002d6:	4699      	mov	r9, r3
 80002d8:	46a2      	mov	sl, r4
 80002da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002dc:	4663      	mov	r3, ip
 80002de:	4333      	orrs	r3, r6
 80002e0:	d1f7      	bne.n	80002d2 <__eqdf2+0x36>
 80002e2:	42ac      	cmp	r4, r5
 80002e4:	d1f5      	bne.n	80002d2 <__eqdf2+0x36>
 80002e6:	433a      	orrs	r2, r7
 80002e8:	d1f3      	bne.n	80002d2 <__eqdf2+0x36>
 80002ea:	2001      	movs	r0, #1
 80002ec:	42be      	cmp	r6, r7
 80002ee:	d1f0      	bne.n	80002d2 <__eqdf2+0x36>
 80002f0:	45c8      	cmp	r8, r9
 80002f2:	d1ee      	bne.n	80002d2 <__eqdf2+0x36>
 80002f4:	4551      	cmp	r1, sl
 80002f6:	d007      	beq.n	8000308 <__eqdf2+0x6c>
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	d1ea      	bne.n	80002d2 <__eqdf2+0x36>
 80002fc:	4663      	mov	r3, ip
 80002fe:	431e      	orrs	r6, r3
 8000300:	0030      	movs	r0, r6
 8000302:	1e46      	subs	r6, r0, #1
 8000304:	41b0      	sbcs	r0, r6
 8000306:	e7e4      	b.n	80002d2 <__eqdf2+0x36>
 8000308:	2000      	movs	r0, #0
 800030a:	e7e2      	b.n	80002d2 <__eqdf2+0x36>
 800030c:	000007ff 	.word	0x000007ff

08000310 <__gedf2>:
 8000310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000312:	4645      	mov	r5, r8
 8000314:	46de      	mov	lr, fp
 8000316:	4657      	mov	r7, sl
 8000318:	464e      	mov	r6, r9
 800031a:	b5e0      	push	{r5, r6, r7, lr}
 800031c:	031f      	lsls	r7, r3, #12
 800031e:	0b3d      	lsrs	r5, r7, #12
 8000320:	4f2c      	ldr	r7, [pc, #176]	; (80003d4 <__gedf2+0xc4>)
 8000322:	030e      	lsls	r6, r1, #12
 8000324:	004c      	lsls	r4, r1, #1
 8000326:	46ab      	mov	fp, r5
 8000328:	005d      	lsls	r5, r3, #1
 800032a:	4684      	mov	ip, r0
 800032c:	0b36      	lsrs	r6, r6, #12
 800032e:	0d64      	lsrs	r4, r4, #21
 8000330:	0fc9      	lsrs	r1, r1, #31
 8000332:	4690      	mov	r8, r2
 8000334:	0d6d      	lsrs	r5, r5, #21
 8000336:	0fdb      	lsrs	r3, r3, #31
 8000338:	42bc      	cmp	r4, r7
 800033a:	d02a      	beq.n	8000392 <__gedf2+0x82>
 800033c:	4f25      	ldr	r7, [pc, #148]	; (80003d4 <__gedf2+0xc4>)
 800033e:	42bd      	cmp	r5, r7
 8000340:	d02d      	beq.n	800039e <__gedf2+0x8e>
 8000342:	2c00      	cmp	r4, #0
 8000344:	d10f      	bne.n	8000366 <__gedf2+0x56>
 8000346:	4330      	orrs	r0, r6
 8000348:	0007      	movs	r7, r0
 800034a:	4681      	mov	r9, r0
 800034c:	4278      	negs	r0, r7
 800034e:	4178      	adcs	r0, r7
 8000350:	b2c0      	uxtb	r0, r0
 8000352:	2d00      	cmp	r5, #0
 8000354:	d117      	bne.n	8000386 <__gedf2+0x76>
 8000356:	465f      	mov	r7, fp
 8000358:	433a      	orrs	r2, r7
 800035a:	d114      	bne.n	8000386 <__gedf2+0x76>
 800035c:	464b      	mov	r3, r9
 800035e:	2000      	movs	r0, #0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d00a      	beq.n	800037a <__gedf2+0x6a>
 8000364:	e006      	b.n	8000374 <__gedf2+0x64>
 8000366:	2d00      	cmp	r5, #0
 8000368:	d102      	bne.n	8000370 <__gedf2+0x60>
 800036a:	4658      	mov	r0, fp
 800036c:	4302      	orrs	r2, r0
 800036e:	d001      	beq.n	8000374 <__gedf2+0x64>
 8000370:	4299      	cmp	r1, r3
 8000372:	d018      	beq.n	80003a6 <__gedf2+0x96>
 8000374:	4248      	negs	r0, r1
 8000376:	2101      	movs	r1, #1
 8000378:	4308      	orrs	r0, r1
 800037a:	bc3c      	pop	{r2, r3, r4, r5}
 800037c:	4690      	mov	r8, r2
 800037e:	4699      	mov	r9, r3
 8000380:	46a2      	mov	sl, r4
 8000382:	46ab      	mov	fp, r5
 8000384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000386:	2800      	cmp	r0, #0
 8000388:	d0f2      	beq.n	8000370 <__gedf2+0x60>
 800038a:	2001      	movs	r0, #1
 800038c:	3b01      	subs	r3, #1
 800038e:	4318      	orrs	r0, r3
 8000390:	e7f3      	b.n	800037a <__gedf2+0x6a>
 8000392:	0037      	movs	r7, r6
 8000394:	4307      	orrs	r7, r0
 8000396:	d0d1      	beq.n	800033c <__gedf2+0x2c>
 8000398:	2002      	movs	r0, #2
 800039a:	4240      	negs	r0, r0
 800039c:	e7ed      	b.n	800037a <__gedf2+0x6a>
 800039e:	465f      	mov	r7, fp
 80003a0:	4317      	orrs	r7, r2
 80003a2:	d0ce      	beq.n	8000342 <__gedf2+0x32>
 80003a4:	e7f8      	b.n	8000398 <__gedf2+0x88>
 80003a6:	42ac      	cmp	r4, r5
 80003a8:	dce4      	bgt.n	8000374 <__gedf2+0x64>
 80003aa:	da03      	bge.n	80003b4 <__gedf2+0xa4>
 80003ac:	1e48      	subs	r0, r1, #1
 80003ae:	2101      	movs	r1, #1
 80003b0:	4308      	orrs	r0, r1
 80003b2:	e7e2      	b.n	800037a <__gedf2+0x6a>
 80003b4:	455e      	cmp	r6, fp
 80003b6:	d8dd      	bhi.n	8000374 <__gedf2+0x64>
 80003b8:	d006      	beq.n	80003c8 <__gedf2+0xb8>
 80003ba:	2000      	movs	r0, #0
 80003bc:	455e      	cmp	r6, fp
 80003be:	d2dc      	bcs.n	800037a <__gedf2+0x6a>
 80003c0:	2301      	movs	r3, #1
 80003c2:	1e48      	subs	r0, r1, #1
 80003c4:	4318      	orrs	r0, r3
 80003c6:	e7d8      	b.n	800037a <__gedf2+0x6a>
 80003c8:	45c4      	cmp	ip, r8
 80003ca:	d8d3      	bhi.n	8000374 <__gedf2+0x64>
 80003cc:	2000      	movs	r0, #0
 80003ce:	45c4      	cmp	ip, r8
 80003d0:	d3f6      	bcc.n	80003c0 <__gedf2+0xb0>
 80003d2:	e7d2      	b.n	800037a <__gedf2+0x6a>
 80003d4:	000007ff 	.word	0x000007ff

080003d8 <__ledf2>:
 80003d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003da:	464e      	mov	r6, r9
 80003dc:	4645      	mov	r5, r8
 80003de:	46de      	mov	lr, fp
 80003e0:	4657      	mov	r7, sl
 80003e2:	005c      	lsls	r4, r3, #1
 80003e4:	b5e0      	push	{r5, r6, r7, lr}
 80003e6:	031f      	lsls	r7, r3, #12
 80003e8:	0fdb      	lsrs	r3, r3, #31
 80003ea:	4699      	mov	r9, r3
 80003ec:	4b2a      	ldr	r3, [pc, #168]	; (8000498 <__ledf2+0xc0>)
 80003ee:	030e      	lsls	r6, r1, #12
 80003f0:	004d      	lsls	r5, r1, #1
 80003f2:	0fc9      	lsrs	r1, r1, #31
 80003f4:	4684      	mov	ip, r0
 80003f6:	0b36      	lsrs	r6, r6, #12
 80003f8:	0d6d      	lsrs	r5, r5, #21
 80003fa:	468b      	mov	fp, r1
 80003fc:	4690      	mov	r8, r2
 80003fe:	0b3f      	lsrs	r7, r7, #12
 8000400:	0d64      	lsrs	r4, r4, #21
 8000402:	429d      	cmp	r5, r3
 8000404:	d020      	beq.n	8000448 <__ledf2+0x70>
 8000406:	4b24      	ldr	r3, [pc, #144]	; (8000498 <__ledf2+0xc0>)
 8000408:	429c      	cmp	r4, r3
 800040a:	d022      	beq.n	8000452 <__ledf2+0x7a>
 800040c:	2d00      	cmp	r5, #0
 800040e:	d112      	bne.n	8000436 <__ledf2+0x5e>
 8000410:	4330      	orrs	r0, r6
 8000412:	4243      	negs	r3, r0
 8000414:	4143      	adcs	r3, r0
 8000416:	b2db      	uxtb	r3, r3
 8000418:	2c00      	cmp	r4, #0
 800041a:	d01f      	beq.n	800045c <__ledf2+0x84>
 800041c:	2b00      	cmp	r3, #0
 800041e:	d00c      	beq.n	800043a <__ledf2+0x62>
 8000420:	464b      	mov	r3, r9
 8000422:	2001      	movs	r0, #1
 8000424:	3b01      	subs	r3, #1
 8000426:	4303      	orrs	r3, r0
 8000428:	0018      	movs	r0, r3
 800042a:	bc3c      	pop	{r2, r3, r4, r5}
 800042c:	4690      	mov	r8, r2
 800042e:	4699      	mov	r9, r3
 8000430:	46a2      	mov	sl, r4
 8000432:	46ab      	mov	fp, r5
 8000434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000436:	2c00      	cmp	r4, #0
 8000438:	d016      	beq.n	8000468 <__ledf2+0x90>
 800043a:	45cb      	cmp	fp, r9
 800043c:	d017      	beq.n	800046e <__ledf2+0x96>
 800043e:	465b      	mov	r3, fp
 8000440:	4259      	negs	r1, r3
 8000442:	2301      	movs	r3, #1
 8000444:	430b      	orrs	r3, r1
 8000446:	e7ef      	b.n	8000428 <__ledf2+0x50>
 8000448:	0031      	movs	r1, r6
 800044a:	2302      	movs	r3, #2
 800044c:	4301      	orrs	r1, r0
 800044e:	d1eb      	bne.n	8000428 <__ledf2+0x50>
 8000450:	e7d9      	b.n	8000406 <__ledf2+0x2e>
 8000452:	0039      	movs	r1, r7
 8000454:	2302      	movs	r3, #2
 8000456:	4311      	orrs	r1, r2
 8000458:	d1e6      	bne.n	8000428 <__ledf2+0x50>
 800045a:	e7d7      	b.n	800040c <__ledf2+0x34>
 800045c:	433a      	orrs	r2, r7
 800045e:	d1dd      	bne.n	800041c <__ledf2+0x44>
 8000460:	2300      	movs	r3, #0
 8000462:	2800      	cmp	r0, #0
 8000464:	d0e0      	beq.n	8000428 <__ledf2+0x50>
 8000466:	e7ea      	b.n	800043e <__ledf2+0x66>
 8000468:	433a      	orrs	r2, r7
 800046a:	d1e6      	bne.n	800043a <__ledf2+0x62>
 800046c:	e7e7      	b.n	800043e <__ledf2+0x66>
 800046e:	42a5      	cmp	r5, r4
 8000470:	dce5      	bgt.n	800043e <__ledf2+0x66>
 8000472:	db05      	blt.n	8000480 <__ledf2+0xa8>
 8000474:	42be      	cmp	r6, r7
 8000476:	d8e2      	bhi.n	800043e <__ledf2+0x66>
 8000478:	d007      	beq.n	800048a <__ledf2+0xb2>
 800047a:	2300      	movs	r3, #0
 800047c:	42be      	cmp	r6, r7
 800047e:	d2d3      	bcs.n	8000428 <__ledf2+0x50>
 8000480:	4659      	mov	r1, fp
 8000482:	2301      	movs	r3, #1
 8000484:	3901      	subs	r1, #1
 8000486:	430b      	orrs	r3, r1
 8000488:	e7ce      	b.n	8000428 <__ledf2+0x50>
 800048a:	45c4      	cmp	ip, r8
 800048c:	d8d7      	bhi.n	800043e <__ledf2+0x66>
 800048e:	2300      	movs	r3, #0
 8000490:	45c4      	cmp	ip, r8
 8000492:	d3f5      	bcc.n	8000480 <__ledf2+0xa8>
 8000494:	e7c8      	b.n	8000428 <__ledf2+0x50>
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	000007ff 	.word	0x000007ff

0800049c <__aeabi_dsub>:
 800049c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049e:	4646      	mov	r6, r8
 80004a0:	46d6      	mov	lr, sl
 80004a2:	464f      	mov	r7, r9
 80004a4:	030c      	lsls	r4, r1, #12
 80004a6:	b5c0      	push	{r6, r7, lr}
 80004a8:	0fcd      	lsrs	r5, r1, #31
 80004aa:	004e      	lsls	r6, r1, #1
 80004ac:	0a61      	lsrs	r1, r4, #9
 80004ae:	0f44      	lsrs	r4, r0, #29
 80004b0:	430c      	orrs	r4, r1
 80004b2:	00c1      	lsls	r1, r0, #3
 80004b4:	0058      	lsls	r0, r3, #1
 80004b6:	0d40      	lsrs	r0, r0, #21
 80004b8:	4684      	mov	ip, r0
 80004ba:	468a      	mov	sl, r1
 80004bc:	000f      	movs	r7, r1
 80004be:	0319      	lsls	r1, r3, #12
 80004c0:	0f50      	lsrs	r0, r2, #29
 80004c2:	0a49      	lsrs	r1, r1, #9
 80004c4:	4301      	orrs	r1, r0
 80004c6:	48c6      	ldr	r0, [pc, #792]	; (80007e0 <__aeabi_dsub+0x344>)
 80004c8:	0d76      	lsrs	r6, r6, #21
 80004ca:	46a8      	mov	r8, r5
 80004cc:	0fdb      	lsrs	r3, r3, #31
 80004ce:	00d2      	lsls	r2, r2, #3
 80004d0:	4584      	cmp	ip, r0
 80004d2:	d100      	bne.n	80004d6 <__aeabi_dsub+0x3a>
 80004d4:	e0d8      	b.n	8000688 <__aeabi_dsub+0x1ec>
 80004d6:	2001      	movs	r0, #1
 80004d8:	4043      	eors	r3, r0
 80004da:	42ab      	cmp	r3, r5
 80004dc:	d100      	bne.n	80004e0 <__aeabi_dsub+0x44>
 80004de:	e0a6      	b.n	800062e <__aeabi_dsub+0x192>
 80004e0:	4660      	mov	r0, ip
 80004e2:	1a35      	subs	r5, r6, r0
 80004e4:	2d00      	cmp	r5, #0
 80004e6:	dc00      	bgt.n	80004ea <__aeabi_dsub+0x4e>
 80004e8:	e105      	b.n	80006f6 <__aeabi_dsub+0x25a>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	d110      	bne.n	8000510 <__aeabi_dsub+0x74>
 80004ee:	000b      	movs	r3, r1
 80004f0:	4313      	orrs	r3, r2
 80004f2:	d100      	bne.n	80004f6 <__aeabi_dsub+0x5a>
 80004f4:	e0d7      	b.n	80006a6 <__aeabi_dsub+0x20a>
 80004f6:	1e6b      	subs	r3, r5, #1
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d000      	beq.n	80004fe <__aeabi_dsub+0x62>
 80004fc:	e14b      	b.n	8000796 <__aeabi_dsub+0x2fa>
 80004fe:	4653      	mov	r3, sl
 8000500:	1a9f      	subs	r7, r3, r2
 8000502:	45ba      	cmp	sl, r7
 8000504:	4180      	sbcs	r0, r0
 8000506:	1a64      	subs	r4, r4, r1
 8000508:	4240      	negs	r0, r0
 800050a:	1a24      	subs	r4, r4, r0
 800050c:	2601      	movs	r6, #1
 800050e:	e01e      	b.n	800054e <__aeabi_dsub+0xb2>
 8000510:	4bb3      	ldr	r3, [pc, #716]	; (80007e0 <__aeabi_dsub+0x344>)
 8000512:	429e      	cmp	r6, r3
 8000514:	d048      	beq.n	80005a8 <__aeabi_dsub+0x10c>
 8000516:	2380      	movs	r3, #128	; 0x80
 8000518:	041b      	lsls	r3, r3, #16
 800051a:	4319      	orrs	r1, r3
 800051c:	2d38      	cmp	r5, #56	; 0x38
 800051e:	dd00      	ble.n	8000522 <__aeabi_dsub+0x86>
 8000520:	e119      	b.n	8000756 <__aeabi_dsub+0x2ba>
 8000522:	2d1f      	cmp	r5, #31
 8000524:	dd00      	ble.n	8000528 <__aeabi_dsub+0x8c>
 8000526:	e14c      	b.n	80007c2 <__aeabi_dsub+0x326>
 8000528:	2320      	movs	r3, #32
 800052a:	000f      	movs	r7, r1
 800052c:	1b5b      	subs	r3, r3, r5
 800052e:	0010      	movs	r0, r2
 8000530:	409a      	lsls	r2, r3
 8000532:	409f      	lsls	r7, r3
 8000534:	40e8      	lsrs	r0, r5
 8000536:	1e53      	subs	r3, r2, #1
 8000538:	419a      	sbcs	r2, r3
 800053a:	40e9      	lsrs	r1, r5
 800053c:	4307      	orrs	r7, r0
 800053e:	4317      	orrs	r7, r2
 8000540:	4653      	mov	r3, sl
 8000542:	1bdf      	subs	r7, r3, r7
 8000544:	1a61      	subs	r1, r4, r1
 8000546:	45ba      	cmp	sl, r7
 8000548:	41a4      	sbcs	r4, r4
 800054a:	4264      	negs	r4, r4
 800054c:	1b0c      	subs	r4, r1, r4
 800054e:	0223      	lsls	r3, r4, #8
 8000550:	d400      	bmi.n	8000554 <__aeabi_dsub+0xb8>
 8000552:	e0c5      	b.n	80006e0 <__aeabi_dsub+0x244>
 8000554:	0264      	lsls	r4, r4, #9
 8000556:	0a65      	lsrs	r5, r4, #9
 8000558:	2d00      	cmp	r5, #0
 800055a:	d100      	bne.n	800055e <__aeabi_dsub+0xc2>
 800055c:	e0f6      	b.n	800074c <__aeabi_dsub+0x2b0>
 800055e:	0028      	movs	r0, r5
 8000560:	f000 fb28 	bl	8000bb4 <__clzsi2>
 8000564:	0003      	movs	r3, r0
 8000566:	3b08      	subs	r3, #8
 8000568:	2b1f      	cmp	r3, #31
 800056a:	dd00      	ble.n	800056e <__aeabi_dsub+0xd2>
 800056c:	e0e9      	b.n	8000742 <__aeabi_dsub+0x2a6>
 800056e:	2220      	movs	r2, #32
 8000570:	003c      	movs	r4, r7
 8000572:	1ad2      	subs	r2, r2, r3
 8000574:	409d      	lsls	r5, r3
 8000576:	40d4      	lsrs	r4, r2
 8000578:	409f      	lsls	r7, r3
 800057a:	4325      	orrs	r5, r4
 800057c:	429e      	cmp	r6, r3
 800057e:	dd00      	ble.n	8000582 <__aeabi_dsub+0xe6>
 8000580:	e0db      	b.n	800073a <__aeabi_dsub+0x29e>
 8000582:	1b9e      	subs	r6, r3, r6
 8000584:	1c73      	adds	r3, r6, #1
 8000586:	2b1f      	cmp	r3, #31
 8000588:	dd00      	ble.n	800058c <__aeabi_dsub+0xf0>
 800058a:	e10a      	b.n	80007a2 <__aeabi_dsub+0x306>
 800058c:	2220      	movs	r2, #32
 800058e:	0038      	movs	r0, r7
 8000590:	1ad2      	subs	r2, r2, r3
 8000592:	0029      	movs	r1, r5
 8000594:	4097      	lsls	r7, r2
 8000596:	002c      	movs	r4, r5
 8000598:	4091      	lsls	r1, r2
 800059a:	40d8      	lsrs	r0, r3
 800059c:	1e7a      	subs	r2, r7, #1
 800059e:	4197      	sbcs	r7, r2
 80005a0:	40dc      	lsrs	r4, r3
 80005a2:	2600      	movs	r6, #0
 80005a4:	4301      	orrs	r1, r0
 80005a6:	430f      	orrs	r7, r1
 80005a8:	077b      	lsls	r3, r7, #29
 80005aa:	d009      	beq.n	80005c0 <__aeabi_dsub+0x124>
 80005ac:	230f      	movs	r3, #15
 80005ae:	403b      	ands	r3, r7
 80005b0:	2b04      	cmp	r3, #4
 80005b2:	d005      	beq.n	80005c0 <__aeabi_dsub+0x124>
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	42bb      	cmp	r3, r7
 80005b8:	41bf      	sbcs	r7, r7
 80005ba:	427f      	negs	r7, r7
 80005bc:	19e4      	adds	r4, r4, r7
 80005be:	001f      	movs	r7, r3
 80005c0:	0223      	lsls	r3, r4, #8
 80005c2:	d525      	bpl.n	8000610 <__aeabi_dsub+0x174>
 80005c4:	4b86      	ldr	r3, [pc, #536]	; (80007e0 <__aeabi_dsub+0x344>)
 80005c6:	3601      	adds	r6, #1
 80005c8:	429e      	cmp	r6, r3
 80005ca:	d100      	bne.n	80005ce <__aeabi_dsub+0x132>
 80005cc:	e0af      	b.n	800072e <__aeabi_dsub+0x292>
 80005ce:	4b85      	ldr	r3, [pc, #532]	; (80007e4 <__aeabi_dsub+0x348>)
 80005d0:	2501      	movs	r5, #1
 80005d2:	401c      	ands	r4, r3
 80005d4:	4643      	mov	r3, r8
 80005d6:	0762      	lsls	r2, r4, #29
 80005d8:	08ff      	lsrs	r7, r7, #3
 80005da:	0264      	lsls	r4, r4, #9
 80005dc:	0576      	lsls	r6, r6, #21
 80005de:	4317      	orrs	r7, r2
 80005e0:	0b24      	lsrs	r4, r4, #12
 80005e2:	0d76      	lsrs	r6, r6, #21
 80005e4:	401d      	ands	r5, r3
 80005e6:	2100      	movs	r1, #0
 80005e8:	0324      	lsls	r4, r4, #12
 80005ea:	0b23      	lsrs	r3, r4, #12
 80005ec:	0d0c      	lsrs	r4, r1, #20
 80005ee:	4a7e      	ldr	r2, [pc, #504]	; (80007e8 <__aeabi_dsub+0x34c>)
 80005f0:	0524      	lsls	r4, r4, #20
 80005f2:	431c      	orrs	r4, r3
 80005f4:	4014      	ands	r4, r2
 80005f6:	0533      	lsls	r3, r6, #20
 80005f8:	4323      	orrs	r3, r4
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	07ed      	lsls	r5, r5, #31
 80005fe:	085b      	lsrs	r3, r3, #1
 8000600:	432b      	orrs	r3, r5
 8000602:	0038      	movs	r0, r7
 8000604:	0019      	movs	r1, r3
 8000606:	bc1c      	pop	{r2, r3, r4}
 8000608:	4690      	mov	r8, r2
 800060a:	4699      	mov	r9, r3
 800060c:	46a2      	mov	sl, r4
 800060e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000610:	2501      	movs	r5, #1
 8000612:	4643      	mov	r3, r8
 8000614:	0762      	lsls	r2, r4, #29
 8000616:	08ff      	lsrs	r7, r7, #3
 8000618:	4317      	orrs	r7, r2
 800061a:	08e4      	lsrs	r4, r4, #3
 800061c:	401d      	ands	r5, r3
 800061e:	4b70      	ldr	r3, [pc, #448]	; (80007e0 <__aeabi_dsub+0x344>)
 8000620:	429e      	cmp	r6, r3
 8000622:	d036      	beq.n	8000692 <__aeabi_dsub+0x1f6>
 8000624:	0324      	lsls	r4, r4, #12
 8000626:	0576      	lsls	r6, r6, #21
 8000628:	0b24      	lsrs	r4, r4, #12
 800062a:	0d76      	lsrs	r6, r6, #21
 800062c:	e7db      	b.n	80005e6 <__aeabi_dsub+0x14a>
 800062e:	4663      	mov	r3, ip
 8000630:	1af3      	subs	r3, r6, r3
 8000632:	2b00      	cmp	r3, #0
 8000634:	dc00      	bgt.n	8000638 <__aeabi_dsub+0x19c>
 8000636:	e094      	b.n	8000762 <__aeabi_dsub+0x2c6>
 8000638:	4660      	mov	r0, ip
 800063a:	2800      	cmp	r0, #0
 800063c:	d035      	beq.n	80006aa <__aeabi_dsub+0x20e>
 800063e:	4868      	ldr	r0, [pc, #416]	; (80007e0 <__aeabi_dsub+0x344>)
 8000640:	4286      	cmp	r6, r0
 8000642:	d0b1      	beq.n	80005a8 <__aeabi_dsub+0x10c>
 8000644:	2780      	movs	r7, #128	; 0x80
 8000646:	043f      	lsls	r7, r7, #16
 8000648:	4339      	orrs	r1, r7
 800064a:	2b38      	cmp	r3, #56	; 0x38
 800064c:	dc00      	bgt.n	8000650 <__aeabi_dsub+0x1b4>
 800064e:	e0fd      	b.n	800084c <__aeabi_dsub+0x3b0>
 8000650:	430a      	orrs	r2, r1
 8000652:	0017      	movs	r7, r2
 8000654:	2100      	movs	r1, #0
 8000656:	1e7a      	subs	r2, r7, #1
 8000658:	4197      	sbcs	r7, r2
 800065a:	4457      	add	r7, sl
 800065c:	4557      	cmp	r7, sl
 800065e:	4180      	sbcs	r0, r0
 8000660:	1909      	adds	r1, r1, r4
 8000662:	4244      	negs	r4, r0
 8000664:	190c      	adds	r4, r1, r4
 8000666:	0223      	lsls	r3, r4, #8
 8000668:	d53a      	bpl.n	80006e0 <__aeabi_dsub+0x244>
 800066a:	4b5d      	ldr	r3, [pc, #372]	; (80007e0 <__aeabi_dsub+0x344>)
 800066c:	3601      	adds	r6, #1
 800066e:	429e      	cmp	r6, r3
 8000670:	d100      	bne.n	8000674 <__aeabi_dsub+0x1d8>
 8000672:	e14b      	b.n	800090c <__aeabi_dsub+0x470>
 8000674:	2201      	movs	r2, #1
 8000676:	4b5b      	ldr	r3, [pc, #364]	; (80007e4 <__aeabi_dsub+0x348>)
 8000678:	401c      	ands	r4, r3
 800067a:	087b      	lsrs	r3, r7, #1
 800067c:	4017      	ands	r7, r2
 800067e:	431f      	orrs	r7, r3
 8000680:	07e2      	lsls	r2, r4, #31
 8000682:	4317      	orrs	r7, r2
 8000684:	0864      	lsrs	r4, r4, #1
 8000686:	e78f      	b.n	80005a8 <__aeabi_dsub+0x10c>
 8000688:	0008      	movs	r0, r1
 800068a:	4310      	orrs	r0, r2
 800068c:	d000      	beq.n	8000690 <__aeabi_dsub+0x1f4>
 800068e:	e724      	b.n	80004da <__aeabi_dsub+0x3e>
 8000690:	e721      	b.n	80004d6 <__aeabi_dsub+0x3a>
 8000692:	0023      	movs	r3, r4
 8000694:	433b      	orrs	r3, r7
 8000696:	d100      	bne.n	800069a <__aeabi_dsub+0x1fe>
 8000698:	e1b9      	b.n	8000a0e <__aeabi_dsub+0x572>
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	0312      	lsls	r2, r2, #12
 800069e:	4314      	orrs	r4, r2
 80006a0:	0324      	lsls	r4, r4, #12
 80006a2:	0b24      	lsrs	r4, r4, #12
 80006a4:	e79f      	b.n	80005e6 <__aeabi_dsub+0x14a>
 80006a6:	002e      	movs	r6, r5
 80006a8:	e77e      	b.n	80005a8 <__aeabi_dsub+0x10c>
 80006aa:	0008      	movs	r0, r1
 80006ac:	4310      	orrs	r0, r2
 80006ae:	d100      	bne.n	80006b2 <__aeabi_dsub+0x216>
 80006b0:	e0ca      	b.n	8000848 <__aeabi_dsub+0x3ac>
 80006b2:	1e58      	subs	r0, r3, #1
 80006b4:	4684      	mov	ip, r0
 80006b6:	2800      	cmp	r0, #0
 80006b8:	d000      	beq.n	80006bc <__aeabi_dsub+0x220>
 80006ba:	e0e7      	b.n	800088c <__aeabi_dsub+0x3f0>
 80006bc:	4452      	add	r2, sl
 80006be:	4552      	cmp	r2, sl
 80006c0:	4180      	sbcs	r0, r0
 80006c2:	1864      	adds	r4, r4, r1
 80006c4:	4240      	negs	r0, r0
 80006c6:	1824      	adds	r4, r4, r0
 80006c8:	0017      	movs	r7, r2
 80006ca:	2601      	movs	r6, #1
 80006cc:	0223      	lsls	r3, r4, #8
 80006ce:	d507      	bpl.n	80006e0 <__aeabi_dsub+0x244>
 80006d0:	2602      	movs	r6, #2
 80006d2:	e7cf      	b.n	8000674 <__aeabi_dsub+0x1d8>
 80006d4:	4664      	mov	r4, ip
 80006d6:	432c      	orrs	r4, r5
 80006d8:	d100      	bne.n	80006dc <__aeabi_dsub+0x240>
 80006da:	e1b3      	b.n	8000a44 <__aeabi_dsub+0x5a8>
 80006dc:	002c      	movs	r4, r5
 80006de:	4667      	mov	r7, ip
 80006e0:	077b      	lsls	r3, r7, #29
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dsub+0x24a>
 80006e4:	e762      	b.n	80005ac <__aeabi_dsub+0x110>
 80006e6:	0763      	lsls	r3, r4, #29
 80006e8:	08ff      	lsrs	r7, r7, #3
 80006ea:	431f      	orrs	r7, r3
 80006ec:	2501      	movs	r5, #1
 80006ee:	4643      	mov	r3, r8
 80006f0:	08e4      	lsrs	r4, r4, #3
 80006f2:	401d      	ands	r5, r3
 80006f4:	e793      	b.n	800061e <__aeabi_dsub+0x182>
 80006f6:	2d00      	cmp	r5, #0
 80006f8:	d178      	bne.n	80007ec <__aeabi_dsub+0x350>
 80006fa:	1c75      	adds	r5, r6, #1
 80006fc:	056d      	lsls	r5, r5, #21
 80006fe:	0d6d      	lsrs	r5, r5, #21
 8000700:	2d01      	cmp	r5, #1
 8000702:	dc00      	bgt.n	8000706 <__aeabi_dsub+0x26a>
 8000704:	e0f2      	b.n	80008ec <__aeabi_dsub+0x450>
 8000706:	4650      	mov	r0, sl
 8000708:	1a80      	subs	r0, r0, r2
 800070a:	4582      	cmp	sl, r0
 800070c:	41bf      	sbcs	r7, r7
 800070e:	1a65      	subs	r5, r4, r1
 8000710:	427f      	negs	r7, r7
 8000712:	1bed      	subs	r5, r5, r7
 8000714:	4684      	mov	ip, r0
 8000716:	0228      	lsls	r0, r5, #8
 8000718:	d400      	bmi.n	800071c <__aeabi_dsub+0x280>
 800071a:	e08c      	b.n	8000836 <__aeabi_dsub+0x39a>
 800071c:	4650      	mov	r0, sl
 800071e:	1a17      	subs	r7, r2, r0
 8000720:	42ba      	cmp	r2, r7
 8000722:	4192      	sbcs	r2, r2
 8000724:	1b0c      	subs	r4, r1, r4
 8000726:	4255      	negs	r5, r2
 8000728:	1b65      	subs	r5, r4, r5
 800072a:	4698      	mov	r8, r3
 800072c:	e714      	b.n	8000558 <__aeabi_dsub+0xbc>
 800072e:	2501      	movs	r5, #1
 8000730:	4643      	mov	r3, r8
 8000732:	2400      	movs	r4, #0
 8000734:	401d      	ands	r5, r3
 8000736:	2700      	movs	r7, #0
 8000738:	e755      	b.n	80005e6 <__aeabi_dsub+0x14a>
 800073a:	4c2a      	ldr	r4, [pc, #168]	; (80007e4 <__aeabi_dsub+0x348>)
 800073c:	1af6      	subs	r6, r6, r3
 800073e:	402c      	ands	r4, r5
 8000740:	e732      	b.n	80005a8 <__aeabi_dsub+0x10c>
 8000742:	003d      	movs	r5, r7
 8000744:	3828      	subs	r0, #40	; 0x28
 8000746:	4085      	lsls	r5, r0
 8000748:	2700      	movs	r7, #0
 800074a:	e717      	b.n	800057c <__aeabi_dsub+0xe0>
 800074c:	0038      	movs	r0, r7
 800074e:	f000 fa31 	bl	8000bb4 <__clzsi2>
 8000752:	3020      	adds	r0, #32
 8000754:	e706      	b.n	8000564 <__aeabi_dsub+0xc8>
 8000756:	430a      	orrs	r2, r1
 8000758:	0017      	movs	r7, r2
 800075a:	2100      	movs	r1, #0
 800075c:	1e7a      	subs	r2, r7, #1
 800075e:	4197      	sbcs	r7, r2
 8000760:	e6ee      	b.n	8000540 <__aeabi_dsub+0xa4>
 8000762:	2b00      	cmp	r3, #0
 8000764:	d000      	beq.n	8000768 <__aeabi_dsub+0x2cc>
 8000766:	e0e5      	b.n	8000934 <__aeabi_dsub+0x498>
 8000768:	1c73      	adds	r3, r6, #1
 800076a:	469c      	mov	ip, r3
 800076c:	055b      	lsls	r3, r3, #21
 800076e:	0d5b      	lsrs	r3, r3, #21
 8000770:	2b01      	cmp	r3, #1
 8000772:	dc00      	bgt.n	8000776 <__aeabi_dsub+0x2da>
 8000774:	e09f      	b.n	80008b6 <__aeabi_dsub+0x41a>
 8000776:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <__aeabi_dsub+0x344>)
 8000778:	459c      	cmp	ip, r3
 800077a:	d100      	bne.n	800077e <__aeabi_dsub+0x2e2>
 800077c:	e0c5      	b.n	800090a <__aeabi_dsub+0x46e>
 800077e:	4452      	add	r2, sl
 8000780:	4552      	cmp	r2, sl
 8000782:	4180      	sbcs	r0, r0
 8000784:	1864      	adds	r4, r4, r1
 8000786:	4240      	negs	r0, r0
 8000788:	1824      	adds	r4, r4, r0
 800078a:	07e7      	lsls	r7, r4, #31
 800078c:	0852      	lsrs	r2, r2, #1
 800078e:	4317      	orrs	r7, r2
 8000790:	0864      	lsrs	r4, r4, #1
 8000792:	4666      	mov	r6, ip
 8000794:	e708      	b.n	80005a8 <__aeabi_dsub+0x10c>
 8000796:	4812      	ldr	r0, [pc, #72]	; (80007e0 <__aeabi_dsub+0x344>)
 8000798:	4285      	cmp	r5, r0
 800079a:	d100      	bne.n	800079e <__aeabi_dsub+0x302>
 800079c:	e085      	b.n	80008aa <__aeabi_dsub+0x40e>
 800079e:	001d      	movs	r5, r3
 80007a0:	e6bc      	b.n	800051c <__aeabi_dsub+0x80>
 80007a2:	0029      	movs	r1, r5
 80007a4:	3e1f      	subs	r6, #31
 80007a6:	40f1      	lsrs	r1, r6
 80007a8:	2b20      	cmp	r3, #32
 80007aa:	d100      	bne.n	80007ae <__aeabi_dsub+0x312>
 80007ac:	e07f      	b.n	80008ae <__aeabi_dsub+0x412>
 80007ae:	2240      	movs	r2, #64	; 0x40
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	409d      	lsls	r5, r3
 80007b4:	432f      	orrs	r7, r5
 80007b6:	1e7d      	subs	r5, r7, #1
 80007b8:	41af      	sbcs	r7, r5
 80007ba:	2400      	movs	r4, #0
 80007bc:	430f      	orrs	r7, r1
 80007be:	2600      	movs	r6, #0
 80007c0:	e78e      	b.n	80006e0 <__aeabi_dsub+0x244>
 80007c2:	002b      	movs	r3, r5
 80007c4:	000f      	movs	r7, r1
 80007c6:	3b20      	subs	r3, #32
 80007c8:	40df      	lsrs	r7, r3
 80007ca:	2d20      	cmp	r5, #32
 80007cc:	d071      	beq.n	80008b2 <__aeabi_dsub+0x416>
 80007ce:	2340      	movs	r3, #64	; 0x40
 80007d0:	1b5d      	subs	r5, r3, r5
 80007d2:	40a9      	lsls	r1, r5
 80007d4:	430a      	orrs	r2, r1
 80007d6:	1e51      	subs	r1, r2, #1
 80007d8:	418a      	sbcs	r2, r1
 80007da:	2100      	movs	r1, #0
 80007dc:	4317      	orrs	r7, r2
 80007de:	e6af      	b.n	8000540 <__aeabi_dsub+0xa4>
 80007e0:	000007ff 	.word	0x000007ff
 80007e4:	ff7fffff 	.word	0xff7fffff
 80007e8:	800fffff 	.word	0x800fffff
 80007ec:	2e00      	cmp	r6, #0
 80007ee:	d03e      	beq.n	800086e <__aeabi_dsub+0x3d2>
 80007f0:	4eb3      	ldr	r6, [pc, #716]	; (8000ac0 <__aeabi_dsub+0x624>)
 80007f2:	45b4      	cmp	ip, r6
 80007f4:	d045      	beq.n	8000882 <__aeabi_dsub+0x3e6>
 80007f6:	2680      	movs	r6, #128	; 0x80
 80007f8:	0436      	lsls	r6, r6, #16
 80007fa:	426d      	negs	r5, r5
 80007fc:	4334      	orrs	r4, r6
 80007fe:	2d38      	cmp	r5, #56	; 0x38
 8000800:	dd00      	ble.n	8000804 <__aeabi_dsub+0x368>
 8000802:	e0a8      	b.n	8000956 <__aeabi_dsub+0x4ba>
 8000804:	2d1f      	cmp	r5, #31
 8000806:	dd00      	ble.n	800080a <__aeabi_dsub+0x36e>
 8000808:	e11f      	b.n	8000a4a <__aeabi_dsub+0x5ae>
 800080a:	2620      	movs	r6, #32
 800080c:	0027      	movs	r7, r4
 800080e:	4650      	mov	r0, sl
 8000810:	1b76      	subs	r6, r6, r5
 8000812:	40b7      	lsls	r7, r6
 8000814:	40e8      	lsrs	r0, r5
 8000816:	4307      	orrs	r7, r0
 8000818:	4650      	mov	r0, sl
 800081a:	40b0      	lsls	r0, r6
 800081c:	1e46      	subs	r6, r0, #1
 800081e:	41b0      	sbcs	r0, r6
 8000820:	40ec      	lsrs	r4, r5
 8000822:	4338      	orrs	r0, r7
 8000824:	1a17      	subs	r7, r2, r0
 8000826:	42ba      	cmp	r2, r7
 8000828:	4192      	sbcs	r2, r2
 800082a:	1b0c      	subs	r4, r1, r4
 800082c:	4252      	negs	r2, r2
 800082e:	1aa4      	subs	r4, r4, r2
 8000830:	4666      	mov	r6, ip
 8000832:	4698      	mov	r8, r3
 8000834:	e68b      	b.n	800054e <__aeabi_dsub+0xb2>
 8000836:	4664      	mov	r4, ip
 8000838:	4667      	mov	r7, ip
 800083a:	432c      	orrs	r4, r5
 800083c:	d000      	beq.n	8000840 <__aeabi_dsub+0x3a4>
 800083e:	e68b      	b.n	8000558 <__aeabi_dsub+0xbc>
 8000840:	2500      	movs	r5, #0
 8000842:	2600      	movs	r6, #0
 8000844:	2700      	movs	r7, #0
 8000846:	e6ea      	b.n	800061e <__aeabi_dsub+0x182>
 8000848:	001e      	movs	r6, r3
 800084a:	e6ad      	b.n	80005a8 <__aeabi_dsub+0x10c>
 800084c:	2b1f      	cmp	r3, #31
 800084e:	dc60      	bgt.n	8000912 <__aeabi_dsub+0x476>
 8000850:	2720      	movs	r7, #32
 8000852:	1af8      	subs	r0, r7, r3
 8000854:	000f      	movs	r7, r1
 8000856:	4684      	mov	ip, r0
 8000858:	4087      	lsls	r7, r0
 800085a:	0010      	movs	r0, r2
 800085c:	40d8      	lsrs	r0, r3
 800085e:	4307      	orrs	r7, r0
 8000860:	4660      	mov	r0, ip
 8000862:	4082      	lsls	r2, r0
 8000864:	1e50      	subs	r0, r2, #1
 8000866:	4182      	sbcs	r2, r0
 8000868:	40d9      	lsrs	r1, r3
 800086a:	4317      	orrs	r7, r2
 800086c:	e6f5      	b.n	800065a <__aeabi_dsub+0x1be>
 800086e:	0026      	movs	r6, r4
 8000870:	4650      	mov	r0, sl
 8000872:	4306      	orrs	r6, r0
 8000874:	d005      	beq.n	8000882 <__aeabi_dsub+0x3e6>
 8000876:	43ed      	mvns	r5, r5
 8000878:	2d00      	cmp	r5, #0
 800087a:	d0d3      	beq.n	8000824 <__aeabi_dsub+0x388>
 800087c:	4e90      	ldr	r6, [pc, #576]	; (8000ac0 <__aeabi_dsub+0x624>)
 800087e:	45b4      	cmp	ip, r6
 8000880:	d1bd      	bne.n	80007fe <__aeabi_dsub+0x362>
 8000882:	000c      	movs	r4, r1
 8000884:	0017      	movs	r7, r2
 8000886:	4666      	mov	r6, ip
 8000888:	4698      	mov	r8, r3
 800088a:	e68d      	b.n	80005a8 <__aeabi_dsub+0x10c>
 800088c:	488c      	ldr	r0, [pc, #560]	; (8000ac0 <__aeabi_dsub+0x624>)
 800088e:	4283      	cmp	r3, r0
 8000890:	d00b      	beq.n	80008aa <__aeabi_dsub+0x40e>
 8000892:	4663      	mov	r3, ip
 8000894:	e6d9      	b.n	800064a <__aeabi_dsub+0x1ae>
 8000896:	2d00      	cmp	r5, #0
 8000898:	d000      	beq.n	800089c <__aeabi_dsub+0x400>
 800089a:	e096      	b.n	80009ca <__aeabi_dsub+0x52e>
 800089c:	0008      	movs	r0, r1
 800089e:	4310      	orrs	r0, r2
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dsub+0x408>
 80008a2:	e0e2      	b.n	8000a6a <__aeabi_dsub+0x5ce>
 80008a4:	000c      	movs	r4, r1
 80008a6:	0017      	movs	r7, r2
 80008a8:	4698      	mov	r8, r3
 80008aa:	4e85      	ldr	r6, [pc, #532]	; (8000ac0 <__aeabi_dsub+0x624>)
 80008ac:	e67c      	b.n	80005a8 <__aeabi_dsub+0x10c>
 80008ae:	2500      	movs	r5, #0
 80008b0:	e780      	b.n	80007b4 <__aeabi_dsub+0x318>
 80008b2:	2100      	movs	r1, #0
 80008b4:	e78e      	b.n	80007d4 <__aeabi_dsub+0x338>
 80008b6:	0023      	movs	r3, r4
 80008b8:	4650      	mov	r0, sl
 80008ba:	4303      	orrs	r3, r0
 80008bc:	2e00      	cmp	r6, #0
 80008be:	d000      	beq.n	80008c2 <__aeabi_dsub+0x426>
 80008c0:	e0a8      	b.n	8000a14 <__aeabi_dsub+0x578>
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d100      	bne.n	80008c8 <__aeabi_dsub+0x42c>
 80008c6:	e0de      	b.n	8000a86 <__aeabi_dsub+0x5ea>
 80008c8:	000b      	movs	r3, r1
 80008ca:	4313      	orrs	r3, r2
 80008cc:	d100      	bne.n	80008d0 <__aeabi_dsub+0x434>
 80008ce:	e66b      	b.n	80005a8 <__aeabi_dsub+0x10c>
 80008d0:	4452      	add	r2, sl
 80008d2:	4552      	cmp	r2, sl
 80008d4:	4180      	sbcs	r0, r0
 80008d6:	1864      	adds	r4, r4, r1
 80008d8:	4240      	negs	r0, r0
 80008da:	1824      	adds	r4, r4, r0
 80008dc:	0017      	movs	r7, r2
 80008de:	0223      	lsls	r3, r4, #8
 80008e0:	d400      	bmi.n	80008e4 <__aeabi_dsub+0x448>
 80008e2:	e6fd      	b.n	80006e0 <__aeabi_dsub+0x244>
 80008e4:	4b77      	ldr	r3, [pc, #476]	; (8000ac4 <__aeabi_dsub+0x628>)
 80008e6:	4666      	mov	r6, ip
 80008e8:	401c      	ands	r4, r3
 80008ea:	e65d      	b.n	80005a8 <__aeabi_dsub+0x10c>
 80008ec:	0025      	movs	r5, r4
 80008ee:	4650      	mov	r0, sl
 80008f0:	4305      	orrs	r5, r0
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d1cf      	bne.n	8000896 <__aeabi_dsub+0x3fa>
 80008f6:	2d00      	cmp	r5, #0
 80008f8:	d14f      	bne.n	800099a <__aeabi_dsub+0x4fe>
 80008fa:	000c      	movs	r4, r1
 80008fc:	4314      	orrs	r4, r2
 80008fe:	d100      	bne.n	8000902 <__aeabi_dsub+0x466>
 8000900:	e0a0      	b.n	8000a44 <__aeabi_dsub+0x5a8>
 8000902:	000c      	movs	r4, r1
 8000904:	0017      	movs	r7, r2
 8000906:	4698      	mov	r8, r3
 8000908:	e64e      	b.n	80005a8 <__aeabi_dsub+0x10c>
 800090a:	4666      	mov	r6, ip
 800090c:	2400      	movs	r4, #0
 800090e:	2700      	movs	r7, #0
 8000910:	e685      	b.n	800061e <__aeabi_dsub+0x182>
 8000912:	001f      	movs	r7, r3
 8000914:	0008      	movs	r0, r1
 8000916:	3f20      	subs	r7, #32
 8000918:	40f8      	lsrs	r0, r7
 800091a:	0007      	movs	r7, r0
 800091c:	2b20      	cmp	r3, #32
 800091e:	d100      	bne.n	8000922 <__aeabi_dsub+0x486>
 8000920:	e08e      	b.n	8000a40 <__aeabi_dsub+0x5a4>
 8000922:	2040      	movs	r0, #64	; 0x40
 8000924:	1ac3      	subs	r3, r0, r3
 8000926:	4099      	lsls	r1, r3
 8000928:	430a      	orrs	r2, r1
 800092a:	1e51      	subs	r1, r2, #1
 800092c:	418a      	sbcs	r2, r1
 800092e:	2100      	movs	r1, #0
 8000930:	4317      	orrs	r7, r2
 8000932:	e692      	b.n	800065a <__aeabi_dsub+0x1be>
 8000934:	2e00      	cmp	r6, #0
 8000936:	d114      	bne.n	8000962 <__aeabi_dsub+0x4c6>
 8000938:	0026      	movs	r6, r4
 800093a:	4650      	mov	r0, sl
 800093c:	4306      	orrs	r6, r0
 800093e:	d062      	beq.n	8000a06 <__aeabi_dsub+0x56a>
 8000940:	43db      	mvns	r3, r3
 8000942:	2b00      	cmp	r3, #0
 8000944:	d15c      	bne.n	8000a00 <__aeabi_dsub+0x564>
 8000946:	1887      	adds	r7, r0, r2
 8000948:	4297      	cmp	r7, r2
 800094a:	4192      	sbcs	r2, r2
 800094c:	1864      	adds	r4, r4, r1
 800094e:	4252      	negs	r2, r2
 8000950:	18a4      	adds	r4, r4, r2
 8000952:	4666      	mov	r6, ip
 8000954:	e687      	b.n	8000666 <__aeabi_dsub+0x1ca>
 8000956:	4650      	mov	r0, sl
 8000958:	4320      	orrs	r0, r4
 800095a:	1e44      	subs	r4, r0, #1
 800095c:	41a0      	sbcs	r0, r4
 800095e:	2400      	movs	r4, #0
 8000960:	e760      	b.n	8000824 <__aeabi_dsub+0x388>
 8000962:	4e57      	ldr	r6, [pc, #348]	; (8000ac0 <__aeabi_dsub+0x624>)
 8000964:	45b4      	cmp	ip, r6
 8000966:	d04e      	beq.n	8000a06 <__aeabi_dsub+0x56a>
 8000968:	2680      	movs	r6, #128	; 0x80
 800096a:	0436      	lsls	r6, r6, #16
 800096c:	425b      	negs	r3, r3
 800096e:	4334      	orrs	r4, r6
 8000970:	2b38      	cmp	r3, #56	; 0x38
 8000972:	dd00      	ble.n	8000976 <__aeabi_dsub+0x4da>
 8000974:	e07f      	b.n	8000a76 <__aeabi_dsub+0x5da>
 8000976:	2b1f      	cmp	r3, #31
 8000978:	dd00      	ble.n	800097c <__aeabi_dsub+0x4e0>
 800097a:	e08b      	b.n	8000a94 <__aeabi_dsub+0x5f8>
 800097c:	2620      	movs	r6, #32
 800097e:	0027      	movs	r7, r4
 8000980:	4650      	mov	r0, sl
 8000982:	1af6      	subs	r6, r6, r3
 8000984:	40b7      	lsls	r7, r6
 8000986:	40d8      	lsrs	r0, r3
 8000988:	4307      	orrs	r7, r0
 800098a:	4650      	mov	r0, sl
 800098c:	40b0      	lsls	r0, r6
 800098e:	1e46      	subs	r6, r0, #1
 8000990:	41b0      	sbcs	r0, r6
 8000992:	4307      	orrs	r7, r0
 8000994:	40dc      	lsrs	r4, r3
 8000996:	18bf      	adds	r7, r7, r2
 8000998:	e7d6      	b.n	8000948 <__aeabi_dsub+0x4ac>
 800099a:	000d      	movs	r5, r1
 800099c:	4315      	orrs	r5, r2
 800099e:	d100      	bne.n	80009a2 <__aeabi_dsub+0x506>
 80009a0:	e602      	b.n	80005a8 <__aeabi_dsub+0x10c>
 80009a2:	4650      	mov	r0, sl
 80009a4:	1a80      	subs	r0, r0, r2
 80009a6:	4582      	cmp	sl, r0
 80009a8:	41bf      	sbcs	r7, r7
 80009aa:	1a65      	subs	r5, r4, r1
 80009ac:	427f      	negs	r7, r7
 80009ae:	1bed      	subs	r5, r5, r7
 80009b0:	4684      	mov	ip, r0
 80009b2:	0228      	lsls	r0, r5, #8
 80009b4:	d400      	bmi.n	80009b8 <__aeabi_dsub+0x51c>
 80009b6:	e68d      	b.n	80006d4 <__aeabi_dsub+0x238>
 80009b8:	4650      	mov	r0, sl
 80009ba:	1a17      	subs	r7, r2, r0
 80009bc:	42ba      	cmp	r2, r7
 80009be:	4192      	sbcs	r2, r2
 80009c0:	1b0c      	subs	r4, r1, r4
 80009c2:	4252      	negs	r2, r2
 80009c4:	1aa4      	subs	r4, r4, r2
 80009c6:	4698      	mov	r8, r3
 80009c8:	e5ee      	b.n	80005a8 <__aeabi_dsub+0x10c>
 80009ca:	000d      	movs	r5, r1
 80009cc:	4315      	orrs	r5, r2
 80009ce:	d100      	bne.n	80009d2 <__aeabi_dsub+0x536>
 80009d0:	e76b      	b.n	80008aa <__aeabi_dsub+0x40e>
 80009d2:	4650      	mov	r0, sl
 80009d4:	0767      	lsls	r7, r4, #29
 80009d6:	08c0      	lsrs	r0, r0, #3
 80009d8:	4307      	orrs	r7, r0
 80009da:	2080      	movs	r0, #128	; 0x80
 80009dc:	08e4      	lsrs	r4, r4, #3
 80009de:	0300      	lsls	r0, r0, #12
 80009e0:	4204      	tst	r4, r0
 80009e2:	d007      	beq.n	80009f4 <__aeabi_dsub+0x558>
 80009e4:	08cd      	lsrs	r5, r1, #3
 80009e6:	4205      	tst	r5, r0
 80009e8:	d104      	bne.n	80009f4 <__aeabi_dsub+0x558>
 80009ea:	002c      	movs	r4, r5
 80009ec:	4698      	mov	r8, r3
 80009ee:	08d7      	lsrs	r7, r2, #3
 80009f0:	0749      	lsls	r1, r1, #29
 80009f2:	430f      	orrs	r7, r1
 80009f4:	0f7b      	lsrs	r3, r7, #29
 80009f6:	00e4      	lsls	r4, r4, #3
 80009f8:	431c      	orrs	r4, r3
 80009fa:	00ff      	lsls	r7, r7, #3
 80009fc:	4e30      	ldr	r6, [pc, #192]	; (8000ac0 <__aeabi_dsub+0x624>)
 80009fe:	e5d3      	b.n	80005a8 <__aeabi_dsub+0x10c>
 8000a00:	4e2f      	ldr	r6, [pc, #188]	; (8000ac0 <__aeabi_dsub+0x624>)
 8000a02:	45b4      	cmp	ip, r6
 8000a04:	d1b4      	bne.n	8000970 <__aeabi_dsub+0x4d4>
 8000a06:	000c      	movs	r4, r1
 8000a08:	0017      	movs	r7, r2
 8000a0a:	4666      	mov	r6, ip
 8000a0c:	e5cc      	b.n	80005a8 <__aeabi_dsub+0x10c>
 8000a0e:	2700      	movs	r7, #0
 8000a10:	2400      	movs	r4, #0
 8000a12:	e5e8      	b.n	80005e6 <__aeabi_dsub+0x14a>
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d039      	beq.n	8000a8c <__aeabi_dsub+0x5f0>
 8000a18:	000b      	movs	r3, r1
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_dsub+0x584>
 8000a1e:	e744      	b.n	80008aa <__aeabi_dsub+0x40e>
 8000a20:	08c0      	lsrs	r0, r0, #3
 8000a22:	0767      	lsls	r7, r4, #29
 8000a24:	4307      	orrs	r7, r0
 8000a26:	2080      	movs	r0, #128	; 0x80
 8000a28:	08e4      	lsrs	r4, r4, #3
 8000a2a:	0300      	lsls	r0, r0, #12
 8000a2c:	4204      	tst	r4, r0
 8000a2e:	d0e1      	beq.n	80009f4 <__aeabi_dsub+0x558>
 8000a30:	08cb      	lsrs	r3, r1, #3
 8000a32:	4203      	tst	r3, r0
 8000a34:	d1de      	bne.n	80009f4 <__aeabi_dsub+0x558>
 8000a36:	08d7      	lsrs	r7, r2, #3
 8000a38:	0749      	lsls	r1, r1, #29
 8000a3a:	430f      	orrs	r7, r1
 8000a3c:	001c      	movs	r4, r3
 8000a3e:	e7d9      	b.n	80009f4 <__aeabi_dsub+0x558>
 8000a40:	2100      	movs	r1, #0
 8000a42:	e771      	b.n	8000928 <__aeabi_dsub+0x48c>
 8000a44:	2500      	movs	r5, #0
 8000a46:	2700      	movs	r7, #0
 8000a48:	e5e9      	b.n	800061e <__aeabi_dsub+0x182>
 8000a4a:	002e      	movs	r6, r5
 8000a4c:	0027      	movs	r7, r4
 8000a4e:	3e20      	subs	r6, #32
 8000a50:	40f7      	lsrs	r7, r6
 8000a52:	2d20      	cmp	r5, #32
 8000a54:	d02f      	beq.n	8000ab6 <__aeabi_dsub+0x61a>
 8000a56:	2640      	movs	r6, #64	; 0x40
 8000a58:	1b75      	subs	r5, r6, r5
 8000a5a:	40ac      	lsls	r4, r5
 8000a5c:	4650      	mov	r0, sl
 8000a5e:	4320      	orrs	r0, r4
 8000a60:	1e44      	subs	r4, r0, #1
 8000a62:	41a0      	sbcs	r0, r4
 8000a64:	2400      	movs	r4, #0
 8000a66:	4338      	orrs	r0, r7
 8000a68:	e6dc      	b.n	8000824 <__aeabi_dsub+0x388>
 8000a6a:	2480      	movs	r4, #128	; 0x80
 8000a6c:	2500      	movs	r5, #0
 8000a6e:	0324      	lsls	r4, r4, #12
 8000a70:	4e13      	ldr	r6, [pc, #76]	; (8000ac0 <__aeabi_dsub+0x624>)
 8000a72:	2700      	movs	r7, #0
 8000a74:	e5d3      	b.n	800061e <__aeabi_dsub+0x182>
 8000a76:	4650      	mov	r0, sl
 8000a78:	4320      	orrs	r0, r4
 8000a7a:	0007      	movs	r7, r0
 8000a7c:	1e78      	subs	r0, r7, #1
 8000a7e:	4187      	sbcs	r7, r0
 8000a80:	2400      	movs	r4, #0
 8000a82:	18bf      	adds	r7, r7, r2
 8000a84:	e760      	b.n	8000948 <__aeabi_dsub+0x4ac>
 8000a86:	000c      	movs	r4, r1
 8000a88:	0017      	movs	r7, r2
 8000a8a:	e58d      	b.n	80005a8 <__aeabi_dsub+0x10c>
 8000a8c:	000c      	movs	r4, r1
 8000a8e:	0017      	movs	r7, r2
 8000a90:	4e0b      	ldr	r6, [pc, #44]	; (8000ac0 <__aeabi_dsub+0x624>)
 8000a92:	e589      	b.n	80005a8 <__aeabi_dsub+0x10c>
 8000a94:	001e      	movs	r6, r3
 8000a96:	0027      	movs	r7, r4
 8000a98:	3e20      	subs	r6, #32
 8000a9a:	40f7      	lsrs	r7, r6
 8000a9c:	2b20      	cmp	r3, #32
 8000a9e:	d00c      	beq.n	8000aba <__aeabi_dsub+0x61e>
 8000aa0:	2640      	movs	r6, #64	; 0x40
 8000aa2:	1af3      	subs	r3, r6, r3
 8000aa4:	409c      	lsls	r4, r3
 8000aa6:	4650      	mov	r0, sl
 8000aa8:	4320      	orrs	r0, r4
 8000aaa:	1e44      	subs	r4, r0, #1
 8000aac:	41a0      	sbcs	r0, r4
 8000aae:	4307      	orrs	r7, r0
 8000ab0:	2400      	movs	r4, #0
 8000ab2:	18bf      	adds	r7, r7, r2
 8000ab4:	e748      	b.n	8000948 <__aeabi_dsub+0x4ac>
 8000ab6:	2400      	movs	r4, #0
 8000ab8:	e7d0      	b.n	8000a5c <__aeabi_dsub+0x5c0>
 8000aba:	2400      	movs	r4, #0
 8000abc:	e7f3      	b.n	8000aa6 <__aeabi_dsub+0x60a>
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	000007ff 	.word	0x000007ff
 8000ac4:	ff7fffff 	.word	0xff7fffff

08000ac8 <__aeabi_d2iz>:
 8000ac8:	b530      	push	{r4, r5, lr}
 8000aca:	4d13      	ldr	r5, [pc, #76]	; (8000b18 <__aeabi_d2iz+0x50>)
 8000acc:	030a      	lsls	r2, r1, #12
 8000ace:	004b      	lsls	r3, r1, #1
 8000ad0:	0b12      	lsrs	r2, r2, #12
 8000ad2:	0d5b      	lsrs	r3, r3, #21
 8000ad4:	0fc9      	lsrs	r1, r1, #31
 8000ad6:	2400      	movs	r4, #0
 8000ad8:	42ab      	cmp	r3, r5
 8000ada:	dd10      	ble.n	8000afe <__aeabi_d2iz+0x36>
 8000adc:	4c0f      	ldr	r4, [pc, #60]	; (8000b1c <__aeabi_d2iz+0x54>)
 8000ade:	42a3      	cmp	r3, r4
 8000ae0:	dc0f      	bgt.n	8000b02 <__aeabi_d2iz+0x3a>
 8000ae2:	2480      	movs	r4, #128	; 0x80
 8000ae4:	4d0e      	ldr	r5, [pc, #56]	; (8000b20 <__aeabi_d2iz+0x58>)
 8000ae6:	0364      	lsls	r4, r4, #13
 8000ae8:	4322      	orrs	r2, r4
 8000aea:	1aed      	subs	r5, r5, r3
 8000aec:	2d1f      	cmp	r5, #31
 8000aee:	dd0b      	ble.n	8000b08 <__aeabi_d2iz+0x40>
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <__aeabi_d2iz+0x5c>)
 8000af2:	1ac3      	subs	r3, r0, r3
 8000af4:	40da      	lsrs	r2, r3
 8000af6:	4254      	negs	r4, r2
 8000af8:	2900      	cmp	r1, #0
 8000afa:	d100      	bne.n	8000afe <__aeabi_d2iz+0x36>
 8000afc:	0014      	movs	r4, r2
 8000afe:	0020      	movs	r0, r4
 8000b00:	bd30      	pop	{r4, r5, pc}
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <__aeabi_d2iz+0x60>)
 8000b04:	18cc      	adds	r4, r1, r3
 8000b06:	e7fa      	b.n	8000afe <__aeabi_d2iz+0x36>
 8000b08:	4c08      	ldr	r4, [pc, #32]	; (8000b2c <__aeabi_d2iz+0x64>)
 8000b0a:	40e8      	lsrs	r0, r5
 8000b0c:	46a4      	mov	ip, r4
 8000b0e:	4463      	add	r3, ip
 8000b10:	409a      	lsls	r2, r3
 8000b12:	4302      	orrs	r2, r0
 8000b14:	e7ef      	b.n	8000af6 <__aeabi_d2iz+0x2e>
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	000003fe 	.word	0x000003fe
 8000b1c:	0000041d 	.word	0x0000041d
 8000b20:	00000433 	.word	0x00000433
 8000b24:	00000413 	.word	0x00000413
 8000b28:	7fffffff 	.word	0x7fffffff
 8000b2c:	fffffbed 	.word	0xfffffbed

08000b30 <__aeabi_i2d>:
 8000b30:	b570      	push	{r4, r5, r6, lr}
 8000b32:	2800      	cmp	r0, #0
 8000b34:	d030      	beq.n	8000b98 <__aeabi_i2d+0x68>
 8000b36:	17c3      	asrs	r3, r0, #31
 8000b38:	18c4      	adds	r4, r0, r3
 8000b3a:	405c      	eors	r4, r3
 8000b3c:	0fc5      	lsrs	r5, r0, #31
 8000b3e:	0020      	movs	r0, r4
 8000b40:	f000 f838 	bl	8000bb4 <__clzsi2>
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <__aeabi_i2d+0x74>)
 8000b46:	4a18      	ldr	r2, [pc, #96]	; (8000ba8 <__aeabi_i2d+0x78>)
 8000b48:	1a1b      	subs	r3, r3, r0
 8000b4a:	1ad2      	subs	r2, r2, r3
 8000b4c:	2a1f      	cmp	r2, #31
 8000b4e:	dd18      	ble.n	8000b82 <__aeabi_i2d+0x52>
 8000b50:	4a16      	ldr	r2, [pc, #88]	; (8000bac <__aeabi_i2d+0x7c>)
 8000b52:	1ad2      	subs	r2, r2, r3
 8000b54:	4094      	lsls	r4, r2
 8000b56:	2200      	movs	r2, #0
 8000b58:	0324      	lsls	r4, r4, #12
 8000b5a:	055b      	lsls	r3, r3, #21
 8000b5c:	0b24      	lsrs	r4, r4, #12
 8000b5e:	0d5b      	lsrs	r3, r3, #21
 8000b60:	2100      	movs	r1, #0
 8000b62:	0010      	movs	r0, r2
 8000b64:	0324      	lsls	r4, r4, #12
 8000b66:	0d0a      	lsrs	r2, r1, #20
 8000b68:	0b24      	lsrs	r4, r4, #12
 8000b6a:	0512      	lsls	r2, r2, #20
 8000b6c:	4322      	orrs	r2, r4
 8000b6e:	4c10      	ldr	r4, [pc, #64]	; (8000bb0 <__aeabi_i2d+0x80>)
 8000b70:	051b      	lsls	r3, r3, #20
 8000b72:	4022      	ands	r2, r4
 8000b74:	4313      	orrs	r3, r2
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	07ed      	lsls	r5, r5, #31
 8000b7a:	085b      	lsrs	r3, r3, #1
 8000b7c:	432b      	orrs	r3, r5
 8000b7e:	0019      	movs	r1, r3
 8000b80:	bd70      	pop	{r4, r5, r6, pc}
 8000b82:	0021      	movs	r1, r4
 8000b84:	4091      	lsls	r1, r2
 8000b86:	000a      	movs	r2, r1
 8000b88:	210b      	movs	r1, #11
 8000b8a:	1a08      	subs	r0, r1, r0
 8000b8c:	40c4      	lsrs	r4, r0
 8000b8e:	055b      	lsls	r3, r3, #21
 8000b90:	0324      	lsls	r4, r4, #12
 8000b92:	0b24      	lsrs	r4, r4, #12
 8000b94:	0d5b      	lsrs	r3, r3, #21
 8000b96:	e7e3      	b.n	8000b60 <__aeabi_i2d+0x30>
 8000b98:	2500      	movs	r5, #0
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	2400      	movs	r4, #0
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	e7de      	b.n	8000b60 <__aeabi_i2d+0x30>
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	0000041e 	.word	0x0000041e
 8000ba8:	00000433 	.word	0x00000433
 8000bac:	00000413 	.word	0x00000413
 8000bb0:	800fffff 	.word	0x800fffff

08000bb4 <__clzsi2>:
 8000bb4:	211c      	movs	r1, #28
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	041b      	lsls	r3, r3, #16
 8000bba:	4298      	cmp	r0, r3
 8000bbc:	d301      	bcc.n	8000bc2 <__clzsi2+0xe>
 8000bbe:	0c00      	lsrs	r0, r0, #16
 8000bc0:	3910      	subs	r1, #16
 8000bc2:	0a1b      	lsrs	r3, r3, #8
 8000bc4:	4298      	cmp	r0, r3
 8000bc6:	d301      	bcc.n	8000bcc <__clzsi2+0x18>
 8000bc8:	0a00      	lsrs	r0, r0, #8
 8000bca:	3908      	subs	r1, #8
 8000bcc:	091b      	lsrs	r3, r3, #4
 8000bce:	4298      	cmp	r0, r3
 8000bd0:	d301      	bcc.n	8000bd6 <__clzsi2+0x22>
 8000bd2:	0900      	lsrs	r0, r0, #4
 8000bd4:	3904      	subs	r1, #4
 8000bd6:	a202      	add	r2, pc, #8	; (adr r2, 8000be0 <__clzsi2+0x2c>)
 8000bd8:	5c10      	ldrb	r0, [r2, r0]
 8000bda:	1840      	adds	r0, r0, r1
 8000bdc:	4770      	bx	lr
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	02020304 	.word	0x02020304
 8000be4:	01010101 	.word	0x01010101
	...

08000bf0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <HAL_Init+0x24>)
 8000bf6:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <HAL_Init+0x24>)
 8000bf8:	6812      	ldr	r2, [r2, #0]
 8000bfa:	2110      	movs	r1, #16
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c00:	2000      	movs	r0, #0
 8000c02:	f000 f809 	bl	8000c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c06:	f002 f9a7 	bl	8002f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c0a:	2300      	movs	r3, #0
}
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	40022000 	.word	0x40022000

08000c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000c20:	f000 fed4 	bl	80019cc <HAL_RCC_GetHCLKFreq>
 8000c24:	0002      	movs	r2, r0
 8000c26:	23fa      	movs	r3, #250	; 0xfa
 8000c28:	0099      	lsls	r1, r3, #2
 8000c2a:	0010      	movs	r0, r2
 8000c2c:	f7ff fa6c 	bl	8000108 <__udivsi3>
 8000c30:	0003      	movs	r3, r0
 8000c32:	0018      	movs	r0, r3
 8000c34:	f000 f8ca 	bl	8000dcc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	425b      	negs	r3, r3
 8000c3e:	2200      	movs	r2, #0
 8000c40:	0018      	movs	r0, r3
 8000c42:	f000 f8ad 	bl	8000da0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	0018      	movs	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b002      	add	sp, #8
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  uwTick++;
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <HAL_IncTick+0x14>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	1c5a      	adds	r2, r3, #1
 8000c5a:	4b02      	ldr	r3, [pc, #8]	; (8000c64 <HAL_IncTick+0x14>)
 8000c5c:	601a      	str	r2, [r3, #0]
}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	2000016c 	.word	0x2000016c

08000c68 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c6c:	4b02      	ldr	r3, [pc, #8]	; (8000c78 <HAL_GetTick+0x10>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
}
 8000c70:	0018      	movs	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	2000016c 	.word	0x2000016c

08000c7c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b5b0      	push	{r4, r5, r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	0002      	movs	r2, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000c8a:	1dfb      	adds	r3, r7, #7
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b7f      	cmp	r3, #127	; 0x7f
 8000c90:	d932      	bls.n	8000cf8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c92:	4c2f      	ldr	r4, [pc, #188]	; (8000d50 <NVIC_SetPriority+0xd4>)
 8000c94:	1dfb      	adds	r3, r7, #7
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	001a      	movs	r2, r3
 8000c9a:	230f      	movs	r3, #15
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	3b08      	subs	r3, #8
 8000ca0:	0899      	lsrs	r1, r3, #2
 8000ca2:	4a2b      	ldr	r2, [pc, #172]	; (8000d50 <NVIC_SetPriority+0xd4>)
 8000ca4:	1dfb      	adds	r3, r7, #7
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	0018      	movs	r0, r3
 8000caa:	230f      	movs	r3, #15
 8000cac:	4003      	ands	r3, r0
 8000cae:	3b08      	subs	r3, #8
 8000cb0:	089b      	lsrs	r3, r3, #2
 8000cb2:	3306      	adds	r3, #6
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	18d3      	adds	r3, r2, r3
 8000cb8:	3304      	adds	r3, #4
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	1dfa      	adds	r2, r7, #7
 8000cbe:	7812      	ldrb	r2, [r2, #0]
 8000cc0:	0010      	movs	r0, r2
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	4002      	ands	r2, r0
 8000cc6:	00d2      	lsls	r2, r2, #3
 8000cc8:	20ff      	movs	r0, #255	; 0xff
 8000cca:	4090      	lsls	r0, r2
 8000ccc:	0002      	movs	r2, r0
 8000cce:	43d2      	mvns	r2, r2
 8000cd0:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	019b      	lsls	r3, r3, #6
 8000cd6:	20ff      	movs	r0, #255	; 0xff
 8000cd8:	4018      	ands	r0, r3
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	001d      	movs	r5, r3
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	402b      	ands	r3, r5
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	4098      	lsls	r0, r3
 8000ce8:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cea:	431a      	orrs	r2, r3
 8000cec:	1d8b      	adds	r3, r1, #6
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	18e3      	adds	r3, r4, r3
 8000cf2:	3304      	adds	r3, #4
 8000cf4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cf6:	e027      	b.n	8000d48 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cf8:	4c16      	ldr	r4, [pc, #88]	; (8000d54 <NVIC_SetPriority+0xd8>)
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	b25b      	sxtb	r3, r3
 8000d00:	089b      	lsrs	r3, r3, #2
 8000d02:	4914      	ldr	r1, [pc, #80]	; (8000d54 <NVIC_SetPriority+0xd8>)
 8000d04:	1dfa      	adds	r2, r7, #7
 8000d06:	7812      	ldrb	r2, [r2, #0]
 8000d08:	b252      	sxtb	r2, r2
 8000d0a:	0892      	lsrs	r2, r2, #2
 8000d0c:	32c0      	adds	r2, #192	; 0xc0
 8000d0e:	0092      	lsls	r2, r2, #2
 8000d10:	5852      	ldr	r2, [r2, r1]
 8000d12:	1df9      	adds	r1, r7, #7
 8000d14:	7809      	ldrb	r1, [r1, #0]
 8000d16:	0008      	movs	r0, r1
 8000d18:	2103      	movs	r1, #3
 8000d1a:	4001      	ands	r1, r0
 8000d1c:	00c9      	lsls	r1, r1, #3
 8000d1e:	20ff      	movs	r0, #255	; 0xff
 8000d20:	4088      	lsls	r0, r1
 8000d22:	0001      	movs	r1, r0
 8000d24:	43c9      	mvns	r1, r1
 8000d26:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	0192      	lsls	r2, r2, #6
 8000d2c:	20ff      	movs	r0, #255	; 0xff
 8000d2e:	4010      	ands	r0, r2
 8000d30:	1dfa      	adds	r2, r7, #7
 8000d32:	7812      	ldrb	r2, [r2, #0]
 8000d34:	0015      	movs	r5, r2
 8000d36:	2203      	movs	r2, #3
 8000d38:	402a      	ands	r2, r5
 8000d3a:	00d2      	lsls	r2, r2, #3
 8000d3c:	4090      	lsls	r0, r2
 8000d3e:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d40:	430a      	orrs	r2, r1
 8000d42:	33c0      	adds	r3, #192	; 0xc0
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	511a      	str	r2, [r3, r4]
}
 8000d48:	46c0      	nop			; (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b002      	add	sp, #8
 8000d4e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d50:	e000ed00 	.word	0xe000ed00
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	4a0c      	ldr	r2, [pc, #48]	; (8000d98 <SysTick_Config+0x40>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d901      	bls.n	8000d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e010      	b.n	8000d90 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <SysTick_Config+0x44>)
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	3a01      	subs	r2, #1
 8000d74:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d76:	2301      	movs	r3, #1
 8000d78:	425b      	negs	r3, r3
 8000d7a:	2103      	movs	r1, #3
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f7ff ff7d 	bl	8000c7c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <SysTick_Config+0x44>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <SysTick_Config+0x44>)
 8000d8a:	2207      	movs	r2, #7
 8000d8c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	0018      	movs	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b002      	add	sp, #8
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	00ffffff 	.word	0x00ffffff
 8000d9c:	e000e010 	.word	0xe000e010

08000da0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
 8000daa:	230f      	movs	r3, #15
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	1c02      	adds	r2, r0, #0
 8000db0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	230f      	movs	r3, #15
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	b25b      	sxtb	r3, r3
 8000dbc:	0011      	movs	r1, r2
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f7ff ff5c 	bl	8000c7c <NVIC_SetPriority>
}
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b004      	add	sp, #16
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f7ff ffbe 	bl	8000d58 <SysTick_Config>
 8000ddc:	0003      	movs	r3, r0
}
 8000dde:	0018      	movs	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b002      	add	sp, #8
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	d106      	bne.n	8000e04 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000df8:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000dfa:	6812      	ldr	r2, [r2, #0]
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000e02:	e005      	b.n	8000e10 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000e06:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000e08:	6812      	ldr	r2, [r2, #0]
 8000e0a:	2104      	movs	r1, #4
 8000e0c:	438a      	bics	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]
}
 8000e10:	46c0      	nop			; (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b002      	add	sp, #8
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	e000e010 	.word	0xe000e010

08000e1c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000e20:	f000 f803 	bl	8000e2a <HAL_SYSTICK_Callback>
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000e4a:	e14f      	b.n	80010ec <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2101      	movs	r1, #1
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	4091      	lsls	r1, r2
 8000e56:	000a      	movs	r2, r1
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d100      	bne.n	8000e64 <HAL_GPIO_Init+0x30>
 8000e62:	e140      	b.n	80010e6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x40>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b12      	cmp	r3, #18
 8000e72:	d123      	bne.n	8000ebc <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	08da      	lsrs	r2, r3, #3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3208      	adds	r2, #8
 8000e7c:	0092      	lsls	r2, r2, #2
 8000e7e:	58d3      	ldr	r3, [r2, r3]
 8000e80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	2207      	movs	r2, #7
 8000e86:	4013      	ands	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	409a      	lsls	r2, r3
 8000e8e:	0013      	movs	r3, r2
 8000e90:	43da      	mvns	r2, r3
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	691a      	ldr	r2, [r3, #16]
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	2107      	movs	r1, #7
 8000ea0:	400b      	ands	r3, r1
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	409a      	lsls	r2, r3
 8000ea6:	0013      	movs	r3, r2
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	08da      	lsrs	r2, r3, #3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3208      	adds	r2, #8
 8000eb6:	0092      	lsls	r2, r2, #2
 8000eb8:	6939      	ldr	r1, [r7, #16]
 8000eba:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	409a      	lsls	r2, r3
 8000eca:	0013      	movs	r3, r2
 8000ecc:	43da      	mvns	r2, r3
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	2203      	movs	r2, #3
 8000eda:	401a      	ands	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	409a      	lsls	r2, r3
 8000ee2:	0013      	movs	r3, r2
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d00b      	beq.n	8000f10 <HAL_GPIO_Init+0xdc>
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d007      	beq.n	8000f10 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f04:	2b11      	cmp	r3, #17
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b12      	cmp	r3, #18
 8000f0e:	d130      	bne.n	8000f72 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	409a      	lsls	r2, r3
 8000f1e:	0013      	movs	r3, r2
 8000f20:	43da      	mvns	r2, r3
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	409a      	lsls	r2, r3
 8000f32:	0013      	movs	r3, r2
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000f46:	2201      	movs	r2, #1
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
 8000f4c:	0013      	movs	r3, r2
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	091b      	lsrs	r3, r3, #4
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
 8000f64:	0013      	movs	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	0013      	movs	r3, r2
 8000f82:	43da      	mvns	r2, r3
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	409a      	lsls	r2, r3
 8000f94:	0013      	movs	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685a      	ldr	r2, [r3, #4]
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	055b      	lsls	r3, r3, #21
 8000faa:	4013      	ands	r3, r2
 8000fac:	d100      	bne.n	8000fb0 <HAL_GPIO_Init+0x17c>
 8000fae:	e09a      	b.n	80010e6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb0:	4b54      	ldr	r3, [pc, #336]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 8000fb2:	4a54      	ldr	r2, [pc, #336]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 8000fb4:	6992      	ldr	r2, [r2, #24]
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	619a      	str	r2, [r3, #24]
 8000fbc:	4b51      	ldr	r3, [pc, #324]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000fc8:	4a4f      	ldr	r2, [pc, #316]	; (8001108 <HAL_GPIO_Init+0x2d4>)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	589b      	ldr	r3, [r3, r2]
 8000fd4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	2203      	movs	r2, #3
 8000fda:	4013      	ands	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	220f      	movs	r2, #15
 8000fe0:	409a      	lsls	r2, r3
 8000fe2:	0013      	movs	r3, r2
 8000fe4:	43da      	mvns	r2, r3
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	2390      	movs	r3, #144	; 0x90
 8000ff0:	05db      	lsls	r3, r3, #23
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d013      	beq.n	800101e <HAL_GPIO_Init+0x1ea>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a44      	ldr	r2, [pc, #272]	; (800110c <HAL_GPIO_Init+0x2d8>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d00d      	beq.n	800101a <HAL_GPIO_Init+0x1e6>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a43      	ldr	r2, [pc, #268]	; (8001110 <HAL_GPIO_Init+0x2dc>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d007      	beq.n	8001016 <HAL_GPIO_Init+0x1e2>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a42      	ldr	r2, [pc, #264]	; (8001114 <HAL_GPIO_Init+0x2e0>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d101      	bne.n	8001012 <HAL_GPIO_Init+0x1de>
 800100e:	2303      	movs	r3, #3
 8001010:	e006      	b.n	8001020 <HAL_GPIO_Init+0x1ec>
 8001012:	2305      	movs	r3, #5
 8001014:	e004      	b.n	8001020 <HAL_GPIO_Init+0x1ec>
 8001016:	2302      	movs	r3, #2
 8001018:	e002      	b.n	8001020 <HAL_GPIO_Init+0x1ec>
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <HAL_GPIO_Init+0x1ec>
 800101e:	2300      	movs	r3, #0
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	2103      	movs	r1, #3
 8001024:	400a      	ands	r2, r1
 8001026:	0092      	lsls	r2, r2, #2
 8001028:	4093      	lsls	r3, r2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001030:	4935      	ldr	r1, [pc, #212]	; (8001108 <HAL_GPIO_Init+0x2d4>)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	3302      	adds	r3, #2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800103e:	4b36      	ldr	r3, [pc, #216]	; (8001118 <HAL_GPIO_Init+0x2e4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	43da      	mvns	r2, r3
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	2380      	movs	r3, #128	; 0x80
 8001054:	025b      	lsls	r3, r3, #9
 8001056:	4013      	ands	r3, r2
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001062:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <HAL_GPIO_Init+0x2e4>)
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001068:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <HAL_GPIO_Init+0x2e4>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	43da      	mvns	r2, r3
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	029b      	lsls	r3, r3, #10
 8001080:	4013      	ands	r3, r2
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800108c:	4b22      	ldr	r3, [pc, #136]	; (8001118 <HAL_GPIO_Init+0x2e4>)
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001092:	4b21      	ldr	r3, [pc, #132]	; (8001118 <HAL_GPIO_Init+0x2e4>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43da      	mvns	r2, r3
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	2380      	movs	r3, #128	; 0x80
 80010a8:	035b      	lsls	r3, r3, #13
 80010aa:	4013      	ands	r3, r2
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <HAL_GPIO_Init+0x2e4>)
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_GPIO_Init+0x2e4>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	43da      	mvns	r2, r3
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	039b      	lsls	r3, r3, #14
 80010d4:	4013      	ands	r3, r2
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_GPIO_Init+0x2e4>)
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3301      	adds	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	40da      	lsrs	r2, r3
 80010f4:	1e13      	subs	r3, r2, #0
 80010f6:	d000      	beq.n	80010fa <HAL_GPIO_Init+0x2c6>
 80010f8:	e6a8      	b.n	8000e4c <HAL_GPIO_Init+0x18>
  } 
}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b006      	add	sp, #24
 8001100:	bd80      	pop	{r7, pc}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	40021000 	.word	0x40021000
 8001108:	40010000 	.word	0x40010000
 800110c:	48000400 	.word	0x48000400
 8001110:	48000800 	.word	0x48000800
 8001114:	48000c00 	.word	0x48000c00
 8001118:	40010400 	.word	0x40010400

0800111c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	000a      	movs	r2, r1
 8001126:	1cbb      	adds	r3, r7, #2
 8001128:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	1cba      	adds	r2, r7, #2
 8001130:	8812      	ldrh	r2, [r2, #0]
 8001132:	4013      	ands	r3, r2
 8001134:	d004      	beq.n	8001140 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001136:	230f      	movs	r3, #15
 8001138:	18fb      	adds	r3, r7, r3
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	e003      	b.n	8001148 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001140:	230f      	movs	r3, #15
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001148:	230f      	movs	r3, #15
 800114a:	18fb      	adds	r3, r7, r3
 800114c:	781b      	ldrb	r3, [r3, #0]
  }
 800114e:	0018      	movs	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	b004      	add	sp, #16
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2201      	movs	r2, #1
 800116a:	4013      	ands	r3, r2
 800116c:	d100      	bne.n	8001170 <HAL_RCC_OscConfig+0x18>
 800116e:	e08d      	b.n	800128c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001170:	4bc3      	ldr	r3, [pc, #780]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	220c      	movs	r2, #12
 8001176:	4013      	ands	r3, r2
 8001178:	2b04      	cmp	r3, #4
 800117a:	d00e      	beq.n	800119a <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800117c:	4bc0      	ldr	r3, [pc, #768]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	220c      	movs	r2, #12
 8001182:	4013      	ands	r3, r2
 8001184:	2b08      	cmp	r3, #8
 8001186:	d116      	bne.n	80011b6 <HAL_RCC_OscConfig+0x5e>
 8001188:	4bbd      	ldr	r3, [pc, #756]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	025b      	lsls	r3, r3, #9
 8001190:	401a      	ands	r2, r3
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	025b      	lsls	r3, r3, #9
 8001196:	429a      	cmp	r2, r3
 8001198:	d10d      	bne.n	80011b6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119a:	4bb9      	ldr	r3, [pc, #740]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	029b      	lsls	r3, r3, #10
 80011a2:	4013      	ands	r3, r2
 80011a4:	d100      	bne.n	80011a8 <HAL_RCC_OscConfig+0x50>
 80011a6:	e070      	b.n	800128a <HAL_RCC_OscConfig+0x132>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d000      	beq.n	80011b2 <HAL_RCC_OscConfig+0x5a>
 80011b0:	e06b      	b.n	800128a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e2b5      	b.n	8001722 <HAL_RCC_OscConfig+0x5ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d107      	bne.n	80011ce <HAL_RCC_OscConfig+0x76>
 80011be:	4bb0      	ldr	r3, [pc, #704]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 80011c0:	4aaf      	ldr	r2, [pc, #700]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 80011c2:	6812      	ldr	r2, [r2, #0]
 80011c4:	2180      	movs	r1, #128	; 0x80
 80011c6:	0249      	lsls	r1, r1, #9
 80011c8:	430a      	orrs	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	e02f      	b.n	800122e <HAL_RCC_OscConfig+0xd6>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x98>
 80011d6:	4baa      	ldr	r3, [pc, #680]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 80011d8:	4aa9      	ldr	r2, [pc, #676]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 80011da:	6812      	ldr	r2, [r2, #0]
 80011dc:	49a9      	ldr	r1, [pc, #676]	; (8001484 <HAL_RCC_OscConfig+0x32c>)
 80011de:	400a      	ands	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	4ba7      	ldr	r3, [pc, #668]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 80011e4:	4aa6      	ldr	r2, [pc, #664]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	49a7      	ldr	r1, [pc, #668]	; (8001488 <HAL_RCC_OscConfig+0x330>)
 80011ea:	400a      	ands	r2, r1
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	e01e      	b.n	800122e <HAL_RCC_OscConfig+0xd6>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b05      	cmp	r3, #5
 80011f6:	d10e      	bne.n	8001216 <HAL_RCC_OscConfig+0xbe>
 80011f8:	4ba1      	ldr	r3, [pc, #644]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 80011fa:	4aa1      	ldr	r2, [pc, #644]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 80011fc:	6812      	ldr	r2, [r2, #0]
 80011fe:	2180      	movs	r1, #128	; 0x80
 8001200:	02c9      	lsls	r1, r1, #11
 8001202:	430a      	orrs	r2, r1
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	4b9e      	ldr	r3, [pc, #632]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 8001208:	4a9d      	ldr	r2, [pc, #628]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 800120a:	6812      	ldr	r2, [r2, #0]
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	0249      	lsls	r1, r1, #9
 8001210:	430a      	orrs	r2, r1
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	e00b      	b.n	800122e <HAL_RCC_OscConfig+0xd6>
 8001216:	4b9a      	ldr	r3, [pc, #616]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 8001218:	4a99      	ldr	r2, [pc, #612]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	4999      	ldr	r1, [pc, #612]	; (8001484 <HAL_RCC_OscConfig+0x32c>)
 800121e:	400a      	ands	r2, r1
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	4b97      	ldr	r3, [pc, #604]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 8001224:	4a96      	ldr	r2, [pc, #600]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 8001226:	6812      	ldr	r2, [r2, #0]
 8001228:	4997      	ldr	r1, [pc, #604]	; (8001488 <HAL_RCC_OscConfig+0x330>)
 800122a:	400a      	ands	r2, r1
 800122c:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d014      	beq.n	8001260 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001236:	f7ff fd17 	bl	8000c68 <HAL_GetTick>
 800123a:	0003      	movs	r3, r0
 800123c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff fd12 	bl	8000c68 <HAL_GetTick>
 8001244:	0002      	movs	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b64      	cmp	r3, #100	; 0x64
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e267      	b.n	8001722 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001252:	4b8b      	ldr	r3, [pc, #556]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	2380      	movs	r3, #128	; 0x80
 8001258:	029b      	lsls	r3, r3, #10
 800125a:	4013      	ands	r3, r2
 800125c:	d0f0      	beq.n	8001240 <HAL_RCC_OscConfig+0xe8>
 800125e:	e015      	b.n	800128c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001260:	f7ff fd02 	bl	8000c68 <HAL_GetTick>
 8001264:	0003      	movs	r3, r0
 8001266:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800126a:	f7ff fcfd 	bl	8000c68 <HAL_GetTick>
 800126e:	0002      	movs	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b64      	cmp	r3, #100	; 0x64
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e252      	b.n	8001722 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127c:	4b80      	ldr	r3, [pc, #512]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	029b      	lsls	r3, r3, #10
 8001284:	4013      	ands	r3, r2
 8001286:	d1f0      	bne.n	800126a <HAL_RCC_OscConfig+0x112>
 8001288:	e000      	b.n	800128c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2202      	movs	r2, #2
 8001292:	4013      	ands	r3, r2
 8001294:	d100      	bne.n	8001298 <HAL_RCC_OscConfig+0x140>
 8001296:	e069      	b.n	800136c <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001298:	4b79      	ldr	r3, [pc, #484]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	220c      	movs	r2, #12
 800129e:	4013      	ands	r3, r2
 80012a0:	d00b      	beq.n	80012ba <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012a2:	4b77      	ldr	r3, [pc, #476]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	220c      	movs	r2, #12
 80012a8:	4013      	ands	r3, r2
 80012aa:	2b08      	cmp	r3, #8
 80012ac:	d11c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x190>
 80012ae:	4b74      	ldr	r3, [pc, #464]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	025b      	lsls	r3, r3, #9
 80012b6:	4013      	ands	r3, r2
 80012b8:	d116      	bne.n	80012e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ba:	4b71      	ldr	r3, [pc, #452]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2202      	movs	r2, #2
 80012c0:	4013      	ands	r3, r2
 80012c2:	d005      	beq.n	80012d0 <HAL_RCC_OscConfig+0x178>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d001      	beq.n	80012d0 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e228      	b.n	8001722 <HAL_RCC_OscConfig+0x5ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d0:	4a6b      	ldr	r2, [pc, #428]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 80012d2:	4b6b      	ldr	r3, [pc, #428]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	21f8      	movs	r1, #248	; 0xf8
 80012d8:	438b      	bics	r3, r1
 80012da:	0019      	movs	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	430b      	orrs	r3, r1
 80012e4:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e6:	e041      	b.n	800136c <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d024      	beq.n	800133a <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f0:	4b63      	ldr	r3, [pc, #396]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 80012f2:	4a63      	ldr	r2, [pc, #396]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 80012f4:	6812      	ldr	r2, [r2, #0]
 80012f6:	2101      	movs	r1, #1
 80012f8:	430a      	orrs	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fcb4 	bl	8000c68 <HAL_GetTick>
 8001300:	0003      	movs	r3, r0
 8001302:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001306:	f7ff fcaf 	bl	8000c68 <HAL_GetTick>
 800130a:	0002      	movs	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e204      	b.n	8001722 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001318:	4b59      	ldr	r3, [pc, #356]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2202      	movs	r2, #2
 800131e:	4013      	ands	r3, r2
 8001320:	d0f1      	beq.n	8001306 <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001322:	4a57      	ldr	r2, [pc, #348]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 8001324:	4b56      	ldr	r3, [pc, #344]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	21f8      	movs	r1, #248	; 0xf8
 800132a:	438b      	bics	r3, r1
 800132c:	0019      	movs	r1, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	430b      	orrs	r3, r1
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	e018      	b.n	800136c <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800133a:	4b51      	ldr	r3, [pc, #324]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 800133c:	4a50      	ldr	r2, [pc, #320]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	2101      	movs	r1, #1
 8001342:	438a      	bics	r2, r1
 8001344:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001346:	f7ff fc8f 	bl	8000c68 <HAL_GetTick>
 800134a:	0003      	movs	r3, r0
 800134c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001350:	f7ff fc8a 	bl	8000c68 <HAL_GetTick>
 8001354:	0002      	movs	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e1df      	b.n	8001722 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001362:	4b47      	ldr	r3, [pc, #284]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2202      	movs	r2, #2
 8001368:	4013      	ands	r3, r2
 800136a:	d1f1      	bne.n	8001350 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2208      	movs	r2, #8
 8001372:	4013      	ands	r3, r2
 8001374:	d036      	beq.n	80013e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d019      	beq.n	80013b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800137e:	4b40      	ldr	r3, [pc, #256]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 8001380:	4a3f      	ldr	r2, [pc, #252]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 8001382:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001384:	2101      	movs	r1, #1
 8001386:	430a      	orrs	r2, r1
 8001388:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138a:	f7ff fc6d 	bl	8000c68 <HAL_GetTick>
 800138e:	0003      	movs	r3, r0
 8001390:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001394:	f7ff fc68 	bl	8000c68 <HAL_GetTick>
 8001398:	0002      	movs	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e1bd      	b.n	8001722 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a6:	4b36      	ldr	r3, [pc, #216]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	2202      	movs	r2, #2
 80013ac:	4013      	ands	r3, r2
 80013ae:	d0f1      	beq.n	8001394 <HAL_RCC_OscConfig+0x23c>
 80013b0:	e018      	b.n	80013e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013b2:	4b33      	ldr	r3, [pc, #204]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 80013b4:	4a32      	ldr	r2, [pc, #200]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 80013b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013b8:	2101      	movs	r1, #1
 80013ba:	438a      	bics	r2, r1
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013be:	f7ff fc53 	bl	8000c68 <HAL_GetTick>
 80013c2:	0003      	movs	r3, r0
 80013c4:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c8:	f7ff fc4e 	bl	8000c68 <HAL_GetTick>
 80013cc:	0002      	movs	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e1a3      	b.n	8001722 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013da:	4b29      	ldr	r3, [pc, #164]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 80013dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013de:	2202      	movs	r2, #2
 80013e0:	4013      	ands	r3, r2
 80013e2:	d1f1      	bne.n	80013c8 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2204      	movs	r2, #4
 80013ea:	4013      	ands	r3, r2
 80013ec:	d100      	bne.n	80013f0 <HAL_RCC_OscConfig+0x298>
 80013ee:	e0b5      	b.n	800155c <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f0:	2317      	movs	r3, #23
 80013f2:	18fb      	adds	r3, r7, r3
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f8:	4b21      	ldr	r3, [pc, #132]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 80013fa:	69da      	ldr	r2, [r3, #28]
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	055b      	lsls	r3, r3, #21
 8001400:	4013      	ands	r3, r2
 8001402:	d111      	bne.n	8001428 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 8001406:	4a1e      	ldr	r2, [pc, #120]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 8001408:	69d2      	ldr	r2, [r2, #28]
 800140a:	2180      	movs	r1, #128	; 0x80
 800140c:	0549      	lsls	r1, r1, #21
 800140e:	430a      	orrs	r2, r1
 8001410:	61da      	str	r2, [r3, #28]
 8001412:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 8001414:	69da      	ldr	r2, [r3, #28]
 8001416:	2380      	movs	r3, #128	; 0x80
 8001418:	055b      	lsls	r3, r3, #21
 800141a:	4013      	ands	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001420:	2317      	movs	r3, #23
 8001422:	18fb      	adds	r3, r7, r3
 8001424:	2201      	movs	r2, #1
 8001426:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001428:	4b18      	ldr	r3, [pc, #96]	; (800148c <HAL_RCC_OscConfig+0x334>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	4013      	ands	r3, r2
 8001432:	d11a      	bne.n	800146a <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001434:	4b15      	ldr	r3, [pc, #84]	; (800148c <HAL_RCC_OscConfig+0x334>)
 8001436:	4a15      	ldr	r2, [pc, #84]	; (800148c <HAL_RCC_OscConfig+0x334>)
 8001438:	6812      	ldr	r2, [r2, #0]
 800143a:	2180      	movs	r1, #128	; 0x80
 800143c:	0049      	lsls	r1, r1, #1
 800143e:	430a      	orrs	r2, r1
 8001440:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001442:	f7ff fc11 	bl	8000c68 <HAL_GetTick>
 8001446:	0003      	movs	r3, r0
 8001448:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800144c:	f7ff fc0c 	bl	8000c68 <HAL_GetTick>
 8001450:	0002      	movs	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	; 0x64
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e161      	b.n	8001722 <HAL_RCC_OscConfig+0x5ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_RCC_OscConfig+0x334>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	4013      	ands	r3, r2
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d10e      	bne.n	8001490 <HAL_RCC_OscConfig+0x338>
 8001472:	4b03      	ldr	r3, [pc, #12]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 8001474:	4a02      	ldr	r2, [pc, #8]	; (8001480 <HAL_RCC_OscConfig+0x328>)
 8001476:	6a12      	ldr	r2, [r2, #32]
 8001478:	2101      	movs	r1, #1
 800147a:	430a      	orrs	r2, r1
 800147c:	621a      	str	r2, [r3, #32]
 800147e:	e035      	b.n	80014ec <HAL_RCC_OscConfig+0x394>
 8001480:	40021000 	.word	0x40021000
 8001484:	fffeffff 	.word	0xfffeffff
 8001488:	fffbffff 	.word	0xfffbffff
 800148c:	40007000 	.word	0x40007000
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10c      	bne.n	80014b2 <HAL_RCC_OscConfig+0x35a>
 8001498:	4ba4      	ldr	r3, [pc, #656]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 800149a:	4aa4      	ldr	r2, [pc, #656]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 800149c:	6a12      	ldr	r2, [r2, #32]
 800149e:	2101      	movs	r1, #1
 80014a0:	438a      	bics	r2, r1
 80014a2:	621a      	str	r2, [r3, #32]
 80014a4:	4ba1      	ldr	r3, [pc, #644]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 80014a6:	4aa1      	ldr	r2, [pc, #644]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 80014a8:	6a12      	ldr	r2, [r2, #32]
 80014aa:	2104      	movs	r1, #4
 80014ac:	438a      	bics	r2, r1
 80014ae:	621a      	str	r2, [r3, #32]
 80014b0:	e01c      	b.n	80014ec <HAL_RCC_OscConfig+0x394>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b05      	cmp	r3, #5
 80014b8:	d10c      	bne.n	80014d4 <HAL_RCC_OscConfig+0x37c>
 80014ba:	4b9c      	ldr	r3, [pc, #624]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 80014bc:	4a9b      	ldr	r2, [pc, #620]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 80014be:	6a12      	ldr	r2, [r2, #32]
 80014c0:	2104      	movs	r1, #4
 80014c2:	430a      	orrs	r2, r1
 80014c4:	621a      	str	r2, [r3, #32]
 80014c6:	4b99      	ldr	r3, [pc, #612]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 80014c8:	4a98      	ldr	r2, [pc, #608]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 80014ca:	6a12      	ldr	r2, [r2, #32]
 80014cc:	2101      	movs	r1, #1
 80014ce:	430a      	orrs	r2, r1
 80014d0:	621a      	str	r2, [r3, #32]
 80014d2:	e00b      	b.n	80014ec <HAL_RCC_OscConfig+0x394>
 80014d4:	4b95      	ldr	r3, [pc, #596]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 80014d6:	4a95      	ldr	r2, [pc, #596]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 80014d8:	6a12      	ldr	r2, [r2, #32]
 80014da:	2101      	movs	r1, #1
 80014dc:	438a      	bics	r2, r1
 80014de:	621a      	str	r2, [r3, #32]
 80014e0:	4b92      	ldr	r3, [pc, #584]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 80014e2:	4a92      	ldr	r2, [pc, #584]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 80014e4:	6a12      	ldr	r2, [r2, #32]
 80014e6:	2104      	movs	r1, #4
 80014e8:	438a      	bics	r2, r1
 80014ea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d014      	beq.n	800151e <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f4:	f7ff fbb8 	bl	8000c68 <HAL_GetTick>
 80014f8:	0003      	movs	r3, r0
 80014fa:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014fc:	e009      	b.n	8001512 <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014fe:	f7ff fbb3 	bl	8000c68 <HAL_GetTick>
 8001502:	0002      	movs	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	4a89      	ldr	r2, [pc, #548]	; (8001730 <HAL_RCC_OscConfig+0x5d8>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e107      	b.n	8001722 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001512:	4b86      	ldr	r3, [pc, #536]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	2202      	movs	r2, #2
 8001518:	4013      	ands	r3, r2
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x3a6>
 800151c:	e013      	b.n	8001546 <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151e:	f7ff fba3 	bl	8000c68 <HAL_GetTick>
 8001522:	0003      	movs	r3, r0
 8001524:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001526:	e009      	b.n	800153c <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001528:	f7ff fb9e 	bl	8000c68 <HAL_GetTick>
 800152c:	0002      	movs	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	4a7f      	ldr	r2, [pc, #508]	; (8001730 <HAL_RCC_OscConfig+0x5d8>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e0f2      	b.n	8001722 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153c:	4b7b      	ldr	r3, [pc, #492]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	2202      	movs	r2, #2
 8001542:	4013      	ands	r3, r2
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001546:	2317      	movs	r3, #23
 8001548:	18fb      	adds	r3, r7, r3
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d105      	bne.n	800155c <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001550:	4b76      	ldr	r3, [pc, #472]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 8001552:	4a76      	ldr	r2, [pc, #472]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 8001554:	69d2      	ldr	r2, [r2, #28]
 8001556:	4977      	ldr	r1, [pc, #476]	; (8001734 <HAL_RCC_OscConfig+0x5dc>)
 8001558:	400a      	ands	r2, r1
 800155a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2210      	movs	r2, #16
 8001562:	4013      	ands	r3, r2
 8001564:	d063      	beq.n	800162e <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d12a      	bne.n	80015c4 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800156e:	4b6f      	ldr	r3, [pc, #444]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 8001570:	4a6e      	ldr	r2, [pc, #440]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 8001572:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001574:	2104      	movs	r1, #4
 8001576:	430a      	orrs	r2, r1
 8001578:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800157a:	4b6c      	ldr	r3, [pc, #432]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 800157c:	4a6b      	ldr	r2, [pc, #428]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 800157e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001580:	2101      	movs	r1, #1
 8001582:	430a      	orrs	r2, r1
 8001584:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001586:	f7ff fb6f 	bl	8000c68 <HAL_GetTick>
 800158a:	0003      	movs	r3, r0
 800158c:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001590:	f7ff fb6a 	bl	8000c68 <HAL_GetTick>
 8001594:	0002      	movs	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e0bf      	b.n	8001722 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015a2:	4b62      	ldr	r3, [pc, #392]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 80015a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a6:	2202      	movs	r2, #2
 80015a8:	4013      	ands	r3, r2
 80015aa:	d0f1      	beq.n	8001590 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015ac:	4a5f      	ldr	r2, [pc, #380]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 80015ae:	4b5f      	ldr	r3, [pc, #380]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 80015b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b2:	21f8      	movs	r1, #248	; 0xf8
 80015b4:	438b      	bics	r3, r1
 80015b6:	0019      	movs	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	430b      	orrs	r3, r1
 80015c0:	6353      	str	r3, [r2, #52]	; 0x34
 80015c2:	e034      	b.n	800162e <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	3305      	adds	r3, #5
 80015ca:	d111      	bne.n	80015f0 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80015cc:	4b57      	ldr	r3, [pc, #348]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 80015ce:	4a57      	ldr	r2, [pc, #348]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 80015d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015d2:	2104      	movs	r1, #4
 80015d4:	438a      	bics	r2, r1
 80015d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015d8:	4a54      	ldr	r2, [pc, #336]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 80015da:	4b54      	ldr	r3, [pc, #336]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 80015dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015de:	21f8      	movs	r1, #248	; 0xf8
 80015e0:	438b      	bics	r3, r1
 80015e2:	0019      	movs	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	430b      	orrs	r3, r1
 80015ec:	6353      	str	r3, [r2, #52]	; 0x34
 80015ee:	e01e      	b.n	800162e <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80015f0:	4b4e      	ldr	r3, [pc, #312]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 80015f2:	4a4e      	ldr	r2, [pc, #312]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 80015f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015f6:	2104      	movs	r1, #4
 80015f8:	430a      	orrs	r2, r1
 80015fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80015fc:	4b4b      	ldr	r3, [pc, #300]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 80015fe:	4a4b      	ldr	r2, [pc, #300]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 8001600:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001602:	2101      	movs	r1, #1
 8001604:	438a      	bics	r2, r1
 8001606:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001608:	f7ff fb2e 	bl	8000c68 <HAL_GetTick>
 800160c:	0003      	movs	r3, r0
 800160e:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001612:	f7ff fb29 	bl	8000c68 <HAL_GetTick>
 8001616:	0002      	movs	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e07e      	b.n	8001722 <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001624:	4b41      	ldr	r3, [pc, #260]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 8001626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001628:	2202      	movs	r2, #2
 800162a:	4013      	ands	r3, r2
 800162c:	d1f1      	bne.n	8001612 <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d100      	bne.n	8001638 <HAL_RCC_OscConfig+0x4e0>
 8001636:	e073      	b.n	8001720 <HAL_RCC_OscConfig+0x5c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001638:	4b3c      	ldr	r3, [pc, #240]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	220c      	movs	r2, #12
 800163e:	4013      	ands	r3, r2
 8001640:	2b08      	cmp	r3, #8
 8001642:	d100      	bne.n	8001646 <HAL_RCC_OscConfig+0x4ee>
 8001644:	e06a      	b.n	800171c <HAL_RCC_OscConfig+0x5c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d14b      	bne.n	80016e6 <HAL_RCC_OscConfig+0x58e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164e:	4b37      	ldr	r3, [pc, #220]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 8001650:	4a36      	ldr	r2, [pc, #216]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	4938      	ldr	r1, [pc, #224]	; (8001738 <HAL_RCC_OscConfig+0x5e0>)
 8001656:	400a      	ands	r2, r1
 8001658:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff fb05 	bl	8000c68 <HAL_GetTick>
 800165e:	0003      	movs	r3, r0
 8001660:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001664:	f7ff fb00 	bl	8000c68 <HAL_GetTick>
 8001668:	0002      	movs	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e055      	b.n	8001722 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001676:	4b2d      	ldr	r3, [pc, #180]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	049b      	lsls	r3, r3, #18
 800167e:	4013      	ands	r3, r2
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001682:	4a2a      	ldr	r2, [pc, #168]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 8001684:	4b29      	ldr	r3, [pc, #164]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	210f      	movs	r1, #15
 800168a:	438b      	bics	r3, r1
 800168c:	0019      	movs	r1, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001692:	430b      	orrs	r3, r1
 8001694:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001696:	4a25      	ldr	r2, [pc, #148]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 8001698:	4b24      	ldr	r3, [pc, #144]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	4927      	ldr	r1, [pc, #156]	; (800173c <HAL_RCC_OscConfig+0x5e4>)
 800169e:	4019      	ands	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	4303      	orrs	r3, r0
 80016aa:	430b      	orrs	r3, r1
 80016ac:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ae:	4b1f      	ldr	r3, [pc, #124]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 80016b0:	4a1e      	ldr	r2, [pc, #120]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	2180      	movs	r1, #128	; 0x80
 80016b6:	0449      	lsls	r1, r1, #17
 80016b8:	430a      	orrs	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff fad4 	bl	8000c68 <HAL_GetTick>
 80016c0:	0003      	movs	r3, r0
 80016c2:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x580>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c6:	f7ff facf 	bl	8000c68 <HAL_GetTick>
 80016ca:	0002      	movs	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x580>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e024      	b.n	8001722 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	049b      	lsls	r3, r3, #18
 80016e0:	4013      	ands	r3, r2
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0x56e>
 80016e4:	e01c      	b.n	8001720 <HAL_RCC_OscConfig+0x5c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 80016e8:	4a10      	ldr	r2, [pc, #64]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	4912      	ldr	r1, [pc, #72]	; (8001738 <HAL_RCC_OscConfig+0x5e0>)
 80016ee:	400a      	ands	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f2:	f7ff fab9 	bl	8000c68 <HAL_GetTick>
 80016f6:	0003      	movs	r3, r0
 80016f8:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x5b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fc:	f7ff fab4 	bl	8000c68 <HAL_GetTick>
 8001700:	0002      	movs	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e009      	b.n	8001722 <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <HAL_RCC_OscConfig+0x5d4>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	2380      	movs	r3, #128	; 0x80
 8001714:	049b      	lsls	r3, r3, #18
 8001716:	4013      	ands	r3, r2
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x5a4>
 800171a:	e001      	b.n	8001720 <HAL_RCC_OscConfig+0x5c8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <HAL_RCC_OscConfig+0x5ca>
    }
  }
  
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	0018      	movs	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	b006      	add	sp, #24
 8001728:	bd80      	pop	{r7, pc}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	40021000 	.word	0x40021000
 8001730:	00001388 	.word	0x00001388
 8001734:	efffffff 	.word	0xefffffff
 8001738:	feffffff 	.word	0xfeffffff
 800173c:	ffc2ffff 	.word	0xffc2ffff

08001740 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800174e:	4b69      	ldr	r3, [pc, #420]	; (80018f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2201      	movs	r2, #1
 8001754:	401a      	ands	r2, r3
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d211      	bcs.n	8001780 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175c:	4b65      	ldr	r3, [pc, #404]	; (80018f4 <HAL_RCC_ClockConfig+0x1b4>)
 800175e:	4a65      	ldr	r2, [pc, #404]	; (80018f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	2101      	movs	r1, #1
 8001764:	438a      	bics	r2, r1
 8001766:	0011      	movs	r1, r2
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800176e:	4b61      	ldr	r3, [pc, #388]	; (80018f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2201      	movs	r2, #1
 8001774:	401a      	ands	r2, r3
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0b5      	b.n	80018ec <HAL_RCC_ClockConfig+0x1ac>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2202      	movs	r2, #2
 8001786:	4013      	ands	r3, r2
 8001788:	d009      	beq.n	800179e <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800178a:	4a5b      	ldr	r2, [pc, #364]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 800178c:	4b5a      	ldr	r3, [pc, #360]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	21f0      	movs	r1, #240	; 0xf0
 8001792:	438b      	bics	r3, r1
 8001794:	0019      	movs	r1, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	430b      	orrs	r3, r1
 800179c:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2201      	movs	r2, #1
 80017a4:	4013      	ands	r3, r2
 80017a6:	d100      	bne.n	80017aa <HAL_RCC_ClockConfig+0x6a>
 80017a8:	e067      	b.n	800187a <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	4b51      	ldr	r3, [pc, #324]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	029b      	lsls	r3, r3, #10
 80017ba:	4013      	ands	r3, r2
 80017bc:	d114      	bne.n	80017e8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e094      	b.n	80018ec <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d107      	bne.n	80017da <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ca:	4b4b      	ldr	r3, [pc, #300]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	2380      	movs	r3, #128	; 0x80
 80017d0:	049b      	lsls	r3, r3, #18
 80017d2:	4013      	ands	r3, r2
 80017d4:	d108      	bne.n	80017e8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e088      	b.n	80018ec <HAL_RCC_ClockConfig+0x1ac>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017da:	4b47      	ldr	r3, [pc, #284]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2202      	movs	r2, #2
 80017e0:	4013      	ands	r3, r2
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e081      	b.n	80018ec <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017e8:	4a43      	ldr	r2, [pc, #268]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 80017ea:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2103      	movs	r1, #3
 80017f0:	438b      	bics	r3, r1
 80017f2:	0019      	movs	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	430b      	orrs	r3, r1
 80017fa:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017fc:	f7ff fa34 	bl	8000c68 <HAL_GetTick>
 8001800:	0003      	movs	r3, r0
 8001802:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d111      	bne.n	8001830 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800180c:	e009      	b.n	8001822 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800180e:	f7ff fa2b 	bl	8000c68 <HAL_GetTick>
 8001812:	0002      	movs	r2, r0
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	4a38      	ldr	r2, [pc, #224]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e064      	b.n	80018ec <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001822:	4b35      	ldr	r3, [pc, #212]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	220c      	movs	r2, #12
 8001828:	4013      	ands	r3, r2
 800182a:	2b04      	cmp	r3, #4
 800182c:	d1ef      	bne.n	800180e <HAL_RCC_ClockConfig+0xce>
 800182e:	e024      	b.n	800187a <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b02      	cmp	r3, #2
 8001836:	d11b      	bne.n	8001870 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001838:	e009      	b.n	800184e <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183a:	f7ff fa15 	bl	8000c68 <HAL_GetTick>
 800183e:	0002      	movs	r2, r0
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	4a2d      	ldr	r2, [pc, #180]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e04e      	b.n	80018ec <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800184e:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	220c      	movs	r2, #12
 8001854:	4013      	ands	r3, r2
 8001856:	2b08      	cmp	r3, #8
 8001858:	d1ef      	bne.n	800183a <HAL_RCC_ClockConfig+0xfa>
 800185a:	e00e      	b.n	800187a <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185c:	f7ff fa04 	bl	8000c68 <HAL_GetTick>
 8001860:	0002      	movs	r2, r0
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	4a25      	ldr	r2, [pc, #148]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e03d      	b.n	80018ec <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001870:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	220c      	movs	r2, #12
 8001876:	4013      	ands	r3, r2
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800187a:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <HAL_RCC_ClockConfig+0x1b4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2201      	movs	r2, #1
 8001880:	401a      	ands	r2, r3
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d911      	bls.n	80018ac <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001888:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <HAL_RCC_ClockConfig+0x1b4>)
 800188a:	4a1a      	ldr	r2, [pc, #104]	; (80018f4 <HAL_RCC_ClockConfig+0x1b4>)
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	2101      	movs	r1, #1
 8001890:	438a      	bics	r2, r1
 8001892:	0011      	movs	r1, r2
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800189a:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <HAL_RCC_ClockConfig+0x1b4>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2201      	movs	r2, #1
 80018a0:	401a      	ands	r2, r3
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e01f      	b.n	80018ec <HAL_RCC_ClockConfig+0x1ac>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2204      	movs	r2, #4
 80018b2:	4013      	ands	r3, r2
 80018b4:	d008      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018b6:	4a10      	ldr	r2, [pc, #64]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	4910      	ldr	r1, [pc, #64]	; (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 80018be:	4019      	ands	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	430b      	orrs	r3, r1
 80018c6:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018c8:	f000 f820 	bl	800190c <HAL_RCC_GetSysClockFreq>
 80018cc:	0001      	movs	r1, r0
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	091b      	lsrs	r3, r3, #4
 80018d4:	220f      	movs	r2, #15
 80018d6:	4013      	ands	r3, r2
 80018d8:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	5cd3      	ldrb	r3, [r2, r3]
 80018dc:	000a      	movs	r2, r1
 80018de:	40da      	lsrs	r2, r3
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_RCC_ClockConfig+0x1c8>)
 80018e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018e4:	2000      	movs	r0, #0
 80018e6:	f7ff f997 	bl	8000c18 <HAL_InitTick>
  
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	0018      	movs	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b004      	add	sp, #16
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40022000 	.word	0x40022000
 80018f8:	40021000 	.word	0x40021000
 80018fc:	00001388 	.word	0x00001388
 8001900:	fffff8ff 	.word	0xfffff8ff
 8001904:	08003348 	.word	0x08003348
 8001908:	20000128 	.word	0x20000128

0800190c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800190c:	b590      	push	{r4, r7, lr}
 800190e:	b08f      	sub	sp, #60	; 0x3c
 8001910:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001912:	2314      	movs	r3, #20
 8001914:	18fb      	adds	r3, r7, r3
 8001916:	4a28      	ldr	r2, [pc, #160]	; (80019b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001918:	ca13      	ldmia	r2!, {r0, r1, r4}
 800191a:	c313      	stmia	r3!, {r0, r1, r4}
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	4a26      	ldr	r2, [pc, #152]	; (80019bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001924:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001926:	c313      	stmia	r3!, {r0, r1, r4}
 8001928:	6812      	ldr	r2, [r2, #0]
 800192a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001930:	2300      	movs	r3, #0
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
 8001934:	2300      	movs	r3, #0
 8001936:	637b      	str	r3, [r7, #52]	; 0x34
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001940:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001948:	220c      	movs	r2, #12
 800194a:	4013      	ands	r3, r2
 800194c:	2b04      	cmp	r3, #4
 800194e:	d002      	beq.n	8001956 <HAL_RCC_GetSysClockFreq+0x4a>
 8001950:	2b08      	cmp	r3, #8
 8001952:	d003      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0x50>
 8001954:	e027      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001956:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001958:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800195a:	e027      	b.n	80019ac <HAL_RCC_GetSysClockFreq+0xa0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800195c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195e:	0c9b      	lsrs	r3, r3, #18
 8001960:	220f      	movs	r2, #15
 8001962:	4013      	ands	r3, r2
 8001964:	2214      	movs	r2, #20
 8001966:	18ba      	adds	r2, r7, r2
 8001968:	5cd3      	ldrb	r3, [r2, r3]
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	220f      	movs	r2, #15
 8001972:	4013      	ands	r3, r2
 8001974:	1d3a      	adds	r2, r7, #4
 8001976:	5cd3      	ldrb	r3, [r2, r3]
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800197a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	025b      	lsls	r3, r3, #9
 8001980:	4013      	ands	r3, r2
 8001982:	d009      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001984:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001986:	480f      	ldr	r0, [pc, #60]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001988:	f7fe fbbe 	bl	8000108 <__udivsi3>
 800198c:	0003      	movs	r3, r0
 800198e:	001a      	movs	r2, r3
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	4353      	muls	r3, r2
 8001994:	637b      	str	r3, [r7, #52]	; 0x34
 8001996:	e003      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x94>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800199c:	4353      	muls	r3, r2
 800199e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80019a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019a4:	e002      	b.n	80019ac <HAL_RCC_GetSysClockFreq+0xa0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019aa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80019ae:	0018      	movs	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b00f      	add	sp, #60	; 0x3c
 80019b4:	bd90      	pop	{r4, r7, pc}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	08003318 	.word	0x08003318
 80019bc:	08003328 	.word	0x08003328
 80019c0:	40021000 	.word	0x40021000
 80019c4:	007a1200 	.word	0x007a1200
 80019c8:	003d0900 	.word	0x003d0900

080019cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d0:	4b02      	ldr	r3, [pc, #8]	; (80019dc <HAL_RCC_GetHCLKFreq+0x10>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	0018      	movs	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	20000128 	.word	0x20000128

080019e0 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e01e      	b.n	8001a30 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	223d      	movs	r2, #61	; 0x3d
 80019f6:	5c9b      	ldrb	r3, [r3, r2]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d107      	bne.n	8001a0e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	223c      	movs	r2, #60	; 0x3c
 8001a02:	2100      	movs	r1, #0
 8001a04:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f001 fb11 	bl	8003030 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	223d      	movs	r2, #61	; 0x3d
 8001a12:	2102      	movs	r1, #2
 8001a14:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	0019      	movs	r1, r3
 8001a20:	0010      	movs	r0, r2
 8001a22:	f000 f929 	bl	8001c78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	223d      	movs	r2, #61	; 0x3d
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	0018      	movs	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	b002      	add	sp, #8
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e01e      	b.n	8001a88 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	223d      	movs	r2, #61	; 0x3d
 8001a4e:	5c9b      	ldrb	r3, [r3, r2]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d107      	bne.n	8001a66 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	223c      	movs	r2, #60	; 0x3c
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	0018      	movs	r0, r3
 8001a62:	f001 fab1 	bl	8002fc8 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	223d      	movs	r2, #61	; 0x3d
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3304      	adds	r3, #4
 8001a76:	0019      	movs	r1, r3
 8001a78:	0010      	movs	r0, r2
 8001a7a:	f000 f8fd 	bl	8001c78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	223d      	movs	r2, #61	; 0x3d
 8001a82:	2101      	movs	r1, #1
 8001a84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	0018      	movs	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b002      	add	sp, #8
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6839      	ldr	r1, [r7, #0]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f000 fb4e 	bl	8002144 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a13      	ldr	r2, [pc, #76]	; (8001afc <HAL_TIM_PWM_Start+0x6c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d009      	beq.n	8001ac6 <HAL_TIM_PWM_Start+0x36>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a12      	ldr	r2, [pc, #72]	; (8001b00 <HAL_TIM_PWM_Start+0x70>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d004      	beq.n	8001ac6 <HAL_TIM_PWM_Start+0x36>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a10      	ldr	r2, [pc, #64]	; (8001b04 <HAL_TIM_PWM_Start+0x74>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d101      	bne.n	8001aca <HAL_TIM_PWM_Start+0x3a>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_TIM_PWM_Start+0x3c>
 8001aca:	2300      	movs	r3, #0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d008      	beq.n	8001ae2 <HAL_TIM_PWM_Start+0x52>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ada:	2180      	movs	r1, #128	; 0x80
 8001adc:	0209      	lsls	r1, r1, #8
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	2101      	movs	r1, #1
 8001aee:	430a      	orrs	r2, r1
 8001af0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	0018      	movs	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b002      	add	sp, #8
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40012c00 	.word	0x40012c00
 8001b00:	40014400 	.word	0x40014400
 8001b04:	40014800 	.word	0x40014800

08001b08 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	223c      	movs	r2, #60	; 0x3c
 8001b18:	5c9b      	ldrb	r3, [r3, r2]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e0a4      	b.n	8001c6c <HAL_TIM_PWM_ConfigChannel+0x164>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	223c      	movs	r2, #60	; 0x3c
 8001b26:	2101      	movs	r1, #1
 8001b28:	5499      	strb	r1, [r3, r2]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	223d      	movs	r2, #61	; 0x3d
 8001b2e:	2102      	movs	r1, #2
 8001b30:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d029      	beq.n	8001b8c <HAL_TIM_PWM_ConfigChannel+0x84>
 8001b38:	d802      	bhi.n	8001b40 <HAL_TIM_PWM_ConfigChannel+0x38>
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d005      	beq.n	8001b4a <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
    }
    break;

    default:
    break;
 8001b3e:	e08c      	b.n	8001c5a <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d046      	beq.n	8001bd2 <HAL_TIM_PWM_ConfigChannel+0xca>
 8001b44:	2b0c      	cmp	r3, #12
 8001b46:	d065      	beq.n	8001c14 <HAL_TIM_PWM_ConfigChannel+0x10c>
    break;
 8001b48:	e087      	b.n	8001c5a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	0011      	movs	r1, r2
 8001b52:	0018      	movs	r0, r3
 8001b54:	f000 f8fe 	bl	8001d54 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	6992      	ldr	r2, [r2, #24]
 8001b62:	2108      	movs	r1, #8
 8001b64:	430a      	orrs	r2, r1
 8001b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	6992      	ldr	r2, [r2, #24]
 8001b72:	2104      	movs	r1, #4
 8001b74:	438a      	bics	r2, r1
 8001b76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	6991      	ldr	r1, [r2, #24]
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	6912      	ldr	r2, [r2, #16]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	619a      	str	r2, [r3, #24]
    break;
 8001b8a:	e066      	b.n	8001c5a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	0011      	movs	r1, r2
 8001b94:	0018      	movs	r0, r3
 8001b96:	f000 f961 	bl	8001e5c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	6812      	ldr	r2, [r2, #0]
 8001ba2:	6992      	ldr	r2, [r2, #24]
 8001ba4:	2180      	movs	r1, #128	; 0x80
 8001ba6:	0109      	lsls	r1, r1, #4
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	6812      	ldr	r2, [r2, #0]
 8001bb4:	6992      	ldr	r2, [r2, #24]
 8001bb6:	492f      	ldr	r1, [pc, #188]	; (8001c74 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8001bb8:	400a      	ands	r2, r1
 8001bba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	6991      	ldr	r1, [r2, #24]
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	6912      	ldr	r2, [r2, #16]
 8001bca:	0212      	lsls	r2, r2, #8
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	619a      	str	r2, [r3, #24]
    break;
 8001bd0:	e043      	b.n	8001c5a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	0011      	movs	r1, r2
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f000 f9c2 	bl	8001f64 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	69d2      	ldr	r2, [r2, #28]
 8001bea:	2108      	movs	r1, #8
 8001bec:	430a      	orrs	r2, r1
 8001bee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	69d2      	ldr	r2, [r2, #28]
 8001bfa:	2104      	movs	r1, #4
 8001bfc:	438a      	bics	r2, r1
 8001bfe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	69d1      	ldr	r1, [r2, #28]
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	6912      	ldr	r2, [r2, #16]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	61da      	str	r2, [r3, #28]
    break;
 8001c12:	e022      	b.n	8001c5a <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f000 fa27 	bl	8002070 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	69d2      	ldr	r2, [r2, #28]
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	0109      	lsls	r1, r1, #4
 8001c30:	430a      	orrs	r2, r1
 8001c32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	69d2      	ldr	r2, [r2, #28]
 8001c3e:	490d      	ldr	r1, [pc, #52]	; (8001c74 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8001c40:	400a      	ands	r2, r1
 8001c42:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	69d1      	ldr	r1, [r2, #28]
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	6912      	ldr	r2, [r2, #16]
 8001c52:	0212      	lsls	r2, r2, #8
 8001c54:	430a      	orrs	r2, r1
 8001c56:	61da      	str	r2, [r3, #28]
    break;
 8001c58:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	223d      	movs	r2, #61	; 0x3d
 8001c5e:	2101      	movs	r1, #1
 8001c60:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	223c      	movs	r2, #60	; 0x3c
 8001c66:	2100      	movs	r1, #0
 8001c68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b004      	add	sp, #16
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	fffffbff 	.word	0xfffffbff

08001c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a2b      	ldr	r2, [pc, #172]	; (8001d3c <TIM_Base_SetConfig+0xc4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d003      	beq.n	8001c9c <TIM_Base_SetConfig+0x24>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a2a      	ldr	r2, [pc, #168]	; (8001d40 <TIM_Base_SetConfig+0xc8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d108      	bne.n	8001cae <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2270      	movs	r2, #112	; 0x70
 8001ca0:	4393      	bics	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a22      	ldr	r2, [pc, #136]	; (8001d3c <TIM_Base_SetConfig+0xc4>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d00f      	beq.n	8001cd6 <TIM_Base_SetConfig+0x5e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a21      	ldr	r2, [pc, #132]	; (8001d40 <TIM_Base_SetConfig+0xc8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00b      	beq.n	8001cd6 <TIM_Base_SetConfig+0x5e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a20      	ldr	r2, [pc, #128]	; (8001d44 <TIM_Base_SetConfig+0xcc>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d007      	beq.n	8001cd6 <TIM_Base_SetConfig+0x5e>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a1f      	ldr	r2, [pc, #124]	; (8001d48 <TIM_Base_SetConfig+0xd0>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d003      	beq.n	8001cd6 <TIM_Base_SetConfig+0x5e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a1e      	ldr	r2, [pc, #120]	; (8001d4c <TIM_Base_SetConfig+0xd4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d108      	bne.n	8001ce8 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4a1d      	ldr	r2, [pc, #116]	; (8001d50 <TIM_Base_SetConfig+0xd8>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2280      	movs	r2, #128	; 0x80
 8001cec:	4393      	bics	r3, r2
 8001cee:	001a      	movs	r2, r3
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <TIM_Base_SetConfig+0xc4>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d007      	beq.n	8001d26 <TIM_Base_SetConfig+0xae>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <TIM_Base_SetConfig+0xd0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d003      	beq.n	8001d26 <TIM_Base_SetConfig+0xae>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <TIM_Base_SetConfig+0xd4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d103      	bne.n	8001d2e <TIM_Base_SetConfig+0xb6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	615a      	str	r2, [r3, #20]
}
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b004      	add	sp, #16
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40012c00 	.word	0x40012c00
 8001d40:	40000400 	.word	0x40000400
 8001d44:	40002000 	.word	0x40002000
 8001d48:	40014400 	.word	0x40014400
 8001d4c:	40014800 	.word	0x40014800
 8001d50:	fffffcff 	.word	0xfffffcff

08001d54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	4393      	bics	r3, r2
 8001d72:	001a      	movs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2270      	movs	r2, #112	; 0x70
 8001d8e:	4393      	bics	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2203      	movs	r2, #3
 8001d96:	4393      	bics	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	2202      	movs	r2, #2
 8001da8:	4393      	bics	r3, r2
 8001daa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a23      	ldr	r2, [pc, #140]	; (8001e48 <TIM_OC1_SetConfig+0xf4>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d007      	beq.n	8001dce <TIM_OC1_SetConfig+0x7a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a22      	ldr	r2, [pc, #136]	; (8001e4c <TIM_OC1_SetConfig+0xf8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d003      	beq.n	8001dce <TIM_OC1_SetConfig+0x7a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a21      	ldr	r2, [pc, #132]	; (8001e50 <TIM_OC1_SetConfig+0xfc>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d10c      	bne.n	8001de8 <TIM_OC1_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2208      	movs	r2, #8
 8001dd2:	4393      	bics	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2204      	movs	r2, #4
 8001de4:	4393      	bics	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a17      	ldr	r2, [pc, #92]	; (8001e48 <TIM_OC1_SetConfig+0xf4>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d007      	beq.n	8001e00 <TIM_OC1_SetConfig+0xac>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a16      	ldr	r2, [pc, #88]	; (8001e4c <TIM_OC1_SetConfig+0xf8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d003      	beq.n	8001e00 <TIM_OC1_SetConfig+0xac>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a15      	ldr	r2, [pc, #84]	; (8001e50 <TIM_OC1_SetConfig+0xfc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d111      	bne.n	8001e24 <TIM_OC1_SetConfig+0xd0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4a14      	ldr	r2, [pc, #80]	; (8001e54 <TIM_OC1_SetConfig+0x100>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4a13      	ldr	r2, [pc, #76]	; (8001e58 <TIM_OC1_SetConfig+0x104>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	621a      	str	r2, [r3, #32]
}
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	46bd      	mov	sp, r7
 8001e42:	b006      	add	sp, #24
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	40012c00 	.word	0x40012c00
 8001e4c:	40014400 	.word	0x40014400
 8001e50:	40014800 	.word	0x40014800
 8001e54:	fffffeff 	.word	0xfffffeff
 8001e58:	fffffdff 	.word	0xfffffdff

08001e5c <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	2210      	movs	r2, #16
 8001e78:	4393      	bics	r3, r2
 8001e7a:	001a      	movs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4a2c      	ldr	r2, [pc, #176]	; (8001f48 <TIM_OC2_SetConfig+0xec>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4a2b      	ldr	r2, [pc, #172]	; (8001f4c <TIM_OC2_SetConfig+0xf0>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	4393      	bics	r3, r2
 8001eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	011b      	lsls	r3, r3, #4
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a22      	ldr	r2, [pc, #136]	; (8001f50 <TIM_OC2_SetConfig+0xf4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d10d      	bne.n	8001ee6 <TIM_OC2_SetConfig+0x8a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2280      	movs	r2, #128	; 0x80
 8001ece:	4393      	bics	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	011b      	lsls	r3, r3, #4
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2240      	movs	r2, #64	; 0x40
 8001ee2:	4393      	bics	r3, r2
 8001ee4:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a19      	ldr	r2, [pc, #100]	; (8001f50 <TIM_OC2_SetConfig+0xf4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d007      	beq.n	8001efe <TIM_OC2_SetConfig+0xa2>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a18      	ldr	r2, [pc, #96]	; (8001f54 <TIM_OC2_SetConfig+0xf8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d003      	beq.n	8001efe <TIM_OC2_SetConfig+0xa2>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a17      	ldr	r2, [pc, #92]	; (8001f58 <TIM_OC2_SetConfig+0xfc>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d113      	bne.n	8001f26 <TIM_OC2_SetConfig+0xca>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4a16      	ldr	r2, [pc, #88]	; (8001f5c <TIM_OC2_SetConfig+0x100>)
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4a15      	ldr	r2, [pc, #84]	; (8001f60 <TIM_OC2_SetConfig+0x104>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	621a      	str	r2, [r3, #32]
}
 8001f40:	46c0      	nop			; (mov r8, r8)
 8001f42:	46bd      	mov	sp, r7
 8001f44:	b006      	add	sp, #24
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	ffff8fff 	.word	0xffff8fff
 8001f4c:	fffffcff 	.word	0xfffffcff
 8001f50:	40012c00 	.word	0x40012c00
 8001f54:	40014400 	.word	0x40014400
 8001f58:	40014800 	.word	0x40014800
 8001f5c:	fffffbff 	.word	0xfffffbff
 8001f60:	fffff7ff 	.word	0xfffff7ff

08001f64 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	4a33      	ldr	r2, [pc, #204]	; (800204c <TIM_OC3_SetConfig+0xe8>)
 8001f80:	401a      	ands	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2270      	movs	r2, #112	; 0x70
 8001f9c:	4393      	bics	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	4393      	bics	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	4a26      	ldr	r2, [pc, #152]	; (8002050 <TIM_OC3_SetConfig+0xec>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a22      	ldr	r2, [pc, #136]	; (8002054 <TIM_OC3_SetConfig+0xf0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d10d      	bne.n	8001fea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	4a21      	ldr	r2, [pc, #132]	; (8002058 <TIM_OC3_SetConfig+0xf4>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	021b      	lsls	r3, r3, #8
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	4a1d      	ldr	r2, [pc, #116]	; (800205c <TIM_OC3_SetConfig+0xf8>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a19      	ldr	r2, [pc, #100]	; (8002054 <TIM_OC3_SetConfig+0xf0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d007      	beq.n	8002002 <TIM_OC3_SetConfig+0x9e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a1a      	ldr	r2, [pc, #104]	; (8002060 <TIM_OC3_SetConfig+0xfc>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d003      	beq.n	8002002 <TIM_OC3_SetConfig+0x9e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a19      	ldr	r2, [pc, #100]	; (8002064 <TIM_OC3_SetConfig+0x100>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d113      	bne.n	800202a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4a18      	ldr	r2, [pc, #96]	; (8002068 <TIM_OC3_SetConfig+0x104>)
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4a17      	ldr	r2, [pc, #92]	; (800206c <TIM_OC3_SetConfig+0x108>)
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	011b      	lsls	r3, r3, #4
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4313      	orrs	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	621a      	str	r2, [r3, #32]
}
 8002044:	46c0      	nop			; (mov r8, r8)
 8002046:	46bd      	mov	sp, r7
 8002048:	b006      	add	sp, #24
 800204a:	bd80      	pop	{r7, pc}
 800204c:	fffffeff 	.word	0xfffffeff
 8002050:	fffffdff 	.word	0xfffffdff
 8002054:	40012c00 	.word	0x40012c00
 8002058:	fffff7ff 	.word	0xfffff7ff
 800205c:	fffffbff 	.word	0xfffffbff
 8002060:	40014400 	.word	0x40014400
 8002064:	40014800 	.word	0x40014800
 8002068:	ffffefff 	.word	0xffffefff
 800206c:	ffffdfff 	.word	0xffffdfff

08002070 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	4a26      	ldr	r2, [pc, #152]	; (8002124 <TIM_OC4_SetConfig+0xb4>)
 800208c:	401a      	ands	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4a20      	ldr	r2, [pc, #128]	; (8002128 <TIM_OC4_SetConfig+0xb8>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4a1f      	ldr	r2, [pc, #124]	; (800212c <TIM_OC4_SetConfig+0xbc>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	021b      	lsls	r3, r3, #8
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4a1b      	ldr	r2, [pc, #108]	; (8002130 <TIM_OC4_SetConfig+0xc0>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	031b      	lsls	r3, r3, #12
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a17      	ldr	r2, [pc, #92]	; (8002134 <TIM_OC4_SetConfig+0xc4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d007      	beq.n	80020ec <TIM_OC4_SetConfig+0x7c>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a16      	ldr	r2, [pc, #88]	; (8002138 <TIM_OC4_SetConfig+0xc8>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d003      	beq.n	80020ec <TIM_OC4_SetConfig+0x7c>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a15      	ldr	r2, [pc, #84]	; (800213c <TIM_OC4_SetConfig+0xcc>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d109      	bne.n	8002100 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	4a14      	ldr	r2, [pc, #80]	; (8002140 <TIM_OC4_SetConfig+0xd0>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	019b      	lsls	r3, r3, #6
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	621a      	str	r2, [r3, #32]
}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	46bd      	mov	sp, r7
 800211e:	b006      	add	sp, #24
 8002120:	bd80      	pop	{r7, pc}
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	ffffefff 	.word	0xffffefff
 8002128:	ffff8fff 	.word	0xffff8fff
 800212c:	fffffcff 	.word	0xfffffcff
 8002130:	ffffdfff 	.word	0xffffdfff
 8002134:	40012c00 	.word	0x40012c00
 8002138:	40014400 	.word	0x40014400
 800213c:	40014800 	.word	0x40014800
 8002140:	ffffbfff 	.word	0xffffbfff

08002144 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002154:	2201      	movs	r2, #1
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	409a      	lsls	r2, r3
 800215a:	0013      	movs	r3, r2
 800215c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	43d2      	mvns	r2, r2
 8002166:	401a      	ands	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a1a      	ldr	r2, [r3, #32]
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	4099      	lsls	r1, r3
 8002176:	000b      	movs	r3, r1
 8002178:	431a      	orrs	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	621a      	str	r2, [r3, #32]
}
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	46bd      	mov	sp, r7
 8002182:	b006      	add	sp, #24
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	223c      	movs	r2, #60	; 0x3c
 8002194:	5c9b      	ldrb	r3, [r3, r2]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800219a:	2302      	movs	r3, #2
 800219c:	e032      	b.n	8002204 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	223c      	movs	r2, #60	; 0x3c
 80021a2:	2101      	movs	r1, #1
 80021a4:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	223d      	movs	r2, #61	; 0x3d
 80021aa:	2102      	movs	r1, #2
 80021ac:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	6852      	ldr	r2, [r2, #4]
 80021b8:	2170      	movs	r1, #112	; 0x70
 80021ba:	438a      	bics	r2, r1
 80021bc:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	6851      	ldr	r1, [r2, #4]
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	6892      	ldr	r2, [r2, #8]
 80021da:	2180      	movs	r1, #128	; 0x80
 80021dc:	438a      	bics	r2, r1
 80021de:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	6891      	ldr	r1, [r2, #8]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	6852      	ldr	r2, [r2, #4]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	223d      	movs	r2, #61	; 0x3d
 80021f6:	2101      	movs	r1, #1
 80021f8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	223c      	movs	r2, #60	; 0x3c
 80021fe:	2100      	movs	r1, #0
 8002200:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	0018      	movs	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	b002      	add	sp, #8
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	223c      	movs	r2, #60	; 0x3c
 800221e:	5c9b      	ldrb	r3, [r3, r2]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002224:	2302      	movs	r3, #2
 8002226:	e04d      	b.n	80022c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	223c      	movs	r2, #60	; 0x3c
 800222c:	2101      	movs	r1, #1
 800222e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	223d      	movs	r2, #61	; 0x3d
 8002234:	2102      	movs	r1, #2
 8002236:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	22ff      	movs	r2, #255	; 0xff
 800223c:	4393      	bics	r3, r2
 800223e:	001a      	movs	r2, r3
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4a20      	ldr	r2, [pc, #128]	; (80022cc <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 800224c:	401a      	ands	r2, r3
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	4313      	orrs	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>)
 800225a:	401a      	ands	r2, r3
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4313      	orrs	r3, r2
 8002262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4a1b      	ldr	r2, [pc, #108]	; (80022d4 <HAL_TIMEx_ConfigBreakDeadTime+0xc8>)
 8002268:	401a      	ands	r2, r3
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4313      	orrs	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4a18      	ldr	r2, [pc, #96]	; (80022d8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>)
 8002276:	401a      	ands	r2, r3
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4a16      	ldr	r2, [pc, #88]	; (80022dc <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8002284:	401a      	ands	r2, r3
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	4313      	orrs	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4a13      	ldr	r2, [pc, #76]	; (80022e0 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>)
 8002292:	401a      	ands	r2, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4a11      	ldr	r2, [pc, #68]	; (80022e4 <HAL_TIMEx_ConfigBreakDeadTime+0xd8>)
 80022a0:	401a      	ands	r2, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	645a      	str	r2, [r3, #68]	; 0x44
  
  htim->State = HAL_TIM_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	223d      	movs	r2, #61	; 0x3d
 80022b6:	2101      	movs	r1, #1
 80022b8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	223c      	movs	r2, #60	; 0x3c
 80022be:	2100      	movs	r1, #0
 80022c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	0018      	movs	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b004      	add	sp, #16
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	fffffcff 	.word	0xfffffcff
 80022d0:	fffffbff 	.word	0xfffffbff
 80022d4:	fffff7ff 	.word	0xfffff7ff
 80022d8:	ffffefff 	.word	0xffffefff
 80022dc:	ffffdfff 	.word	0xffffdfff
 80022e0:	ffffbfff 	.word	0xffffbfff
 80022e4:	ffff7fff 	.word	0xffff7fff

080022e8 <myABS>:
double myABS(double num1);

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
double myABS(double num1){
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6038      	str	r0, [r7, #0]
 80022f0:	6079      	str	r1, [r7, #4]
	if(num1 < 0){
 80022f2:	2200      	movs	r2, #0
 80022f4:	2300      	movs	r3, #0
 80022f6:	6838      	ldr	r0, [r7, #0]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	f7fd ffa7 	bl	800024c <__aeabi_dcmplt>
 80022fe:	1e03      	subs	r3, r0, #0
 8002300:	d009      	beq.n	8002316 <myABS+0x2e>
		num1 += -1;
 8002302:	2200      	movs	r2, #0
 8002304:	4b07      	ldr	r3, [pc, #28]	; (8002324 <myABS+0x3c>)
 8002306:	6838      	ldr	r0, [r7, #0]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	f7fe f8c7 	bl	800049c <__aeabi_dsub>
 800230e:	0003      	movs	r3, r0
 8002310:	000c      	movs	r4, r1
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	607c      	str	r4, [r7, #4]
	}

	return num1;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	687c      	ldr	r4, [r7, #4]
}
 800231a:	0018      	movs	r0, r3
 800231c:	0021      	movs	r1, r4
 800231e:	46bd      	mov	sp, r7
 8002320:	b003      	add	sp, #12
 8002322:	bd90      	pop	{r4, r7, pc}
 8002324:	3ff00000 	.word	0x3ff00000

08002328 <atualizarEixoX>:

void atualizarEixoX(){
 8002328:	b5b0      	push	{r4, r5, r7, lr}
 800232a:	af00      	add	r7, sp, #0
	 sensorStatus_1_A =  HAL_GPIO_ReadPin(SENSOR_1_A_PORT, SENSOR_1_A_PIN);
 800232c:	4b80      	ldr	r3, [pc, #512]	; (8002530 <atualizarEixoX+0x208>)
 800232e:	2101      	movs	r1, #1
 8002330:	0018      	movs	r0, r3
 8002332:	f7fe fef3 	bl	800111c <HAL_GPIO_ReadPin>
 8002336:	0003      	movs	r3, r0
 8002338:	001a      	movs	r2, r3
 800233a:	4b7e      	ldr	r3, [pc, #504]	; (8002534 <atualizarEixoX+0x20c>)
 800233c:	701a      	strb	r2, [r3, #0]
	 sensorStatus_1_B =  HAL_GPIO_ReadPin(SENSOR_1_B_PORT, SENSOR_1_B_PIN);
 800233e:	4b7c      	ldr	r3, [pc, #496]	; (8002530 <atualizarEixoX+0x208>)
 8002340:	2102      	movs	r1, #2
 8002342:	0018      	movs	r0, r3
 8002344:	f7fe feea 	bl	800111c <HAL_GPIO_ReadPin>
 8002348:	0003      	movs	r3, r0
 800234a:	001a      	movs	r2, r3
 800234c:	4b7a      	ldr	r3, [pc, #488]	; (8002538 <atualizarEixoX+0x210>)
 800234e:	701a      	strb	r2, [r3, #0]

	  if(sensorStatus_1_A == GPIO_PIN_RESET && sensorStatus_1_B == GPIO_PIN_RESET){
 8002350:	4b78      	ldr	r3, [pc, #480]	; (8002534 <atualizarEixoX+0x20c>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d119      	bne.n	800238c <atualizarEixoX+0x64>
 8002358:	4b77      	ldr	r3, [pc, #476]	; (8002538 <atualizarEixoX+0x210>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d115      	bne.n	800238c <atualizarEixoX+0x64>
		  if(stepStatusOld_1 == 3){
 8002360:	4b76      	ldr	r3, [pc, #472]	; (800253c <atualizarEixoX+0x214>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d105      	bne.n	8002374 <atualizarEixoX+0x4c>
			  actualPoint_1++;
 8002368:	4b75      	ldr	r3, [pc, #468]	; (8002540 <atualizarEixoX+0x218>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	4b74      	ldr	r3, [pc, #464]	; (8002540 <atualizarEixoX+0x218>)
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	e008      	b.n	8002386 <atualizarEixoX+0x5e>
		  }else if(stepStatusOld_1 == 1){
 8002374:	4b71      	ldr	r3, [pc, #452]	; (800253c <atualizarEixoX+0x214>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d104      	bne.n	8002386 <atualizarEixoX+0x5e>
			  actualPoint_1--;
 800237c:	4b70      	ldr	r3, [pc, #448]	; (8002540 <atualizarEixoX+0x218>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	1e5a      	subs	r2, r3, #1
 8002382:	4b6f      	ldr	r3, [pc, #444]	; (8002540 <atualizarEixoX+0x218>)
 8002384:	601a      	str	r2, [r3, #0]
		  }

		  stepStatusOld_1 = 0;
 8002386:	4b6d      	ldr	r3, [pc, #436]	; (800253c <atualizarEixoX+0x214>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
	  }

	  if(sensorStatus_1_A == GPIO_PIN_SET && sensorStatus_1_B == GPIO_PIN_RESET){
 800238c:	4b69      	ldr	r3, [pc, #420]	; (8002534 <atualizarEixoX+0x20c>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d119      	bne.n	80023c8 <atualizarEixoX+0xa0>
 8002394:	4b68      	ldr	r3, [pc, #416]	; (8002538 <atualizarEixoX+0x210>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d115      	bne.n	80023c8 <atualizarEixoX+0xa0>
		  if(stepStatusOld_1 == 0){
 800239c:	4b67      	ldr	r3, [pc, #412]	; (800253c <atualizarEixoX+0x214>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d105      	bne.n	80023b0 <atualizarEixoX+0x88>
			  actualPoint_1++;
 80023a4:	4b66      	ldr	r3, [pc, #408]	; (8002540 <atualizarEixoX+0x218>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	4b65      	ldr	r3, [pc, #404]	; (8002540 <atualizarEixoX+0x218>)
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	e008      	b.n	80023c2 <atualizarEixoX+0x9a>
		  }else if(stepStatusOld_1 == 2){
 80023b0:	4b62      	ldr	r3, [pc, #392]	; (800253c <atualizarEixoX+0x214>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d104      	bne.n	80023c2 <atualizarEixoX+0x9a>
			  actualPoint_1--;
 80023b8:	4b61      	ldr	r3, [pc, #388]	; (8002540 <atualizarEixoX+0x218>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	1e5a      	subs	r2, r3, #1
 80023be:	4b60      	ldr	r3, [pc, #384]	; (8002540 <atualizarEixoX+0x218>)
 80023c0:	601a      	str	r2, [r3, #0]
		  }

		  stepStatusOld_1 = 1;
 80023c2:	4b5e      	ldr	r3, [pc, #376]	; (800253c <atualizarEixoX+0x214>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	601a      	str	r2, [r3, #0]
	  }

	  if(sensorStatus_1_A == GPIO_PIN_SET && sensorStatus_1_B == GPIO_PIN_SET){
 80023c8:	4b5a      	ldr	r3, [pc, #360]	; (8002534 <atualizarEixoX+0x20c>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d119      	bne.n	8002404 <atualizarEixoX+0xdc>
 80023d0:	4b59      	ldr	r3, [pc, #356]	; (8002538 <atualizarEixoX+0x210>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d115      	bne.n	8002404 <atualizarEixoX+0xdc>
		  if(stepStatusOld_1 == 1){
 80023d8:	4b58      	ldr	r3, [pc, #352]	; (800253c <atualizarEixoX+0x214>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d105      	bne.n	80023ec <atualizarEixoX+0xc4>
			  actualPoint_1++;
 80023e0:	4b57      	ldr	r3, [pc, #348]	; (8002540 <atualizarEixoX+0x218>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	4b56      	ldr	r3, [pc, #344]	; (8002540 <atualizarEixoX+0x218>)
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	e008      	b.n	80023fe <atualizarEixoX+0xd6>
		  }else if(stepStatusOld_1 == 3){
 80023ec:	4b53      	ldr	r3, [pc, #332]	; (800253c <atualizarEixoX+0x214>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d104      	bne.n	80023fe <atualizarEixoX+0xd6>
			  actualPoint_1--;
 80023f4:	4b52      	ldr	r3, [pc, #328]	; (8002540 <atualizarEixoX+0x218>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	1e5a      	subs	r2, r3, #1
 80023fa:	4b51      	ldr	r3, [pc, #324]	; (8002540 <atualizarEixoX+0x218>)
 80023fc:	601a      	str	r2, [r3, #0]
		  }

		  stepStatusOld_1 = 2;
 80023fe:	4b4f      	ldr	r3, [pc, #316]	; (800253c <atualizarEixoX+0x214>)
 8002400:	2202      	movs	r2, #2
 8002402:	601a      	str	r2, [r3, #0]
	  }

	  if(sensorStatus_1_A == GPIO_PIN_RESET && sensorStatus_1_B == GPIO_PIN_SET){
 8002404:	4b4b      	ldr	r3, [pc, #300]	; (8002534 <atualizarEixoX+0x20c>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d119      	bne.n	8002440 <atualizarEixoX+0x118>
 800240c:	4b4a      	ldr	r3, [pc, #296]	; (8002538 <atualizarEixoX+0x210>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d115      	bne.n	8002440 <atualizarEixoX+0x118>
		  if(stepStatusOld_1 == 2){
 8002414:	4b49      	ldr	r3, [pc, #292]	; (800253c <atualizarEixoX+0x214>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d105      	bne.n	8002428 <atualizarEixoX+0x100>
			  actualPoint_1++;
 800241c:	4b48      	ldr	r3, [pc, #288]	; (8002540 <atualizarEixoX+0x218>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	4b47      	ldr	r3, [pc, #284]	; (8002540 <atualizarEixoX+0x218>)
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	e008      	b.n	800243a <atualizarEixoX+0x112>
		  }else if(stepStatusOld_1 == 3){
 8002428:	4b44      	ldr	r3, [pc, #272]	; (800253c <atualizarEixoX+0x214>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b03      	cmp	r3, #3
 800242e:	d104      	bne.n	800243a <atualizarEixoX+0x112>
			  actualPoint_1--;
 8002430:	4b43      	ldr	r3, [pc, #268]	; (8002540 <atualizarEixoX+0x218>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	1e5a      	subs	r2, r3, #1
 8002436:	4b42      	ldr	r3, [pc, #264]	; (8002540 <atualizarEixoX+0x218>)
 8002438:	601a      	str	r2, [r3, #0]
		  }

		  stepStatusOld_1 = 3;
 800243a:	4b40      	ldr	r3, [pc, #256]	; (800253c <atualizarEixoX+0x214>)
 800243c:	2203      	movs	r2, #3
 800243e:	601a      	str	r2, [r3, #0]
	  }

	  /* Cálculo PWM */
	  dutyCycle = myABS((double)(setPoint_1 - actualPoint_1)) * (double)P_FRACTION;
 8002440:	4b40      	ldr	r3, [pc, #256]	; (8002544 <atualizarEixoX+0x21c>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b3e      	ldr	r3, [pc, #248]	; (8002540 <atualizarEixoX+0x218>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	0018      	movs	r0, r3
 800244c:	f7fe fb70 	bl	8000b30 <__aeabi_i2d>
 8002450:	0003      	movs	r3, r0
 8002452:	000c      	movs	r4, r1
 8002454:	0018      	movs	r0, r3
 8002456:	0021      	movs	r1, r4
 8002458:	f7ff ff46 	bl	80022e8 <myABS>
 800245c:	0003      	movs	r3, r0
 800245e:	000c      	movs	r4, r1
 8002460:	0018      	movs	r0, r3
 8002462:	0021      	movs	r1, r4
 8002464:	f7fe fb30 	bl	8000ac8 <__aeabi_d2iz>
 8002468:	0002      	movs	r2, r0
 800246a:	4b37      	ldr	r3, [pc, #220]	; (8002548 <atualizarEixoX+0x220>)
 800246c:	601a      	str	r2, [r3, #0]

	  if(dutyCycle < MIN_DUTYCYCLE){
 800246e:	4b36      	ldr	r3, [pc, #216]	; (8002548 <atualizarEixoX+0x220>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b63      	cmp	r3, #99	; 0x63
 8002474:	dc02      	bgt.n	800247c <atualizarEixoX+0x154>
		dutyCycle = MIN_DUTYCYCLE;
 8002476:	4b34      	ldr	r3, [pc, #208]	; (8002548 <atualizarEixoX+0x220>)
 8002478:	2264      	movs	r2, #100	; 0x64
 800247a:	601a      	str	r2, [r3, #0]
	  }
	  if(dutyCycle > MAX_DUTYCYCLE){
 800247c:	4b32      	ldr	r3, [pc, #200]	; (8002548 <atualizarEixoX+0x220>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b7f      	cmp	r3, #127	; 0x7f
 8002482:	dd02      	ble.n	800248a <atualizarEixoX+0x162>
		dutyCycle = MAX_DUTYCYCLE;
 8002484:	4b30      	ldr	r3, [pc, #192]	; (8002548 <atualizarEixoX+0x220>)
 8002486:	227f      	movs	r2, #127	; 0x7f
 8002488:	601a      	str	r2, [r3, #0]
	  }

	  if(dutyCycle < MIN_DUTYCYCLE){
 800248a:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <atualizarEixoX+0x220>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b63      	cmp	r3, #99	; 0x63
 8002490:	dc02      	bgt.n	8002498 <atualizarEixoX+0x170>
		dutyCycle = MIN_DUTYCYCLE;
 8002492:	4b2d      	ldr	r3, [pc, #180]	; (8002548 <atualizarEixoX+0x220>)
 8002494:	2264      	movs	r2, #100	; 0x64
 8002496:	601a      	str	r2, [r3, #0]
	  }
	  if(dutyCycle > MAX_DUTYCYCLE){
 8002498:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <atualizarEixoX+0x220>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b7f      	cmp	r3, #127	; 0x7f
 800249e:	dd02      	ble.n	80024a6 <atualizarEixoX+0x17e>
		dutyCycle = MAX_DUTYCYCLE;
 80024a0:	4b29      	ldr	r3, [pc, #164]	; (8002548 <atualizarEixoX+0x220>)
 80024a2:	227f      	movs	r2, #127	; 0x7f
 80024a4:	601a      	str	r2, [r3, #0]
	  }
	  if(myABS((double)(setPoint_1 - actualPoint_1)) < (double)STEP_MARGIN){
 80024a6:	4b27      	ldr	r3, [pc, #156]	; (8002544 <atualizarEixoX+0x21c>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	4b25      	ldr	r3, [pc, #148]	; (8002540 <atualizarEixoX+0x218>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	0018      	movs	r0, r3
 80024b2:	f7fe fb3d 	bl	8000b30 <__aeabi_i2d>
 80024b6:	0003      	movs	r3, r0
 80024b8:	000c      	movs	r4, r1
 80024ba:	0018      	movs	r0, r3
 80024bc:	0021      	movs	r1, r4
 80024be:	f7ff ff13 	bl	80022e8 <myABS>
 80024c2:	2200      	movs	r2, #0
 80024c4:	4b21      	ldr	r3, [pc, #132]	; (800254c <atualizarEixoX+0x224>)
 80024c6:	f7fd fec1 	bl	800024c <__aeabi_dcmplt>
 80024ca:	1e03      	subs	r3, r0, #0
 80024cc:	d00b      	beq.n	80024e6 <atualizarEixoX+0x1be>
			/* Desliga o motor pras duas direções */
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, 0);
 80024ce:	4b20      	ldr	r3, [pc, #128]	; (8002550 <atualizarEixoX+0x228>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2200      	movs	r2, #0
 80024d4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80024d6:	4b1f      	ldr	r3, [pc, #124]	; (8002554 <atualizarEixoX+0x22c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2200      	movs	r2, #0
 80024dc:	635a      	str	r2, [r3, #52]	; 0x34
			isDone = 1;
 80024de:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <atualizarEixoX+0x230>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]
			/* Gira na outra direção */
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, 0);
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 255 - dutyCycle);
		}
	  }
}
 80024e4:	e021      	b.n	800252a <atualizarEixoX+0x202>
		if(actualPoint_1 < setPoint_1){
 80024e6:	4b16      	ldr	r3, [pc, #88]	; (8002540 <atualizarEixoX+0x218>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4b16      	ldr	r3, [pc, #88]	; (8002544 <atualizarEixoX+0x21c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	da0a      	bge.n	8002508 <atualizarEixoX+0x1e0>
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, 255 - dutyCycle);
 80024f2:	4b17      	ldr	r3, [pc, #92]	; (8002550 <atualizarEixoX+0x228>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a14      	ldr	r2, [pc, #80]	; (8002548 <atualizarEixoX+0x220>)
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	21ff      	movs	r1, #255	; 0xff
 80024fc:	1a8a      	subs	r2, r1, r2
 80024fe:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8002500:	4b14      	ldr	r3, [pc, #80]	; (8002554 <atualizarEixoX+0x22c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2200      	movs	r2, #0
 8002506:	635a      	str	r2, [r3, #52]	; 0x34
		if(actualPoint_1 > setPoint_1){
 8002508:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <atualizarEixoX+0x218>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <atualizarEixoX+0x21c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	dd0a      	ble.n	800252a <atualizarEixoX+0x202>
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, 0);
 8002514:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <atualizarEixoX+0x228>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2200      	movs	r2, #0
 800251a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 255 - dutyCycle);
 800251c:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <atualizarEixoX+0x22c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a09      	ldr	r2, [pc, #36]	; (8002548 <atualizarEixoX+0x220>)
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	21ff      	movs	r1, #255	; 0xff
 8002526:	1a8a      	subs	r2, r1, r2
 8002528:	635a      	str	r2, [r3, #52]	; 0x34
}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	46bd      	mov	sp, r7
 800252e:	bdb0      	pop	{r4, r5, r7, pc}
 8002530:	48001400 	.word	0x48001400
 8002534:	20000150 	.word	0x20000150
 8002538:	20000151 	.word	0x20000151
 800253c:	20000148 	.word	0x20000148
 8002540:	20000160 	.word	0x20000160
 8002544:	20000158 	.word	0x20000158
 8002548:	20000154 	.word	0x20000154
 800254c:	40240000 	.word	0x40240000
 8002550:	200001f4 	.word	0x200001f4
 8002554:	20000170 	.word	0x20000170
 8002558:	20000168 	.word	0x20000168

0800255c <atualizarEixoY>:

void atualizarEixoY(){
 800255c:	b5b0      	push	{r4, r5, r7, lr}
 800255e:	af00      	add	r7, sp, #0
	 sensorStatus_2_A =  HAL_GPIO_ReadPin(SENSOR_2_A_PORT, SENSOR_2_A_PIN);
 8002560:	2390      	movs	r3, #144	; 0x90
 8002562:	05db      	lsls	r3, r3, #23
 8002564:	2104      	movs	r1, #4
 8002566:	0018      	movs	r0, r3
 8002568:	f7fe fdd8 	bl	800111c <HAL_GPIO_ReadPin>
 800256c:	0003      	movs	r3, r0
 800256e:	001a      	movs	r2, r3
 8002570:	4b83      	ldr	r3, [pc, #524]	; (8002780 <atualizarEixoY+0x224>)
 8002572:	701a      	strb	r2, [r3, #0]
	 sensorStatus_2_B =  HAL_GPIO_ReadPin(SENSOR_2_B_PORT, SENSOR_2_B_PIN);
 8002574:	2390      	movs	r3, #144	; 0x90
 8002576:	05db      	lsls	r3, r3, #23
 8002578:	2108      	movs	r1, #8
 800257a:	0018      	movs	r0, r3
 800257c:	f7fe fdce 	bl	800111c <HAL_GPIO_ReadPin>
 8002580:	0003      	movs	r3, r0
 8002582:	001a      	movs	r2, r3
 8002584:	4b7f      	ldr	r3, [pc, #508]	; (8002784 <atualizarEixoY+0x228>)
 8002586:	701a      	strb	r2, [r3, #0]

	  if(sensorStatus_2_A == GPIO_PIN_RESET && sensorStatus_2_B == GPIO_PIN_RESET){
 8002588:	4b7d      	ldr	r3, [pc, #500]	; (8002780 <atualizarEixoY+0x224>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d119      	bne.n	80025c4 <atualizarEixoY+0x68>
 8002590:	4b7c      	ldr	r3, [pc, #496]	; (8002784 <atualizarEixoY+0x228>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d115      	bne.n	80025c4 <atualizarEixoY+0x68>
		  if(stepStatusOld_2 == 3){
 8002598:	4b7b      	ldr	r3, [pc, #492]	; (8002788 <atualizarEixoY+0x22c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d105      	bne.n	80025ac <atualizarEixoY+0x50>
			  actualPoint_2++;
 80025a0:	4b7a      	ldr	r3, [pc, #488]	; (800278c <atualizarEixoY+0x230>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	4b79      	ldr	r3, [pc, #484]	; (800278c <atualizarEixoY+0x230>)
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	e008      	b.n	80025be <atualizarEixoY+0x62>
		  }else if(stepStatusOld_2 == 1){
 80025ac:	4b76      	ldr	r3, [pc, #472]	; (8002788 <atualizarEixoY+0x22c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d104      	bne.n	80025be <atualizarEixoY+0x62>
			  actualPoint_2--;
 80025b4:	4b75      	ldr	r3, [pc, #468]	; (800278c <atualizarEixoY+0x230>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	1e5a      	subs	r2, r3, #1
 80025ba:	4b74      	ldr	r3, [pc, #464]	; (800278c <atualizarEixoY+0x230>)
 80025bc:	601a      	str	r2, [r3, #0]
		  }

		  stepStatusOld_2 = 0;
 80025be:	4b72      	ldr	r3, [pc, #456]	; (8002788 <atualizarEixoY+0x22c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
	  }

	  if(sensorStatus_2_A == GPIO_PIN_SET && sensorStatus_2_B == GPIO_PIN_RESET){
 80025c4:	4b6e      	ldr	r3, [pc, #440]	; (8002780 <atualizarEixoY+0x224>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d119      	bne.n	8002600 <atualizarEixoY+0xa4>
 80025cc:	4b6d      	ldr	r3, [pc, #436]	; (8002784 <atualizarEixoY+0x228>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d115      	bne.n	8002600 <atualizarEixoY+0xa4>
		  if(stepStatusOld_2 == 0){
 80025d4:	4b6c      	ldr	r3, [pc, #432]	; (8002788 <atualizarEixoY+0x22c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d105      	bne.n	80025e8 <atualizarEixoY+0x8c>
			  actualPoint_2++;
 80025dc:	4b6b      	ldr	r3, [pc, #428]	; (800278c <atualizarEixoY+0x230>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	4b6a      	ldr	r3, [pc, #424]	; (800278c <atualizarEixoY+0x230>)
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	e008      	b.n	80025fa <atualizarEixoY+0x9e>
		  }else if(stepStatusOld_2 == 2){
 80025e8:	4b67      	ldr	r3, [pc, #412]	; (8002788 <atualizarEixoY+0x22c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d104      	bne.n	80025fa <atualizarEixoY+0x9e>
			  actualPoint_2--;
 80025f0:	4b66      	ldr	r3, [pc, #408]	; (800278c <atualizarEixoY+0x230>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	1e5a      	subs	r2, r3, #1
 80025f6:	4b65      	ldr	r3, [pc, #404]	; (800278c <atualizarEixoY+0x230>)
 80025f8:	601a      	str	r2, [r3, #0]
		  }

		  stepStatusOld_2 = 1;
 80025fa:	4b63      	ldr	r3, [pc, #396]	; (8002788 <atualizarEixoY+0x22c>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
	  }

	  if(sensorStatus_2_A == GPIO_PIN_SET && sensorStatus_2_B == GPIO_PIN_SET){
 8002600:	4b5f      	ldr	r3, [pc, #380]	; (8002780 <atualizarEixoY+0x224>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d119      	bne.n	800263c <atualizarEixoY+0xe0>
 8002608:	4b5e      	ldr	r3, [pc, #376]	; (8002784 <atualizarEixoY+0x228>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d115      	bne.n	800263c <atualizarEixoY+0xe0>
		  if(stepStatusOld_2 == 1){
 8002610:	4b5d      	ldr	r3, [pc, #372]	; (8002788 <atualizarEixoY+0x22c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d105      	bne.n	8002624 <atualizarEixoY+0xc8>
			  actualPoint_2++;
 8002618:	4b5c      	ldr	r3, [pc, #368]	; (800278c <atualizarEixoY+0x230>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	4b5b      	ldr	r3, [pc, #364]	; (800278c <atualizarEixoY+0x230>)
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	e008      	b.n	8002636 <atualizarEixoY+0xda>
		  }else if(stepStatusOld_2 == 3){
 8002624:	4b58      	ldr	r3, [pc, #352]	; (8002788 <atualizarEixoY+0x22c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b03      	cmp	r3, #3
 800262a:	d104      	bne.n	8002636 <atualizarEixoY+0xda>
			  actualPoint_2--;
 800262c:	4b57      	ldr	r3, [pc, #348]	; (800278c <atualizarEixoY+0x230>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	1e5a      	subs	r2, r3, #1
 8002632:	4b56      	ldr	r3, [pc, #344]	; (800278c <atualizarEixoY+0x230>)
 8002634:	601a      	str	r2, [r3, #0]
		  }

		  stepStatusOld_2 = 2;
 8002636:	4b54      	ldr	r3, [pc, #336]	; (8002788 <atualizarEixoY+0x22c>)
 8002638:	2202      	movs	r2, #2
 800263a:	601a      	str	r2, [r3, #0]
	  }

	  if(sensorStatus_2_A == GPIO_PIN_RESET && sensorStatus_2_B == GPIO_PIN_SET){
 800263c:	4b50      	ldr	r3, [pc, #320]	; (8002780 <atualizarEixoY+0x224>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d119      	bne.n	8002678 <atualizarEixoY+0x11c>
 8002644:	4b4f      	ldr	r3, [pc, #316]	; (8002784 <atualizarEixoY+0x228>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d115      	bne.n	8002678 <atualizarEixoY+0x11c>
		  if(stepStatusOld_2 == 2){
 800264c:	4b4e      	ldr	r3, [pc, #312]	; (8002788 <atualizarEixoY+0x22c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d105      	bne.n	8002660 <atualizarEixoY+0x104>
			  actualPoint_2++;
 8002654:	4b4d      	ldr	r3, [pc, #308]	; (800278c <atualizarEixoY+0x230>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	4b4c      	ldr	r3, [pc, #304]	; (800278c <atualizarEixoY+0x230>)
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	e008      	b.n	8002672 <atualizarEixoY+0x116>
		  }else if(stepStatusOld_2 == 3){
 8002660:	4b49      	ldr	r3, [pc, #292]	; (8002788 <atualizarEixoY+0x22c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b03      	cmp	r3, #3
 8002666:	d104      	bne.n	8002672 <atualizarEixoY+0x116>
			  actualPoint_2--;
 8002668:	4b48      	ldr	r3, [pc, #288]	; (800278c <atualizarEixoY+0x230>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	1e5a      	subs	r2, r3, #1
 800266e:	4b47      	ldr	r3, [pc, #284]	; (800278c <atualizarEixoY+0x230>)
 8002670:	601a      	str	r2, [r3, #0]
		  }

		  stepStatusOld_2 = 3;
 8002672:	4b45      	ldr	r3, [pc, #276]	; (8002788 <atualizarEixoY+0x22c>)
 8002674:	2203      	movs	r2, #3
 8002676:	601a      	str	r2, [r3, #0]
	  }

	  /* Cálculo PWM */
	  dutyCycle = myABS((double)(setPoint_1 - actualPoint_1)) * (double) P_FRACTION;
 8002678:	4b45      	ldr	r3, [pc, #276]	; (8002790 <atualizarEixoY+0x234>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	4b45      	ldr	r3, [pc, #276]	; (8002794 <atualizarEixoY+0x238>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	0018      	movs	r0, r3
 8002684:	f7fe fa54 	bl	8000b30 <__aeabi_i2d>
 8002688:	0003      	movs	r3, r0
 800268a:	000c      	movs	r4, r1
 800268c:	0018      	movs	r0, r3
 800268e:	0021      	movs	r1, r4
 8002690:	f7ff fe2a 	bl	80022e8 <myABS>
 8002694:	0003      	movs	r3, r0
 8002696:	000c      	movs	r4, r1
 8002698:	0018      	movs	r0, r3
 800269a:	0021      	movs	r1, r4
 800269c:	f7fe fa14 	bl	8000ac8 <__aeabi_d2iz>
 80026a0:	0002      	movs	r2, r0
 80026a2:	4b3d      	ldr	r3, [pc, #244]	; (8002798 <atualizarEixoY+0x23c>)
 80026a4:	601a      	str	r2, [r3, #0]

	  if(dutyCycle < MIN_DUTYCYCLE){
 80026a6:	4b3c      	ldr	r3, [pc, #240]	; (8002798 <atualizarEixoY+0x23c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b63      	cmp	r3, #99	; 0x63
 80026ac:	dc02      	bgt.n	80026b4 <atualizarEixoY+0x158>
		dutyCycle = MIN_DUTYCYCLE;
 80026ae:	4b3a      	ldr	r3, [pc, #232]	; (8002798 <atualizarEixoY+0x23c>)
 80026b0:	2264      	movs	r2, #100	; 0x64
 80026b2:	601a      	str	r2, [r3, #0]
	  }
	  if(dutyCycle > MAX_DUTYCYCLE){
 80026b4:	4b38      	ldr	r3, [pc, #224]	; (8002798 <atualizarEixoY+0x23c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b7f      	cmp	r3, #127	; 0x7f
 80026ba:	dd02      	ble.n	80026c2 <atualizarEixoY+0x166>
		dutyCycle = MAX_DUTYCYCLE;
 80026bc:	4b36      	ldr	r3, [pc, #216]	; (8002798 <atualizarEixoY+0x23c>)
 80026be:	227f      	movs	r2, #127	; 0x7f
 80026c0:	601a      	str	r2, [r3, #0]
	  }

	  if(dutyCycle < MIN_DUTYCYCLE){
 80026c2:	4b35      	ldr	r3, [pc, #212]	; (8002798 <atualizarEixoY+0x23c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b63      	cmp	r3, #99	; 0x63
 80026c8:	dc02      	bgt.n	80026d0 <atualizarEixoY+0x174>
		dutyCycle = MIN_DUTYCYCLE;
 80026ca:	4b33      	ldr	r3, [pc, #204]	; (8002798 <atualizarEixoY+0x23c>)
 80026cc:	2264      	movs	r2, #100	; 0x64
 80026ce:	601a      	str	r2, [r3, #0]
	  }
	  if(dutyCycle > MAX_DUTYCYCLE){
 80026d0:	4b31      	ldr	r3, [pc, #196]	; (8002798 <atualizarEixoY+0x23c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b7f      	cmp	r3, #127	; 0x7f
 80026d6:	dd02      	ble.n	80026de <atualizarEixoY+0x182>
		dutyCycle = MAX_DUTYCYCLE;
 80026d8:	4b2f      	ldr	r3, [pc, #188]	; (8002798 <atualizarEixoY+0x23c>)
 80026da:	227f      	movs	r2, #127	; 0x7f
 80026dc:	601a      	str	r2, [r3, #0]
	  }
	  if(myABS((double)(setPoint_1 - actualPoint_1)) < (double)STEP_MARGIN){
 80026de:	4b2c      	ldr	r3, [pc, #176]	; (8002790 <atualizarEixoY+0x234>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4b2c      	ldr	r3, [pc, #176]	; (8002794 <atualizarEixoY+0x238>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	0018      	movs	r0, r3
 80026ea:	f7fe fa21 	bl	8000b30 <__aeabi_i2d>
 80026ee:	0003      	movs	r3, r0
 80026f0:	000c      	movs	r4, r1
 80026f2:	0018      	movs	r0, r3
 80026f4:	0021      	movs	r1, r4
 80026f6:	f7ff fdf7 	bl	80022e8 <myABS>
 80026fa:	2200      	movs	r2, #0
 80026fc:	4b27      	ldr	r3, [pc, #156]	; (800279c <atualizarEixoY+0x240>)
 80026fe:	f7fd fda5 	bl	800024c <__aeabi_dcmplt>
 8002702:	1e03      	subs	r3, r0, #0
 8002704:	d00f      	beq.n	8002726 <atualizarEixoY+0x1ca>
			/* Desliga o motor pras duas direções */
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002706:	4b26      	ldr	r3, [pc, #152]	; (80027a0 <atualizarEixoY+0x244>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	3334      	adds	r3, #52	; 0x34
 800270c:	3304      	adds	r3, #4
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8002712:	4b23      	ldr	r3, [pc, #140]	; (80027a0 <atualizarEixoY+0x244>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	3334      	adds	r3, #52	; 0x34
 8002718:	330c      	adds	r3, #12
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
			isDone = 1;
 800271e:	4b21      	ldr	r3, [pc, #132]	; (80027a4 <atualizarEixoY+0x248>)
 8002720:	2201      	movs	r2, #1
 8002722:	701a      	strb	r2, [r3, #0]
			/* Gira na outra direção */
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 255 - dutyCycle);
		}
	  }
}
 8002724:	e029      	b.n	800277a <atualizarEixoY+0x21e>
		if(actualPoint_2 < setPoint_2){
 8002726:	4b19      	ldr	r3, [pc, #100]	; (800278c <atualizarEixoY+0x230>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	4b1f      	ldr	r3, [pc, #124]	; (80027a8 <atualizarEixoY+0x24c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	da0e      	bge.n	8002750 <atualizarEixoY+0x1f4>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 255 - dutyCycle);
 8002732:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <atualizarEixoY+0x244>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	3334      	adds	r3, #52	; 0x34
 8002738:	3304      	adds	r3, #4
 800273a:	4a17      	ldr	r2, [pc, #92]	; (8002798 <atualizarEixoY+0x23c>)
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	21ff      	movs	r1, #255	; 0xff
 8002740:	1a8a      	subs	r2, r1, r2
 8002742:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8002744:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <atualizarEixoY+0x244>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	3334      	adds	r3, #52	; 0x34
 800274a:	330c      	adds	r3, #12
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
		if(actualPoint_2 > setPoint_2){
 8002750:	4b0e      	ldr	r3, [pc, #56]	; (800278c <atualizarEixoY+0x230>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <atualizarEixoY+0x24c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	dd0e      	ble.n	800277a <atualizarEixoY+0x21e>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800275c:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <atualizarEixoY+0x244>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	3334      	adds	r3, #52	; 0x34
 8002762:	3304      	adds	r3, #4
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 255 - dutyCycle);
 8002768:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <atualizarEixoY+0x244>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	3334      	adds	r3, #52	; 0x34
 800276e:	330c      	adds	r3, #12
 8002770:	4a09      	ldr	r2, [pc, #36]	; (8002798 <atualizarEixoY+0x23c>)
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	21ff      	movs	r1, #255	; 0xff
 8002776:	1a8a      	subs	r2, r1, r2
 8002778:	601a      	str	r2, [r3, #0]
}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	46bd      	mov	sp, r7
 800277e:	bdb0      	pop	{r4, r5, r7, pc}
 8002780:	20000152 	.word	0x20000152
 8002784:	20000153 	.word	0x20000153
 8002788:	2000014c 	.word	0x2000014c
 800278c:	20000164 	.word	0x20000164
 8002790:	20000158 	.word	0x20000158
 8002794:	20000160 	.word	0x20000160
 8002798:	20000154 	.word	0x20000154
 800279c:	40240000 	.word	0x40240000
 80027a0:	20000170 	.word	0x20000170
 80027a4:	20000168 	.word	0x20000168
 80027a8:	2000015c 	.word	0x2000015c

080027ac <fillLineWithBraille>:

void fillLineWithBraille( unsigned char *linhaBraille, unsigned char line, unsigned char letter){
 80027ac:	b590      	push	{r4, r7, lr}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	0008      	movs	r0, r1
 80027b6:	0011      	movs	r1, r2
 80027b8:	1cfb      	adds	r3, r7, #3
 80027ba:	1c02      	adds	r2, r0, #0
 80027bc:	701a      	strb	r2, [r3, #0]
 80027be:	1cbb      	adds	r3, r7, #2
 80027c0:	1c0a      	adds	r2, r1, #0
 80027c2:	701a      	strb	r2, [r3, #0]

	if(letter>=48 && letter<=57){
 80027c4:	1cbb      	adds	r3, r7, #2
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b2f      	cmp	r3, #47	; 0x2f
 80027ca:	d921      	bls.n	8002810 <fillLineWithBraille+0x64>
 80027cc:	1cbb      	adds	r3, r7, #2
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b39      	cmp	r3, #57	; 0x39
 80027d2:	d81d      	bhi.n	8002810 <fillLineWithBraille+0x64>
		for(int i=0;i<4;i++){
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	e016      	b.n	8002808 <fillLineWithBraille+0x5c>
			linhaBraille[i]=numerosBraille[letter-48][line][i];
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	18d1      	adds	r1, r2, r3
 80027e0:	1cbb      	adds	r3, r7, #2
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	3b30      	subs	r3, #48	; 0x30
 80027e6:	001a      	movs	r2, r3
 80027e8:	1cfb      	adds	r3, r7, #3
 80027ea:	781c      	ldrb	r4, [r3, #0]
 80027ec:	482c      	ldr	r0, [pc, #176]	; (80028a0 <fillLineWithBraille+0xf4>)
 80027ee:	0013      	movs	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	189b      	adds	r3, r3, r2
 80027f4:	191b      	adds	r3, r3, r4
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	18c2      	adds	r2, r0, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	18d3      	adds	r3, r2, r3
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	700b      	strb	r3, [r1, #0]
		for(int i=0;i<4;i++){
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	3301      	adds	r3, #1
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b03      	cmp	r3, #3
 800280c:	dde5      	ble.n	80027da <fillLineWithBraille+0x2e>
 800280e:	e042      	b.n	8002896 <fillLineWithBraille+0xea>
		}
	}
	else{
		if(letter>=65 && letter<=90){
 8002810:	1cbb      	adds	r3, r7, #2
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b40      	cmp	r3, #64	; 0x40
 8002816:	d908      	bls.n	800282a <fillLineWithBraille+0x7e>
 8002818:	1cbb      	adds	r3, r7, #2
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b5a      	cmp	r3, #90	; 0x5a
 800281e:	d804      	bhi.n	800282a <fillLineWithBraille+0x7e>
			letter+=32;
 8002820:	1cbb      	adds	r3, r7, #2
 8002822:	1cba      	adds	r2, r7, #2
 8002824:	7812      	ldrb	r2, [r2, #0]
 8002826:	3220      	adds	r2, #32
 8002828:	701a      	strb	r2, [r3, #0]
		}

		for(int i=0;i<2;i++){
 800282a:	2300      	movs	r3, #0
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	e027      	b.n	8002880 <fillLineWithBraille+0xd4>
			if(letter>=97 && letter<=122){
 8002830:	1cbb      	adds	r3, r7, #2
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b60      	cmp	r3, #96	; 0x60
 8002836:	d917      	bls.n	8002868 <fillLineWithBraille+0xbc>
 8002838:	1cbb      	adds	r3, r7, #2
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b7a      	cmp	r3, #122	; 0x7a
 800283e:	d813      	bhi.n	8002868 <fillLineWithBraille+0xbc>
				linhaBraille[i]=letrasBraille[letter-97][line][i];
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	18d1      	adds	r1, r2, r3
 8002846:	1cbb      	adds	r3, r7, #2
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	3b61      	subs	r3, #97	; 0x61
 800284c:	001a      	movs	r2, r3
 800284e:	1cfb      	adds	r3, r7, #3
 8002850:	781c      	ldrb	r4, [r3, #0]
 8002852:	4814      	ldr	r0, [pc, #80]	; (80028a4 <fillLineWithBraille+0xf8>)
 8002854:	0013      	movs	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	189b      	adds	r3, r3, r2
 800285a:	191b      	adds	r3, r3, r4
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	18c2      	adds	r2, r0, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	18d3      	adds	r3, r2, r3
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	700b      	strb	r3, [r1, #0]
			}
			if(letter==32){
 8002868:	1cbb      	adds	r3, r7, #2
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b20      	cmp	r3, #32
 800286e:	d104      	bne.n	800287a <fillLineWithBraille+0xce>
				linhaBraille[i]=0;
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	18d3      	adds	r3, r2, r3
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<2;i++){
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	3301      	adds	r3, #1
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b01      	cmp	r3, #1
 8002884:	ddd4      	ble.n	8002830 <fillLineWithBraille+0x84>
			}
		}
		linhaBraille[2]='\0';
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3302      	adds	r3, #2
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
		linhaBraille[3]='\0';
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3303      	adds	r3, #3
 8002892:	2200      	movs	r2, #0
 8002894:	701a      	strb	r2, [r3, #0]


	}
}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	46bd      	mov	sp, r7
 800289a:	b005      	add	sp, #20
 800289c:	bd90      	pop	{r4, r7, pc}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	200000ac 	.word	0x200000ac
 80028a4:	20000004 	.word	0x20000004

080028a8 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028ae:	f7fe f99f 	bl	8000bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028b2:	f000 f903 	bl	8002abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028b6:	f000 faed 	bl	8002e94 <MX_GPIO_Init>
  MX_TIM14_Init();
 80028ba:	f000 fa91 	bl	8002de0 <MX_TIM14_Init>
  MX_TIM3_Init();
 80028be:	f000 fa09 	bl	8002cd4 <MX_TIM3_Init>
  MX_TIM1_Init();
 80028c2:	f000 f955 	bl	8002b70 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80028c6:	4b6b      	ldr	r3, [pc, #428]	; (8002a74 <main+0x1cc>)
 80028c8:	2104      	movs	r1, #4
 80028ca:	0018      	movs	r0, r3
 80028cc:	f7ff f8e0 	bl	8001a90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80028d0:	4b68      	ldr	r3, [pc, #416]	; (8002a74 <main+0x1cc>)
 80028d2:	2108      	movs	r1, #8
 80028d4:	0018      	movs	r0, r3
 80028d6:	f7ff f8db 	bl	8001a90 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80028da:	4b67      	ldr	r3, [pc, #412]	; (8002a78 <main+0x1d0>)
 80028dc:	2100      	movs	r1, #0
 80028de:	0018      	movs	r0, r3
 80028e0:	f7ff f8d6 	bl	8001a90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80028e4:	4b64      	ldr	r3, [pc, #400]	; (8002a78 <main+0x1d0>)
 80028e6:	2104      	movs	r1, #4
 80028e8:	0018      	movs	r0, r3
 80028ea:	f7ff f8d1 	bl	8001a90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80028ee:	4b62      	ldr	r3, [pc, #392]	; (8002a78 <main+0x1d0>)
 80028f0:	210c      	movs	r1, #12
 80028f2:	0018      	movs	r0, r3
 80028f4:	f7ff f8cc 	bl	8001a90 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80028f8:	4b60      	ldr	r3, [pc, #384]	; (8002a7c <main+0x1d4>)
 80028fa:	2100      	movs	r1, #0
 80028fc:	0018      	movs	r0, r3
 80028fe:	f7ff f8c7 	bl	8001a90 <HAL_TIM_PWM_Start>

  /* Motor 1 - x*/
	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, 0);
 8002902:	4b5e      	ldr	r3, [pc, #376]	; (8002a7c <main+0x1d4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2200      	movs	r2, #0
 8002908:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800290a:	4b5b      	ldr	r3, [pc, #364]	; (8002a78 <main+0x1d0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2200      	movs	r2, #0
 8002910:	635a      	str	r2, [r3, #52]	; 0x34

	/* Motor 2 */
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002912:	4b59      	ldr	r3, [pc, #356]	; (8002a78 <main+0x1d0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	3334      	adds	r3, #52	; 0x34
 8002918:	3304      	adds	r3, #4
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 800291e:	4b56      	ldr	r3, [pc, #344]	; (8002a78 <main+0x1d0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	3334      	adds	r3, #52	; 0x34
 8002924:	330c      	adds	r3, #12
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]

	/* Motor 3 */
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800292a:	4b52      	ldr	r3, [pc, #328]	; (8002a74 <main+0x1cc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	3334      	adds	r3, #52	; 0x34
 8002930:	3304      	adds	r3, #4
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8002936:	4b4f      	ldr	r3, [pc, #316]	; (8002a74 <main+0x1cc>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	3334      	adds	r3, #52	; 0x34
 800293c:	3308      	adds	r3, #8
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]

	sensorStatus_1_A =  HAL_GPIO_ReadPin(SENSOR_1_A_PORT, SENSOR_1_A_PIN);
 8002942:	4b4f      	ldr	r3, [pc, #316]	; (8002a80 <main+0x1d8>)
 8002944:	2101      	movs	r1, #1
 8002946:	0018      	movs	r0, r3
 8002948:	f7fe fbe8 	bl	800111c <HAL_GPIO_ReadPin>
 800294c:	0003      	movs	r3, r0
 800294e:	001a      	movs	r2, r3
 8002950:	4b4c      	ldr	r3, [pc, #304]	; (8002a84 <main+0x1dc>)
 8002952:	701a      	strb	r2, [r3, #0]
	sensorStatus_1_B =  HAL_GPIO_ReadPin(SENSOR_1_B_PORT, SENSOR_1_B_PIN);
 8002954:	4b4a      	ldr	r3, [pc, #296]	; (8002a80 <main+0x1d8>)
 8002956:	2102      	movs	r1, #2
 8002958:	0018      	movs	r0, r3
 800295a:	f7fe fbdf 	bl	800111c <HAL_GPIO_ReadPin>
 800295e:	0003      	movs	r3, r0
 8002960:	001a      	movs	r2, r3
 8002962:	4b49      	ldr	r3, [pc, #292]	; (8002a88 <main+0x1e0>)
 8002964:	701a      	strb	r2, [r3, #0]

	sensorStatus_2_A =  HAL_GPIO_ReadPin(SENSOR_2_A_PORT, SENSOR_2_A_PIN);
 8002966:	2390      	movs	r3, #144	; 0x90
 8002968:	05db      	lsls	r3, r3, #23
 800296a:	2104      	movs	r1, #4
 800296c:	0018      	movs	r0, r3
 800296e:	f7fe fbd5 	bl	800111c <HAL_GPIO_ReadPin>
 8002972:	0003      	movs	r3, r0
 8002974:	001a      	movs	r2, r3
 8002976:	4b45      	ldr	r3, [pc, #276]	; (8002a8c <main+0x1e4>)
 8002978:	701a      	strb	r2, [r3, #0]
	sensorStatus_2_B =  HAL_GPIO_ReadPin(SENSOR_2_B_PORT, SENSOR_2_B_PIN);
 800297a:	2390      	movs	r3, #144	; 0x90
 800297c:	05db      	lsls	r3, r3, #23
 800297e:	2108      	movs	r1, #8
 8002980:	0018      	movs	r0, r3
 8002982:	f7fe fbcb 	bl	800111c <HAL_GPIO_ReadPin>
 8002986:	0003      	movs	r3, r0
 8002988:	001a      	movs	r2, r3
 800298a:	4b41      	ldr	r3, [pc, #260]	; (8002a90 <main+0x1e8>)
 800298c:	701a      	strb	r2, [r3, #0]

	stepStatusOld_1 = 0;
 800298e:	4b41      	ldr	r3, [pc, #260]	; (8002a94 <main+0x1ec>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
	stepStatusOld_2 = 0;
 8002994:	4b40      	ldr	r3, [pc, #256]	; (8002a98 <main+0x1f0>)
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]

	//memset(linhaBraille, 0, sizeof(linhaBraille));
	memset(letterBraille, 0, sizeof(letterBraille));
 800299a:	4b40      	ldr	r3, [pc, #256]	; (8002a9c <main+0x1f4>)
 800299c:	2204      	movs	r2, #4
 800299e:	2100      	movs	r1, #0
 80029a0:	0018      	movs	r0, r3
 80029a2:	f000 fca5 	bl	80032f0 <memset>
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */

	/* Programa leitura do teclado */
	if(pressedEnter){
 80029a6:	4b3e      	ldr	r3, [pc, #248]	; (8002aa0 <main+0x1f8>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0fb      	beq.n	80029a6 <main+0xfe>
		for(int j=0;j<3;j++){
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	e05a      	b.n	8002a6a <main+0x1c2>
		//Linhas das matrizes
			for(int i=0;i<MAX_CARACTERES;i++){
 80029b4:	2300      	movs	r3, #0
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	e03e      	b.n	8002a38 <main+0x190>
				//Recebe os pontos da linha para o caractere atual
				fillLineWithBraille(letterBraille, j,linhaBraille[i]);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	b2d9      	uxtb	r1, r3
 80029be:	4a39      	ldr	r2, [pc, #228]	; (8002aa4 <main+0x1fc>)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	18d3      	adds	r3, r2, r3
 80029c4:	781a      	ldrb	r2, [r3, #0]
 80029c6:	4b35      	ldr	r3, [pc, #212]	; (8002a9c <main+0x1f4>)
 80029c8:	0018      	movs	r0, r3
 80029ca:	f7ff feef 	bl	80027ac <fillLineWithBraille>

				//Percorre os 4 bits no máximo para cada caractere
				for(int x = 0; x < 4; ++x){
 80029ce:	2300      	movs	r3, #0
 80029d0:	607b      	str	r3, [r7, #4]
 80029d2:	e018      	b.n	8002a06 <main+0x15e>
					if(letterBraille[x] == '\0'){
 80029d4:	4a31      	ldr	r2, [pc, #196]	; (8002a9c <main+0x1f4>)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	18d3      	adds	r3, r2, r3
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d016      	beq.n	8002a0e <main+0x166>
						break;
					}else if(letterBraille[x] == 1){
						//Furar
					}
					setPoint_1 += DELTA_COL_LIN;
 80029e0:	4b31      	ldr	r3, [pc, #196]	; (8002aa8 <main+0x200>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a31      	ldr	r2, [pc, #196]	; (8002aac <main+0x204>)
 80029e6:	189a      	adds	r2, r3, r2
 80029e8:	4b2f      	ldr	r3, [pc, #188]	; (8002aa8 <main+0x200>)
 80029ea:	601a      	str	r2, [r3, #0]
					while(isDone == 0){
 80029ec:	e001      	b.n	80029f2 <main+0x14a>
						atualizarEixoX();
 80029ee:	f7ff fc9b 	bl	8002328 <atualizarEixoX>
					while(isDone == 0){
 80029f2:	4b2f      	ldr	r3, [pc, #188]	; (8002ab0 <main+0x208>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f9      	beq.n	80029ee <main+0x146>
					}
					isDone = 0;
 80029fa:	4b2d      	ldr	r3, [pc, #180]	; (8002ab0 <main+0x208>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
				for(int x = 0; x < 4; ++x){
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3301      	adds	r3, #1
 8002a04:	607b      	str	r3, [r7, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	dde3      	ble.n	80029d4 <main+0x12c>
 8002a0c:	e000      	b.n	8002a10 <main+0x168>
						break;
 8002a0e:	46c0      	nop			; (mov r8, r8)
				}

				setPoint_1 += DELTA_CHAR_H;
 8002a10:	4b25      	ldr	r3, [pc, #148]	; (8002aa8 <main+0x200>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	22fe      	movs	r2, #254	; 0xfe
 8002a16:	0092      	lsls	r2, r2, #2
 8002a18:	189a      	adds	r2, r3, r2
 8002a1a:	4b23      	ldr	r3, [pc, #140]	; (8002aa8 <main+0x200>)
 8002a1c:	601a      	str	r2, [r3, #0]
				while(isDone == 0){
 8002a1e:	e001      	b.n	8002a24 <main+0x17c>
					atualizarEixoX();
 8002a20:	f7ff fc82 	bl	8002328 <atualizarEixoX>
				while(isDone == 0){
 8002a24:	4b22      	ldr	r3, [pc, #136]	; (8002ab0 <main+0x208>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f9      	beq.n	8002a20 <main+0x178>
				}
				isDone = 0;
 8002a2c:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <main+0x208>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<MAX_CARACTERES;i++){
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	3301      	adds	r3, #1
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	ddbd      	ble.n	80029ba <main+0x112>
			}

			setPoint_2 += DELTA_CHAR_V;
 8002a3e:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <main+0x20c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1d      	ldr	r2, [pc, #116]	; (8002ab8 <main+0x210>)
 8002a44:	189a      	adds	r2, r3, r2
 8002a46:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <main+0x20c>)
 8002a48:	601a      	str	r2, [r3, #0]
			while(isDone == 0){
 8002a4a:	e001      	b.n	8002a50 <main+0x1a8>
				atualizarEixoY();
 8002a4c:	f7ff fd86 	bl	800255c <atualizarEixoY>
			while(isDone == 0){
 8002a50:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <main+0x208>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f9      	beq.n	8002a4c <main+0x1a4>
			}
			isDone = 0;
 8002a58:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <main+0x208>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	701a      	strb	r2, [r3, #0]

			pressedEnter = 0;
 8002a5e:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <main+0x1f8>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	701a      	strb	r2, [r3, #0]
		for(int j=0;j<3;j++){
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	3301      	adds	r3, #1
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	dda1      	ble.n	80029b4 <main+0x10c>
	if(pressedEnter){
 8002a70:	e799      	b.n	80029a6 <main+0xfe>
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	200001b0 	.word	0x200001b0
 8002a78:	20000170 	.word	0x20000170
 8002a7c:	200001f4 	.word	0x200001f4
 8002a80:	48001400 	.word	0x48001400
 8002a84:	20000150 	.word	0x20000150
 8002a88:	20000151 	.word	0x20000151
 8002a8c:	20000152 	.word	0x20000152
 8002a90:	20000153 	.word	0x20000153
 8002a94:	20000148 	.word	0x20000148
 8002a98:	2000014c 	.word	0x2000014c
 8002a9c:	200001f0 	.word	0x200001f0
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	20000124 	.word	0x20000124
 8002aa8:	20000158 	.word	0x20000158
 8002aac:	000003fd 	.word	0x000003fd
 8002ab0:	20000168 	.word	0x20000168
 8002ab4:	2000015c 	.word	0x2000015c
 8002ab8:	00000403 	.word	0x00000403

08002abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b090      	sub	sp, #64	; 0x40
 8002ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ac2:	2310      	movs	r3, #16
 8002ac4:	18fb      	adds	r3, r7, r3
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002aca:	2310      	movs	r3, #16
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	2201      	movs	r2, #1
 8002ad0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002ad2:	2310      	movs	r3, #16
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	2210      	movs	r2, #16
 8002ad8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002ada:	2310      	movs	r3, #16
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	2200      	movs	r2, #0
 8002ae0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ae2:	2310      	movs	r3, #16
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f7fe fb36 	bl	8001158 <HAL_RCC_OscConfig>
 8002aec:	1e03      	subs	r3, r0, #0
 8002aee:	d005      	beq.n	8002afc <SystemClock_Config+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002af0:	4a1c      	ldr	r2, [pc, #112]	; (8002b64 <SystemClock_Config+0xa8>)
 8002af2:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <SystemClock_Config+0xac>)
 8002af4:	0011      	movs	r1, r2
 8002af6:	0018      	movs	r0, r3
 8002af8:	f000 fa28 	bl	8002f4c <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002afc:	003b      	movs	r3, r7
 8002afe:	2207      	movs	r2, #7
 8002b00:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002b02:	003b      	movs	r3, r7
 8002b04:	2200      	movs	r2, #0
 8002b06:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b08:	003b      	movs	r3, r7
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b0e:	003b      	movs	r3, r7
 8002b10:	2200      	movs	r2, #0
 8002b12:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b14:	003b      	movs	r3, r7
 8002b16:	2100      	movs	r1, #0
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f7fe fe11 	bl	8001740 <HAL_RCC_ClockConfig>
 8002b1e:	1e03      	subs	r3, r0, #0
 8002b20:	d005      	beq.n	8002b2e <SystemClock_Config+0x72>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002b22:	4a12      	ldr	r2, [pc, #72]	; (8002b6c <SystemClock_Config+0xb0>)
 8002b24:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <SystemClock_Config+0xac>)
 8002b26:	0011      	movs	r1, r2
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f000 fa0f 	bl	8002f4c <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002b2e:	f7fe ff4d 	bl	80019cc <HAL_RCC_GetHCLKFreq>
 8002b32:	0002      	movs	r2, r0
 8002b34:	23fa      	movs	r3, #250	; 0xfa
 8002b36:	0099      	lsls	r1, r3, #2
 8002b38:	0010      	movs	r0, r2
 8002b3a:	f7fd fae5 	bl	8000108 <__udivsi3>
 8002b3e:	0003      	movs	r3, r0
 8002b40:	0018      	movs	r0, r3
 8002b42:	f7fe f943 	bl	8000dcc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002b46:	2004      	movs	r0, #4
 8002b48:	f7fe f94e 	bl	8000de8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	425b      	negs	r3, r3
 8002b50:	2200      	movs	r2, #0
 8002b52:	2100      	movs	r1, #0
 8002b54:	0018      	movs	r0, r3
 8002b56:	f7fe f923 	bl	8000da0 <HAL_NVIC_SetPriority>
}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b010      	add	sp, #64	; 0x40
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	0000020a 	.word	0x0000020a
 8002b68:	08003338 	.word	0x08003338
 8002b6c:	00000217 	.word	0x00000217

08002b70 <MX_TIM1_Init>:

/* TIM1 init function */
static void MX_TIM1_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b090      	sub	sp, #64	; 0x40
 8002b74:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 8002b76:	4b4f      	ldr	r3, [pc, #316]	; (8002cb4 <MX_TIM1_Init+0x144>)
 8002b78:	4a4f      	ldr	r2, [pc, #316]	; (8002cb8 <MX_TIM1_Init+0x148>)
 8002b7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 8002b7c:	4b4d      	ldr	r3, [pc, #308]	; (8002cb4 <MX_TIM1_Init+0x144>)
 8002b7e:	2204      	movs	r2, #4
 8002b80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b82:	4b4c      	ldr	r3, [pc, #304]	; (8002cb4 <MX_TIM1_Init+0x144>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8002b88:	4b4a      	ldr	r3, [pc, #296]	; (8002cb4 <MX_TIM1_Init+0x144>)
 8002b8a:	22ff      	movs	r2, #255	; 0xff
 8002b8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b8e:	4b49      	ldr	r3, [pc, #292]	; (8002cb4 <MX_TIM1_Init+0x144>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b94:	4b47      	ldr	r3, [pc, #284]	; (8002cb4 <MX_TIM1_Init+0x144>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b9a:	4b46      	ldr	r3, [pc, #280]	; (8002cb4 <MX_TIM1_Init+0x144>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ba0:	4b44      	ldr	r3, [pc, #272]	; (8002cb4 <MX_TIM1_Init+0x144>)
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f7fe ff48 	bl	8001a38 <HAL_TIM_PWM_Init>
 8002ba8:	1e03      	subs	r3, r0, #0
 8002baa:	d005      	beq.n	8002bb8 <MX_TIM1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002bac:	4a43      	ldr	r2, [pc, #268]	; (8002cbc <MX_TIM1_Init+0x14c>)
 8002bae:	4b44      	ldr	r3, [pc, #272]	; (8002cc0 <MX_TIM1_Init+0x150>)
 8002bb0:	0011      	movs	r1, r2
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f000 f9ca 	bl	8002f4c <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bb8:	2338      	movs	r3, #56	; 0x38
 8002bba:	18fb      	adds	r3, r7, r3
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc0:	2338      	movs	r3, #56	; 0x38
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bc8:	2338      	movs	r3, #56	; 0x38
 8002bca:	18fa      	adds	r2, r7, r3
 8002bcc:	4b39      	ldr	r3, [pc, #228]	; (8002cb4 <MX_TIM1_Init+0x144>)
 8002bce:	0011      	movs	r1, r2
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f7ff fad8 	bl	8002186 <HAL_TIMEx_MasterConfigSynchronization>
 8002bd6:	1e03      	subs	r3, r0, #0
 8002bd8:	d005      	beq.n	8002be6 <MX_TIM1_Init+0x76>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002bda:	4a3a      	ldr	r2, [pc, #232]	; (8002cc4 <MX_TIM1_Init+0x154>)
 8002bdc:	4b38      	ldr	r3, [pc, #224]	; (8002cc0 <MX_TIM1_Init+0x150>)
 8002bde:	0011      	movs	r1, r2
 8002be0:	0018      	movs	r0, r3
 8002be2:	f000 f9b3 	bl	8002f4c <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002be6:	231c      	movs	r3, #28
 8002be8:	18fb      	adds	r3, r7, r3
 8002bea:	2260      	movs	r2, #96	; 0x60
 8002bec:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002bee:	231c      	movs	r3, #28
 8002bf0:	18fb      	adds	r3, r7, r3
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bf6:	231c      	movs	r3, #28
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bfe:	231c      	movs	r3, #28
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	2200      	movs	r2, #0
 8002c04:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c06:	231c      	movs	r3, #28
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c0e:	231c      	movs	r3, #28
 8002c10:	18fb      	adds	r3, r7, r3
 8002c12:	2200      	movs	r2, #0
 8002c14:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c16:	231c      	movs	r3, #28
 8002c18:	18fb      	adds	r3, r7, r3
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c1e:	231c      	movs	r3, #28
 8002c20:	18f9      	adds	r1, r7, r3
 8002c22:	4b24      	ldr	r3, [pc, #144]	; (8002cb4 <MX_TIM1_Init+0x144>)
 8002c24:	2204      	movs	r2, #4
 8002c26:	0018      	movs	r0, r3
 8002c28:	f7fe ff6e 	bl	8001b08 <HAL_TIM_PWM_ConfigChannel>
 8002c2c:	1e03      	subs	r3, r0, #0
 8002c2e:	d005      	beq.n	8002c3c <MX_TIM1_Init+0xcc>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002c30:	4a25      	ldr	r2, [pc, #148]	; (8002cc8 <MX_TIM1_Init+0x158>)
 8002c32:	4b23      	ldr	r3, [pc, #140]	; (8002cc0 <MX_TIM1_Init+0x150>)
 8002c34:	0011      	movs	r1, r2
 8002c36:	0018      	movs	r0, r3
 8002c38:	f000 f988 	bl	8002f4c <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c3c:	231c      	movs	r3, #28
 8002c3e:	18f9      	adds	r1, r7, r3
 8002c40:	4b1c      	ldr	r3, [pc, #112]	; (8002cb4 <MX_TIM1_Init+0x144>)
 8002c42:	2208      	movs	r2, #8
 8002c44:	0018      	movs	r0, r3
 8002c46:	f7fe ff5f 	bl	8001b08 <HAL_TIM_PWM_ConfigChannel>
 8002c4a:	1e03      	subs	r3, r0, #0
 8002c4c:	d005      	beq.n	8002c5a <MX_TIM1_Init+0xea>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002c4e:	4a1f      	ldr	r2, [pc, #124]	; (8002ccc <MX_TIM1_Init+0x15c>)
 8002c50:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <MX_TIM1_Init+0x150>)
 8002c52:	0011      	movs	r1, r2
 8002c54:	0018      	movs	r0, r3
 8002c56:	f000 f979 	bl	8002f4c <_Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c5a:	003b      	movs	r3, r7
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c60:	003b      	movs	r3, r7
 8002c62:	2200      	movs	r2, #0
 8002c64:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c66:	003b      	movs	r3, r7
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c6c:	003b      	movs	r3, r7
 8002c6e:	2200      	movs	r2, #0
 8002c70:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c72:	003b      	movs	r3, r7
 8002c74:	2200      	movs	r2, #0
 8002c76:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c78:	003b      	movs	r3, r7
 8002c7a:	2280      	movs	r2, #128	; 0x80
 8002c7c:	0192      	lsls	r2, r2, #6
 8002c7e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c80:	003b      	movs	r3, r7
 8002c82:	2200      	movs	r2, #0
 8002c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c86:	003a      	movs	r2, r7
 8002c88:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <MX_TIM1_Init+0x144>)
 8002c8a:	0011      	movs	r1, r2
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f7ff fabd 	bl	800220c <HAL_TIMEx_ConfigBreakDeadTime>
 8002c92:	1e03      	subs	r3, r0, #0
 8002c94:	d005      	beq.n	8002ca2 <MX_TIM1_Init+0x132>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002c96:	4a0e      	ldr	r2, [pc, #56]	; (8002cd0 <MX_TIM1_Init+0x160>)
 8002c98:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <MX_TIM1_Init+0x150>)
 8002c9a:	0011      	movs	r1, r2
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f000 f955 	bl	8002f4c <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8002ca2:	4b04      	ldr	r3, [pc, #16]	; (8002cb4 <MX_TIM1_Init+0x144>)
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f000 f9e3 	bl	8003070 <HAL_TIM_MspPostInit>

}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b010      	add	sp, #64	; 0x40
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	200001b0 	.word	0x200001b0
 8002cb8:	40012c00 	.word	0x40012c00
 8002cbc:	00000237 	.word	0x00000237
 8002cc0:	08003338 	.word	0x08003338
 8002cc4:	0000023e 	.word	0x0000023e
 8002cc8:	0000024a 	.word	0x0000024a
 8002ccc:	0000024f 	.word	0x0000024f
 8002cd0:	0000025b 	.word	0x0000025b

08002cd4 <MX_TIM3_Init>:

/* TIM3 init function */
static void MX_TIM3_Init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08a      	sub	sp, #40	; 0x28
 8002cd8:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
 8002cda:	4b3a      	ldr	r3, [pc, #232]	; (8002dc4 <MX_TIM3_Init+0xf0>)
 8002cdc:	4a3a      	ldr	r2, [pc, #232]	; (8002dc8 <MX_TIM3_Init+0xf4>)
 8002cde:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8002ce0:	4b38      	ldr	r3, [pc, #224]	; (8002dc4 <MX_TIM3_Init+0xf0>)
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce6:	4b37      	ldr	r3, [pc, #220]	; (8002dc4 <MX_TIM3_Init+0xf0>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8002cec:	4b35      	ldr	r3, [pc, #212]	; (8002dc4 <MX_TIM3_Init+0xf0>)
 8002cee:	22ff      	movs	r2, #255	; 0xff
 8002cf0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cf2:	4b34      	ldr	r3, [pc, #208]	; (8002dc4 <MX_TIM3_Init+0xf0>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cf8:	4b32      	ldr	r3, [pc, #200]	; (8002dc4 <MX_TIM3_Init+0xf0>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002cfe:	4b31      	ldr	r3, [pc, #196]	; (8002dc4 <MX_TIM3_Init+0xf0>)
 8002d00:	0018      	movs	r0, r3
 8002d02:	f7fe fe99 	bl	8001a38 <HAL_TIM_PWM_Init>
 8002d06:	1e03      	subs	r3, r0, #0
 8002d08:	d005      	beq.n	8002d16 <MX_TIM3_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002d0a:	4a30      	ldr	r2, [pc, #192]	; (8002dcc <MX_TIM3_Init+0xf8>)
 8002d0c:	4b30      	ldr	r3, [pc, #192]	; (8002dd0 <MX_TIM3_Init+0xfc>)
 8002d0e:	0011      	movs	r1, r2
 8002d10:	0018      	movs	r0, r3
 8002d12:	f000 f91b 	bl	8002f4c <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d16:	2320      	movs	r3, #32
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d1e:	2320      	movs	r3, #32
 8002d20:	18fb      	adds	r3, r7, r3
 8002d22:	2200      	movs	r2, #0
 8002d24:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d26:	2320      	movs	r3, #32
 8002d28:	18fa      	adds	r2, r7, r3
 8002d2a:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <MX_TIM3_Init+0xf0>)
 8002d2c:	0011      	movs	r1, r2
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f7ff fa29 	bl	8002186 <HAL_TIMEx_MasterConfigSynchronization>
 8002d34:	1e03      	subs	r3, r0, #0
 8002d36:	d006      	beq.n	8002d46 <MX_TIM3_Init+0x72>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002d38:	239e      	movs	r3, #158	; 0x9e
 8002d3a:	009a      	lsls	r2, r3, #2
 8002d3c:	4b24      	ldr	r3, [pc, #144]	; (8002dd0 <MX_TIM3_Init+0xfc>)
 8002d3e:	0011      	movs	r1, r2
 8002d40:	0018      	movs	r0, r3
 8002d42:	f000 f903 	bl	8002f4c <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d46:	1d3b      	adds	r3, r7, #4
 8002d48:	2260      	movs	r2, #96	; 0x60
 8002d4a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002d4c:	1d3b      	adds	r3, r7, #4
 8002d4e:	2200      	movs	r2, #0
 8002d50:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d52:	1d3b      	adds	r3, r7, #4
 8002d54:	2200      	movs	r2, #0
 8002d56:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d58:	1d3b      	adds	r3, r7, #4
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d5e:	1d39      	adds	r1, r7, #4
 8002d60:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <MX_TIM3_Init+0xf0>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	0018      	movs	r0, r3
 8002d66:	f7fe fecf 	bl	8001b08 <HAL_TIM_PWM_ConfigChannel>
 8002d6a:	1e03      	subs	r3, r0, #0
 8002d6c:	d005      	beq.n	8002d7a <MX_TIM3_Init+0xa6>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002d6e:	4a19      	ldr	r2, [pc, #100]	; (8002dd4 <MX_TIM3_Init+0x100>)
 8002d70:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <MX_TIM3_Init+0xfc>)
 8002d72:	0011      	movs	r1, r2
 8002d74:	0018      	movs	r0, r3
 8002d76:	f000 f8e9 	bl	8002f4c <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d7a:	1d39      	adds	r1, r7, #4
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <MX_TIM3_Init+0xf0>)
 8002d7e:	2204      	movs	r2, #4
 8002d80:	0018      	movs	r0, r3
 8002d82:	f7fe fec1 	bl	8001b08 <HAL_TIM_PWM_ConfigChannel>
 8002d86:	1e03      	subs	r3, r0, #0
 8002d88:	d005      	beq.n	8002d96 <MX_TIM3_Init+0xc2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002d8a:	4a13      	ldr	r2, [pc, #76]	; (8002dd8 <MX_TIM3_Init+0x104>)
 8002d8c:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <MX_TIM3_Init+0xfc>)
 8002d8e:	0011      	movs	r1, r2
 8002d90:	0018      	movs	r0, r3
 8002d92:	f000 f8db 	bl	8002f4c <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d96:	1d39      	adds	r1, r7, #4
 8002d98:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <MX_TIM3_Init+0xf0>)
 8002d9a:	220c      	movs	r2, #12
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f7fe feb3 	bl	8001b08 <HAL_TIM_PWM_ConfigChannel>
 8002da2:	1e03      	subs	r3, r0, #0
 8002da4:	d005      	beq.n	8002db2 <MX_TIM3_Init+0xde>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002da6:	4a0d      	ldr	r2, [pc, #52]	; (8002ddc <MX_TIM3_Init+0x108>)
 8002da8:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <MX_TIM3_Init+0xfc>)
 8002daa:	0011      	movs	r1, r2
 8002dac:	0018      	movs	r0, r3
 8002dae:	f000 f8cd 	bl	8002f4c <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim3);
 8002db2:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <MX_TIM3_Init+0xf0>)
 8002db4:	0018      	movs	r0, r3
 8002db6:	f000 f95b 	bl	8003070 <HAL_TIM_MspPostInit>

}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b00a      	add	sp, #40	; 0x28
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	20000170 	.word	0x20000170
 8002dc8:	40000400 	.word	0x40000400
 8002dcc:	00000271 	.word	0x00000271
 8002dd0:	08003338 	.word	0x08003338
 8002dd4:	00000281 	.word	0x00000281
 8002dd8:	00000286 	.word	0x00000286
 8002ddc:	0000028b 	.word	0x0000028b

08002de0 <MX_TIM14_Init>:

/* TIM14 init function */
static void MX_TIM14_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af00      	add	r7, sp, #0

  TIM_OC_InitTypeDef sConfigOC;

  htim14.Instance = TIM14;
 8002de6:	4b26      	ldr	r3, [pc, #152]	; (8002e80 <MX_TIM14_Init+0xa0>)
 8002de8:	4a26      	ldr	r2, [pc, #152]	; (8002e84 <MX_TIM14_Init+0xa4>)
 8002dea:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4;
 8002dec:	4b24      	ldr	r3, [pc, #144]	; (8002e80 <MX_TIM14_Init+0xa0>)
 8002dee:	2204      	movs	r2, #4
 8002df0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df2:	4b23      	ldr	r3, [pc, #140]	; (8002e80 <MX_TIM14_Init+0xa0>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 255;
 8002df8:	4b21      	ldr	r3, [pc, #132]	; (8002e80 <MX_TIM14_Init+0xa0>)
 8002dfa:	22ff      	movs	r2, #255	; 0xff
 8002dfc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dfe:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <MX_TIM14_Init+0xa0>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e04:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <MX_TIM14_Init+0xa0>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002e0a:	4b1d      	ldr	r3, [pc, #116]	; (8002e80 <MX_TIM14_Init+0xa0>)
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f7fe fde7 	bl	80019e0 <HAL_TIM_Base_Init>
 8002e12:	1e03      	subs	r3, r0, #0
 8002e14:	d006      	beq.n	8002e24 <MX_TIM14_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e16:	23a8      	movs	r3, #168	; 0xa8
 8002e18:	009a      	lsls	r2, r3, #2
 8002e1a:	4b1b      	ldr	r3, [pc, #108]	; (8002e88 <MX_TIM14_Init+0xa8>)
 8002e1c:	0011      	movs	r1, r2
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f000 f894 	bl	8002f4c <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002e24:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <MX_TIM14_Init+0xa0>)
 8002e26:	0018      	movs	r0, r3
 8002e28:	f7fe fe06 	bl	8001a38 <HAL_TIM_PWM_Init>
 8002e2c:	1e03      	subs	r3, r0, #0
 8002e2e:	d005      	beq.n	8002e3c <MX_TIM14_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e30:	4a16      	ldr	r2, [pc, #88]	; (8002e8c <MX_TIM14_Init+0xac>)
 8002e32:	4b15      	ldr	r3, [pc, #84]	; (8002e88 <MX_TIM14_Init+0xa8>)
 8002e34:	0011      	movs	r1, r2
 8002e36:	0018      	movs	r0, r3
 8002e38:	f000 f888 	bl	8002f4c <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e3c:	1d3b      	adds	r3, r7, #4
 8002e3e:	2260      	movs	r2, #96	; 0x60
 8002e40:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002e42:	1d3b      	adds	r3, r7, #4
 8002e44:	2200      	movs	r2, #0
 8002e46:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e48:	1d3b      	adds	r3, r7, #4
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e4e:	1d3b      	adds	r3, r7, #4
 8002e50:	2200      	movs	r2, #0
 8002e52:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e54:	1d39      	adds	r1, r7, #4
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <MX_TIM14_Init+0xa0>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f7fe fe54 	bl	8001b08 <HAL_TIM_PWM_ConfigChannel>
 8002e60:	1e03      	subs	r3, r0, #0
 8002e62:	d005      	beq.n	8002e70 <MX_TIM14_Init+0x90>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e64:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <MX_TIM14_Init+0xb0>)
 8002e66:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <MX_TIM14_Init+0xa8>)
 8002e68:	0011      	movs	r1, r2
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f000 f86e 	bl	8002f4c <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim14);
 8002e70:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <MX_TIM14_Init+0xa0>)
 8002e72:	0018      	movs	r0, r3
 8002e74:	f000 f8fc 	bl	8003070 <HAL_TIM_MspPostInit>

}
 8002e78:	46c0      	nop			; (mov r8, r8)
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	b008      	add	sp, #32
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	200001f4 	.word	0x200001f4
 8002e84:	40002000 	.word	0x40002000
 8002e88:	08003338 	.word	0x08003338
 8002e8c:	000002a5 	.word	0x000002a5
 8002e90:	000002ae 	.word	0x000002ae

08002e94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e9a:	4b2a      	ldr	r3, [pc, #168]	; (8002f44 <MX_GPIO_Init+0xb0>)
 8002e9c:	4a29      	ldr	r2, [pc, #164]	; (8002f44 <MX_GPIO_Init+0xb0>)
 8002e9e:	6952      	ldr	r2, [r2, #20]
 8002ea0:	2180      	movs	r1, #128	; 0x80
 8002ea2:	03c9      	lsls	r1, r1, #15
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	615a      	str	r2, [r3, #20]
 8002ea8:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <MX_GPIO_Init+0xb0>)
 8002eaa:	695a      	ldr	r2, [r3, #20]
 8002eac:	2380      	movs	r3, #128	; 0x80
 8002eae:	03db      	lsls	r3, r3, #15
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb6:	4b23      	ldr	r3, [pc, #140]	; (8002f44 <MX_GPIO_Init+0xb0>)
 8002eb8:	4a22      	ldr	r2, [pc, #136]	; (8002f44 <MX_GPIO_Init+0xb0>)
 8002eba:	6952      	ldr	r2, [r2, #20]
 8002ebc:	2180      	movs	r1, #128	; 0x80
 8002ebe:	0289      	lsls	r1, r1, #10
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	615a      	str	r2, [r3, #20]
 8002ec4:	4b1f      	ldr	r3, [pc, #124]	; (8002f44 <MX_GPIO_Init+0xb0>)
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	029b      	lsls	r3, r3, #10
 8002ecc:	4013      	ands	r3, r2
 8002ece:	607b      	str	r3, [r7, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed2:	4b1c      	ldr	r3, [pc, #112]	; (8002f44 <MX_GPIO_Init+0xb0>)
 8002ed4:	4a1b      	ldr	r2, [pc, #108]	; (8002f44 <MX_GPIO_Init+0xb0>)
 8002ed6:	6952      	ldr	r2, [r2, #20]
 8002ed8:	2180      	movs	r1, #128	; 0x80
 8002eda:	02c9      	lsls	r1, r1, #11
 8002edc:	430a      	orrs	r2, r1
 8002ede:	615a      	str	r2, [r3, #20]
 8002ee0:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <MX_GPIO_Init+0xb0>)
 8002ee2:	695a      	ldr	r2, [r3, #20]
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	02db      	lsls	r3, r3, #11
 8002ee8:	4013      	ands	r3, r2
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002eee:	230c      	movs	r3, #12
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ef6:	230c      	movs	r3, #12
 8002ef8:	18fb      	adds	r3, r7, r3
 8002efa:	2200      	movs	r2, #0
 8002efc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efe:	230c      	movs	r3, #12
 8002f00:	18fb      	adds	r3, r7, r3
 8002f02:	2200      	movs	r2, #0
 8002f04:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f06:	230c      	movs	r3, #12
 8002f08:	18fb      	adds	r3, r7, r3
 8002f0a:	4a0f      	ldr	r2, [pc, #60]	; (8002f48 <MX_GPIO_Init+0xb4>)
 8002f0c:	0019      	movs	r1, r3
 8002f0e:	0010      	movs	r0, r2
 8002f10:	f7fd ff90 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002f14:	230c      	movs	r3, #12
 8002f16:	18fb      	adds	r3, r7, r3
 8002f18:	220f      	movs	r2, #15
 8002f1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f1c:	230c      	movs	r3, #12
 8002f1e:	18fb      	adds	r3, r7, r3
 8002f20:	2200      	movs	r2, #0
 8002f22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	230c      	movs	r3, #12
 8002f26:	18fb      	adds	r3, r7, r3
 8002f28:	2200      	movs	r2, #0
 8002f2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2c:	230c      	movs	r3, #12
 8002f2e:	18fa      	adds	r2, r7, r3
 8002f30:	2390      	movs	r3, #144	; 0x90
 8002f32:	05db      	lsls	r3, r3, #23
 8002f34:	0011      	movs	r1, r2
 8002f36:	0018      	movs	r0, r3
 8002f38:	f7fd ff7c 	bl	8000e34 <HAL_GPIO_Init>

}
 8002f3c:	46c0      	nop			; (mov r8, r8)
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b008      	add	sp, #32
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40021000 	.word	0x40021000
 8002f48:	48001400 	.word	0x48001400

08002f4c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8002f56:	e7fe      	b.n	8002f56 <_Error_Handler+0xa>

08002f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f5e:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <HAL_MspInit+0x6c>)
 8002f60:	4a18      	ldr	r2, [pc, #96]	; (8002fc4 <HAL_MspInit+0x6c>)
 8002f62:	6992      	ldr	r2, [r2, #24]
 8002f64:	2101      	movs	r1, #1
 8002f66:	430a      	orrs	r2, r1
 8002f68:	619a      	str	r2, [r3, #24]
 8002f6a:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <HAL_MspInit+0x6c>)
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	4013      	ands	r3, r2
 8002f72:	607b      	str	r3, [r7, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f76:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <HAL_MspInit+0x6c>)
 8002f78:	4a12      	ldr	r2, [pc, #72]	; (8002fc4 <HAL_MspInit+0x6c>)
 8002f7a:	69d2      	ldr	r2, [r2, #28]
 8002f7c:	2180      	movs	r1, #128	; 0x80
 8002f7e:	0549      	lsls	r1, r1, #21
 8002f80:	430a      	orrs	r2, r1
 8002f82:	61da      	str	r2, [r3, #28]
 8002f84:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <HAL_MspInit+0x6c>)
 8002f86:	69da      	ldr	r2, [r3, #28]
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	055b      	lsls	r3, r3, #21
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002f92:	2305      	movs	r3, #5
 8002f94:	425b      	negs	r3, r3
 8002f96:	2200      	movs	r2, #0
 8002f98:	2100      	movs	r1, #0
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f7fd ff00 	bl	8000da0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	425b      	negs	r3, r3
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f7fd fef9 	bl	8000da0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002fae:	2301      	movs	r3, #1
 8002fb0:	425b      	negs	r3, r3
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f7fd fef2 	bl	8000da0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b002      	add	sp, #8
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40021000 	.word	0x40021000

08002fc8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a13      	ldr	r2, [pc, #76]	; (8003024 <HAL_TIM_PWM_MspInit+0x5c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d10e      	bne.n	8002ff8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fda:	4b13      	ldr	r3, [pc, #76]	; (8003028 <HAL_TIM_PWM_MspInit+0x60>)
 8002fdc:	4a12      	ldr	r2, [pc, #72]	; (8003028 <HAL_TIM_PWM_MspInit+0x60>)
 8002fde:	6992      	ldr	r2, [r2, #24]
 8002fe0:	2180      	movs	r1, #128	; 0x80
 8002fe2:	0109      	lsls	r1, r1, #4
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	619a      	str	r2, [r3, #24]
 8002fe8:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <HAL_TIM_PWM_MspInit+0x60>)
 8002fea:	699a      	ldr	r2, [r3, #24]
 8002fec:	2380      	movs	r3, #128	; 0x80
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002ff6:	e010      	b.n	800301a <HAL_TIM_PWM_MspInit+0x52>
  else if(htim_pwm->Instance==TIM3)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a0b      	ldr	r2, [pc, #44]	; (800302c <HAL_TIM_PWM_MspInit+0x64>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d10b      	bne.n	800301a <HAL_TIM_PWM_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003002:	4b09      	ldr	r3, [pc, #36]	; (8003028 <HAL_TIM_PWM_MspInit+0x60>)
 8003004:	4a08      	ldr	r2, [pc, #32]	; (8003028 <HAL_TIM_PWM_MspInit+0x60>)
 8003006:	69d2      	ldr	r2, [r2, #28]
 8003008:	2102      	movs	r1, #2
 800300a:	430a      	orrs	r2, r1
 800300c:	61da      	str	r2, [r3, #28]
 800300e:	4b06      	ldr	r3, [pc, #24]	; (8003028 <HAL_TIM_PWM_MspInit+0x60>)
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	2202      	movs	r2, #2
 8003014:	4013      	ands	r3, r2
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	46bd      	mov	sp, r7
 800301e:	b004      	add	sp, #16
 8003020:	bd80      	pop	{r7, pc}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	40012c00 	.word	0x40012c00
 8003028:	40021000 	.word	0x40021000
 800302c:	40000400 	.word	0x40000400

08003030 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM14)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a0a      	ldr	r2, [pc, #40]	; (8003068 <HAL_TIM_Base_MspInit+0x38>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d10d      	bne.n	800305e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003042:	4b0a      	ldr	r3, [pc, #40]	; (800306c <HAL_TIM_Base_MspInit+0x3c>)
 8003044:	4a09      	ldr	r2, [pc, #36]	; (800306c <HAL_TIM_Base_MspInit+0x3c>)
 8003046:	69d2      	ldr	r2, [r2, #28]
 8003048:	2180      	movs	r1, #128	; 0x80
 800304a:	0049      	lsls	r1, r1, #1
 800304c:	430a      	orrs	r2, r1
 800304e:	61da      	str	r2, [r3, #28]
 8003050:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_TIM_Base_MspInit+0x3c>)
 8003052:	69da      	ldr	r2, [r3, #28]
 8003054:	2380      	movs	r3, #128	; 0x80
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	4013      	ands	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	46bd      	mov	sp, r7
 8003062:	b004      	add	sp, #16
 8003064:	bd80      	pop	{r7, pc}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	40002000 	.word	0x40002000
 800306c:	40021000 	.word	0x40021000

08003070 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a41      	ldr	r2, [pc, #260]	; (8003184 <HAL_TIM_MspPostInit+0x114>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d11d      	bne.n	80030be <HAL_TIM_MspPostInit+0x4e>
  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration    
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003082:	230c      	movs	r3, #12
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	22c0      	movs	r2, #192	; 0xc0
 8003088:	00d2      	lsls	r2, r2, #3
 800308a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308c:	230c      	movs	r3, #12
 800308e:	18fb      	adds	r3, r7, r3
 8003090:	2202      	movs	r2, #2
 8003092:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003094:	230c      	movs	r3, #12
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	2200      	movs	r2, #0
 800309a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309c:	230c      	movs	r3, #12
 800309e:	18fb      	adds	r3, r7, r3
 80030a0:	2200      	movs	r2, #0
 80030a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80030a4:	230c      	movs	r3, #12
 80030a6:	18fb      	adds	r3, r7, r3
 80030a8:	2202      	movs	r2, #2
 80030aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ac:	230c      	movs	r3, #12
 80030ae:	18fa      	adds	r2, r7, r3
 80030b0:	2390      	movs	r3, #144	; 0x90
 80030b2:	05db      	lsls	r3, r3, #23
 80030b4:	0011      	movs	r1, r2
 80030b6:	0018      	movs	r0, r3
 80030b8:	f7fd febc 	bl	8000e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80030bc:	e05d      	b.n	800317a <HAL_TIM_MspPostInit+0x10a>
  else if(htim->Instance==TIM3)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a31      	ldr	r2, [pc, #196]	; (8003188 <HAL_TIM_MspPostInit+0x118>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d137      	bne.n	8003138 <HAL_TIM_MspPostInit+0xc8>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030c8:	230c      	movs	r3, #12
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	22c0      	movs	r2, #192	; 0xc0
 80030ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d0:	230c      	movs	r3, #12
 80030d2:	18fb      	adds	r3, r7, r3
 80030d4:	2202      	movs	r2, #2
 80030d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d8:	230c      	movs	r3, #12
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	2200      	movs	r2, #0
 80030de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e0:	230c      	movs	r3, #12
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	2200      	movs	r2, #0
 80030e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80030e8:	230c      	movs	r3, #12
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	2201      	movs	r2, #1
 80030ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f0:	230c      	movs	r3, #12
 80030f2:	18fa      	adds	r2, r7, r3
 80030f4:	2390      	movs	r3, #144	; 0x90
 80030f6:	05db      	lsls	r3, r3, #23
 80030f8:	0011      	movs	r1, r2
 80030fa:	0018      	movs	r0, r3
 80030fc:	f7fd fe9a 	bl	8000e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003100:	230c      	movs	r3, #12
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	2202      	movs	r2, #2
 8003106:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003108:	230c      	movs	r3, #12
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	2202      	movs	r2, #2
 800310e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003110:	230c      	movs	r3, #12
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	2200      	movs	r2, #0
 8003116:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003118:	230c      	movs	r3, #12
 800311a:	18fb      	adds	r3, r7, r3
 800311c:	2200      	movs	r2, #0
 800311e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003120:	230c      	movs	r3, #12
 8003122:	18fb      	adds	r3, r7, r3
 8003124:	2201      	movs	r2, #1
 8003126:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003128:	230c      	movs	r3, #12
 800312a:	18fb      	adds	r3, r7, r3
 800312c:	4a17      	ldr	r2, [pc, #92]	; (800318c <HAL_TIM_MspPostInit+0x11c>)
 800312e:	0019      	movs	r1, r3
 8003130:	0010      	movs	r0, r2
 8003132:	f7fd fe7f 	bl	8000e34 <HAL_GPIO_Init>
}
 8003136:	e020      	b.n	800317a <HAL_TIM_MspPostInit+0x10a>
  else if(htim->Instance==TIM14)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a14      	ldr	r2, [pc, #80]	; (8003190 <HAL_TIM_MspPostInit+0x120>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d11b      	bne.n	800317a <HAL_TIM_MspPostInit+0x10a>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003142:	230c      	movs	r3, #12
 8003144:	18fb      	adds	r3, r7, r3
 8003146:	2210      	movs	r2, #16
 8003148:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314a:	230c      	movs	r3, #12
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	2202      	movs	r2, #2
 8003150:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	230c      	movs	r3, #12
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315a:	230c      	movs	r3, #12
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	2200      	movs	r2, #0
 8003160:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8003162:	230c      	movs	r3, #12
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	2204      	movs	r2, #4
 8003168:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800316a:	230c      	movs	r3, #12
 800316c:	18fa      	adds	r2, r7, r3
 800316e:	2390      	movs	r3, #144	; 0x90
 8003170:	05db      	lsls	r3, r3, #23
 8003172:	0011      	movs	r1, r2
 8003174:	0018      	movs	r0, r3
 8003176:	f7fd fe5d 	bl	8000e34 <HAL_GPIO_Init>
}
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	46bd      	mov	sp, r7
 800317e:	b008      	add	sp, #32
 8003180:	bd80      	pop	{r7, pc}
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	40012c00 	.word	0x40012c00
 8003188:	40000400 	.word	0x40000400
 800318c:	48000400 	.word	0x48000400
 8003190:	40002000 	.word	0x40002000

08003194 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031a2:	e7fe      	b.n	80031a2 <HardFault_Handler+0x4>

080031a4 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031bc:	f7fd fd48 	bl	8000c50 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80031c0:	f7fd fe2c 	bl	8000e1c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031c4:	46c0      	nop			; (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80031d0:	4b1a      	ldr	r3, [pc, #104]	; (800323c <SystemInit+0x70>)
 80031d2:	4a1a      	ldr	r2, [pc, #104]	; (800323c <SystemInit+0x70>)
 80031d4:	6812      	ldr	r2, [r2, #0]
 80031d6:	2101      	movs	r1, #1
 80031d8:	430a      	orrs	r2, r1
 80031da:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80031dc:	4b17      	ldr	r3, [pc, #92]	; (800323c <SystemInit+0x70>)
 80031de:	4a17      	ldr	r2, [pc, #92]	; (800323c <SystemInit+0x70>)
 80031e0:	6852      	ldr	r2, [r2, #4]
 80031e2:	4917      	ldr	r1, [pc, #92]	; (8003240 <SystemInit+0x74>)
 80031e4:	400a      	ands	r2, r1
 80031e6:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80031e8:	4b14      	ldr	r3, [pc, #80]	; (800323c <SystemInit+0x70>)
 80031ea:	4a14      	ldr	r2, [pc, #80]	; (800323c <SystemInit+0x70>)
 80031ec:	6812      	ldr	r2, [r2, #0]
 80031ee:	4915      	ldr	r1, [pc, #84]	; (8003244 <SystemInit+0x78>)
 80031f0:	400a      	ands	r2, r1
 80031f2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80031f4:	4b11      	ldr	r3, [pc, #68]	; (800323c <SystemInit+0x70>)
 80031f6:	4a11      	ldr	r2, [pc, #68]	; (800323c <SystemInit+0x70>)
 80031f8:	6812      	ldr	r2, [r2, #0]
 80031fa:	4913      	ldr	r1, [pc, #76]	; (8003248 <SystemInit+0x7c>)
 80031fc:	400a      	ands	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8003200:	4b0e      	ldr	r3, [pc, #56]	; (800323c <SystemInit+0x70>)
 8003202:	4a0e      	ldr	r2, [pc, #56]	; (800323c <SystemInit+0x70>)
 8003204:	6852      	ldr	r2, [r2, #4]
 8003206:	4911      	ldr	r1, [pc, #68]	; (800324c <SystemInit+0x80>)
 8003208:	400a      	ands	r2, r1
 800320a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800320c:	4b0b      	ldr	r3, [pc, #44]	; (800323c <SystemInit+0x70>)
 800320e:	4a0b      	ldr	r2, [pc, #44]	; (800323c <SystemInit+0x70>)
 8003210:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003212:	210f      	movs	r1, #15
 8003214:	438a      	bics	r2, r1
 8003216:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8003218:	4b08      	ldr	r3, [pc, #32]	; (800323c <SystemInit+0x70>)
 800321a:	4a08      	ldr	r2, [pc, #32]	; (800323c <SystemInit+0x70>)
 800321c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800321e:	490c      	ldr	r1, [pc, #48]	; (8003250 <SystemInit+0x84>)
 8003220:	400a      	ands	r2, r1
 8003222:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <SystemInit+0x70>)
 8003226:	4a05      	ldr	r2, [pc, #20]	; (800323c <SystemInit+0x70>)
 8003228:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800322a:	2101      	movs	r1, #1
 800322c:	438a      	bics	r2, r1
 800322e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003230:	4b02      	ldr	r3, [pc, #8]	; (800323c <SystemInit+0x70>)
 8003232:	2200      	movs	r2, #0
 8003234:	609a      	str	r2, [r3, #8]

}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40021000 	.word	0x40021000
 8003240:	08ffb80c 	.word	0x08ffb80c
 8003244:	fef6ffff 	.word	0xfef6ffff
 8003248:	fffbffff 	.word	0xfffbffff
 800324c:	ffc0ffff 	.word	0xffc0ffff
 8003250:	fffffeec 	.word	0xfffffeec

08003254 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003254:	480d      	ldr	r0, [pc, #52]	; (800328c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003256:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003258:	480d      	ldr	r0, [pc, #52]	; (8003290 <LoopForever+0x6>)
  ldr r1, =_edata
 800325a:	490e      	ldr	r1, [pc, #56]	; (8003294 <LoopForever+0xa>)
  ldr r2, =_sidata
 800325c:	4a0e      	ldr	r2, [pc, #56]	; (8003298 <LoopForever+0xe>)
  movs r3, #0
 800325e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003260:	e002      	b.n	8003268 <LoopCopyDataInit>

08003262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003266:	3304      	adds	r3, #4

08003268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800326a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800326c:	d3f9      	bcc.n	8003262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800326e:	4a0b      	ldr	r2, [pc, #44]	; (800329c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003270:	4c0b      	ldr	r4, [pc, #44]	; (80032a0 <LoopForever+0x16>)
  movs r3, #0
 8003272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003274:	e001      	b.n	800327a <LoopFillZerobss>

08003276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003278:	3204      	adds	r2, #4

0800327a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800327a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800327c:	d3fb      	bcc.n	8003276 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800327e:	f7ff ffa5 	bl	80031cc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003282:	f000 f811 	bl	80032a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003286:	f7ff fb0f 	bl	80028a8 <main>

0800328a <LoopForever>:

LoopForever:
    b LoopForever
 800328a:	e7fe      	b.n	800328a <LoopForever>
  ldr   r0, =_estack
 800328c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8003290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003294:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8003298:	08003360 	.word	0x08003360
  ldr r2, =_sbss
 800329c:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 80032a0:	20000234 	.word	0x20000234

080032a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032a4:	e7fe      	b.n	80032a4 <ADC1_IRQHandler>
	...

080032a8 <__libc_init_array>:
 80032a8:	b570      	push	{r4, r5, r6, lr}
 80032aa:	2600      	movs	r6, #0
 80032ac:	4d0c      	ldr	r5, [pc, #48]	; (80032e0 <__libc_init_array+0x38>)
 80032ae:	4c0d      	ldr	r4, [pc, #52]	; (80032e4 <__libc_init_array+0x3c>)
 80032b0:	1b64      	subs	r4, r4, r5
 80032b2:	10a4      	asrs	r4, r4, #2
 80032b4:	42a6      	cmp	r6, r4
 80032b6:	d109      	bne.n	80032cc <__libc_init_array+0x24>
 80032b8:	2600      	movs	r6, #0
 80032ba:	f000 f821 	bl	8003300 <_init>
 80032be:	4d0a      	ldr	r5, [pc, #40]	; (80032e8 <__libc_init_array+0x40>)
 80032c0:	4c0a      	ldr	r4, [pc, #40]	; (80032ec <__libc_init_array+0x44>)
 80032c2:	1b64      	subs	r4, r4, r5
 80032c4:	10a4      	asrs	r4, r4, #2
 80032c6:	42a6      	cmp	r6, r4
 80032c8:	d105      	bne.n	80032d6 <__libc_init_array+0x2e>
 80032ca:	bd70      	pop	{r4, r5, r6, pc}
 80032cc:	00b3      	lsls	r3, r6, #2
 80032ce:	58eb      	ldr	r3, [r5, r3]
 80032d0:	4798      	blx	r3
 80032d2:	3601      	adds	r6, #1
 80032d4:	e7ee      	b.n	80032b4 <__libc_init_array+0xc>
 80032d6:	00b3      	lsls	r3, r6, #2
 80032d8:	58eb      	ldr	r3, [r5, r3]
 80032da:	4798      	blx	r3
 80032dc:	3601      	adds	r6, #1
 80032de:	e7f2      	b.n	80032c6 <__libc_init_array+0x1e>
 80032e0:	08003358 	.word	0x08003358
 80032e4:	08003358 	.word	0x08003358
 80032e8:	08003358 	.word	0x08003358
 80032ec:	0800335c 	.word	0x0800335c

080032f0 <memset>:
 80032f0:	0003      	movs	r3, r0
 80032f2:	1882      	adds	r2, r0, r2
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d100      	bne.n	80032fa <memset+0xa>
 80032f8:	4770      	bx	lr
 80032fa:	7019      	strb	r1, [r3, #0]
 80032fc:	3301      	adds	r3, #1
 80032fe:	e7f9      	b.n	80032f4 <memset+0x4>

08003300 <_init>:
 8003300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003306:	bc08      	pop	{r3}
 8003308:	469e      	mov	lr, r3
 800330a:	4770      	bx	lr

0800330c <_fini>:
 800330c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003312:	bc08      	pop	{r3}
 8003314:	469e      	mov	lr, r3
 8003316:	4770      	bx	lr
