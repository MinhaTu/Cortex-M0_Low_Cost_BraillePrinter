
BraillePrinter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002538  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080025f8  080025f8  000125f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002638  08002638  00012638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800263c  0800263c  0001263c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08002640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000fc  20000004  08002644  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000100  08002644  00020100  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b6ef  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001767  00000000  00000000  0002b71b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000838  00000000  00000000  0002ce88  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000790  00000000  00000000  0002d6c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003a02  00000000  00000000  0002de50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002880  00000000  00000000  00031852  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000340d2  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001d58  00000000  00000000  00034150  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080025e0 	.word	0x080025e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080025e0 	.word	0x080025e0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_d2iz>:
 8000220:	b530      	push	{r4, r5, lr}
 8000222:	4d13      	ldr	r5, [pc, #76]	; (8000270 <__aeabi_d2iz+0x50>)
 8000224:	030a      	lsls	r2, r1, #12
 8000226:	004b      	lsls	r3, r1, #1
 8000228:	0b12      	lsrs	r2, r2, #12
 800022a:	0d5b      	lsrs	r3, r3, #21
 800022c:	0fc9      	lsrs	r1, r1, #31
 800022e:	2400      	movs	r4, #0
 8000230:	42ab      	cmp	r3, r5
 8000232:	dd10      	ble.n	8000256 <__aeabi_d2iz+0x36>
 8000234:	4c0f      	ldr	r4, [pc, #60]	; (8000274 <__aeabi_d2iz+0x54>)
 8000236:	42a3      	cmp	r3, r4
 8000238:	dc0f      	bgt.n	800025a <__aeabi_d2iz+0x3a>
 800023a:	2480      	movs	r4, #128	; 0x80
 800023c:	4d0e      	ldr	r5, [pc, #56]	; (8000278 <__aeabi_d2iz+0x58>)
 800023e:	0364      	lsls	r4, r4, #13
 8000240:	4322      	orrs	r2, r4
 8000242:	1aed      	subs	r5, r5, r3
 8000244:	2d1f      	cmp	r5, #31
 8000246:	dd0b      	ble.n	8000260 <__aeabi_d2iz+0x40>
 8000248:	480c      	ldr	r0, [pc, #48]	; (800027c <__aeabi_d2iz+0x5c>)
 800024a:	1ac3      	subs	r3, r0, r3
 800024c:	40da      	lsrs	r2, r3
 800024e:	4254      	negs	r4, r2
 8000250:	2900      	cmp	r1, #0
 8000252:	d100      	bne.n	8000256 <__aeabi_d2iz+0x36>
 8000254:	0014      	movs	r4, r2
 8000256:	0020      	movs	r0, r4
 8000258:	bd30      	pop	{r4, r5, pc}
 800025a:	4b09      	ldr	r3, [pc, #36]	; (8000280 <__aeabi_d2iz+0x60>)
 800025c:	18cc      	adds	r4, r1, r3
 800025e:	e7fa      	b.n	8000256 <__aeabi_d2iz+0x36>
 8000260:	4c08      	ldr	r4, [pc, #32]	; (8000284 <__aeabi_d2iz+0x64>)
 8000262:	40e8      	lsrs	r0, r5
 8000264:	46a4      	mov	ip, r4
 8000266:	4463      	add	r3, ip
 8000268:	409a      	lsls	r2, r3
 800026a:	4302      	orrs	r2, r0
 800026c:	e7ef      	b.n	800024e <__aeabi_d2iz+0x2e>
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	000003fe 	.word	0x000003fe
 8000274:	0000041d 	.word	0x0000041d
 8000278:	00000433 	.word	0x00000433
 800027c:	00000413 	.word	0x00000413
 8000280:	7fffffff 	.word	0x7fffffff
 8000284:	fffffbed 	.word	0xfffffbed

08000288 <__aeabi_i2d>:
 8000288:	b570      	push	{r4, r5, r6, lr}
 800028a:	2800      	cmp	r0, #0
 800028c:	d030      	beq.n	80002f0 <__aeabi_i2d+0x68>
 800028e:	17c3      	asrs	r3, r0, #31
 8000290:	18c4      	adds	r4, r0, r3
 8000292:	405c      	eors	r4, r3
 8000294:	0fc5      	lsrs	r5, r0, #31
 8000296:	0020      	movs	r0, r4
 8000298:	f000 f838 	bl	800030c <__clzsi2>
 800029c:	4b17      	ldr	r3, [pc, #92]	; (80002fc <__aeabi_i2d+0x74>)
 800029e:	4a18      	ldr	r2, [pc, #96]	; (8000300 <__aeabi_i2d+0x78>)
 80002a0:	1a1b      	subs	r3, r3, r0
 80002a2:	1ad2      	subs	r2, r2, r3
 80002a4:	2a1f      	cmp	r2, #31
 80002a6:	dd18      	ble.n	80002da <__aeabi_i2d+0x52>
 80002a8:	4a16      	ldr	r2, [pc, #88]	; (8000304 <__aeabi_i2d+0x7c>)
 80002aa:	1ad2      	subs	r2, r2, r3
 80002ac:	4094      	lsls	r4, r2
 80002ae:	2200      	movs	r2, #0
 80002b0:	0324      	lsls	r4, r4, #12
 80002b2:	055b      	lsls	r3, r3, #21
 80002b4:	0b24      	lsrs	r4, r4, #12
 80002b6:	0d5b      	lsrs	r3, r3, #21
 80002b8:	2100      	movs	r1, #0
 80002ba:	0010      	movs	r0, r2
 80002bc:	0324      	lsls	r4, r4, #12
 80002be:	0d0a      	lsrs	r2, r1, #20
 80002c0:	0b24      	lsrs	r4, r4, #12
 80002c2:	0512      	lsls	r2, r2, #20
 80002c4:	4322      	orrs	r2, r4
 80002c6:	4c10      	ldr	r4, [pc, #64]	; (8000308 <__aeabi_i2d+0x80>)
 80002c8:	051b      	lsls	r3, r3, #20
 80002ca:	4022      	ands	r2, r4
 80002cc:	4313      	orrs	r3, r2
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	07ed      	lsls	r5, r5, #31
 80002d2:	085b      	lsrs	r3, r3, #1
 80002d4:	432b      	orrs	r3, r5
 80002d6:	0019      	movs	r1, r3
 80002d8:	bd70      	pop	{r4, r5, r6, pc}
 80002da:	0021      	movs	r1, r4
 80002dc:	4091      	lsls	r1, r2
 80002de:	000a      	movs	r2, r1
 80002e0:	210b      	movs	r1, #11
 80002e2:	1a08      	subs	r0, r1, r0
 80002e4:	40c4      	lsrs	r4, r0
 80002e6:	055b      	lsls	r3, r3, #21
 80002e8:	0324      	lsls	r4, r4, #12
 80002ea:	0b24      	lsrs	r4, r4, #12
 80002ec:	0d5b      	lsrs	r3, r3, #21
 80002ee:	e7e3      	b.n	80002b8 <__aeabi_i2d+0x30>
 80002f0:	2500      	movs	r5, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	2400      	movs	r4, #0
 80002f6:	2200      	movs	r2, #0
 80002f8:	e7de      	b.n	80002b8 <__aeabi_i2d+0x30>
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	0000041e 	.word	0x0000041e
 8000300:	00000433 	.word	0x00000433
 8000304:	00000413 	.word	0x00000413
 8000308:	800fffff 	.word	0x800fffff

0800030c <__clzsi2>:
 800030c:	211c      	movs	r1, #28
 800030e:	2301      	movs	r3, #1
 8000310:	041b      	lsls	r3, r3, #16
 8000312:	4298      	cmp	r0, r3
 8000314:	d301      	bcc.n	800031a <__clzsi2+0xe>
 8000316:	0c00      	lsrs	r0, r0, #16
 8000318:	3910      	subs	r1, #16
 800031a:	0a1b      	lsrs	r3, r3, #8
 800031c:	4298      	cmp	r0, r3
 800031e:	d301      	bcc.n	8000324 <__clzsi2+0x18>
 8000320:	0a00      	lsrs	r0, r0, #8
 8000322:	3908      	subs	r1, #8
 8000324:	091b      	lsrs	r3, r3, #4
 8000326:	4298      	cmp	r0, r3
 8000328:	d301      	bcc.n	800032e <__clzsi2+0x22>
 800032a:	0900      	lsrs	r0, r0, #4
 800032c:	3904      	subs	r1, #4
 800032e:	a202      	add	r2, pc, #8	; (adr r2, 8000338 <__clzsi2+0x2c>)
 8000330:	5c10      	ldrb	r0, [r2, r0]
 8000332:	1840      	adds	r0, r0, r1
 8000334:	4770      	bx	lr
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	02020304 	.word	0x02020304
 800033c:	01010101 	.word	0x01010101
	...

08000348 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800034c:	4b07      	ldr	r3, [pc, #28]	; (800036c <HAL_Init+0x24>)
 800034e:	4a07      	ldr	r2, [pc, #28]	; (800036c <HAL_Init+0x24>)
 8000350:	6812      	ldr	r2, [r2, #0]
 8000352:	2110      	movs	r1, #16
 8000354:	430a      	orrs	r2, r1
 8000356:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000358:	2000      	movs	r0, #0
 800035a:	f000 f809 	bl	8000370 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800035e:	f001 ff6f 	bl	8002240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000362:	2300      	movs	r3, #0
}
 8000364:	0018      	movs	r0, r3
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	40022000 	.word	0x40022000

08000370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000378:	f000 fed4 	bl	8001124 <HAL_RCC_GetHCLKFreq>
 800037c:	0002      	movs	r2, r0
 800037e:	23fa      	movs	r3, #250	; 0xfa
 8000380:	0099      	lsls	r1, r3, #2
 8000382:	0010      	movs	r0, r2
 8000384:	f7ff fec0 	bl	8000108 <__udivsi3>
 8000388:	0003      	movs	r3, r0
 800038a:	0018      	movs	r0, r3
 800038c:	f000 f8ca 	bl	8000524 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000390:	6879      	ldr	r1, [r7, #4]
 8000392:	2301      	movs	r3, #1
 8000394:	425b      	negs	r3, r3
 8000396:	2200      	movs	r2, #0
 8000398:	0018      	movs	r0, r3
 800039a:	f000 f8ad 	bl	80004f8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 800039e:	2300      	movs	r3, #0
}
 80003a0:	0018      	movs	r0, r3
 80003a2:	46bd      	mov	sp, r7
 80003a4:	b002      	add	sp, #8
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  uwTick++;
 80003ac:	4b03      	ldr	r3, [pc, #12]	; (80003bc <HAL_IncTick+0x14>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	1c5a      	adds	r2, r3, #1
 80003b2:	4b02      	ldr	r3, [pc, #8]	; (80003bc <HAL_IncTick+0x14>)
 80003b4:	601a      	str	r2, [r3, #0]
}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	2000003c 	.word	0x2000003c

080003c0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  return uwTick;
 80003c4:	4b02      	ldr	r3, [pc, #8]	; (80003d0 <HAL_GetTick+0x10>)
 80003c6:	681b      	ldr	r3, [r3, #0]
}
 80003c8:	0018      	movs	r0, r3
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	2000003c 	.word	0x2000003c

080003d4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003d4:	b5b0      	push	{r4, r5, r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	0002      	movs	r2, r0
 80003dc:	6039      	str	r1, [r7, #0]
 80003de:	1dfb      	adds	r3, r7, #7
 80003e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80003e2:	1dfb      	adds	r3, r7, #7
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	2b7f      	cmp	r3, #127	; 0x7f
 80003e8:	d932      	bls.n	8000450 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003ea:	4c2f      	ldr	r4, [pc, #188]	; (80004a8 <NVIC_SetPriority+0xd4>)
 80003ec:	1dfb      	adds	r3, r7, #7
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	001a      	movs	r2, r3
 80003f2:	230f      	movs	r3, #15
 80003f4:	4013      	ands	r3, r2
 80003f6:	3b08      	subs	r3, #8
 80003f8:	0899      	lsrs	r1, r3, #2
 80003fa:	4a2b      	ldr	r2, [pc, #172]	; (80004a8 <NVIC_SetPriority+0xd4>)
 80003fc:	1dfb      	adds	r3, r7, #7
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	0018      	movs	r0, r3
 8000402:	230f      	movs	r3, #15
 8000404:	4003      	ands	r3, r0
 8000406:	3b08      	subs	r3, #8
 8000408:	089b      	lsrs	r3, r3, #2
 800040a:	3306      	adds	r3, #6
 800040c:	009b      	lsls	r3, r3, #2
 800040e:	18d3      	adds	r3, r2, r3
 8000410:	3304      	adds	r3, #4
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	1dfa      	adds	r2, r7, #7
 8000416:	7812      	ldrb	r2, [r2, #0]
 8000418:	0010      	movs	r0, r2
 800041a:	2203      	movs	r2, #3
 800041c:	4002      	ands	r2, r0
 800041e:	00d2      	lsls	r2, r2, #3
 8000420:	20ff      	movs	r0, #255	; 0xff
 8000422:	4090      	lsls	r0, r2
 8000424:	0002      	movs	r2, r0
 8000426:	43d2      	mvns	r2, r2
 8000428:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	019b      	lsls	r3, r3, #6
 800042e:	20ff      	movs	r0, #255	; 0xff
 8000430:	4018      	ands	r0, r3
 8000432:	1dfb      	adds	r3, r7, #7
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	001d      	movs	r5, r3
 8000438:	2303      	movs	r3, #3
 800043a:	402b      	ands	r3, r5
 800043c:	00db      	lsls	r3, r3, #3
 800043e:	4098      	lsls	r0, r3
 8000440:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000442:	431a      	orrs	r2, r3
 8000444:	1d8b      	adds	r3, r1, #6
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	18e3      	adds	r3, r4, r3
 800044a:	3304      	adds	r3, #4
 800044c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800044e:	e027      	b.n	80004a0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000450:	4c16      	ldr	r4, [pc, #88]	; (80004ac <NVIC_SetPriority+0xd8>)
 8000452:	1dfb      	adds	r3, r7, #7
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	b25b      	sxtb	r3, r3
 8000458:	089b      	lsrs	r3, r3, #2
 800045a:	4914      	ldr	r1, [pc, #80]	; (80004ac <NVIC_SetPriority+0xd8>)
 800045c:	1dfa      	adds	r2, r7, #7
 800045e:	7812      	ldrb	r2, [r2, #0]
 8000460:	b252      	sxtb	r2, r2
 8000462:	0892      	lsrs	r2, r2, #2
 8000464:	32c0      	adds	r2, #192	; 0xc0
 8000466:	0092      	lsls	r2, r2, #2
 8000468:	5852      	ldr	r2, [r2, r1]
 800046a:	1df9      	adds	r1, r7, #7
 800046c:	7809      	ldrb	r1, [r1, #0]
 800046e:	0008      	movs	r0, r1
 8000470:	2103      	movs	r1, #3
 8000472:	4001      	ands	r1, r0
 8000474:	00c9      	lsls	r1, r1, #3
 8000476:	20ff      	movs	r0, #255	; 0xff
 8000478:	4088      	lsls	r0, r1
 800047a:	0001      	movs	r1, r0
 800047c:	43c9      	mvns	r1, r1
 800047e:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000480:	683a      	ldr	r2, [r7, #0]
 8000482:	0192      	lsls	r2, r2, #6
 8000484:	20ff      	movs	r0, #255	; 0xff
 8000486:	4010      	ands	r0, r2
 8000488:	1dfa      	adds	r2, r7, #7
 800048a:	7812      	ldrb	r2, [r2, #0]
 800048c:	0015      	movs	r5, r2
 800048e:	2203      	movs	r2, #3
 8000490:	402a      	ands	r2, r5
 8000492:	00d2      	lsls	r2, r2, #3
 8000494:	4090      	lsls	r0, r2
 8000496:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000498:	430a      	orrs	r2, r1
 800049a:	33c0      	adds	r3, #192	; 0xc0
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	511a      	str	r2, [r3, r4]
}
 80004a0:	46c0      	nop			; (mov r8, r8)
 80004a2:	46bd      	mov	sp, r7
 80004a4:	b002      	add	sp, #8
 80004a6:	bdb0      	pop	{r4, r5, r7, pc}
 80004a8:	e000ed00 	.word	0xe000ed00
 80004ac:	e000e100 	.word	0xe000e100

080004b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	3b01      	subs	r3, #1
 80004bc:	4a0c      	ldr	r2, [pc, #48]	; (80004f0 <SysTick_Config+0x40>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d901      	bls.n	80004c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004c2:	2301      	movs	r3, #1
 80004c4:	e010      	b.n	80004e8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <SysTick_Config+0x44>)
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	3a01      	subs	r2, #1
 80004cc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004ce:	2301      	movs	r3, #1
 80004d0:	425b      	negs	r3, r3
 80004d2:	2103      	movs	r1, #3
 80004d4:	0018      	movs	r0, r3
 80004d6:	f7ff ff7d 	bl	80003d4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <SysTick_Config+0x44>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004e0:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <SysTick_Config+0x44>)
 80004e2:	2207      	movs	r2, #7
 80004e4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004e6:	2300      	movs	r3, #0
}
 80004e8:	0018      	movs	r0, r3
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b002      	add	sp, #8
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	00ffffff 	.word	0x00ffffff
 80004f4:	e000e010 	.word	0xe000e010

080004f8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60b9      	str	r1, [r7, #8]
 8000500:	607a      	str	r2, [r7, #4]
 8000502:	230f      	movs	r3, #15
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	1c02      	adds	r2, r0, #0
 8000508:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800050a:	68ba      	ldr	r2, [r7, #8]
 800050c:	230f      	movs	r3, #15
 800050e:	18fb      	adds	r3, r7, r3
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	b25b      	sxtb	r3, r3
 8000514:	0011      	movs	r1, r2
 8000516:	0018      	movs	r0, r3
 8000518:	f7ff ff5c 	bl	80003d4 <NVIC_SetPriority>
}
 800051c:	46c0      	nop			; (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	b004      	add	sp, #16
 8000522:	bd80      	pop	{r7, pc}

08000524 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	0018      	movs	r0, r3
 8000530:	f7ff ffbe 	bl	80004b0 <SysTick_Config>
 8000534:	0003      	movs	r3, r0
}
 8000536:	0018      	movs	r0, r3
 8000538:	46bd      	mov	sp, r7
 800053a:	b002      	add	sp, #8
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b04      	cmp	r3, #4
 800054c:	d106      	bne.n	800055c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000550:	4a07      	ldr	r2, [pc, #28]	; (8000570 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000552:	6812      	ldr	r2, [r2, #0]
 8000554:	2104      	movs	r1, #4
 8000556:	430a      	orrs	r2, r1
 8000558:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800055a:	e005      	b.n	8000568 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 800055e:	4a04      	ldr	r2, [pc, #16]	; (8000570 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000560:	6812      	ldr	r2, [r2, #0]
 8000562:	2104      	movs	r1, #4
 8000564:	438a      	bics	r2, r1
 8000566:	601a      	str	r2, [r3, #0]
}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	b002      	add	sp, #8
 800056e:	bd80      	pop	{r7, pc}
 8000570:	e000e010 	.word	0xe000e010

08000574 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000578:	f000 f803 	bl	8000582 <HAL_SYSTICK_Callback>
}
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80005a2:	e14f      	b.n	8000844 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2101      	movs	r1, #1
 80005aa:	697a      	ldr	r2, [r7, #20]
 80005ac:	4091      	lsls	r1, r2
 80005ae:	000a      	movs	r2, r1
 80005b0:	4013      	ands	r3, r2
 80005b2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d100      	bne.n	80005bc <HAL_GPIO_Init+0x30>
 80005ba:	e140      	b.n	800083e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	2b02      	cmp	r3, #2
 80005c2:	d003      	beq.n	80005cc <HAL_GPIO_Init+0x40>
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	2b12      	cmp	r3, #18
 80005ca:	d123      	bne.n	8000614 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	08da      	lsrs	r2, r3, #3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3208      	adds	r2, #8
 80005d4:	0092      	lsls	r2, r2, #2
 80005d6:	58d3      	ldr	r3, [r2, r3]
 80005d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	2207      	movs	r2, #7
 80005de:	4013      	ands	r3, r2
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	220f      	movs	r2, #15
 80005e4:	409a      	lsls	r2, r3
 80005e6:	0013      	movs	r3, r2
 80005e8:	43da      	mvns	r2, r3
 80005ea:	693b      	ldr	r3, [r7, #16]
 80005ec:	4013      	ands	r3, r2
 80005ee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	691a      	ldr	r2, [r3, #16]
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	2107      	movs	r1, #7
 80005f8:	400b      	ands	r3, r1
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	409a      	lsls	r2, r3
 80005fe:	0013      	movs	r3, r2
 8000600:	693a      	ldr	r2, [r7, #16]
 8000602:	4313      	orrs	r3, r2
 8000604:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	08da      	lsrs	r2, r3, #3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	3208      	adds	r2, #8
 800060e:	0092      	lsls	r2, r2, #2
 8000610:	6939      	ldr	r1, [r7, #16]
 8000612:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	2203      	movs	r2, #3
 8000620:	409a      	lsls	r2, r3
 8000622:	0013      	movs	r3, r2
 8000624:	43da      	mvns	r2, r3
 8000626:	693b      	ldr	r3, [r7, #16]
 8000628:	4013      	ands	r3, r2
 800062a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	2203      	movs	r2, #3
 8000632:	401a      	ands	r2, r3
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	409a      	lsls	r2, r3
 800063a:	0013      	movs	r3, r2
 800063c:	693a      	ldr	r2, [r7, #16]
 800063e:	4313      	orrs	r3, r2
 8000640:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	693a      	ldr	r2, [r7, #16]
 8000646:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d00b      	beq.n	8000668 <HAL_GPIO_Init+0xdc>
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	2b02      	cmp	r3, #2
 8000656:	d007      	beq.n	8000668 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800065c:	2b11      	cmp	r3, #17
 800065e:	d003      	beq.n	8000668 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	2b12      	cmp	r3, #18
 8000666:	d130      	bne.n	80006ca <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	2203      	movs	r2, #3
 8000674:	409a      	lsls	r2, r3
 8000676:	0013      	movs	r3, r2
 8000678:	43da      	mvns	r2, r3
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	4013      	ands	r3, r2
 800067e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	68da      	ldr	r2, [r3, #12]
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	409a      	lsls	r2, r3
 800068a:	0013      	movs	r3, r2
 800068c:	693a      	ldr	r2, [r7, #16]
 800068e:	4313      	orrs	r3, r2
 8000690:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	693a      	ldr	r2, [r7, #16]
 8000696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800069e:	2201      	movs	r2, #1
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	409a      	lsls	r2, r3
 80006a4:	0013      	movs	r3, r2
 80006a6:	43da      	mvns	r2, r3
 80006a8:	693b      	ldr	r3, [r7, #16]
 80006aa:	4013      	ands	r3, r2
 80006ac:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	091b      	lsrs	r3, r3, #4
 80006b4:	2201      	movs	r2, #1
 80006b6:	401a      	ands	r2, r3
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	409a      	lsls	r2, r3
 80006bc:	0013      	movs	r3, r2
 80006be:	693a      	ldr	r2, [r7, #16]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	68db      	ldr	r3, [r3, #12]
 80006ce:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	2203      	movs	r2, #3
 80006d6:	409a      	lsls	r2, r3
 80006d8:	0013      	movs	r3, r2
 80006da:	43da      	mvns	r2, r3
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	4013      	ands	r3, r2
 80006e0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	689a      	ldr	r2, [r3, #8]
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	409a      	lsls	r2, r3
 80006ec:	0013      	movs	r3, r2
 80006ee:	693a      	ldr	r2, [r7, #16]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	693a      	ldr	r2, [r7, #16]
 80006f8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	685a      	ldr	r2, [r3, #4]
 80006fe:	2380      	movs	r3, #128	; 0x80
 8000700:	055b      	lsls	r3, r3, #21
 8000702:	4013      	ands	r3, r2
 8000704:	d100      	bne.n	8000708 <HAL_GPIO_Init+0x17c>
 8000706:	e09a      	b.n	800083e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000708:	4b54      	ldr	r3, [pc, #336]	; (800085c <HAL_GPIO_Init+0x2d0>)
 800070a:	4a54      	ldr	r2, [pc, #336]	; (800085c <HAL_GPIO_Init+0x2d0>)
 800070c:	6992      	ldr	r2, [r2, #24]
 800070e:	2101      	movs	r1, #1
 8000710:	430a      	orrs	r2, r1
 8000712:	619a      	str	r2, [r3, #24]
 8000714:	4b51      	ldr	r3, [pc, #324]	; (800085c <HAL_GPIO_Init+0x2d0>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	2201      	movs	r2, #1
 800071a:	4013      	ands	r3, r2
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000720:	4a4f      	ldr	r2, [pc, #316]	; (8000860 <HAL_GPIO_Init+0x2d4>)
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	089b      	lsrs	r3, r3, #2
 8000726:	3302      	adds	r3, #2
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	589b      	ldr	r3, [r3, r2]
 800072c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	2203      	movs	r2, #3
 8000732:	4013      	ands	r3, r2
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	220f      	movs	r2, #15
 8000738:	409a      	lsls	r2, r3
 800073a:	0013      	movs	r3, r2
 800073c:	43da      	mvns	r2, r3
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	4013      	ands	r3, r2
 8000742:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	2390      	movs	r3, #144	; 0x90
 8000748:	05db      	lsls	r3, r3, #23
 800074a:	429a      	cmp	r2, r3
 800074c:	d013      	beq.n	8000776 <HAL_GPIO_Init+0x1ea>
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4a44      	ldr	r2, [pc, #272]	; (8000864 <HAL_GPIO_Init+0x2d8>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d00d      	beq.n	8000772 <HAL_GPIO_Init+0x1e6>
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a43      	ldr	r2, [pc, #268]	; (8000868 <HAL_GPIO_Init+0x2dc>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d007      	beq.n	800076e <HAL_GPIO_Init+0x1e2>
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4a42      	ldr	r2, [pc, #264]	; (800086c <HAL_GPIO_Init+0x2e0>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d101      	bne.n	800076a <HAL_GPIO_Init+0x1de>
 8000766:	2303      	movs	r3, #3
 8000768:	e006      	b.n	8000778 <HAL_GPIO_Init+0x1ec>
 800076a:	2305      	movs	r3, #5
 800076c:	e004      	b.n	8000778 <HAL_GPIO_Init+0x1ec>
 800076e:	2302      	movs	r3, #2
 8000770:	e002      	b.n	8000778 <HAL_GPIO_Init+0x1ec>
 8000772:	2301      	movs	r3, #1
 8000774:	e000      	b.n	8000778 <HAL_GPIO_Init+0x1ec>
 8000776:	2300      	movs	r3, #0
 8000778:	697a      	ldr	r2, [r7, #20]
 800077a:	2103      	movs	r1, #3
 800077c:	400a      	ands	r2, r1
 800077e:	0092      	lsls	r2, r2, #2
 8000780:	4093      	lsls	r3, r2
 8000782:	693a      	ldr	r2, [r7, #16]
 8000784:	4313      	orrs	r3, r2
 8000786:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000788:	4935      	ldr	r1, [pc, #212]	; (8000860 <HAL_GPIO_Init+0x2d4>)
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	089b      	lsrs	r3, r3, #2
 800078e:	3302      	adds	r3, #2
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	693a      	ldr	r2, [r7, #16]
 8000794:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000796:	4b36      	ldr	r3, [pc, #216]	; (8000870 <HAL_GPIO_Init+0x2e4>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	43da      	mvns	r2, r3
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	4013      	ands	r3, r2
 80007a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	685a      	ldr	r2, [r3, #4]
 80007aa:	2380      	movs	r3, #128	; 0x80
 80007ac:	025b      	lsls	r3, r3, #9
 80007ae:	4013      	ands	r3, r2
 80007b0:	d003      	beq.n	80007ba <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 80007b2:	693a      	ldr	r2, [r7, #16]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80007ba:	4b2d      	ldr	r3, [pc, #180]	; (8000870 <HAL_GPIO_Init+0x2e4>)
 80007bc:	693a      	ldr	r2, [r7, #16]
 80007be:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80007c0:	4b2b      	ldr	r3, [pc, #172]	; (8000870 <HAL_GPIO_Init+0x2e4>)
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	43da      	mvns	r2, r3
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	4013      	ands	r3, r2
 80007ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	685a      	ldr	r2, [r3, #4]
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	029b      	lsls	r3, r3, #10
 80007d8:	4013      	ands	r3, r2
 80007da:	d003      	beq.n	80007e4 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 80007dc:	693a      	ldr	r2, [r7, #16]
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80007e4:	4b22      	ldr	r3, [pc, #136]	; (8000870 <HAL_GPIO_Init+0x2e4>)
 80007e6:	693a      	ldr	r2, [r7, #16]
 80007e8:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007ea:	4b21      	ldr	r3, [pc, #132]	; (8000870 <HAL_GPIO_Init+0x2e4>)
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	43da      	mvns	r2, r3
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	4013      	ands	r3, r2
 80007f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	685a      	ldr	r2, [r3, #4]
 80007fe:	2380      	movs	r3, #128	; 0x80
 8000800:	035b      	lsls	r3, r3, #13
 8000802:	4013      	ands	r3, r2
 8000804:	d003      	beq.n	800080e <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 8000806:	693a      	ldr	r2, [r7, #16]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	4313      	orrs	r3, r2
 800080c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800080e:	4b18      	ldr	r3, [pc, #96]	; (8000870 <HAL_GPIO_Init+0x2e4>)
 8000810:	693a      	ldr	r2, [r7, #16]
 8000812:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <HAL_GPIO_Init+0x2e4>)
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	43da      	mvns	r2, r3
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	4013      	ands	r3, r2
 8000822:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	685a      	ldr	r2, [r3, #4]
 8000828:	2380      	movs	r3, #128	; 0x80
 800082a:	039b      	lsls	r3, r3, #14
 800082c:	4013      	ands	r3, r2
 800082e:	d003      	beq.n	8000838 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8000830:	693a      	ldr	r2, [r7, #16]
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	4313      	orrs	r3, r2
 8000836:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <HAL_GPIO_Init+0x2e4>)
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	3301      	adds	r3, #1
 8000842:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	40da      	lsrs	r2, r3
 800084c:	1e13      	subs	r3, r2, #0
 800084e:	d000      	beq.n	8000852 <HAL_GPIO_Init+0x2c6>
 8000850:	e6a8      	b.n	80005a4 <HAL_GPIO_Init+0x18>
  } 
}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	b006      	add	sp, #24
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	40021000 	.word	0x40021000
 8000860:	40010000 	.word	0x40010000
 8000864:	48000400 	.word	0x48000400
 8000868:	48000800 	.word	0x48000800
 800086c:	48000c00 	.word	0x48000c00
 8000870:	40010400 	.word	0x40010400

08000874 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	000a      	movs	r2, r1
 800087e:	1cbb      	adds	r3, r7, #2
 8000880:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	691b      	ldr	r3, [r3, #16]
 8000886:	1cba      	adds	r2, r7, #2
 8000888:	8812      	ldrh	r2, [r2, #0]
 800088a:	4013      	ands	r3, r2
 800088c:	d004      	beq.n	8000898 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800088e:	230f      	movs	r3, #15
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	2201      	movs	r2, #1
 8000894:	701a      	strb	r2, [r3, #0]
 8000896:	e003      	b.n	80008a0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000898:	230f      	movs	r3, #15
 800089a:	18fb      	adds	r3, r7, r3
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80008a0:	230f      	movs	r3, #15
 80008a2:	18fb      	adds	r3, r7, r3
 80008a4:	781b      	ldrb	r3, [r3, #0]
  }
 80008a6:	0018      	movs	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	b004      	add	sp, #16
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80008b8:	2300      	movs	r3, #0
 80008ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2201      	movs	r2, #1
 80008c2:	4013      	ands	r3, r2
 80008c4:	d100      	bne.n	80008c8 <HAL_RCC_OscConfig+0x18>
 80008c6:	e08d      	b.n	80009e4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80008c8:	4bc3      	ldr	r3, [pc, #780]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	220c      	movs	r2, #12
 80008ce:	4013      	ands	r3, r2
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	d00e      	beq.n	80008f2 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008d4:	4bc0      	ldr	r3, [pc, #768]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	220c      	movs	r2, #12
 80008da:	4013      	ands	r3, r2
 80008dc:	2b08      	cmp	r3, #8
 80008de:	d116      	bne.n	800090e <HAL_RCC_OscConfig+0x5e>
 80008e0:	4bbd      	ldr	r3, [pc, #756]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 80008e2:	685a      	ldr	r2, [r3, #4]
 80008e4:	2380      	movs	r3, #128	; 0x80
 80008e6:	025b      	lsls	r3, r3, #9
 80008e8:	401a      	ands	r2, r3
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	025b      	lsls	r3, r3, #9
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d10d      	bne.n	800090e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008f2:	4bb9      	ldr	r3, [pc, #740]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	2380      	movs	r3, #128	; 0x80
 80008f8:	029b      	lsls	r3, r3, #10
 80008fa:	4013      	ands	r3, r2
 80008fc:	d100      	bne.n	8000900 <HAL_RCC_OscConfig+0x50>
 80008fe:	e070      	b.n	80009e2 <HAL_RCC_OscConfig+0x132>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d000      	beq.n	800090a <HAL_RCC_OscConfig+0x5a>
 8000908:	e06b      	b.n	80009e2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e2b5      	b.n	8000e7a <HAL_RCC_OscConfig+0x5ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d107      	bne.n	8000926 <HAL_RCC_OscConfig+0x76>
 8000916:	4bb0      	ldr	r3, [pc, #704]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000918:	4aaf      	ldr	r2, [pc, #700]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 800091a:	6812      	ldr	r2, [r2, #0]
 800091c:	2180      	movs	r1, #128	; 0x80
 800091e:	0249      	lsls	r1, r1, #9
 8000920:	430a      	orrs	r2, r1
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	e02f      	b.n	8000986 <HAL_RCC_OscConfig+0xd6>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d10c      	bne.n	8000948 <HAL_RCC_OscConfig+0x98>
 800092e:	4baa      	ldr	r3, [pc, #680]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000930:	4aa9      	ldr	r2, [pc, #676]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000932:	6812      	ldr	r2, [r2, #0]
 8000934:	49a9      	ldr	r1, [pc, #676]	; (8000bdc <HAL_RCC_OscConfig+0x32c>)
 8000936:	400a      	ands	r2, r1
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	4ba7      	ldr	r3, [pc, #668]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 800093c:	4aa6      	ldr	r2, [pc, #664]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 800093e:	6812      	ldr	r2, [r2, #0]
 8000940:	49a7      	ldr	r1, [pc, #668]	; (8000be0 <HAL_RCC_OscConfig+0x330>)
 8000942:	400a      	ands	r2, r1
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	e01e      	b.n	8000986 <HAL_RCC_OscConfig+0xd6>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	2b05      	cmp	r3, #5
 800094e:	d10e      	bne.n	800096e <HAL_RCC_OscConfig+0xbe>
 8000950:	4ba1      	ldr	r3, [pc, #644]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000952:	4aa1      	ldr	r2, [pc, #644]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000954:	6812      	ldr	r2, [r2, #0]
 8000956:	2180      	movs	r1, #128	; 0x80
 8000958:	02c9      	lsls	r1, r1, #11
 800095a:	430a      	orrs	r2, r1
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	4b9e      	ldr	r3, [pc, #632]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000960:	4a9d      	ldr	r2, [pc, #628]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000962:	6812      	ldr	r2, [r2, #0]
 8000964:	2180      	movs	r1, #128	; 0x80
 8000966:	0249      	lsls	r1, r1, #9
 8000968:	430a      	orrs	r2, r1
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	e00b      	b.n	8000986 <HAL_RCC_OscConfig+0xd6>
 800096e:	4b9a      	ldr	r3, [pc, #616]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000970:	4a99      	ldr	r2, [pc, #612]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000972:	6812      	ldr	r2, [r2, #0]
 8000974:	4999      	ldr	r1, [pc, #612]	; (8000bdc <HAL_RCC_OscConfig+0x32c>)
 8000976:	400a      	ands	r2, r1
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	4b97      	ldr	r3, [pc, #604]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 800097c:	4a96      	ldr	r2, [pc, #600]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 800097e:	6812      	ldr	r2, [r2, #0]
 8000980:	4997      	ldr	r1, [pc, #604]	; (8000be0 <HAL_RCC_OscConfig+0x330>)
 8000982:	400a      	ands	r2, r1
 8000984:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d014      	beq.n	80009b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800098e:	f7ff fd17 	bl	80003c0 <HAL_GetTick>
 8000992:	0003      	movs	r3, r0
 8000994:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000996:	e008      	b.n	80009aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000998:	f7ff fd12 	bl	80003c0 <HAL_GetTick>
 800099c:	0002      	movs	r2, r0
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	2b64      	cmp	r3, #100	; 0x64
 80009a4:	d901      	bls.n	80009aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80009a6:	2303      	movs	r3, #3
 80009a8:	e267      	b.n	8000e7a <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009aa:	4b8b      	ldr	r3, [pc, #556]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	029b      	lsls	r3, r3, #10
 80009b2:	4013      	ands	r3, r2
 80009b4:	d0f0      	beq.n	8000998 <HAL_RCC_OscConfig+0xe8>
 80009b6:	e015      	b.n	80009e4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009b8:	f7ff fd02 	bl	80003c0 <HAL_GetTick>
 80009bc:	0003      	movs	r3, r0
 80009be:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009c0:	e008      	b.n	80009d4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009c2:	f7ff fcfd 	bl	80003c0 <HAL_GetTick>
 80009c6:	0002      	movs	r2, r0
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	1ad3      	subs	r3, r2, r3
 80009cc:	2b64      	cmp	r3, #100	; 0x64
 80009ce:	d901      	bls.n	80009d4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80009d0:	2303      	movs	r3, #3
 80009d2:	e252      	b.n	8000e7a <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009d4:	4b80      	ldr	r3, [pc, #512]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	2380      	movs	r3, #128	; 0x80
 80009da:	029b      	lsls	r3, r3, #10
 80009dc:	4013      	ands	r3, r2
 80009de:	d1f0      	bne.n	80009c2 <HAL_RCC_OscConfig+0x112>
 80009e0:	e000      	b.n	80009e4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009e2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2202      	movs	r2, #2
 80009ea:	4013      	ands	r3, r2
 80009ec:	d100      	bne.n	80009f0 <HAL_RCC_OscConfig+0x140>
 80009ee:	e069      	b.n	8000ac4 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80009f0:	4b79      	ldr	r3, [pc, #484]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	220c      	movs	r2, #12
 80009f6:	4013      	ands	r3, r2
 80009f8:	d00b      	beq.n	8000a12 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80009fa:	4b77      	ldr	r3, [pc, #476]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	220c      	movs	r2, #12
 8000a00:	4013      	ands	r3, r2
 8000a02:	2b08      	cmp	r3, #8
 8000a04:	d11c      	bne.n	8000a40 <HAL_RCC_OscConfig+0x190>
 8000a06:	4b74      	ldr	r3, [pc, #464]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000a08:	685a      	ldr	r2, [r3, #4]
 8000a0a:	2380      	movs	r3, #128	; 0x80
 8000a0c:	025b      	lsls	r3, r3, #9
 8000a0e:	4013      	ands	r3, r2
 8000a10:	d116      	bne.n	8000a40 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a12:	4b71      	ldr	r3, [pc, #452]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2202      	movs	r2, #2
 8000a18:	4013      	ands	r3, r2
 8000a1a:	d005      	beq.n	8000a28 <HAL_RCC_OscConfig+0x178>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d001      	beq.n	8000a28 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	e228      	b.n	8000e7a <HAL_RCC_OscConfig+0x5ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a28:	4a6b      	ldr	r2, [pc, #428]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000a2a:	4b6b      	ldr	r3, [pc, #428]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	21f8      	movs	r1, #248	; 0xf8
 8000a30:	438b      	bics	r3, r1
 8000a32:	0019      	movs	r1, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	691b      	ldr	r3, [r3, #16]
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	430b      	orrs	r3, r1
 8000a3c:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a3e:	e041      	b.n	8000ac4 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d024      	beq.n	8000a92 <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a48:	4b63      	ldr	r3, [pc, #396]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000a4a:	4a63      	ldr	r2, [pc, #396]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000a4c:	6812      	ldr	r2, [r2, #0]
 8000a4e:	2101      	movs	r1, #1
 8000a50:	430a      	orrs	r2, r1
 8000a52:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a54:	f7ff fcb4 	bl	80003c0 <HAL_GetTick>
 8000a58:	0003      	movs	r3, r0
 8000a5a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a5c:	e008      	b.n	8000a70 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a5e:	f7ff fcaf 	bl	80003c0 <HAL_GetTick>
 8000a62:	0002      	movs	r2, r0
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d901      	bls.n	8000a70 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	e204      	b.n	8000e7a <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a70:	4b59      	ldr	r3, [pc, #356]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2202      	movs	r2, #2
 8000a76:	4013      	ands	r3, r2
 8000a78:	d0f1      	beq.n	8000a5e <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a7a:	4a57      	ldr	r2, [pc, #348]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000a7c:	4b56      	ldr	r3, [pc, #344]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	21f8      	movs	r1, #248	; 0xf8
 8000a82:	438b      	bics	r3, r1
 8000a84:	0019      	movs	r1, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	691b      	ldr	r3, [r3, #16]
 8000a8a:	00db      	lsls	r3, r3, #3
 8000a8c:	430b      	orrs	r3, r1
 8000a8e:	6013      	str	r3, [r2, #0]
 8000a90:	e018      	b.n	8000ac4 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a92:	4b51      	ldr	r3, [pc, #324]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000a94:	4a50      	ldr	r2, [pc, #320]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000a96:	6812      	ldr	r2, [r2, #0]
 8000a98:	2101      	movs	r1, #1
 8000a9a:	438a      	bics	r2, r1
 8000a9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a9e:	f7ff fc8f 	bl	80003c0 <HAL_GetTick>
 8000aa2:	0003      	movs	r3, r0
 8000aa4:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000aa6:	e008      	b.n	8000aba <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aa8:	f7ff fc8a 	bl	80003c0 <HAL_GetTick>
 8000aac:	0002      	movs	r2, r0
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d901      	bls.n	8000aba <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	e1df      	b.n	8000e7a <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000aba:	4b47      	ldr	r3, [pc, #284]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2202      	movs	r2, #2
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	d1f1      	bne.n	8000aa8 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2208      	movs	r2, #8
 8000aca:	4013      	ands	r3, r2
 8000acc:	d036      	beq.n	8000b3c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d019      	beq.n	8000b0a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ad6:	4b40      	ldr	r3, [pc, #256]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000ad8:	4a3f      	ldr	r2, [pc, #252]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000ada:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000adc:	2101      	movs	r1, #1
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ae2:	f7ff fc6d 	bl	80003c0 <HAL_GetTick>
 8000ae6:	0003      	movs	r3, r0
 8000ae8:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aea:	e008      	b.n	8000afe <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000aec:	f7ff fc68 	bl	80003c0 <HAL_GetTick>
 8000af0:	0002      	movs	r2, r0
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d901      	bls.n	8000afe <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 8000afa:	2303      	movs	r3, #3
 8000afc:	e1bd      	b.n	8000e7a <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000afe:	4b36      	ldr	r3, [pc, #216]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b02:	2202      	movs	r2, #2
 8000b04:	4013      	ands	r3, r2
 8000b06:	d0f1      	beq.n	8000aec <HAL_RCC_OscConfig+0x23c>
 8000b08:	e018      	b.n	8000b3c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b0a:	4b33      	ldr	r3, [pc, #204]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000b0c:	4a32      	ldr	r2, [pc, #200]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000b0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000b10:	2101      	movs	r1, #1
 8000b12:	438a      	bics	r2, r1
 8000b14:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b16:	f7ff fc53 	bl	80003c0 <HAL_GetTick>
 8000b1a:	0003      	movs	r3, r0
 8000b1c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b1e:	e008      	b.n	8000b32 <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b20:	f7ff fc4e 	bl	80003c0 <HAL_GetTick>
 8000b24:	0002      	movs	r2, r0
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d901      	bls.n	8000b32 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	e1a3      	b.n	8000e7a <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b32:	4b29      	ldr	r3, [pc, #164]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b36:	2202      	movs	r2, #2
 8000b38:	4013      	ands	r3, r2
 8000b3a:	d1f1      	bne.n	8000b20 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2204      	movs	r2, #4
 8000b42:	4013      	ands	r3, r2
 8000b44:	d100      	bne.n	8000b48 <HAL_RCC_OscConfig+0x298>
 8000b46:	e0b5      	b.n	8000cb4 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b48:	2317      	movs	r3, #23
 8000b4a:	18fb      	adds	r3, r7, r3
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b50:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000b52:	69da      	ldr	r2, [r3, #28]
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	055b      	lsls	r3, r3, #21
 8000b58:	4013      	ands	r3, r2
 8000b5a:	d111      	bne.n	8000b80 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000b5e:	4a1e      	ldr	r2, [pc, #120]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000b60:	69d2      	ldr	r2, [r2, #28]
 8000b62:	2180      	movs	r1, #128	; 0x80
 8000b64:	0549      	lsls	r1, r1, #21
 8000b66:	430a      	orrs	r2, r1
 8000b68:	61da      	str	r2, [r3, #28]
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000b6c:	69da      	ldr	r2, [r3, #28]
 8000b6e:	2380      	movs	r3, #128	; 0x80
 8000b70:	055b      	lsls	r3, r3, #21
 8000b72:	4013      	ands	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000b78:	2317      	movs	r3, #23
 8000b7a:	18fb      	adds	r3, r7, r3
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b80:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <HAL_RCC_OscConfig+0x334>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	4013      	ands	r3, r2
 8000b8a:	d11a      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <HAL_RCC_OscConfig+0x334>)
 8000b8e:	4a15      	ldr	r2, [pc, #84]	; (8000be4 <HAL_RCC_OscConfig+0x334>)
 8000b90:	6812      	ldr	r2, [r2, #0]
 8000b92:	2180      	movs	r1, #128	; 0x80
 8000b94:	0049      	lsls	r1, r1, #1
 8000b96:	430a      	orrs	r2, r1
 8000b98:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b9a:	f7ff fc11 	bl	80003c0 <HAL_GetTick>
 8000b9e:	0003      	movs	r3, r0
 8000ba0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ba2:	e008      	b.n	8000bb6 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ba4:	f7ff fc0c 	bl	80003c0 <HAL_GetTick>
 8000ba8:	0002      	movs	r2, r0
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	2b64      	cmp	r3, #100	; 0x64
 8000bb0:	d901      	bls.n	8000bb6 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	e161      	b.n	8000e7a <HAL_RCC_OscConfig+0x5ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_RCC_OscConfig+0x334>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	2380      	movs	r3, #128	; 0x80
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	d0f0      	beq.n	8000ba4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d10e      	bne.n	8000be8 <HAL_RCC_OscConfig+0x338>
 8000bca:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000bcc:	4a02      	ldr	r2, [pc, #8]	; (8000bd8 <HAL_RCC_OscConfig+0x328>)
 8000bce:	6a12      	ldr	r2, [r2, #32]
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	621a      	str	r2, [r3, #32]
 8000bd6:	e035      	b.n	8000c44 <HAL_RCC_OscConfig+0x394>
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	fffeffff 	.word	0xfffeffff
 8000be0:	fffbffff 	.word	0xfffbffff
 8000be4:	40007000 	.word	0x40007000
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d10c      	bne.n	8000c0a <HAL_RCC_OscConfig+0x35a>
 8000bf0:	4ba4      	ldr	r3, [pc, #656]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000bf2:	4aa4      	ldr	r2, [pc, #656]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000bf4:	6a12      	ldr	r2, [r2, #32]
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	438a      	bics	r2, r1
 8000bfa:	621a      	str	r2, [r3, #32]
 8000bfc:	4ba1      	ldr	r3, [pc, #644]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000bfe:	4aa1      	ldr	r2, [pc, #644]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000c00:	6a12      	ldr	r2, [r2, #32]
 8000c02:	2104      	movs	r1, #4
 8000c04:	438a      	bics	r2, r1
 8000c06:	621a      	str	r2, [r3, #32]
 8000c08:	e01c      	b.n	8000c44 <HAL_RCC_OscConfig+0x394>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	2b05      	cmp	r3, #5
 8000c10:	d10c      	bne.n	8000c2c <HAL_RCC_OscConfig+0x37c>
 8000c12:	4b9c      	ldr	r3, [pc, #624]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000c14:	4a9b      	ldr	r2, [pc, #620]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000c16:	6a12      	ldr	r2, [r2, #32]
 8000c18:	2104      	movs	r1, #4
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	621a      	str	r2, [r3, #32]
 8000c1e:	4b99      	ldr	r3, [pc, #612]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000c20:	4a98      	ldr	r2, [pc, #608]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000c22:	6a12      	ldr	r2, [r2, #32]
 8000c24:	2101      	movs	r1, #1
 8000c26:	430a      	orrs	r2, r1
 8000c28:	621a      	str	r2, [r3, #32]
 8000c2a:	e00b      	b.n	8000c44 <HAL_RCC_OscConfig+0x394>
 8000c2c:	4b95      	ldr	r3, [pc, #596]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000c2e:	4a95      	ldr	r2, [pc, #596]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000c30:	6a12      	ldr	r2, [r2, #32]
 8000c32:	2101      	movs	r1, #1
 8000c34:	438a      	bics	r2, r1
 8000c36:	621a      	str	r2, [r3, #32]
 8000c38:	4b92      	ldr	r3, [pc, #584]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000c3a:	4a92      	ldr	r2, [pc, #584]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000c3c:	6a12      	ldr	r2, [r2, #32]
 8000c3e:	2104      	movs	r1, #4
 8000c40:	438a      	bics	r2, r1
 8000c42:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d014      	beq.n	8000c76 <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c4c:	f7ff fbb8 	bl	80003c0 <HAL_GetTick>
 8000c50:	0003      	movs	r3, r0
 8000c52:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c54:	e009      	b.n	8000c6a <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c56:	f7ff fbb3 	bl	80003c0 <HAL_GetTick>
 8000c5a:	0002      	movs	r2, r0
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	4a89      	ldr	r2, [pc, #548]	; (8000e88 <HAL_RCC_OscConfig+0x5d8>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d901      	bls.n	8000c6a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8000c66:	2303      	movs	r3, #3
 8000c68:	e107      	b.n	8000e7a <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c6a:	4b86      	ldr	r3, [pc, #536]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000c6c:	6a1b      	ldr	r3, [r3, #32]
 8000c6e:	2202      	movs	r2, #2
 8000c70:	4013      	ands	r3, r2
 8000c72:	d0f0      	beq.n	8000c56 <HAL_RCC_OscConfig+0x3a6>
 8000c74:	e013      	b.n	8000c9e <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c76:	f7ff fba3 	bl	80003c0 <HAL_GetTick>
 8000c7a:	0003      	movs	r3, r0
 8000c7c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c7e:	e009      	b.n	8000c94 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c80:	f7ff fb9e 	bl	80003c0 <HAL_GetTick>
 8000c84:	0002      	movs	r2, r0
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	4a7f      	ldr	r2, [pc, #508]	; (8000e88 <HAL_RCC_OscConfig+0x5d8>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d901      	bls.n	8000c94 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8000c90:	2303      	movs	r3, #3
 8000c92:	e0f2      	b.n	8000e7a <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c94:	4b7b      	ldr	r3, [pc, #492]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000c96:	6a1b      	ldr	r3, [r3, #32]
 8000c98:	2202      	movs	r2, #2
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	d1f0      	bne.n	8000c80 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c9e:	2317      	movs	r3, #23
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d105      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ca8:	4b76      	ldr	r3, [pc, #472]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000caa:	4a76      	ldr	r2, [pc, #472]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000cac:	69d2      	ldr	r2, [r2, #28]
 8000cae:	4977      	ldr	r1, [pc, #476]	; (8000e8c <HAL_RCC_OscConfig+0x5dc>)
 8000cb0:	400a      	ands	r2, r1
 8000cb2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2210      	movs	r2, #16
 8000cba:	4013      	ands	r3, r2
 8000cbc:	d063      	beq.n	8000d86 <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d12a      	bne.n	8000d1c <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000cc6:	4b6f      	ldr	r3, [pc, #444]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000cc8:	4a6e      	ldr	r2, [pc, #440]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000cca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000ccc:	2104      	movs	r1, #4
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000cd2:	4b6c      	ldr	r3, [pc, #432]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000cd4:	4a6b      	ldr	r2, [pc, #428]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000cd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000cd8:	2101      	movs	r1, #1
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cde:	f7ff fb6f 	bl	80003c0 <HAL_GetTick>
 8000ce2:	0003      	movs	r3, r0
 8000ce4:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000ce6:	e008      	b.n	8000cfa <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ce8:	f7ff fb6a 	bl	80003c0 <HAL_GetTick>
 8000cec:	0002      	movs	r2, r0
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d901      	bls.n	8000cfa <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e0bf      	b.n	8000e7a <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000cfa:	4b62      	ldr	r3, [pc, #392]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cfe:	2202      	movs	r2, #2
 8000d00:	4013      	ands	r3, r2
 8000d02:	d0f1      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000d04:	4a5f      	ldr	r2, [pc, #380]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000d06:	4b5f      	ldr	r3, [pc, #380]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d0a:	21f8      	movs	r1, #248	; 0xf8
 8000d0c:	438b      	bics	r3, r1
 8000d0e:	0019      	movs	r1, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	430b      	orrs	r3, r1
 8000d18:	6353      	str	r3, [r2, #52]	; 0x34
 8000d1a:	e034      	b.n	8000d86 <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	3305      	adds	r3, #5
 8000d22:	d111      	bne.n	8000d48 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000d24:	4b57      	ldr	r3, [pc, #348]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000d26:	4a57      	ldr	r2, [pc, #348]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000d28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d2a:	2104      	movs	r1, #4
 8000d2c:	438a      	bics	r2, r1
 8000d2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000d30:	4a54      	ldr	r2, [pc, #336]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000d32:	4b54      	ldr	r3, [pc, #336]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d36:	21f8      	movs	r1, #248	; 0xf8
 8000d38:	438b      	bics	r3, r1
 8000d3a:	0019      	movs	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	430b      	orrs	r3, r1
 8000d44:	6353      	str	r3, [r2, #52]	; 0x34
 8000d46:	e01e      	b.n	8000d86 <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d48:	4b4e      	ldr	r3, [pc, #312]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000d4a:	4a4e      	ldr	r2, [pc, #312]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000d4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d4e:	2104      	movs	r1, #4
 8000d50:	430a      	orrs	r2, r1
 8000d52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000d54:	4b4b      	ldr	r3, [pc, #300]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000d56:	4a4b      	ldr	r2, [pc, #300]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000d58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	438a      	bics	r2, r1
 8000d5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d60:	f7ff fb2e 	bl	80003c0 <HAL_GetTick>
 8000d64:	0003      	movs	r3, r0
 8000d66:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000d68:	e008      	b.n	8000d7c <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000d6a:	f7ff fb29 	bl	80003c0 <HAL_GetTick>
 8000d6e:	0002      	movs	r2, r0
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d901      	bls.n	8000d7c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e07e      	b.n	8000e7a <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000d7c:	4b41      	ldr	r3, [pc, #260]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d80:	2202      	movs	r2, #2
 8000d82:	4013      	ands	r3, r2
 8000d84:	d1f1      	bne.n	8000d6a <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6a1b      	ldr	r3, [r3, #32]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d100      	bne.n	8000d90 <HAL_RCC_OscConfig+0x4e0>
 8000d8e:	e073      	b.n	8000e78 <HAL_RCC_OscConfig+0x5c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d90:	4b3c      	ldr	r3, [pc, #240]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	220c      	movs	r2, #12
 8000d96:	4013      	ands	r3, r2
 8000d98:	2b08      	cmp	r3, #8
 8000d9a:	d100      	bne.n	8000d9e <HAL_RCC_OscConfig+0x4ee>
 8000d9c:	e06a      	b.n	8000e74 <HAL_RCC_OscConfig+0x5c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a1b      	ldr	r3, [r3, #32]
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d14b      	bne.n	8000e3e <HAL_RCC_OscConfig+0x58e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000da6:	4b37      	ldr	r3, [pc, #220]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000da8:	4a36      	ldr	r2, [pc, #216]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000daa:	6812      	ldr	r2, [r2, #0]
 8000dac:	4938      	ldr	r1, [pc, #224]	; (8000e90 <HAL_RCC_OscConfig+0x5e0>)
 8000dae:	400a      	ands	r2, r1
 8000db0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db2:	f7ff fb05 	bl	80003c0 <HAL_GetTick>
 8000db6:	0003      	movs	r3, r0
 8000db8:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dba:	e008      	b.n	8000dce <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dbc:	f7ff fb00 	bl	80003c0 <HAL_GetTick>
 8000dc0:	0002      	movs	r2, r0
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d901      	bls.n	8000dce <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e055      	b.n	8000e7a <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dce:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	2380      	movs	r3, #128	; 0x80
 8000dd4:	049b      	lsls	r3, r3, #18
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	d1f0      	bne.n	8000dbc <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000dda:	4a2a      	ldr	r2, [pc, #168]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000ddc:	4b29      	ldr	r3, [pc, #164]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de0:	210f      	movs	r1, #15
 8000de2:	438b      	bics	r3, r1
 8000de4:	0019      	movs	r1, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dea:	430b      	orrs	r3, r1
 8000dec:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000dee:	4a25      	ldr	r2, [pc, #148]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000df0:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	4927      	ldr	r1, [pc, #156]	; (8000e94 <HAL_RCC_OscConfig+0x5e4>)
 8000df6:	4019      	ands	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e00:	4303      	orrs	r3, r0
 8000e02:	430b      	orrs	r3, r1
 8000e04:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000e08:	4a1e      	ldr	r2, [pc, #120]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000e0a:	6812      	ldr	r2, [r2, #0]
 8000e0c:	2180      	movs	r1, #128	; 0x80
 8000e0e:	0449      	lsls	r1, r1, #17
 8000e10:	430a      	orrs	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e14:	f7ff fad4 	bl	80003c0 <HAL_GetTick>
 8000e18:	0003      	movs	r3, r0
 8000e1a:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e1c:	e008      	b.n	8000e30 <HAL_RCC_OscConfig+0x580>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e1e:	f7ff facf 	bl	80003c0 <HAL_GetTick>
 8000e22:	0002      	movs	r2, r0
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d901      	bls.n	8000e30 <HAL_RCC_OscConfig+0x580>
          {
            return HAL_TIMEOUT;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e024      	b.n	8000e7a <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	049b      	lsls	r3, r3, #18
 8000e38:	4013      	ands	r3, r2
 8000e3a:	d0f0      	beq.n	8000e1e <HAL_RCC_OscConfig+0x56e>
 8000e3c:	e01c      	b.n	8000e78 <HAL_RCC_OscConfig+0x5c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000e40:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000e42:	6812      	ldr	r2, [r2, #0]
 8000e44:	4912      	ldr	r1, [pc, #72]	; (8000e90 <HAL_RCC_OscConfig+0x5e0>)
 8000e46:	400a      	ands	r2, r1
 8000e48:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4a:	f7ff fab9 	bl	80003c0 <HAL_GetTick>
 8000e4e:	0003      	movs	r3, r0
 8000e50:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0x5b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e54:	f7ff fab4 	bl	80003c0 <HAL_GetTick>
 8000e58:	0002      	movs	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e009      	b.n	8000e7a <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <HAL_RCC_OscConfig+0x5d4>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	049b      	lsls	r3, r3, #18
 8000e6e:	4013      	ands	r3, r2
 8000e70:	d1f0      	bne.n	8000e54 <HAL_RCC_OscConfig+0x5a4>
 8000e72:	e001      	b.n	8000e78 <HAL_RCC_OscConfig+0x5c8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e000      	b.n	8000e7a <HAL_RCC_OscConfig+0x5ca>
    }
  }
  
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b006      	add	sp, #24
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	40021000 	.word	0x40021000
 8000e88:	00001388 	.word	0x00001388
 8000e8c:	efffffff 	.word	0xefffffff
 8000e90:	feffffff 	.word	0xfeffffff
 8000e94:	ffc2ffff 	.word	0xffc2ffff

08000e98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ea6:	4b69      	ldr	r3, [pc, #420]	; (800104c <HAL_RCC_ClockConfig+0x1b4>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	401a      	ands	r2, r3
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d211      	bcs.n	8000ed8 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eb4:	4b65      	ldr	r3, [pc, #404]	; (800104c <HAL_RCC_ClockConfig+0x1b4>)
 8000eb6:	4a65      	ldr	r2, [pc, #404]	; (800104c <HAL_RCC_ClockConfig+0x1b4>)
 8000eb8:	6812      	ldr	r2, [r2, #0]
 8000eba:	2101      	movs	r1, #1
 8000ebc:	438a      	bics	r2, r1
 8000ebe:	0011      	movs	r1, r2
 8000ec0:	683a      	ldr	r2, [r7, #0]
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ec6:	4b61      	ldr	r3, [pc, #388]	; (800104c <HAL_RCC_ClockConfig+0x1b4>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	401a      	ands	r2, r3
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d001      	beq.n	8000ed8 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e0b5      	b.n	8001044 <HAL_RCC_ClockConfig+0x1ac>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2202      	movs	r2, #2
 8000ede:	4013      	ands	r3, r2
 8000ee0:	d009      	beq.n	8000ef6 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ee2:	4a5b      	ldr	r2, [pc, #364]	; (8001050 <HAL_RCC_ClockConfig+0x1b8>)
 8000ee4:	4b5a      	ldr	r3, [pc, #360]	; (8001050 <HAL_RCC_ClockConfig+0x1b8>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	21f0      	movs	r1, #240	; 0xf0
 8000eea:	438b      	bics	r3, r1
 8000eec:	0019      	movs	r1, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	430b      	orrs	r3, r1
 8000ef4:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2201      	movs	r2, #1
 8000efc:	4013      	ands	r3, r2
 8000efe:	d100      	bne.n	8000f02 <HAL_RCC_ClockConfig+0x6a>
 8000f00:	e067      	b.n	8000fd2 <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d107      	bne.n	8000f1a <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f0a:	4b51      	ldr	r3, [pc, #324]	; (8001050 <HAL_RCC_ClockConfig+0x1b8>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	029b      	lsls	r3, r3, #10
 8000f12:	4013      	ands	r3, r2
 8000f14:	d114      	bne.n	8000f40 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e094      	b.n	8001044 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d107      	bne.n	8000f32 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f22:	4b4b      	ldr	r3, [pc, #300]	; (8001050 <HAL_RCC_ClockConfig+0x1b8>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	2380      	movs	r3, #128	; 0x80
 8000f28:	049b      	lsls	r3, r3, #18
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	d108      	bne.n	8000f40 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e088      	b.n	8001044 <HAL_RCC_ClockConfig+0x1ac>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f32:	4b47      	ldr	r3, [pc, #284]	; (8001050 <HAL_RCC_ClockConfig+0x1b8>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2202      	movs	r2, #2
 8000f38:	4013      	ands	r3, r2
 8000f3a:	d101      	bne.n	8000f40 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e081      	b.n	8001044 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f40:	4a43      	ldr	r2, [pc, #268]	; (8001050 <HAL_RCC_ClockConfig+0x1b8>)
 8000f42:	4b43      	ldr	r3, [pc, #268]	; (8001050 <HAL_RCC_ClockConfig+0x1b8>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2103      	movs	r1, #3
 8000f48:	438b      	bics	r3, r1
 8000f4a:	0019      	movs	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	430b      	orrs	r3, r1
 8000f52:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f54:	f7ff fa34 	bl	80003c0 <HAL_GetTick>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d111      	bne.n	8000f88 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f64:	e009      	b.n	8000f7a <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f66:	f7ff fa2b 	bl	80003c0 <HAL_GetTick>
 8000f6a:	0002      	movs	r2, r0
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	4a38      	ldr	r2, [pc, #224]	; (8001054 <HAL_RCC_ClockConfig+0x1bc>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d901      	bls.n	8000f7a <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e064      	b.n	8001044 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f7a:	4b35      	ldr	r3, [pc, #212]	; (8001050 <HAL_RCC_ClockConfig+0x1b8>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	220c      	movs	r2, #12
 8000f80:	4013      	ands	r3, r2
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	d1ef      	bne.n	8000f66 <HAL_RCC_ClockConfig+0xce>
 8000f86:	e024      	b.n	8000fd2 <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d11b      	bne.n	8000fc8 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f90:	e009      	b.n	8000fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f92:	f7ff fa15 	bl	80003c0 <HAL_GetTick>
 8000f96:	0002      	movs	r2, r0
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	4a2d      	ldr	r2, [pc, #180]	; (8001054 <HAL_RCC_ClockConfig+0x1bc>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e04e      	b.n	8001044 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <HAL_RCC_ClockConfig+0x1b8>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	220c      	movs	r2, #12
 8000fac:	4013      	ands	r3, r2
 8000fae:	2b08      	cmp	r3, #8
 8000fb0:	d1ef      	bne.n	8000f92 <HAL_RCC_ClockConfig+0xfa>
 8000fb2:	e00e      	b.n	8000fd2 <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fb4:	f7ff fa04 	bl	80003c0 <HAL_GetTick>
 8000fb8:	0002      	movs	r2, r0
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	4a25      	ldr	r2, [pc, #148]	; (8001054 <HAL_RCC_ClockConfig+0x1bc>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e03d      	b.n	8001044 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fc8:	4b21      	ldr	r3, [pc, #132]	; (8001050 <HAL_RCC_ClockConfig+0x1b8>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	220c      	movs	r2, #12
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d1f0      	bne.n	8000fb4 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fd2:	4b1e      	ldr	r3, [pc, #120]	; (800104c <HAL_RCC_ClockConfig+0x1b4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	401a      	ands	r2, r3
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d911      	bls.n	8001004 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <HAL_RCC_ClockConfig+0x1b4>)
 8000fe2:	4a1a      	ldr	r2, [pc, #104]	; (800104c <HAL_RCC_ClockConfig+0x1b4>)
 8000fe4:	6812      	ldr	r2, [r2, #0]
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	438a      	bics	r2, r1
 8000fea:	0011      	movs	r1, r2
 8000fec:	683a      	ldr	r2, [r7, #0]
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <HAL_RCC_ClockConfig+0x1b4>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	401a      	ands	r2, r3
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d001      	beq.n	8001004 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e01f      	b.n	8001044 <HAL_RCC_ClockConfig+0x1ac>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2204      	movs	r2, #4
 800100a:	4013      	ands	r3, r2
 800100c:	d008      	beq.n	8001020 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <HAL_RCC_ClockConfig+0x1b8>)
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_RCC_ClockConfig+0x1b8>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	4910      	ldr	r1, [pc, #64]	; (8001058 <HAL_RCC_ClockConfig+0x1c0>)
 8001016:	4019      	ands	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	430b      	orrs	r3, r1
 800101e:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001020:	f000 f820 	bl	8001064 <HAL_RCC_GetSysClockFreq>
 8001024:	0001      	movs	r1, r0
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_RCC_ClockConfig+0x1b8>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	091b      	lsrs	r3, r3, #4
 800102c:	220f      	movs	r2, #15
 800102e:	4013      	ands	r3, r2
 8001030:	4a0a      	ldr	r2, [pc, #40]	; (800105c <HAL_RCC_ClockConfig+0x1c4>)
 8001032:	5cd3      	ldrb	r3, [r2, r3]
 8001034:	000a      	movs	r2, r1
 8001036:	40da      	lsrs	r2, r3
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_RCC_ClockConfig+0x1c8>)
 800103a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800103c:	2000      	movs	r0, #0
 800103e:	f7ff f997 	bl	8000370 <HAL_InitTick>
  
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
}
 8001044:	0018      	movs	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	b004      	add	sp, #16
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40022000 	.word	0x40022000
 8001050:	40021000 	.word	0x40021000
 8001054:	00001388 	.word	0x00001388
 8001058:	fffff8ff 	.word	0xfffff8ff
 800105c:	08002628 	.word	0x08002628
 8001060:	20000000 	.word	0x20000000

08001064 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001064:	b590      	push	{r4, r7, lr}
 8001066:	b08f      	sub	sp, #60	; 0x3c
 8001068:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800106a:	2314      	movs	r3, #20
 800106c:	18fb      	adds	r3, r7, r3
 800106e:	4a28      	ldr	r2, [pc, #160]	; (8001110 <HAL_RCC_GetSysClockFreq+0xac>)
 8001070:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001072:	c313      	stmia	r3!, {r0, r1, r4}
 8001074:	6812      	ldr	r2, [r2, #0]
 8001076:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	4a26      	ldr	r2, [pc, #152]	; (8001114 <HAL_RCC_GetSysClockFreq+0xb0>)
 800107c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800107e:	c313      	stmia	r3!, {r0, r1, r4}
 8001080:	6812      	ldr	r2, [r2, #0]
 8001082:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001084:	2300      	movs	r3, #0
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001088:	2300      	movs	r3, #0
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
 800108c:	2300      	movs	r3, #0
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001094:	2300      	movs	r3, #0
 8001096:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001098:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <HAL_RCC_GetSysClockFreq+0xb4>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800109e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a0:	220c      	movs	r2, #12
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	d002      	beq.n	80010ae <HAL_RCC_GetSysClockFreq+0x4a>
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d003      	beq.n	80010b4 <HAL_RCC_GetSysClockFreq+0x50>
 80010ac:	e027      	b.n	80010fe <HAL_RCC_GetSysClockFreq+0x9a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	; (800111c <HAL_RCC_GetSysClockFreq+0xb8>)
 80010b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80010b2:	e027      	b.n	8001104 <HAL_RCC_GetSysClockFreq+0xa0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80010b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b6:	0c9b      	lsrs	r3, r3, #18
 80010b8:	220f      	movs	r2, #15
 80010ba:	4013      	ands	r3, r2
 80010bc:	2214      	movs	r2, #20
 80010be:	18ba      	adds	r2, r7, r2
 80010c0:	5cd3      	ldrb	r3, [r2, r3]
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <HAL_RCC_GetSysClockFreq+0xb4>)
 80010c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c8:	220f      	movs	r2, #15
 80010ca:	4013      	ands	r3, r2
 80010cc:	1d3a      	adds	r2, r7, #4
 80010ce:	5cd3      	ldrb	r3, [r2, r3]
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80010d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	025b      	lsls	r3, r3, #9
 80010d8:	4013      	ands	r3, r2
 80010da:	d009      	beq.n	80010f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80010dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010de:	480f      	ldr	r0, [pc, #60]	; (800111c <HAL_RCC_GetSysClockFreq+0xb8>)
 80010e0:	f7ff f812 	bl	8000108 <__udivsi3>
 80010e4:	0003      	movs	r3, r0
 80010e6:	001a      	movs	r2, r3
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	4353      	muls	r3, r2
 80010ec:	637b      	str	r3, [r7, #52]	; 0x34
 80010ee:	e003      	b.n	80010f8 <HAL_RCC_GetSysClockFreq+0x94>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <HAL_RCC_GetSysClockFreq+0xbc>)
 80010f4:	4353      	muls	r3, r2
 80010f6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80010f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80010fc:	e002      	b.n	8001104 <HAL_RCC_GetSysClockFreq+0xa0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001100:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001102:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001106:	0018      	movs	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	b00f      	add	sp, #60	; 0x3c
 800110c:	bd90      	pop	{r4, r7, pc}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	080025f8 	.word	0x080025f8
 8001114:	08002608 	.word	0x08002608
 8001118:	40021000 	.word	0x40021000
 800111c:	007a1200 	.word	0x007a1200
 8001120:	003d0900 	.word	0x003d0900

08001124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001128:	4b02      	ldr	r3, [pc, #8]	; (8001134 <HAL_RCC_GetHCLKFreq+0x10>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	0018      	movs	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	20000000 	.word	0x20000000

08001138 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e01e      	b.n	8001188 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	223d      	movs	r2, #61	; 0x3d
 800114e:	5c9b      	ldrb	r3, [r3, r2]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d107      	bne.n	8001166 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	223c      	movs	r2, #60	; 0x3c
 800115a:	2100      	movs	r1, #0
 800115c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	0018      	movs	r0, r3
 8001162:	f001 f8d9 	bl	8002318 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	223d      	movs	r2, #61	; 0x3d
 800116a:	2102      	movs	r1, #2
 800116c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3304      	adds	r3, #4
 8001176:	0019      	movs	r1, r3
 8001178:	0010      	movs	r0, r2
 800117a:	f000 f929 	bl	80013d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	223d      	movs	r2, #61	; 0x3d
 8001182:	2101      	movs	r1, #1
 8001184:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001186:	2300      	movs	r3, #0
}
 8001188:	0018      	movs	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	b002      	add	sp, #8
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e01e      	b.n	80011e0 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	223d      	movs	r2, #61	; 0x3d
 80011a6:	5c9b      	ldrb	r3, [r3, r2]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d107      	bne.n	80011be <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	223c      	movs	r2, #60	; 0x3c
 80011b2:	2100      	movs	r1, #0
 80011b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	0018      	movs	r0, r3
 80011ba:	f001 f879 	bl	80022b0 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	223d      	movs	r2, #61	; 0x3d
 80011c2:	2102      	movs	r1, #2
 80011c4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3304      	adds	r3, #4
 80011ce:	0019      	movs	r1, r3
 80011d0:	0010      	movs	r0, r2
 80011d2:	f000 f8fd 	bl	80013d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	223d      	movs	r2, #61	; 0x3d
 80011da:	2101      	movs	r1, #1
 80011dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	0018      	movs	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b002      	add	sp, #8
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	6839      	ldr	r1, [r7, #0]
 80011f8:	2201      	movs	r2, #1
 80011fa:	0018      	movs	r0, r3
 80011fc:	f000 fb4e 	bl	800189c <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a13      	ldr	r2, [pc, #76]	; (8001254 <HAL_TIM_PWM_Start+0x6c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d009      	beq.n	800121e <HAL_TIM_PWM_Start+0x36>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a12      	ldr	r2, [pc, #72]	; (8001258 <HAL_TIM_PWM_Start+0x70>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d004      	beq.n	800121e <HAL_TIM_PWM_Start+0x36>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a10      	ldr	r2, [pc, #64]	; (800125c <HAL_TIM_PWM_Start+0x74>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d101      	bne.n	8001222 <HAL_TIM_PWM_Start+0x3a>
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <HAL_TIM_PWM_Start+0x3c>
 8001222:	2300      	movs	r3, #0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d008      	beq.n	800123a <HAL_TIM_PWM_Start+0x52>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001232:	2180      	movs	r1, #128	; 0x80
 8001234:	0209      	lsls	r1, r1, #8
 8001236:	430a      	orrs	r2, r1
 8001238:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	6812      	ldr	r2, [r2, #0]
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	2101      	movs	r1, #1
 8001246:	430a      	orrs	r2, r1
 8001248:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	0018      	movs	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	b002      	add	sp, #8
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40012c00 	.word	0x40012c00
 8001258:	40014400 	.word	0x40014400
 800125c:	40014800 	.word	0x40014800

08001260 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	223c      	movs	r2, #60	; 0x3c
 8001270:	5c9b      	ldrb	r3, [r3, r2]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d101      	bne.n	800127a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001276:	2302      	movs	r3, #2
 8001278:	e0a4      	b.n	80013c4 <HAL_TIM_PWM_ConfigChannel+0x164>
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	223c      	movs	r2, #60	; 0x3c
 800127e:	2101      	movs	r1, #1
 8001280:	5499      	strb	r1, [r3, r2]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	223d      	movs	r2, #61	; 0x3d
 8001286:	2102      	movs	r1, #2
 8001288:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b04      	cmp	r3, #4
 800128e:	d029      	beq.n	80012e4 <HAL_TIM_PWM_ConfigChannel+0x84>
 8001290:	d802      	bhi.n	8001298 <HAL_TIM_PWM_ConfigChannel+0x38>
 8001292:	2b00      	cmp	r3, #0
 8001294:	d005      	beq.n	80012a2 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
    }
    break;

    default:
    break;
 8001296:	e08c      	b.n	80013b2 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8001298:	2b08      	cmp	r3, #8
 800129a:	d046      	beq.n	800132a <HAL_TIM_PWM_ConfigChannel+0xca>
 800129c:	2b0c      	cmp	r3, #12
 800129e:	d065      	beq.n	800136c <HAL_TIM_PWM_ConfigChannel+0x10c>
    break;
 80012a0:	e087      	b.n	80013b2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	0011      	movs	r1, r2
 80012aa:	0018      	movs	r0, r3
 80012ac:	f000 f8fe 	bl	80014ac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	6812      	ldr	r2, [r2, #0]
 80012b8:	6992      	ldr	r2, [r2, #24]
 80012ba:	2108      	movs	r1, #8
 80012bc:	430a      	orrs	r2, r1
 80012be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	6812      	ldr	r2, [r2, #0]
 80012c8:	6992      	ldr	r2, [r2, #24]
 80012ca:	2104      	movs	r1, #4
 80012cc:	438a      	bics	r2, r1
 80012ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	6812      	ldr	r2, [r2, #0]
 80012d8:	6991      	ldr	r1, [r2, #24]
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	6912      	ldr	r2, [r2, #16]
 80012de:	430a      	orrs	r2, r1
 80012e0:	619a      	str	r2, [r3, #24]
    break;
 80012e2:	e066      	b.n	80013b2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	0011      	movs	r1, r2
 80012ec:	0018      	movs	r0, r3
 80012ee:	f000 f961 	bl	80015b4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	6812      	ldr	r2, [r2, #0]
 80012fa:	6992      	ldr	r2, [r2, #24]
 80012fc:	2180      	movs	r1, #128	; 0x80
 80012fe:	0109      	lsls	r1, r1, #4
 8001300:	430a      	orrs	r2, r1
 8001302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	6992      	ldr	r2, [r2, #24]
 800130e:	492f      	ldr	r1, [pc, #188]	; (80013cc <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8001310:	400a      	ands	r2, r1
 8001312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	6812      	ldr	r2, [r2, #0]
 800131c:	6991      	ldr	r1, [r2, #24]
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	6912      	ldr	r2, [r2, #16]
 8001322:	0212      	lsls	r2, r2, #8
 8001324:	430a      	orrs	r2, r1
 8001326:	619a      	str	r2, [r3, #24]
    break;
 8001328:	e043      	b.n	80013b2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	0011      	movs	r1, r2
 8001332:	0018      	movs	r0, r3
 8001334:	f000 f9c2 	bl	80016bc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	69d2      	ldr	r2, [r2, #28]
 8001342:	2108      	movs	r1, #8
 8001344:	430a      	orrs	r2, r1
 8001346:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	69d2      	ldr	r2, [r2, #28]
 8001352:	2104      	movs	r1, #4
 8001354:	438a      	bics	r2, r1
 8001356:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	6812      	ldr	r2, [r2, #0]
 8001360:	69d1      	ldr	r1, [r2, #28]
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	6912      	ldr	r2, [r2, #16]
 8001366:	430a      	orrs	r2, r1
 8001368:	61da      	str	r2, [r3, #28]
    break;
 800136a:	e022      	b.n	80013b2 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68ba      	ldr	r2, [r7, #8]
 8001372:	0011      	movs	r1, r2
 8001374:	0018      	movs	r0, r3
 8001376:	f000 fa27 	bl	80017c8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	6812      	ldr	r2, [r2, #0]
 8001382:	69d2      	ldr	r2, [r2, #28]
 8001384:	2180      	movs	r1, #128	; 0x80
 8001386:	0109      	lsls	r1, r1, #4
 8001388:	430a      	orrs	r2, r1
 800138a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	6812      	ldr	r2, [r2, #0]
 8001394:	69d2      	ldr	r2, [r2, #28]
 8001396:	490d      	ldr	r1, [pc, #52]	; (80013cc <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8001398:	400a      	ands	r2, r1
 800139a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	6812      	ldr	r2, [r2, #0]
 80013a4:	69d1      	ldr	r1, [r2, #28]
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	6912      	ldr	r2, [r2, #16]
 80013aa:	0212      	lsls	r2, r2, #8
 80013ac:	430a      	orrs	r2, r1
 80013ae:	61da      	str	r2, [r3, #28]
    break;
 80013b0:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	223d      	movs	r2, #61	; 0x3d
 80013b6:	2101      	movs	r1, #1
 80013b8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	223c      	movs	r2, #60	; 0x3c
 80013be:	2100      	movs	r1, #0
 80013c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	0018      	movs	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b004      	add	sp, #16
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	fffffbff 	.word	0xfffffbff

080013d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a2b      	ldr	r2, [pc, #172]	; (8001494 <TIM_Base_SetConfig+0xc4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d003      	beq.n	80013f4 <TIM_Base_SetConfig+0x24>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a2a      	ldr	r2, [pc, #168]	; (8001498 <TIM_Base_SetConfig+0xc8>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d108      	bne.n	8001406 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2270      	movs	r2, #112	; 0x70
 80013f8:	4393      	bics	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a22      	ldr	r2, [pc, #136]	; (8001494 <TIM_Base_SetConfig+0xc4>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d00f      	beq.n	800142e <TIM_Base_SetConfig+0x5e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a21      	ldr	r2, [pc, #132]	; (8001498 <TIM_Base_SetConfig+0xc8>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d00b      	beq.n	800142e <TIM_Base_SetConfig+0x5e>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a20      	ldr	r2, [pc, #128]	; (800149c <TIM_Base_SetConfig+0xcc>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d007      	beq.n	800142e <TIM_Base_SetConfig+0x5e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a1f      	ldr	r2, [pc, #124]	; (80014a0 <TIM_Base_SetConfig+0xd0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d003      	beq.n	800142e <TIM_Base_SetConfig+0x5e>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a1e      	ldr	r2, [pc, #120]	; (80014a4 <TIM_Base_SetConfig+0xd4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d108      	bne.n	8001440 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4a1d      	ldr	r2, [pc, #116]	; (80014a8 <TIM_Base_SetConfig+0xd8>)
 8001432:	4013      	ands	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	4313      	orrs	r3, r2
 800143e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2280      	movs	r2, #128	; 0x80
 8001444:	4393      	bics	r3, r2
 8001446:	001a      	movs	r2, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	4313      	orrs	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <TIM_Base_SetConfig+0xc4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d007      	beq.n	800147e <TIM_Base_SetConfig+0xae>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <TIM_Base_SetConfig+0xd0>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d003      	beq.n	800147e <TIM_Base_SetConfig+0xae>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <TIM_Base_SetConfig+0xd4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d103      	bne.n	8001486 <TIM_Base_SetConfig+0xb6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	691a      	ldr	r2, [r3, #16]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	615a      	str	r2, [r3, #20]
}
 800148c:	46c0      	nop			; (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	b004      	add	sp, #16
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40012c00 	.word	0x40012c00
 8001498:	40000400 	.word	0x40000400
 800149c:	40002000 	.word	0x40002000
 80014a0:	40014400 	.word	0x40014400
 80014a4:	40014800 	.word	0x40014800
 80014a8:	fffffcff 	.word	0xfffffcff

080014ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	2201      	movs	r2, #1
 80014c8:	4393      	bics	r3, r2
 80014ca:	001a      	movs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2270      	movs	r2, #112	; 0x70
 80014e6:	4393      	bics	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2203      	movs	r2, #3
 80014ee:	4393      	bics	r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	2202      	movs	r2, #2
 8001500:	4393      	bics	r3, r2
 8001502:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	4313      	orrs	r3, r2
 800150c:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a23      	ldr	r2, [pc, #140]	; (80015a0 <TIM_OC1_SetConfig+0xf4>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d007      	beq.n	8001526 <TIM_OC1_SetConfig+0x7a>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a22      	ldr	r2, [pc, #136]	; (80015a4 <TIM_OC1_SetConfig+0xf8>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d003      	beq.n	8001526 <TIM_OC1_SetConfig+0x7a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a21      	ldr	r2, [pc, #132]	; (80015a8 <TIM_OC1_SetConfig+0xfc>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d10c      	bne.n	8001540 <TIM_OC1_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2208      	movs	r2, #8
 800152a:	4393      	bics	r3, r2
 800152c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	4313      	orrs	r3, r2
 8001536:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2204      	movs	r2, #4
 800153c:	4393      	bics	r3, r2
 800153e:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <TIM_OC1_SetConfig+0xf4>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d007      	beq.n	8001558 <TIM_OC1_SetConfig+0xac>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a16      	ldr	r2, [pc, #88]	; (80015a4 <TIM_OC1_SetConfig+0xf8>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d003      	beq.n	8001558 <TIM_OC1_SetConfig+0xac>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a15      	ldr	r2, [pc, #84]	; (80015a8 <TIM_OC1_SetConfig+0xfc>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d111      	bne.n	800157c <TIM_OC1_SetConfig+0xd0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4a14      	ldr	r2, [pc, #80]	; (80015ac <TIM_OC1_SetConfig+0x100>)
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4a13      	ldr	r2, [pc, #76]	; (80015b0 <TIM_OC1_SetConfig+0x104>)
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	621a      	str	r2, [r3, #32]
}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	46bd      	mov	sp, r7
 800159a:	b006      	add	sp, #24
 800159c:	bd80      	pop	{r7, pc}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	40012c00 	.word	0x40012c00
 80015a4:	40014400 	.word	0x40014400
 80015a8:	40014800 	.word	0x40014800
 80015ac:	fffffeff 	.word	0xfffffeff
 80015b0:	fffffdff 	.word	0xfffffdff

080015b4 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	2210      	movs	r2, #16
 80015d0:	4393      	bics	r3, r2
 80015d2:	001a      	movs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4a2c      	ldr	r2, [pc, #176]	; (80016a0 <TIM_OC2_SetConfig+0xec>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4a2b      	ldr	r2, [pc, #172]	; (80016a4 <TIM_OC2_SetConfig+0xf0>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	021b      	lsls	r3, r3, #8
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	4313      	orrs	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	2220      	movs	r2, #32
 800160a:	4393      	bics	r3, r2
 800160c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	4313      	orrs	r3, r2
 8001618:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a22      	ldr	r2, [pc, #136]	; (80016a8 <TIM_OC2_SetConfig+0xf4>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d10d      	bne.n	800163e <TIM_OC2_SetConfig+0x8a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	2280      	movs	r2, #128	; 0x80
 8001626:	4393      	bics	r3, r2
 8001628:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	4313      	orrs	r3, r2
 8001634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2240      	movs	r2, #64	; 0x40
 800163a:	4393      	bics	r3, r2
 800163c:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a19      	ldr	r2, [pc, #100]	; (80016a8 <TIM_OC2_SetConfig+0xf4>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d007      	beq.n	8001656 <TIM_OC2_SetConfig+0xa2>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a18      	ldr	r2, [pc, #96]	; (80016ac <TIM_OC2_SetConfig+0xf8>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d003      	beq.n	8001656 <TIM_OC2_SetConfig+0xa2>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <TIM_OC2_SetConfig+0xfc>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d113      	bne.n	800167e <TIM_OC2_SetConfig+0xca>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4a16      	ldr	r2, [pc, #88]	; (80016b4 <TIM_OC2_SetConfig+0x100>)
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4a15      	ldr	r2, [pc, #84]	; (80016b8 <TIM_OC2_SetConfig+0x104>)
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	621a      	str	r2, [r3, #32]
}
 8001698:	46c0      	nop			; (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	b006      	add	sp, #24
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	ffff8fff 	.word	0xffff8fff
 80016a4:	fffffcff 	.word	0xfffffcff
 80016a8:	40012c00 	.word	0x40012c00
 80016ac:	40014400 	.word	0x40014400
 80016b0:	40014800 	.word	0x40014800
 80016b4:	fffffbff 	.word	0xfffffbff
 80016b8:	fffff7ff 	.word	0xfffff7ff

080016bc <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	4a33      	ldr	r2, [pc, #204]	; (80017a4 <TIM_OC3_SetConfig+0xe8>)
 80016d8:	401a      	ands	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2270      	movs	r2, #112	; 0x70
 80016f4:	4393      	bics	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2203      	movs	r2, #3
 80016fc:	4393      	bics	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	4313      	orrs	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	4a26      	ldr	r2, [pc, #152]	; (80017a8 <TIM_OC3_SetConfig+0xec>)
 800170e:	4013      	ands	r3, r2
 8001710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	4313      	orrs	r3, r2
 800171c:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a22      	ldr	r2, [pc, #136]	; (80017ac <TIM_OC3_SetConfig+0xf0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d10d      	bne.n	8001742 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	4a21      	ldr	r2, [pc, #132]	; (80017b0 <TIM_OC3_SetConfig+0xf4>)
 800172a:	4013      	ands	r3, r2
 800172c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	4313      	orrs	r3, r2
 8001738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	4a1d      	ldr	r2, [pc, #116]	; (80017b4 <TIM_OC3_SetConfig+0xf8>)
 800173e:	4013      	ands	r3, r2
 8001740:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a19      	ldr	r2, [pc, #100]	; (80017ac <TIM_OC3_SetConfig+0xf0>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d007      	beq.n	800175a <TIM_OC3_SetConfig+0x9e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a1a      	ldr	r2, [pc, #104]	; (80017b8 <TIM_OC3_SetConfig+0xfc>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d003      	beq.n	800175a <TIM_OC3_SetConfig+0x9e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a19      	ldr	r2, [pc, #100]	; (80017bc <TIM_OC3_SetConfig+0x100>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d113      	bne.n	8001782 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <TIM_OC3_SetConfig+0x104>)
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4a17      	ldr	r2, [pc, #92]	; (80017c4 <TIM_OC3_SetConfig+0x108>)
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	011b      	lsls	r3, r3, #4
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	011b      	lsls	r3, r3, #4
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	621a      	str	r2, [r3, #32]
}
 800179c:	46c0      	nop			; (mov r8, r8)
 800179e:	46bd      	mov	sp, r7
 80017a0:	b006      	add	sp, #24
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	fffffeff 	.word	0xfffffeff
 80017a8:	fffffdff 	.word	0xfffffdff
 80017ac:	40012c00 	.word	0x40012c00
 80017b0:	fffff7ff 	.word	0xfffff7ff
 80017b4:	fffffbff 	.word	0xfffffbff
 80017b8:	40014400 	.word	0x40014400
 80017bc:	40014800 	.word	0x40014800
 80017c0:	ffffefff 	.word	0xffffefff
 80017c4:	ffffdfff 	.word	0xffffdfff

080017c8 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	4a26      	ldr	r2, [pc, #152]	; (800187c <TIM_OC4_SetConfig+0xb4>)
 80017e4:	401a      	ands	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4a20      	ldr	r2, [pc, #128]	; (8001880 <TIM_OC4_SetConfig+0xb8>)
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	4a1f      	ldr	r2, [pc, #124]	; (8001884 <TIM_OC4_SetConfig+0xbc>)
 8001808:	4013      	ands	r3, r2
 800180a:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4a1b      	ldr	r2, [pc, #108]	; (8001888 <TIM_OC4_SetConfig+0xc0>)
 800181c:	4013      	ands	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	031b      	lsls	r3, r3, #12
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	4313      	orrs	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a17      	ldr	r2, [pc, #92]	; (800188c <TIM_OC4_SetConfig+0xc4>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d007      	beq.n	8001844 <TIM_OC4_SetConfig+0x7c>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a16      	ldr	r2, [pc, #88]	; (8001890 <TIM_OC4_SetConfig+0xc8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d003      	beq.n	8001844 <TIM_OC4_SetConfig+0x7c>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a15      	ldr	r2, [pc, #84]	; (8001894 <TIM_OC4_SetConfig+0xcc>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d109      	bne.n	8001858 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	4a14      	ldr	r2, [pc, #80]	; (8001898 <TIM_OC4_SetConfig+0xd0>)
 8001848:	4013      	ands	r3, r2
 800184a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	019b      	lsls	r3, r3, #6
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	4313      	orrs	r3, r2
 8001856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	621a      	str	r2, [r3, #32]
}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	46bd      	mov	sp, r7
 8001876:	b006      	add	sp, #24
 8001878:	bd80      	pop	{r7, pc}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	ffffefff 	.word	0xffffefff
 8001880:	ffff8fff 	.word	0xffff8fff
 8001884:	fffffcff 	.word	0xfffffcff
 8001888:	ffffdfff 	.word	0xffffdfff
 800188c:	40012c00 	.word	0x40012c00
 8001890:	40014400 	.word	0x40014400
 8001894:	40014800 	.word	0x40014800
 8001898:	ffffbfff 	.word	0xffffbfff

0800189c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80018ac:	2201      	movs	r2, #1
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	409a      	lsls	r2, r3
 80018b2:	0013      	movs	r3, r2
 80018b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	43d2      	mvns	r2, r2
 80018be:	401a      	ands	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6a1a      	ldr	r2, [r3, #32]
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	4099      	lsls	r1, r3
 80018ce:	000b      	movs	r3, r1
 80018d0:	431a      	orrs	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	621a      	str	r2, [r3, #32]
}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	46bd      	mov	sp, r7
 80018da:	b006      	add	sp, #24
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
 80018e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	223c      	movs	r2, #60	; 0x3c
 80018ec:	5c9b      	ldrb	r3, [r3, r2]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d101      	bne.n	80018f6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e032      	b.n	800195c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	223c      	movs	r2, #60	; 0x3c
 80018fa:	2101      	movs	r1, #1
 80018fc:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	223d      	movs	r2, #61	; 0x3d
 8001902:	2102      	movs	r1, #2
 8001904:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	6852      	ldr	r2, [r2, #4]
 8001910:	2170      	movs	r1, #112	; 0x70
 8001912:	438a      	bics	r2, r1
 8001914:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	6851      	ldr	r1, [r2, #4]
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	6892      	ldr	r2, [r2, #8]
 8001932:	2180      	movs	r1, #128	; 0x80
 8001934:	438a      	bics	r2, r1
 8001936:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	6891      	ldr	r1, [r2, #8]
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	6852      	ldr	r2, [r2, #4]
 8001946:	430a      	orrs	r2, r1
 8001948:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	223d      	movs	r2, #61	; 0x3d
 800194e:	2101      	movs	r1, #1
 8001950:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	223c      	movs	r2, #60	; 0x3c
 8001956:	2100      	movs	r1, #0
 8001958:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	0018      	movs	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	b002      	add	sp, #8
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	223c      	movs	r2, #60	; 0x3c
 8001976:	5c9b      	ldrb	r3, [r3, r2]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800197c:	2302      	movs	r3, #2
 800197e:	e04d      	b.n	8001a1c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	223c      	movs	r2, #60	; 0x3c
 8001984:	2101      	movs	r1, #1
 8001986:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	223d      	movs	r2, #61	; 0x3d
 800198c:	2102      	movs	r1, #2
 800198e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	22ff      	movs	r2, #255	; 0xff
 8001994:	4393      	bics	r3, r2
 8001996:	001a      	movs	r2, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	4313      	orrs	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4a20      	ldr	r2, [pc, #128]	; (8001a24 <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 80019a4:	401a      	ands	r2, r3
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4a1d      	ldr	r2, [pc, #116]	; (8001a28 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>)
 80019b2:	401a      	ands	r2, r3
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4a1b      	ldr	r2, [pc, #108]	; (8001a2c <HAL_TIMEx_ConfigBreakDeadTime+0xc8>)
 80019c0:	401a      	ands	r2, r3
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4a18      	ldr	r2, [pc, #96]	; (8001a30 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>)
 80019ce:	401a      	ands	r2, r3
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4a16      	ldr	r2, [pc, #88]	; (8001a34 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 80019dc:	401a      	ands	r2, r3
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4a13      	ldr	r2, [pc, #76]	; (8001a38 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>)
 80019ea:	401a      	ands	r2, r3
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4a11      	ldr	r2, [pc, #68]	; (8001a3c <HAL_TIMEx_ConfigBreakDeadTime+0xd8>)
 80019f8:	401a      	ands	r2, r3
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	645a      	str	r2, [r3, #68]	; 0x44
  
  htim->State = HAL_TIM_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	223d      	movs	r2, #61	; 0x3d
 8001a0e:	2101      	movs	r1, #1
 8001a10:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	223c      	movs	r2, #60	; 0x3c
 8001a16:	2100      	movs	r1, #0
 8001a18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	b004      	add	sp, #16
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	fffffcff 	.word	0xfffffcff
 8001a28:	fffffbff 	.word	0xfffffbff
 8001a2c:	fffff7ff 	.word	0xfffff7ff
 8001a30:	ffffefff 	.word	0xffffefff
 8001a34:	ffffdfff 	.word	0xffffdfff
 8001a38:	ffffbfff 	.word	0xffffbfff
 8001a3c:	ffff7fff 	.word	0xffff7fff

08001a40 <atualizarEixoX>:
void atualizarEixoX();

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void atualizarEixoX(){
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	 sensorStatus_1_A =  HAL_GPIO_ReadPin(SENSOR_1_A_PORT, SENSOR_1_A_PIN);
 8001a44:	4b7f      	ldr	r3, [pc, #508]	; (8001c44 <atualizarEixoX+0x204>)
 8001a46:	2101      	movs	r1, #1
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f7fe ff13 	bl	8000874 <HAL_GPIO_ReadPin>
 8001a4e:	0003      	movs	r3, r0
 8001a50:	001a      	movs	r2, r3
 8001a52:	4b7d      	ldr	r3, [pc, #500]	; (8001c48 <atualizarEixoX+0x208>)
 8001a54:	701a      	strb	r2, [r3, #0]
	 sensorStatus_1_B =  HAL_GPIO_ReadPin(SENSOR_1_B_PORT, SENSOR_1_B_PIN);
 8001a56:	4b7b      	ldr	r3, [pc, #492]	; (8001c44 <atualizarEixoX+0x204>)
 8001a58:	2102      	movs	r1, #2
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f7fe ff0a 	bl	8000874 <HAL_GPIO_ReadPin>
 8001a60:	0003      	movs	r3, r0
 8001a62:	001a      	movs	r2, r3
 8001a64:	4b79      	ldr	r3, [pc, #484]	; (8001c4c <atualizarEixoX+0x20c>)
 8001a66:	701a      	strb	r2, [r3, #0]

	  if(sensorStatus_1_A == GPIO_PIN_RESET && sensorStatus_1_B == GPIO_PIN_RESET){
 8001a68:	4b77      	ldr	r3, [pc, #476]	; (8001c48 <atualizarEixoX+0x208>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d119      	bne.n	8001aa4 <atualizarEixoX+0x64>
 8001a70:	4b76      	ldr	r3, [pc, #472]	; (8001c4c <atualizarEixoX+0x20c>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d115      	bne.n	8001aa4 <atualizarEixoX+0x64>
		  if(stepStatusOld_1 == 3){
 8001a78:	4b75      	ldr	r3, [pc, #468]	; (8001c50 <atualizarEixoX+0x210>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	d105      	bne.n	8001a8c <atualizarEixoX+0x4c>
			  actualPoint_1++;
 8001a80:	4b74      	ldr	r3, [pc, #464]	; (8001c54 <atualizarEixoX+0x214>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	4b73      	ldr	r3, [pc, #460]	; (8001c54 <atualizarEixoX+0x214>)
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	e008      	b.n	8001a9e <atualizarEixoX+0x5e>
		  }else if(stepStatusOld_1 == 1){
 8001a8c:	4b70      	ldr	r3, [pc, #448]	; (8001c50 <atualizarEixoX+0x210>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d104      	bne.n	8001a9e <atualizarEixoX+0x5e>
			  actualPoint_1--;
 8001a94:	4b6f      	ldr	r3, [pc, #444]	; (8001c54 <atualizarEixoX+0x214>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	1e5a      	subs	r2, r3, #1
 8001a9a:	4b6e      	ldr	r3, [pc, #440]	; (8001c54 <atualizarEixoX+0x214>)
 8001a9c:	601a      	str	r2, [r3, #0]
		  }

		  stepStatusOld_1 = 0;
 8001a9e:	4b6c      	ldr	r3, [pc, #432]	; (8001c50 <atualizarEixoX+0x210>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
	  }

	  if(sensorStatus_1_A == GPIO_PIN_SET && sensorStatus_1_B == GPIO_PIN_RESET){
 8001aa4:	4b68      	ldr	r3, [pc, #416]	; (8001c48 <atualizarEixoX+0x208>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d119      	bne.n	8001ae0 <atualizarEixoX+0xa0>
 8001aac:	4b67      	ldr	r3, [pc, #412]	; (8001c4c <atualizarEixoX+0x20c>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d115      	bne.n	8001ae0 <atualizarEixoX+0xa0>
		  if(stepStatusOld_1 == 0){
 8001ab4:	4b66      	ldr	r3, [pc, #408]	; (8001c50 <atualizarEixoX+0x210>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d105      	bne.n	8001ac8 <atualizarEixoX+0x88>
			  actualPoint_1++;
 8001abc:	4b65      	ldr	r3, [pc, #404]	; (8001c54 <atualizarEixoX+0x214>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	4b64      	ldr	r3, [pc, #400]	; (8001c54 <atualizarEixoX+0x214>)
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	e008      	b.n	8001ada <atualizarEixoX+0x9a>
		  }else if(stepStatusOld_1 == 2){
 8001ac8:	4b61      	ldr	r3, [pc, #388]	; (8001c50 <atualizarEixoX+0x210>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d104      	bne.n	8001ada <atualizarEixoX+0x9a>
			  actualPoint_1--;
 8001ad0:	4b60      	ldr	r3, [pc, #384]	; (8001c54 <atualizarEixoX+0x214>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	1e5a      	subs	r2, r3, #1
 8001ad6:	4b5f      	ldr	r3, [pc, #380]	; (8001c54 <atualizarEixoX+0x214>)
 8001ad8:	601a      	str	r2, [r3, #0]
		  }

		  stepStatusOld_1 = 1;
 8001ada:	4b5d      	ldr	r3, [pc, #372]	; (8001c50 <atualizarEixoX+0x210>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
	  }

	  if(sensorStatus_1_A == GPIO_PIN_SET && sensorStatus_1_B == GPIO_PIN_SET){
 8001ae0:	4b59      	ldr	r3, [pc, #356]	; (8001c48 <atualizarEixoX+0x208>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d119      	bne.n	8001b1c <atualizarEixoX+0xdc>
 8001ae8:	4b58      	ldr	r3, [pc, #352]	; (8001c4c <atualizarEixoX+0x20c>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d115      	bne.n	8001b1c <atualizarEixoX+0xdc>
		  if(stepStatusOld_1 == 1){
 8001af0:	4b57      	ldr	r3, [pc, #348]	; (8001c50 <atualizarEixoX+0x210>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d105      	bne.n	8001b04 <atualizarEixoX+0xc4>
			  actualPoint_1++;
 8001af8:	4b56      	ldr	r3, [pc, #344]	; (8001c54 <atualizarEixoX+0x214>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	4b55      	ldr	r3, [pc, #340]	; (8001c54 <atualizarEixoX+0x214>)
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	e008      	b.n	8001b16 <atualizarEixoX+0xd6>
		  }else if(stepStatusOld_1 == 3){
 8001b04:	4b52      	ldr	r3, [pc, #328]	; (8001c50 <atualizarEixoX+0x210>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d104      	bne.n	8001b16 <atualizarEixoX+0xd6>
			  actualPoint_1--;
 8001b0c:	4b51      	ldr	r3, [pc, #324]	; (8001c54 <atualizarEixoX+0x214>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	1e5a      	subs	r2, r3, #1
 8001b12:	4b50      	ldr	r3, [pc, #320]	; (8001c54 <atualizarEixoX+0x214>)
 8001b14:	601a      	str	r2, [r3, #0]
		  }

		  stepStatusOld_1 = 2;
 8001b16:	4b4e      	ldr	r3, [pc, #312]	; (8001c50 <atualizarEixoX+0x210>)
 8001b18:	2202      	movs	r2, #2
 8001b1a:	601a      	str	r2, [r3, #0]
	  }

	  if(sensorStatus_1_A == GPIO_PIN_SET && sensorStatus_1_B == GPIO_PIN_SET){
 8001b1c:	4b4a      	ldr	r3, [pc, #296]	; (8001c48 <atualizarEixoX+0x208>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d119      	bne.n	8001b58 <atualizarEixoX+0x118>
 8001b24:	4b49      	ldr	r3, [pc, #292]	; (8001c4c <atualizarEixoX+0x20c>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d115      	bne.n	8001b58 <atualizarEixoX+0x118>
		  if(stepStatusOld_1 == 2){
 8001b2c:	4b48      	ldr	r3, [pc, #288]	; (8001c50 <atualizarEixoX+0x210>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d105      	bne.n	8001b40 <atualizarEixoX+0x100>
			  actualPoint_1++;
 8001b34:	4b47      	ldr	r3, [pc, #284]	; (8001c54 <atualizarEixoX+0x214>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	4b46      	ldr	r3, [pc, #280]	; (8001c54 <atualizarEixoX+0x214>)
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	e008      	b.n	8001b52 <atualizarEixoX+0x112>
		  }else if(stepStatusOld_1 == 3){
 8001b40:	4b43      	ldr	r3, [pc, #268]	; (8001c50 <atualizarEixoX+0x210>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	d104      	bne.n	8001b52 <atualizarEixoX+0x112>
			  actualPoint_1--;
 8001b48:	4b42      	ldr	r3, [pc, #264]	; (8001c54 <atualizarEixoX+0x214>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	1e5a      	subs	r2, r3, #1
 8001b4e:	4b41      	ldr	r3, [pc, #260]	; (8001c54 <atualizarEixoX+0x214>)
 8001b50:	601a      	str	r2, [r3, #0]
		  }

		  stepStatusOld_1 = 3;
 8001b52:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <atualizarEixoX+0x210>)
 8001b54:	2203      	movs	r2, #3
 8001b56:	601a      	str	r2, [r3, #0]
	  }

	  /* Cálculo PWM */
	  dutyCycle = abs((double)(setPoint_1 - actualPoint_1)) * (double)P_FRACTION;
 8001b58:	4b3f      	ldr	r3, [pc, #252]	; (8001c58 <atualizarEixoX+0x218>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b3d      	ldr	r3, [pc, #244]	; (8001c54 <atualizarEixoX+0x214>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	0018      	movs	r0, r3
 8001b64:	f7fe fb90 	bl	8000288 <__aeabi_i2d>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	000c      	movs	r4, r1
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	0021      	movs	r1, r4
 8001b70:	f000 fd0d 	bl	800258e <abs>
 8001b74:	0003      	movs	r3, r0
 8001b76:	0018      	movs	r0, r3
 8001b78:	f7fe fb86 	bl	8000288 <__aeabi_i2d>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	000c      	movs	r4, r1
 8001b80:	0018      	movs	r0, r3
 8001b82:	0021      	movs	r1, r4
 8001b84:	f7fe fb4c 	bl	8000220 <__aeabi_d2iz>
 8001b88:	0002      	movs	r2, r0
 8001b8a:	4b34      	ldr	r3, [pc, #208]	; (8001c5c <atualizarEixoX+0x21c>)
 8001b8c:	601a      	str	r2, [r3, #0]

	  if(dutyCycle < MIN_DUTYCYCLE){
 8001b8e:	4b33      	ldr	r3, [pc, #204]	; (8001c5c <atualizarEixoX+0x21c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b63      	cmp	r3, #99	; 0x63
 8001b94:	dc02      	bgt.n	8001b9c <atualizarEixoX+0x15c>
		dutyCycle = MIN_DUTYCYCLE;
 8001b96:	4b31      	ldr	r3, [pc, #196]	; (8001c5c <atualizarEixoX+0x21c>)
 8001b98:	2264      	movs	r2, #100	; 0x64
 8001b9a:	601a      	str	r2, [r3, #0]
	  }
	  if(dutyCycle > MAX_DUTYCYCLE){
 8001b9c:	4b2f      	ldr	r3, [pc, #188]	; (8001c5c <atualizarEixoX+0x21c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b7f      	cmp	r3, #127	; 0x7f
 8001ba2:	dd02      	ble.n	8001baa <atualizarEixoX+0x16a>
		dutyCycle = MAX_DUTYCYCLE;
 8001ba4:	4b2d      	ldr	r3, [pc, #180]	; (8001c5c <atualizarEixoX+0x21c>)
 8001ba6:	227f      	movs	r2, #127	; 0x7f
 8001ba8:	601a      	str	r2, [r3, #0]
	  }

	  if(dutyCycle < MIN_DUTYCYCLE){
 8001baa:	4b2c      	ldr	r3, [pc, #176]	; (8001c5c <atualizarEixoX+0x21c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b63      	cmp	r3, #99	; 0x63
 8001bb0:	dc02      	bgt.n	8001bb8 <atualizarEixoX+0x178>
		dutyCycle = MIN_DUTYCYCLE;
 8001bb2:	4b2a      	ldr	r3, [pc, #168]	; (8001c5c <atualizarEixoX+0x21c>)
 8001bb4:	2264      	movs	r2, #100	; 0x64
 8001bb6:	601a      	str	r2, [r3, #0]
	  }
	  if(dutyCycle > MAX_DUTYCYCLE){
 8001bb8:	4b28      	ldr	r3, [pc, #160]	; (8001c5c <atualizarEixoX+0x21c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b7f      	cmp	r3, #127	; 0x7f
 8001bbe:	dd02      	ble.n	8001bc6 <atualizarEixoX+0x186>
		dutyCycle = MAX_DUTYCYCLE;
 8001bc0:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <atualizarEixoX+0x21c>)
 8001bc2:	227f      	movs	r2, #127	; 0x7f
 8001bc4:	601a      	str	r2, [r3, #0]
	  }
	  if(abs((double)(setPoint_1 - actualPoint_1)) < STEP_MARGIN){
 8001bc6:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <atualizarEixoX+0x218>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <atualizarEixoX+0x214>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f7fe fb59 	bl	8000288 <__aeabi_i2d>
 8001bd6:	0003      	movs	r3, r0
 8001bd8:	000c      	movs	r4, r1
 8001bda:	0018      	movs	r0, r3
 8001bdc:	0021      	movs	r1, r4
 8001bde:	f000 fcd6 	bl	800258e <abs>
 8001be2:	1e03      	subs	r3, r0, #0
 8001be4:	dc08      	bgt.n	8001bf8 <atualizarEixoX+0x1b8>
			/* Desliga o motor pras duas direções */
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, 0);
 8001be6:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <atualizarEixoX+0x220>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2200      	movs	r2, #0
 8001bec:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001bee:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <atualizarEixoX+0x224>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	635a      	str	r2, [r3, #52]	; 0x34
			/* Gira na outra direção */
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, 0);
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 255 - dutyCycle);
		}
	  }
}
 8001bf6:	e021      	b.n	8001c3c <atualizarEixoX+0x1fc>
		if(actualPoint_1 < setPoint_1){
 8001bf8:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <atualizarEixoX+0x214>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <atualizarEixoX+0x218>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	da0a      	bge.n	8001c1a <atualizarEixoX+0x1da>
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, 255 - dutyCycle);
 8001c04:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <atualizarEixoX+0x220>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a14      	ldr	r2, [pc, #80]	; (8001c5c <atualizarEixoX+0x21c>)
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	21ff      	movs	r1, #255	; 0xff
 8001c0e:	1a8a      	subs	r2, r1, r2
 8001c10:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001c12:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <atualizarEixoX+0x224>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2200      	movs	r2, #0
 8001c18:	635a      	str	r2, [r3, #52]	; 0x34
		if(actualPoint_1 > setPoint_1){
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <atualizarEixoX+0x214>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <atualizarEixoX+0x218>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	dd0a      	ble.n	8001c3c <atualizarEixoX+0x1fc>
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, 0);
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <atualizarEixoX+0x220>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 255 - dutyCycle);
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <atualizarEixoX+0x224>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <atualizarEixoX+0x21c>)
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	21ff      	movs	r1, #255	; 0xff
 8001c38:	1a8a      	subs	r2, r1, r2
 8001c3a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c3c:	46c0      	nop			; (mov r8, r8)
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bdb0      	pop	{r4, r5, r7, pc}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	48001400 	.word	0x48001400
 8001c48:	20000028 	.word	0x20000028
 8001c4c:	20000029 	.word	0x20000029
 8001c50:	20000020 	.word	0x20000020
 8001c54:	20000034 	.word	0x20000034
 8001c58:	20000030 	.word	0x20000030
 8001c5c:	2000002c 	.word	0x2000002c
 8001c60:	200000c0 	.word	0x200000c0
 8001c64:	20000040 	.word	0x20000040

08001c68 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c6c:	f7fe fb6c 	bl	8000348 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c70:	f000 f89e 	bl	8001db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c74:	f000 fa82 	bl	800217c <MX_GPIO_Init>
  MX_TIM14_Init();
 8001c78:	f000 fa26 	bl	80020c8 <MX_TIM14_Init>
  MX_TIM3_Init();
 8001c7c:	f000 f9a0 	bl	8001fc0 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001c80:	f000 f8ee 	bl	8001e60 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001c84:	4b3e      	ldr	r3, [pc, #248]	; (8001d80 <main+0x118>)
 8001c86:	2104      	movs	r1, #4
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f7ff faad 	bl	80011e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001c8e:	4b3c      	ldr	r3, [pc, #240]	; (8001d80 <main+0x118>)
 8001c90:	2108      	movs	r1, #8
 8001c92:	0018      	movs	r0, r3
 8001c94:	f7ff faa8 	bl	80011e8 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001c98:	4b3a      	ldr	r3, [pc, #232]	; (8001d84 <main+0x11c>)
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f7ff faa3 	bl	80011e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001ca2:	4b38      	ldr	r3, [pc, #224]	; (8001d84 <main+0x11c>)
 8001ca4:	2104      	movs	r1, #4
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f7ff fa9e 	bl	80011e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001cac:	4b35      	ldr	r3, [pc, #212]	; (8001d84 <main+0x11c>)
 8001cae:	210c      	movs	r1, #12
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f7ff fa99 	bl	80011e8 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8001cb6:	4b34      	ldr	r3, [pc, #208]	; (8001d88 <main+0x120>)
 8001cb8:	2100      	movs	r1, #0
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f7ff fa94 	bl	80011e8 <HAL_TIM_PWM_Start>

  //HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);

  /* Motor 1 - x*/
    __HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, 0);
 8001cc0:	4b31      	ldr	r3, [pc, #196]	; (8001d88 <main+0x120>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001cc8:	4b2e      	ldr	r3, [pc, #184]	; (8001d84 <main+0x11c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Motor 2 */
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001cd0:	4b2c      	ldr	r3, [pc, #176]	; (8001d84 <main+0x11c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	3334      	adds	r3, #52	; 0x34
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001cdc:	4b29      	ldr	r3, [pc, #164]	; (8001d84 <main+0x11c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	3334      	adds	r3, #52	; 0x34
 8001ce2:	330c      	adds	r3, #12
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]

    /* Motor 3 */
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001ce8:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <main+0x118>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	3334      	adds	r3, #52	; 0x34
 8001cee:	3304      	adds	r3, #4
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001cf4:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <main+0x118>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	3334      	adds	r3, #52	; 0x34
 8001cfa:	3308      	adds	r3, #8
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]

    sensorStatus_1_A =  HAL_GPIO_ReadPin(SENSOR_1_A_PORT, SENSOR_1_A_PIN);
 8001d00:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <main+0x124>)
 8001d02:	2101      	movs	r1, #1
 8001d04:	0018      	movs	r0, r3
 8001d06:	f7fe fdb5 	bl	8000874 <HAL_GPIO_ReadPin>
 8001d0a:	0003      	movs	r3, r0
 8001d0c:	001a      	movs	r2, r3
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <main+0x128>)
 8001d10:	701a      	strb	r2, [r3, #0]
    sensorStatus_1_B =  HAL_GPIO_ReadPin(SENSOR_1_B_PORT, SENSOR_1_B_PIN);
 8001d12:	4b1e      	ldr	r3, [pc, #120]	; (8001d8c <main+0x124>)
 8001d14:	2102      	movs	r1, #2
 8001d16:	0018      	movs	r0, r3
 8001d18:	f7fe fdac 	bl	8000874 <HAL_GPIO_ReadPin>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	001a      	movs	r2, r3
 8001d20:	4b1c      	ldr	r3, [pc, #112]	; (8001d94 <main+0x12c>)
 8001d22:	701a      	strb	r2, [r3, #0]

    sensorStatus_2_A =  HAL_GPIO_ReadPin(SENSOR_2_A_PORT, SENSOR_2_A_PIN);
 8001d24:	2390      	movs	r3, #144	; 0x90
 8001d26:	05db      	lsls	r3, r3, #23
 8001d28:	2104      	movs	r1, #4
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f7fe fda2 	bl	8000874 <HAL_GPIO_ReadPin>
 8001d30:	0003      	movs	r3, r0
 8001d32:	001a      	movs	r2, r3
 8001d34:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <main+0x130>)
 8001d36:	701a      	strb	r2, [r3, #0]
    sensorStatus_2_B =  HAL_GPIO_ReadPin(SENSOR_2_B_PORT, SENSOR_2_B_PIN);
 8001d38:	2390      	movs	r3, #144	; 0x90
 8001d3a:	05db      	lsls	r3, r3, #23
 8001d3c:	2108      	movs	r1, #8
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f7fe fd98 	bl	8000874 <HAL_GPIO_ReadPin>
 8001d44:	0003      	movs	r3, r0
 8001d46:	001a      	movs	r2, r3
 8001d48:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <main+0x134>)
 8001d4a:	701a      	strb	r2, [r3, #0]

    stepStatusOld_1 = 0;
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <main+0x138>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
    stepStatusOld_2 = 0;
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <main+0x13c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
  {

  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
 	  atualizarEixoX();
 8001d58:	f7ff fe72 	bl	8001a40 <atualizarEixoX>


 	  readByte = 0;
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <main+0x140>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]

 	  /* Programa leitura do teclado */
 	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)){
 8001d62:	2390      	movs	r3, #144	; 0x90
 8001d64:	05db      	lsls	r3, r3, #23
 8001d66:	2120      	movs	r1, #32
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f7fe fd83 	bl	8000874 <HAL_GPIO_ReadPin>
 8001d6e:	1e03      	subs	r3, r0, #0
 8001d70:	d0f2      	beq.n	8001d58 <main+0xf0>
 		  setPoint_1 += 30;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <main+0x144>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	331e      	adds	r3, #30
 8001d78:	001a      	movs	r2, r3
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <main+0x144>)
 8001d7c:	601a      	str	r2, [r3, #0]
 	  atualizarEixoX();
 8001d7e:	e7eb      	b.n	8001d58 <main+0xf0>
 8001d80:	20000080 	.word	0x20000080
 8001d84:	20000040 	.word	0x20000040
 8001d88:	200000c0 	.word	0x200000c0
 8001d8c:	48001400 	.word	0x48001400
 8001d90:	20000028 	.word	0x20000028
 8001d94:	20000029 	.word	0x20000029
 8001d98:	2000002a 	.word	0x2000002a
 8001d9c:	2000002b 	.word	0x2000002b
 8001da0:	20000020 	.word	0x20000020
 8001da4:	20000024 	.word	0x20000024
 8001da8:	20000038 	.word	0x20000038
 8001dac:	20000030 	.word	0x20000030

08001db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b090      	sub	sp, #64	; 0x40
 8001db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001db6:	2310      	movs	r3, #16
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	2202      	movs	r2, #2
 8001dbc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dbe:	2310      	movs	r3, #16
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001dc6:	2310      	movs	r3, #16
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	2210      	movs	r2, #16
 8001dcc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001dce:	2310      	movs	r3, #16
 8001dd0:	18fb      	adds	r3, r7, r3
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd6:	2310      	movs	r3, #16
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f7fe fd68 	bl	80008b0 <HAL_RCC_OscConfig>
 8001de0:	1e03      	subs	r3, r0, #0
 8001de2:	d006      	beq.n	8001df2 <SystemClock_Config+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001de4:	239e      	movs	r3, #158	; 0x9e
 8001de6:	005a      	lsls	r2, r3, #1
 8001de8:	4b1c      	ldr	r3, [pc, #112]	; (8001e5c <SystemClock_Config+0xac>)
 8001dea:	0011      	movs	r1, r2
 8001dec:	0018      	movs	r0, r3
 8001dee:	f000 fa21 	bl	8002234 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001df2:	003b      	movs	r3, r7
 8001df4:	2207      	movs	r2, #7
 8001df6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001df8:	003b      	movs	r3, r7
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dfe:	003b      	movs	r3, r7
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e04:	003b      	movs	r3, r7
 8001e06:	2200      	movs	r2, #0
 8001e08:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e0a:	003b      	movs	r3, r7
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f7ff f842 	bl	8000e98 <HAL_RCC_ClockConfig>
 8001e14:	1e03      	subs	r3, r0, #0
 8001e16:	d007      	beq.n	8001e28 <SystemClock_Config+0x78>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001e18:	234a      	movs	r3, #74	; 0x4a
 8001e1a:	33ff      	adds	r3, #255	; 0xff
 8001e1c:	001a      	movs	r2, r3
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <SystemClock_Config+0xac>)
 8001e20:	0011      	movs	r1, r2
 8001e22:	0018      	movs	r0, r3
 8001e24:	f000 fa06 	bl	8002234 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001e28:	f7ff f97c 	bl	8001124 <HAL_RCC_GetHCLKFreq>
 8001e2c:	0002      	movs	r2, r0
 8001e2e:	23fa      	movs	r3, #250	; 0xfa
 8001e30:	0099      	lsls	r1, r3, #2
 8001e32:	0010      	movs	r0, r2
 8001e34:	f7fe f968 	bl	8000108 <__udivsi3>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f7fe fb72 	bl	8000524 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e40:	2004      	movs	r0, #4
 8001e42:	f7fe fb7d 	bl	8000540 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e46:	2301      	movs	r3, #1
 8001e48:	425b      	negs	r3, r3
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f7fe fb52 	bl	80004f8 <HAL_NVIC_SetPriority>
}
 8001e54:	46c0      	nop			; (mov r8, r8)
 8001e56:	46bd      	mov	sp, r7
 8001e58:	b010      	add	sp, #64	; 0x40
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	08002618 	.word	0x08002618

08001e60 <MX_TIM1_Init>:

/* TIM1 init function */
static void MX_TIM1_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b090      	sub	sp, #64	; 0x40
 8001e64:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 8001e66:	4b53      	ldr	r3, [pc, #332]	; (8001fb4 <MX_TIM1_Init+0x154>)
 8001e68:	4a53      	ldr	r2, [pc, #332]	; (8001fb8 <MX_TIM1_Init+0x158>)
 8001e6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 8001e6c:	4b51      	ldr	r3, [pc, #324]	; (8001fb4 <MX_TIM1_Init+0x154>)
 8001e6e:	2204      	movs	r2, #4
 8001e70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e72:	4b50      	ldr	r3, [pc, #320]	; (8001fb4 <MX_TIM1_Init+0x154>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8001e78:	4b4e      	ldr	r3, [pc, #312]	; (8001fb4 <MX_TIM1_Init+0x154>)
 8001e7a:	22ff      	movs	r2, #255	; 0xff
 8001e7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7e:	4b4d      	ldr	r3, [pc, #308]	; (8001fb4 <MX_TIM1_Init+0x154>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e84:	4b4b      	ldr	r3, [pc, #300]	; (8001fb4 <MX_TIM1_Init+0x154>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e8a:	4b4a      	ldr	r3, [pc, #296]	; (8001fb4 <MX_TIM1_Init+0x154>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e90:	4b48      	ldr	r3, [pc, #288]	; (8001fb4 <MX_TIM1_Init+0x154>)
 8001e92:	0018      	movs	r0, r3
 8001e94:	f7ff f97c 	bl	8001190 <HAL_TIM_PWM_Init>
 8001e98:	1e03      	subs	r3, r0, #0
 8001e9a:	d007      	beq.n	8001eac <MX_TIM1_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001e9c:	236a      	movs	r3, #106	; 0x6a
 8001e9e:	33ff      	adds	r3, #255	; 0xff
 8001ea0:	001a      	movs	r2, r3
 8001ea2:	4b46      	ldr	r3, [pc, #280]	; (8001fbc <MX_TIM1_Init+0x15c>)
 8001ea4:	0011      	movs	r1, r2
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f000 f9c4 	bl	8002234 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eac:	2338      	movs	r3, #56	; 0x38
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb4:	2338      	movs	r3, #56	; 0x38
 8001eb6:	18fb      	adds	r3, r7, r3
 8001eb8:	2200      	movs	r2, #0
 8001eba:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ebc:	2338      	movs	r3, #56	; 0x38
 8001ebe:	18fa      	adds	r2, r7, r3
 8001ec0:	4b3c      	ldr	r3, [pc, #240]	; (8001fb4 <MX_TIM1_Init+0x154>)
 8001ec2:	0011      	movs	r1, r2
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f7ff fd0a 	bl	80018de <HAL_TIMEx_MasterConfigSynchronization>
 8001eca:	1e03      	subs	r3, r0, #0
 8001ecc:	d006      	beq.n	8001edc <MX_TIM1_Init+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001ece:	23b8      	movs	r3, #184	; 0xb8
 8001ed0:	005a      	lsls	r2, r3, #1
 8001ed2:	4b3a      	ldr	r3, [pc, #232]	; (8001fbc <MX_TIM1_Init+0x15c>)
 8001ed4:	0011      	movs	r1, r2
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f000 f9ac 	bl	8002234 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001edc:	231c      	movs	r3, #28
 8001ede:	18fb      	adds	r3, r7, r3
 8001ee0:	2260      	movs	r2, #96	; 0x60
 8001ee2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001ee4:	231c      	movs	r3, #28
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	2200      	movs	r2, #0
 8001eea:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eec:	231c      	movs	r3, #28
 8001eee:	18fb      	adds	r3, r7, r3
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ef4:	231c      	movs	r3, #28
 8001ef6:	18fb      	adds	r3, r7, r3
 8001ef8:	2200      	movs	r2, #0
 8001efa:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001efc:	231c      	movs	r3, #28
 8001efe:	18fb      	adds	r3, r7, r3
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f04:	231c      	movs	r3, #28
 8001f06:	18fb      	adds	r3, r7, r3
 8001f08:	2200      	movs	r2, #0
 8001f0a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f0c:	231c      	movs	r3, #28
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f14:	231c      	movs	r3, #28
 8001f16:	18f9      	adds	r1, r7, r3
 8001f18:	4b26      	ldr	r3, [pc, #152]	; (8001fb4 <MX_TIM1_Init+0x154>)
 8001f1a:	2204      	movs	r2, #4
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f7ff f99f 	bl	8001260 <HAL_TIM_PWM_ConfigChannel>
 8001f22:	1e03      	subs	r3, r0, #0
 8001f24:	d006      	beq.n	8001f34 <MX_TIM1_Init+0xd4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001f26:	23be      	movs	r3, #190	; 0xbe
 8001f28:	005a      	lsls	r2, r3, #1
 8001f2a:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <MX_TIM1_Init+0x15c>)
 8001f2c:	0011      	movs	r1, r2
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f000 f980 	bl	8002234 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f34:	231c      	movs	r3, #28
 8001f36:	18f9      	adds	r1, r7, r3
 8001f38:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <MX_TIM1_Init+0x154>)
 8001f3a:	2208      	movs	r2, #8
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f7ff f98f 	bl	8001260 <HAL_TIM_PWM_ConfigChannel>
 8001f42:	1e03      	subs	r3, r0, #0
 8001f44:	d007      	beq.n	8001f56 <MX_TIM1_Init+0xf6>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001f46:	2382      	movs	r3, #130	; 0x82
 8001f48:	33ff      	adds	r3, #255	; 0xff
 8001f4a:	001a      	movs	r2, r3
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <MX_TIM1_Init+0x15c>)
 8001f4e:	0011      	movs	r1, r2
 8001f50:	0018      	movs	r0, r3
 8001f52:	f000 f96f 	bl	8002234 <_Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f56:	003b      	movs	r3, r7
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f5c:	003b      	movs	r3, r7
 8001f5e:	2200      	movs	r2, #0
 8001f60:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f62:	003b      	movs	r3, r7
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f68:	003b      	movs	r3, r7
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f6e:	003b      	movs	r3, r7
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f74:	003b      	movs	r3, r7
 8001f76:	2280      	movs	r2, #128	; 0x80
 8001f78:	0192      	lsls	r2, r2, #6
 8001f7a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f7c:	003b      	movs	r3, r7
 8001f7e:	2200      	movs	r2, #0
 8001f80:	619a      	str	r2, [r3, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f82:	003a      	movs	r2, r7
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <MX_TIM1_Init+0x154>)
 8001f86:	0011      	movs	r1, r2
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f7ff fceb 	bl	8001964 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f8e:	1e03      	subs	r3, r0, #0
 8001f90:	d007      	beq.n	8001fa2 <MX_TIM1_Init+0x142>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001f92:	238e      	movs	r3, #142	; 0x8e
 8001f94:	33ff      	adds	r3, #255	; 0xff
 8001f96:	001a      	movs	r2, r3
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <MX_TIM1_Init+0x15c>)
 8001f9a:	0011      	movs	r1, r2
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f000 f949 	bl	8002234 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8001fa2:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <MX_TIM1_Init+0x154>)
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f000 f9d7 	bl	8002358 <HAL_TIM_MspPostInit>

}
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	46bd      	mov	sp, r7
 8001fae:	b010      	add	sp, #64	; 0x40
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	20000080 	.word	0x20000080
 8001fb8:	40012c00 	.word	0x40012c00
 8001fbc:	08002618 	.word	0x08002618

08001fc0 <MX_TIM3_Init>:

/* TIM3 init function */
static void MX_TIM3_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	; 0x28
 8001fc4:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
 8001fc6:	4b3d      	ldr	r3, [pc, #244]	; (80020bc <MX_TIM3_Init+0xfc>)
 8001fc8:	4a3d      	ldr	r2, [pc, #244]	; (80020c0 <MX_TIM3_Init+0x100>)
 8001fca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8001fcc:	4b3b      	ldr	r3, [pc, #236]	; (80020bc <MX_TIM3_Init+0xfc>)
 8001fce:	2204      	movs	r2, #4
 8001fd0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd2:	4b3a      	ldr	r3, [pc, #232]	; (80020bc <MX_TIM3_Init+0xfc>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8001fd8:	4b38      	ldr	r3, [pc, #224]	; (80020bc <MX_TIM3_Init+0xfc>)
 8001fda:	22ff      	movs	r2, #255	; 0xff
 8001fdc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fde:	4b37      	ldr	r3, [pc, #220]	; (80020bc <MX_TIM3_Init+0xfc>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe4:	4b35      	ldr	r3, [pc, #212]	; (80020bc <MX_TIM3_Init+0xfc>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fea:	4b34      	ldr	r3, [pc, #208]	; (80020bc <MX_TIM3_Init+0xfc>)
 8001fec:	0018      	movs	r0, r3
 8001fee:	f7ff f8cf 	bl	8001190 <HAL_TIM_PWM_Init>
 8001ff2:	1e03      	subs	r3, r0, #0
 8001ff4:	d007      	beq.n	8002006 <MX_TIM3_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001ff6:	23a4      	movs	r3, #164	; 0xa4
 8001ff8:	33ff      	adds	r3, #255	; 0xff
 8001ffa:	001a      	movs	r2, r3
 8001ffc:	4b31      	ldr	r3, [pc, #196]	; (80020c4 <MX_TIM3_Init+0x104>)
 8001ffe:	0011      	movs	r1, r2
 8002000:	0018      	movs	r0, r3
 8002002:	f000 f917 	bl	8002234 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002006:	2320      	movs	r3, #32
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800200e:	2320      	movs	r3, #32
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	2200      	movs	r2, #0
 8002014:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002016:	2320      	movs	r3, #32
 8002018:	18fa      	adds	r2, r7, r3
 800201a:	4b28      	ldr	r3, [pc, #160]	; (80020bc <MX_TIM3_Init+0xfc>)
 800201c:	0011      	movs	r1, r2
 800201e:	0018      	movs	r0, r3
 8002020:	f7ff fc5d 	bl	80018de <HAL_TIMEx_MasterConfigSynchronization>
 8002024:	1e03      	subs	r3, r0, #0
 8002026:	d006      	beq.n	8002036 <MX_TIM3_Init+0x76>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002028:	23d5      	movs	r3, #213	; 0xd5
 800202a:	005a      	lsls	r2, r3, #1
 800202c:	4b25      	ldr	r3, [pc, #148]	; (80020c4 <MX_TIM3_Init+0x104>)
 800202e:	0011      	movs	r1, r2
 8002030:	0018      	movs	r0, r3
 8002032:	f000 f8ff 	bl	8002234 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	2260      	movs	r2, #96	; 0x60
 800203a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	2200      	movs	r2, #0
 8002040:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	2200      	movs	r2, #0
 800204c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800204e:	1d39      	adds	r1, r7, #4
 8002050:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <MX_TIM3_Init+0xfc>)
 8002052:	2200      	movs	r2, #0
 8002054:	0018      	movs	r0, r3
 8002056:	f7ff f903 	bl	8001260 <HAL_TIM_PWM_ConfigChannel>
 800205a:	1e03      	subs	r3, r0, #0
 800205c:	d007      	beq.n	800206e <MX_TIM3_Init+0xae>
  {
    _Error_Handler(__FILE__, __LINE__);
 800205e:	23b4      	movs	r3, #180	; 0xb4
 8002060:	33ff      	adds	r3, #255	; 0xff
 8002062:	001a      	movs	r2, r3
 8002064:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <MX_TIM3_Init+0x104>)
 8002066:	0011      	movs	r1, r2
 8002068:	0018      	movs	r0, r3
 800206a:	f000 f8e3 	bl	8002234 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800206e:	1d39      	adds	r1, r7, #4
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <MX_TIM3_Init+0xfc>)
 8002072:	2204      	movs	r2, #4
 8002074:	0018      	movs	r0, r3
 8002076:	f7ff f8f3 	bl	8001260 <HAL_TIM_PWM_ConfigChannel>
 800207a:	1e03      	subs	r3, r0, #0
 800207c:	d006      	beq.n	800208c <MX_TIM3_Init+0xcc>
  {
    _Error_Handler(__FILE__, __LINE__);
 800207e:	23dc      	movs	r3, #220	; 0xdc
 8002080:	005a      	lsls	r2, r3, #1
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <MX_TIM3_Init+0x104>)
 8002084:	0011      	movs	r1, r2
 8002086:	0018      	movs	r0, r3
 8002088:	f000 f8d4 	bl	8002234 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800208c:	1d39      	adds	r1, r7, #4
 800208e:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <MX_TIM3_Init+0xfc>)
 8002090:	220c      	movs	r2, #12
 8002092:	0018      	movs	r0, r3
 8002094:	f7ff f8e4 	bl	8001260 <HAL_TIM_PWM_ConfigChannel>
 8002098:	1e03      	subs	r3, r0, #0
 800209a:	d007      	beq.n	80020ac <MX_TIM3_Init+0xec>
  {
    _Error_Handler(__FILE__, __LINE__);
 800209c:	23be      	movs	r3, #190	; 0xbe
 800209e:	33ff      	adds	r3, #255	; 0xff
 80020a0:	001a      	movs	r2, r3
 80020a2:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <MX_TIM3_Init+0x104>)
 80020a4:	0011      	movs	r1, r2
 80020a6:	0018      	movs	r0, r3
 80020a8:	f000 f8c4 	bl	8002234 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim3);
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <MX_TIM3_Init+0xfc>)
 80020ae:	0018      	movs	r0, r3
 80020b0:	f000 f952 	bl	8002358 <HAL_TIM_MspPostInit>

}
 80020b4:	46c0      	nop			; (mov r8, r8)
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b00a      	add	sp, #40	; 0x28
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000040 	.word	0x20000040
 80020c0:	40000400 	.word	0x40000400
 80020c4:	08002618 	.word	0x08002618

080020c8 <MX_TIM14_Init>:

/* TIM14 init function */
static void MX_TIM14_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0

  TIM_OC_InitTypeDef sConfigOC;

  htim14.Instance = TIM14;
 80020ce:	4b28      	ldr	r3, [pc, #160]	; (8002170 <MX_TIM14_Init+0xa8>)
 80020d0:	4a28      	ldr	r2, [pc, #160]	; (8002174 <MX_TIM14_Init+0xac>)
 80020d2:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4;
 80020d4:	4b26      	ldr	r3, [pc, #152]	; (8002170 <MX_TIM14_Init+0xa8>)
 80020d6:	2204      	movs	r2, #4
 80020d8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020da:	4b25      	ldr	r3, [pc, #148]	; (8002170 <MX_TIM14_Init+0xa8>)
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 255;
 80020e0:	4b23      	ldr	r3, [pc, #140]	; (8002170 <MX_TIM14_Init+0xa8>)
 80020e2:	22ff      	movs	r2, #255	; 0xff
 80020e4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e6:	4b22      	ldr	r3, [pc, #136]	; (8002170 <MX_TIM14_Init+0xa8>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ec:	4b20      	ldr	r3, [pc, #128]	; (8002170 <MX_TIM14_Init+0xa8>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80020f2:	4b1f      	ldr	r3, [pc, #124]	; (8002170 <MX_TIM14_Init+0xa8>)
 80020f4:	0018      	movs	r0, r3
 80020f6:	f7ff f81f 	bl	8001138 <HAL_TIM_Base_Init>
 80020fa:	1e03      	subs	r3, r0, #0
 80020fc:	d006      	beq.n	800210c <MX_TIM14_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 80020fe:	23e9      	movs	r3, #233	; 0xe9
 8002100:	005a      	lsls	r2, r3, #1
 8002102:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <MX_TIM14_Init+0xb0>)
 8002104:	0011      	movs	r1, r2
 8002106:	0018      	movs	r0, r3
 8002108:	f000 f894 	bl	8002234 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800210c:	4b18      	ldr	r3, [pc, #96]	; (8002170 <MX_TIM14_Init+0xa8>)
 800210e:	0018      	movs	r0, r3
 8002110:	f7ff f83e 	bl	8001190 <HAL_TIM_PWM_Init>
 8002114:	1e03      	subs	r3, r0, #0
 8002116:	d007      	beq.n	8002128 <MX_TIM14_Init+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002118:	23d8      	movs	r3, #216	; 0xd8
 800211a:	33ff      	adds	r3, #255	; 0xff
 800211c:	001a      	movs	r2, r3
 800211e:	4b16      	ldr	r3, [pc, #88]	; (8002178 <MX_TIM14_Init+0xb0>)
 8002120:	0011      	movs	r1, r2
 8002122:	0018      	movs	r0, r3
 8002124:	f000 f886 	bl	8002234 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	2260      	movs	r2, #96	; 0x60
 800212c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	2200      	movs	r2, #0
 8002132:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002134:	1d3b      	adds	r3, r7, #4
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	2200      	movs	r2, #0
 800213e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002140:	1d39      	adds	r1, r7, #4
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <MX_TIM14_Init+0xa8>)
 8002144:	2200      	movs	r2, #0
 8002146:	0018      	movs	r0, r3
 8002148:	f7ff f88a 	bl	8001260 <HAL_TIM_PWM_ConfigChannel>
 800214c:	1e03      	subs	r3, r0, #0
 800214e:	d006      	beq.n	800215e <MX_TIM14_Init+0x96>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002150:	23f0      	movs	r3, #240	; 0xf0
 8002152:	005a      	lsls	r2, r3, #1
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <MX_TIM14_Init+0xb0>)
 8002156:	0011      	movs	r1, r2
 8002158:	0018      	movs	r0, r3
 800215a:	f000 f86b 	bl	8002234 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim14);
 800215e:	4b04      	ldr	r3, [pc, #16]	; (8002170 <MX_TIM14_Init+0xa8>)
 8002160:	0018      	movs	r0, r3
 8002162:	f000 f8f9 	bl	8002358 <HAL_TIM_MspPostInit>

}
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	46bd      	mov	sp, r7
 800216a:	b008      	add	sp, #32
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	200000c0 	.word	0x200000c0
 8002174:	40002000 	.word	0x40002000
 8002178:	08002618 	.word	0x08002618

0800217c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002182:	4b2a      	ldr	r3, [pc, #168]	; (800222c <MX_GPIO_Init+0xb0>)
 8002184:	4a29      	ldr	r2, [pc, #164]	; (800222c <MX_GPIO_Init+0xb0>)
 8002186:	6952      	ldr	r2, [r2, #20]
 8002188:	2180      	movs	r1, #128	; 0x80
 800218a:	03c9      	lsls	r1, r1, #15
 800218c:	430a      	orrs	r2, r1
 800218e:	615a      	str	r2, [r3, #20]
 8002190:	4b26      	ldr	r3, [pc, #152]	; (800222c <MX_GPIO_Init+0xb0>)
 8002192:	695a      	ldr	r2, [r3, #20]
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	03db      	lsls	r3, r3, #15
 8002198:	4013      	ands	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	4b23      	ldr	r3, [pc, #140]	; (800222c <MX_GPIO_Init+0xb0>)
 80021a0:	4a22      	ldr	r2, [pc, #136]	; (800222c <MX_GPIO_Init+0xb0>)
 80021a2:	6952      	ldr	r2, [r2, #20]
 80021a4:	2180      	movs	r1, #128	; 0x80
 80021a6:	0289      	lsls	r1, r1, #10
 80021a8:	430a      	orrs	r2, r1
 80021aa:	615a      	str	r2, [r3, #20]
 80021ac:	4b1f      	ldr	r3, [pc, #124]	; (800222c <MX_GPIO_Init+0xb0>)
 80021ae:	695a      	ldr	r2, [r3, #20]
 80021b0:	2380      	movs	r3, #128	; 0x80
 80021b2:	029b      	lsls	r3, r3, #10
 80021b4:	4013      	ands	r3, r2
 80021b6:	607b      	str	r3, [r7, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ba:	4b1c      	ldr	r3, [pc, #112]	; (800222c <MX_GPIO_Init+0xb0>)
 80021bc:	4a1b      	ldr	r2, [pc, #108]	; (800222c <MX_GPIO_Init+0xb0>)
 80021be:	6952      	ldr	r2, [r2, #20]
 80021c0:	2180      	movs	r1, #128	; 0x80
 80021c2:	02c9      	lsls	r1, r1, #11
 80021c4:	430a      	orrs	r2, r1
 80021c6:	615a      	str	r2, [r3, #20]
 80021c8:	4b18      	ldr	r3, [pc, #96]	; (800222c <MX_GPIO_Init+0xb0>)
 80021ca:	695a      	ldr	r2, [r3, #20]
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	02db      	lsls	r3, r3, #11
 80021d0:	4013      	ands	r3, r2
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021d6:	230c      	movs	r3, #12
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	2203      	movs	r2, #3
 80021dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021de:	230c      	movs	r3, #12
 80021e0:	18fb      	adds	r3, r7, r3
 80021e2:	2200      	movs	r2, #0
 80021e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	230c      	movs	r3, #12
 80021e8:	18fb      	adds	r3, r7, r3
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021ee:	230c      	movs	r3, #12
 80021f0:	18fb      	adds	r3, r7, r3
 80021f2:	4a0f      	ldr	r2, [pc, #60]	; (8002230 <MX_GPIO_Init+0xb4>)
 80021f4:	0019      	movs	r1, r3
 80021f6:	0010      	movs	r0, r2
 80021f8:	f7fe f9c8 	bl	800058c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80021fc:	230c      	movs	r3, #12
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	220f      	movs	r2, #15
 8002202:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002204:	230c      	movs	r3, #12
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	2200      	movs	r2, #0
 800220a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	230c      	movs	r3, #12
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002214:	230c      	movs	r3, #12
 8002216:	18fa      	adds	r2, r7, r3
 8002218:	2390      	movs	r3, #144	; 0x90
 800221a:	05db      	lsls	r3, r3, #23
 800221c:	0011      	movs	r1, r2
 800221e:	0018      	movs	r0, r3
 8002220:	f7fe f9b4 	bl	800058c <HAL_GPIO_Init>

}
 8002224:	46c0      	nop			; (mov r8, r8)
 8002226:	46bd      	mov	sp, r7
 8002228:	b008      	add	sp, #32
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000
 8002230:	48001400 	.word	0x48001400

08002234 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800223e:	e7fe      	b.n	800223e <_Error_Handler+0xa>

08002240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002246:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_MspInit+0x6c>)
 8002248:	4a18      	ldr	r2, [pc, #96]	; (80022ac <HAL_MspInit+0x6c>)
 800224a:	6992      	ldr	r2, [r2, #24]
 800224c:	2101      	movs	r1, #1
 800224e:	430a      	orrs	r2, r1
 8002250:	619a      	str	r2, [r3, #24]
 8002252:	4b16      	ldr	r3, [pc, #88]	; (80022ac <HAL_MspInit+0x6c>)
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	2201      	movs	r2, #1
 8002258:	4013      	ands	r3, r2
 800225a:	607b      	str	r3, [r7, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800225e:	4b13      	ldr	r3, [pc, #76]	; (80022ac <HAL_MspInit+0x6c>)
 8002260:	4a12      	ldr	r2, [pc, #72]	; (80022ac <HAL_MspInit+0x6c>)
 8002262:	69d2      	ldr	r2, [r2, #28]
 8002264:	2180      	movs	r1, #128	; 0x80
 8002266:	0549      	lsls	r1, r1, #21
 8002268:	430a      	orrs	r2, r1
 800226a:	61da      	str	r2, [r3, #28]
 800226c:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <HAL_MspInit+0x6c>)
 800226e:	69da      	ldr	r2, [r3, #28]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	055b      	lsls	r3, r3, #21
 8002274:	4013      	ands	r3, r2
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800227a:	2305      	movs	r3, #5
 800227c:	425b      	negs	r3, r3
 800227e:	2200      	movs	r2, #0
 8002280:	2100      	movs	r1, #0
 8002282:	0018      	movs	r0, r3
 8002284:	f7fe f938 	bl	80004f8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002288:	2302      	movs	r3, #2
 800228a:	425b      	negs	r3, r3
 800228c:	2200      	movs	r2, #0
 800228e:	2100      	movs	r1, #0
 8002290:	0018      	movs	r0, r3
 8002292:	f7fe f931 	bl	80004f8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002296:	2301      	movs	r3, #1
 8002298:	425b      	negs	r3, r3
 800229a:	2200      	movs	r2, #0
 800229c:	2100      	movs	r1, #0
 800229e:	0018      	movs	r0, r3
 80022a0:	f7fe f92a 	bl	80004f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022a4:	46c0      	nop			; (mov r8, r8)
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b002      	add	sp, #8
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40021000 	.word	0x40021000

080022b0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a13      	ldr	r2, [pc, #76]	; (800230c <HAL_TIM_PWM_MspInit+0x5c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d10e      	bne.n	80022e0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022c2:	4b13      	ldr	r3, [pc, #76]	; (8002310 <HAL_TIM_PWM_MspInit+0x60>)
 80022c4:	4a12      	ldr	r2, [pc, #72]	; (8002310 <HAL_TIM_PWM_MspInit+0x60>)
 80022c6:	6992      	ldr	r2, [r2, #24]
 80022c8:	2180      	movs	r1, #128	; 0x80
 80022ca:	0109      	lsls	r1, r1, #4
 80022cc:	430a      	orrs	r2, r1
 80022ce:	619a      	str	r2, [r3, #24]
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <HAL_TIM_PWM_MspInit+0x60>)
 80022d2:	699a      	ldr	r2, [r3, #24]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	4013      	ands	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022de:	e010      	b.n	8002302 <HAL_TIM_PWM_MspInit+0x52>
  else if(htim_pwm->Instance==TIM3)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0b      	ldr	r2, [pc, #44]	; (8002314 <HAL_TIM_PWM_MspInit+0x64>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d10b      	bne.n	8002302 <HAL_TIM_PWM_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <HAL_TIM_PWM_MspInit+0x60>)
 80022ec:	4a08      	ldr	r2, [pc, #32]	; (8002310 <HAL_TIM_PWM_MspInit+0x60>)
 80022ee:	69d2      	ldr	r2, [r2, #28]
 80022f0:	2102      	movs	r1, #2
 80022f2:	430a      	orrs	r2, r1
 80022f4:	61da      	str	r2, [r3, #28]
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_TIM_PWM_MspInit+0x60>)
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	2202      	movs	r2, #2
 80022fc:	4013      	ands	r3, r2
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	68bb      	ldr	r3, [r7, #8]
}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	46bd      	mov	sp, r7
 8002306:	b004      	add	sp, #16
 8002308:	bd80      	pop	{r7, pc}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	40012c00 	.word	0x40012c00
 8002310:	40021000 	.word	0x40021000
 8002314:	40000400 	.word	0x40000400

08002318 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM14)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <HAL_TIM_Base_MspInit+0x38>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d10d      	bne.n	8002346 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <HAL_TIM_Base_MspInit+0x3c>)
 800232c:	4a09      	ldr	r2, [pc, #36]	; (8002354 <HAL_TIM_Base_MspInit+0x3c>)
 800232e:	69d2      	ldr	r2, [r2, #28]
 8002330:	2180      	movs	r1, #128	; 0x80
 8002332:	0049      	lsls	r1, r1, #1
 8002334:	430a      	orrs	r2, r1
 8002336:	61da      	str	r2, [r3, #28]
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_TIM_Base_MspInit+0x3c>)
 800233a:	69da      	ldr	r2, [r3, #28]
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4013      	ands	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	46bd      	mov	sp, r7
 800234a:	b004      	add	sp, #16
 800234c:	bd80      	pop	{r7, pc}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	40002000 	.word	0x40002000
 8002354:	40021000 	.word	0x40021000

08002358 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a41      	ldr	r2, [pc, #260]	; (800246c <HAL_TIM_MspPostInit+0x114>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d11d      	bne.n	80023a6 <HAL_TIM_MspPostInit+0x4e>
  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration    
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800236a:	230c      	movs	r3, #12
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	22c0      	movs	r2, #192	; 0xc0
 8002370:	00d2      	lsls	r2, r2, #3
 8002372:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	230c      	movs	r3, #12
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	2202      	movs	r2, #2
 800237a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	230c      	movs	r3, #12
 800237e:	18fb      	adds	r3, r7, r3
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002384:	230c      	movs	r3, #12
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	2200      	movs	r2, #0
 800238a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800238c:	230c      	movs	r3, #12
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	2202      	movs	r2, #2
 8002392:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002394:	230c      	movs	r3, #12
 8002396:	18fa      	adds	r2, r7, r3
 8002398:	2390      	movs	r3, #144	; 0x90
 800239a:	05db      	lsls	r3, r3, #23
 800239c:	0011      	movs	r1, r2
 800239e:	0018      	movs	r0, r3
 80023a0:	f7fe f8f4 	bl	800058c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80023a4:	e05d      	b.n	8002462 <HAL_TIM_MspPostInit+0x10a>
  else if(htim->Instance==TIM3)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a31      	ldr	r2, [pc, #196]	; (8002470 <HAL_TIM_MspPostInit+0x118>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d137      	bne.n	8002420 <HAL_TIM_MspPostInit+0xc8>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023b0:	230c      	movs	r3, #12
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	22c0      	movs	r2, #192	; 0xc0
 80023b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	230c      	movs	r3, #12
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	2202      	movs	r2, #2
 80023be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	230c      	movs	r3, #12
 80023c2:	18fb      	adds	r3, r7, r3
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c8:	230c      	movs	r3, #12
 80023ca:	18fb      	adds	r3, r7, r3
 80023cc:	2200      	movs	r2, #0
 80023ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80023d0:	230c      	movs	r3, #12
 80023d2:	18fb      	adds	r3, r7, r3
 80023d4:	2201      	movs	r2, #1
 80023d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d8:	230c      	movs	r3, #12
 80023da:	18fa      	adds	r2, r7, r3
 80023dc:	2390      	movs	r3, #144	; 0x90
 80023de:	05db      	lsls	r3, r3, #23
 80023e0:	0011      	movs	r1, r2
 80023e2:	0018      	movs	r0, r3
 80023e4:	f7fe f8d2 	bl	800058c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80023e8:	230c      	movs	r3, #12
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	2202      	movs	r2, #2
 80023ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f0:	230c      	movs	r3, #12
 80023f2:	18fb      	adds	r3, r7, r3
 80023f4:	2202      	movs	r2, #2
 80023f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	230c      	movs	r3, #12
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	2200      	movs	r2, #0
 80023fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002400:	230c      	movs	r3, #12
 8002402:	18fb      	adds	r3, r7, r3
 8002404:	2200      	movs	r2, #0
 8002406:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002408:	230c      	movs	r3, #12
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	2201      	movs	r2, #1
 800240e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002410:	230c      	movs	r3, #12
 8002412:	18fb      	adds	r3, r7, r3
 8002414:	4a17      	ldr	r2, [pc, #92]	; (8002474 <HAL_TIM_MspPostInit+0x11c>)
 8002416:	0019      	movs	r1, r3
 8002418:	0010      	movs	r0, r2
 800241a:	f7fe f8b7 	bl	800058c <HAL_GPIO_Init>
}
 800241e:	e020      	b.n	8002462 <HAL_TIM_MspPostInit+0x10a>
  else if(htim->Instance==TIM14)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a14      	ldr	r2, [pc, #80]	; (8002478 <HAL_TIM_MspPostInit+0x120>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d11b      	bne.n	8002462 <HAL_TIM_MspPostInit+0x10a>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800242a:	230c      	movs	r3, #12
 800242c:	18fb      	adds	r3, r7, r3
 800242e:	2210      	movs	r2, #16
 8002430:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002432:	230c      	movs	r3, #12
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	2202      	movs	r2, #2
 8002438:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	230c      	movs	r3, #12
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002442:	230c      	movs	r3, #12
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	2200      	movs	r2, #0
 8002448:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 800244a:	230c      	movs	r3, #12
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	2204      	movs	r2, #4
 8002450:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002452:	230c      	movs	r3, #12
 8002454:	18fa      	adds	r2, r7, r3
 8002456:	2390      	movs	r3, #144	; 0x90
 8002458:	05db      	lsls	r3, r3, #23
 800245a:	0011      	movs	r1, r2
 800245c:	0018      	movs	r0, r3
 800245e:	f7fe f895 	bl	800058c <HAL_GPIO_Init>
}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	46bd      	mov	sp, r7
 8002466:	b008      	add	sp, #32
 8002468:	bd80      	pop	{r7, pc}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	40012c00 	.word	0x40012c00
 8002470:	40000400 	.word	0x40000400
 8002474:	48000400 	.word	0x48000400
 8002478:	40002000 	.word	0x40002000

0800247c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002480:	46c0      	nop			; (mov r8, r8)
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800248a:	e7fe      	b.n	800248a <HardFault_Handler+0x4>

0800248c <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002490:	46c0      	nop			; (mov r8, r8)
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024a4:	f7fd ff80 	bl	80003a8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80024a8:	f7fe f864 	bl	8000574 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024ac:	46c0      	nop			; (mov r8, r8)
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80024b8:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <SystemInit+0x70>)
 80024ba:	4a1a      	ldr	r2, [pc, #104]	; (8002524 <SystemInit+0x70>)
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	2101      	movs	r1, #1
 80024c0:	430a      	orrs	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80024c4:	4b17      	ldr	r3, [pc, #92]	; (8002524 <SystemInit+0x70>)
 80024c6:	4a17      	ldr	r2, [pc, #92]	; (8002524 <SystemInit+0x70>)
 80024c8:	6852      	ldr	r2, [r2, #4]
 80024ca:	4917      	ldr	r1, [pc, #92]	; (8002528 <SystemInit+0x74>)
 80024cc:	400a      	ands	r2, r1
 80024ce:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80024d0:	4b14      	ldr	r3, [pc, #80]	; (8002524 <SystemInit+0x70>)
 80024d2:	4a14      	ldr	r2, [pc, #80]	; (8002524 <SystemInit+0x70>)
 80024d4:	6812      	ldr	r2, [r2, #0]
 80024d6:	4915      	ldr	r1, [pc, #84]	; (800252c <SystemInit+0x78>)
 80024d8:	400a      	ands	r2, r1
 80024da:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <SystemInit+0x70>)
 80024de:	4a11      	ldr	r2, [pc, #68]	; (8002524 <SystemInit+0x70>)
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	4913      	ldr	r1, [pc, #76]	; (8002530 <SystemInit+0x7c>)
 80024e4:	400a      	ands	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80024e8:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <SystemInit+0x70>)
 80024ea:	4a0e      	ldr	r2, [pc, #56]	; (8002524 <SystemInit+0x70>)
 80024ec:	6852      	ldr	r2, [r2, #4]
 80024ee:	4911      	ldr	r1, [pc, #68]	; (8002534 <SystemInit+0x80>)
 80024f0:	400a      	ands	r2, r1
 80024f2:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <SystemInit+0x70>)
 80024f6:	4a0b      	ldr	r2, [pc, #44]	; (8002524 <SystemInit+0x70>)
 80024f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024fa:	210f      	movs	r1, #15
 80024fc:	438a      	bics	r2, r1
 80024fe:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8002500:	4b08      	ldr	r3, [pc, #32]	; (8002524 <SystemInit+0x70>)
 8002502:	4a08      	ldr	r2, [pc, #32]	; (8002524 <SystemInit+0x70>)
 8002504:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002506:	490c      	ldr	r1, [pc, #48]	; (8002538 <SystemInit+0x84>)
 8002508:	400a      	ands	r2, r1
 800250a:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <SystemInit+0x70>)
 800250e:	4a05      	ldr	r2, [pc, #20]	; (8002524 <SystemInit+0x70>)
 8002510:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002512:	2101      	movs	r1, #1
 8002514:	438a      	bics	r2, r1
 8002516:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002518:	4b02      	ldr	r3, [pc, #8]	; (8002524 <SystemInit+0x70>)
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]

}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40021000 	.word	0x40021000
 8002528:	08ffb80c 	.word	0x08ffb80c
 800252c:	fef6ffff 	.word	0xfef6ffff
 8002530:	fffbffff 	.word	0xfffbffff
 8002534:	ffc0ffff 	.word	0xffc0ffff
 8002538:	fffffeec 	.word	0xfffffeec

0800253c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800253c:	480d      	ldr	r0, [pc, #52]	; (8002574 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800253e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002540:	480d      	ldr	r0, [pc, #52]	; (8002578 <LoopForever+0x6>)
  ldr r1, =_edata
 8002542:	490e      	ldr	r1, [pc, #56]	; (800257c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002544:	4a0e      	ldr	r2, [pc, #56]	; (8002580 <LoopForever+0xe>)
  movs r3, #0
 8002546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002548:	e002      	b.n	8002550 <LoopCopyDataInit>

0800254a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800254a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800254c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800254e:	3304      	adds	r3, #4

08002550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002554:	d3f9      	bcc.n	800254a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002556:	4a0b      	ldr	r2, [pc, #44]	; (8002584 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002558:	4c0b      	ldr	r4, [pc, #44]	; (8002588 <LoopForever+0x16>)
  movs r3, #0
 800255a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800255c:	e001      	b.n	8002562 <LoopFillZerobss>

0800255e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800255e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002560:	3204      	adds	r2, #4

08002562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002564:	d3fb      	bcc.n	800255e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002566:	f7ff ffa5 	bl	80024b4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800256a:	f000 f815 	bl	8002598 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800256e:	f7ff fb7b 	bl	8001c68 <main>

08002572 <LoopForever>:

LoopForever:
    b LoopForever
 8002572:	e7fe      	b.n	8002572 <LoopForever>
  ldr   r0, =_estack
 8002574:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800257c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002580:	08002640 	.word	0x08002640
  ldr r2, =_sbss
 8002584:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8002588:	20000100 	.word	0x20000100

0800258c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800258c:	e7fe      	b.n	800258c <ADC1_IRQHandler>

0800258e <abs>:
 800258e:	17c3      	asrs	r3, r0, #31
 8002590:	18c0      	adds	r0, r0, r3
 8002592:	4058      	eors	r0, r3
 8002594:	4770      	bx	lr
	...

08002598 <__libc_init_array>:
 8002598:	b570      	push	{r4, r5, r6, lr}
 800259a:	2600      	movs	r6, #0
 800259c:	4d0c      	ldr	r5, [pc, #48]	; (80025d0 <__libc_init_array+0x38>)
 800259e:	4c0d      	ldr	r4, [pc, #52]	; (80025d4 <__libc_init_array+0x3c>)
 80025a0:	1b64      	subs	r4, r4, r5
 80025a2:	10a4      	asrs	r4, r4, #2
 80025a4:	42a6      	cmp	r6, r4
 80025a6:	d109      	bne.n	80025bc <__libc_init_array+0x24>
 80025a8:	2600      	movs	r6, #0
 80025aa:	f000 f819 	bl	80025e0 <_init>
 80025ae:	4d0a      	ldr	r5, [pc, #40]	; (80025d8 <__libc_init_array+0x40>)
 80025b0:	4c0a      	ldr	r4, [pc, #40]	; (80025dc <__libc_init_array+0x44>)
 80025b2:	1b64      	subs	r4, r4, r5
 80025b4:	10a4      	asrs	r4, r4, #2
 80025b6:	42a6      	cmp	r6, r4
 80025b8:	d105      	bne.n	80025c6 <__libc_init_array+0x2e>
 80025ba:	bd70      	pop	{r4, r5, r6, pc}
 80025bc:	00b3      	lsls	r3, r6, #2
 80025be:	58eb      	ldr	r3, [r5, r3]
 80025c0:	4798      	blx	r3
 80025c2:	3601      	adds	r6, #1
 80025c4:	e7ee      	b.n	80025a4 <__libc_init_array+0xc>
 80025c6:	00b3      	lsls	r3, r6, #2
 80025c8:	58eb      	ldr	r3, [r5, r3]
 80025ca:	4798      	blx	r3
 80025cc:	3601      	adds	r6, #1
 80025ce:	e7f2      	b.n	80025b6 <__libc_init_array+0x1e>
 80025d0:	08002638 	.word	0x08002638
 80025d4:	08002638 	.word	0x08002638
 80025d8:	08002638 	.word	0x08002638
 80025dc:	0800263c 	.word	0x0800263c

080025e0 <_init>:
 80025e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025e6:	bc08      	pop	{r3}
 80025e8:	469e      	mov	lr, r3
 80025ea:	4770      	bx	lr

080025ec <_fini>:
 80025ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025f2:	bc08      	pop	{r3}
 80025f4:	469e      	mov	lr, r3
 80025f6:	4770      	bx	lr
