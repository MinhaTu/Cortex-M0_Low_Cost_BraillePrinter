
timeControlledBraillePrinter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bb0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08002c70  08002c70  00012c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002ef4  08002ef4  00012ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002ef8  08002ef8  00012ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000b0  20000000  08002efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000158  200000b0  08002fac  000200b0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000208  08002fac  00020208  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001165c  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002520  00000000  00000000  00031734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a28  00000000  00000000  00033c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000928  00000000  00000000  00034680  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004fda  00000000  00000000  00034fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002fff  00000000  00000000  00039f82  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003cf81  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002284  00000000  00000000  0003d000  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000b0 	.word	0x200000b0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c58 	.word	0x08002c58

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000b4 	.word	0x200000b4
 8000104:	08002c58 	.word	0x08002c58

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000234:	4b07      	ldr	r3, [pc, #28]	; (8000254 <HAL_Init+0x24>)
 8000236:	4a07      	ldr	r2, [pc, #28]	; (8000254 <HAL_Init+0x24>)
 8000238:	6812      	ldr	r2, [r2, #0]
 800023a:	2110      	movs	r1, #16
 800023c:	430a      	orrs	r2, r1
 800023e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000240:	2000      	movs	r0, #0
 8000242:	f000 f809 	bl	8000258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000246:	f002 fb55 	bl	80028f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800024a:	2300      	movs	r3, #0
}
 800024c:	0018      	movs	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	40022000 	.word	0x40022000

08000258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000260:	f000 ff5a 	bl	8001118 <HAL_RCC_GetHCLKFreq>
 8000264:	0002      	movs	r2, r0
 8000266:	23fa      	movs	r3, #250	; 0xfa
 8000268:	0099      	lsls	r1, r3, #2
 800026a:	0010      	movs	r0, r2
 800026c:	f7ff ff54 	bl	8000118 <__udivsi3>
 8000270:	0003      	movs	r3, r0
 8000272:	0018      	movs	r0, r3
 8000274:	f000 f90e 	bl	8000494 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000278:	6879      	ldr	r1, [r7, #4]
 800027a:	2301      	movs	r3, #1
 800027c:	425b      	negs	r3, r3
 800027e:	2200      	movs	r2, #0
 8000280:	0018      	movs	r0, r3
 8000282:	f000 f8e1 	bl	8000448 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000286:	2300      	movs	r3, #0
}
 8000288:	0018      	movs	r0, r3
 800028a:	46bd      	mov	sp, r7
 800028c:	b002      	add	sp, #8
 800028e:	bd80      	pop	{r7, pc}

08000290 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  uwTick++;
 8000294:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <HAL_IncTick+0x14>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	1c5a      	adds	r2, r3, #1
 800029a:	4b02      	ldr	r3, [pc, #8]	; (80002a4 <HAL_IncTick+0x14>)
 800029c:	601a      	str	r2, [r3, #0]
}
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	200000d4 	.word	0x200000d4

080002a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  return uwTick;
 80002ac:	4b02      	ldr	r3, [pc, #8]	; (80002b8 <HAL_GetTick+0x10>)
 80002ae:	681b      	ldr	r3, [r3, #0]
}
 80002b0:	0018      	movs	r0, r3
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	200000d4 	.word	0x200000d4

080002bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002c4:	f7ff fff0 	bl	80002a8 <HAL_GetTick>
 80002c8:	0003      	movs	r3, r0
 80002ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	3301      	adds	r3, #1
 80002d4:	d002      	beq.n	80002dc <HAL_Delay+0x20>
  {
     wait++;
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	3301      	adds	r3, #1
 80002da:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002dc:	46c0      	nop			; (mov r8, r8)
 80002de:	f7ff ffe3 	bl	80002a8 <HAL_GetTick>
 80002e2:	0002      	movs	r2, r0
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	1ad2      	subs	r2, r2, r3
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d3f7      	bcc.n	80002de <HAL_Delay+0x22>
  {
  }
}
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	46bd      	mov	sp, r7
 80002f2:	b004      	add	sp, #16
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	0002      	movs	r2, r0
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <NVIC_EnableIRQ+0x28>)
 8000306:	1dfa      	adds	r2, r7, #7
 8000308:	7812      	ldrb	r2, [r2, #0]
 800030a:	0011      	movs	r1, r2
 800030c:	221f      	movs	r2, #31
 800030e:	400a      	ands	r2, r1
 8000310:	2101      	movs	r1, #1
 8000312:	4091      	lsls	r1, r2
 8000314:	000a      	movs	r2, r1
 8000316:	601a      	str	r2, [r3, #0]
}
 8000318:	46c0      	nop			; (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	b002      	add	sp, #8
 800031e:	bd80      	pop	{r7, pc}
 8000320:	e000e100 	.word	0xe000e100

08000324 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000324:	b5b0      	push	{r4, r5, r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	0002      	movs	r2, r0
 800032c:	6039      	str	r1, [r7, #0]
 800032e:	1dfb      	adds	r3, r7, #7
 8000330:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000332:	1dfb      	adds	r3, r7, #7
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b7f      	cmp	r3, #127	; 0x7f
 8000338:	d932      	bls.n	80003a0 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800033a:	4c2f      	ldr	r4, [pc, #188]	; (80003f8 <NVIC_SetPriority+0xd4>)
 800033c:	1dfb      	adds	r3, r7, #7
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	001a      	movs	r2, r3
 8000342:	230f      	movs	r3, #15
 8000344:	4013      	ands	r3, r2
 8000346:	3b08      	subs	r3, #8
 8000348:	0899      	lsrs	r1, r3, #2
 800034a:	4a2b      	ldr	r2, [pc, #172]	; (80003f8 <NVIC_SetPriority+0xd4>)
 800034c:	1dfb      	adds	r3, r7, #7
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	0018      	movs	r0, r3
 8000352:	230f      	movs	r3, #15
 8000354:	4003      	ands	r3, r0
 8000356:	3b08      	subs	r3, #8
 8000358:	089b      	lsrs	r3, r3, #2
 800035a:	3306      	adds	r3, #6
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	18d3      	adds	r3, r2, r3
 8000360:	3304      	adds	r3, #4
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	1dfa      	adds	r2, r7, #7
 8000366:	7812      	ldrb	r2, [r2, #0]
 8000368:	0010      	movs	r0, r2
 800036a:	2203      	movs	r2, #3
 800036c:	4002      	ands	r2, r0
 800036e:	00d2      	lsls	r2, r2, #3
 8000370:	20ff      	movs	r0, #255	; 0xff
 8000372:	4090      	lsls	r0, r2
 8000374:	0002      	movs	r2, r0
 8000376:	43d2      	mvns	r2, r2
 8000378:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	019b      	lsls	r3, r3, #6
 800037e:	20ff      	movs	r0, #255	; 0xff
 8000380:	4018      	ands	r0, r3
 8000382:	1dfb      	adds	r3, r7, #7
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	001d      	movs	r5, r3
 8000388:	2303      	movs	r3, #3
 800038a:	402b      	ands	r3, r5
 800038c:	00db      	lsls	r3, r3, #3
 800038e:	4098      	lsls	r0, r3
 8000390:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000392:	431a      	orrs	r2, r3
 8000394:	1d8b      	adds	r3, r1, #6
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	18e3      	adds	r3, r4, r3
 800039a:	3304      	adds	r3, #4
 800039c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800039e:	e027      	b.n	80003f0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003a0:	4c16      	ldr	r4, [pc, #88]	; (80003fc <NVIC_SetPriority+0xd8>)
 80003a2:	1dfb      	adds	r3, r7, #7
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	b25b      	sxtb	r3, r3
 80003a8:	089b      	lsrs	r3, r3, #2
 80003aa:	4914      	ldr	r1, [pc, #80]	; (80003fc <NVIC_SetPriority+0xd8>)
 80003ac:	1dfa      	adds	r2, r7, #7
 80003ae:	7812      	ldrb	r2, [r2, #0]
 80003b0:	b252      	sxtb	r2, r2
 80003b2:	0892      	lsrs	r2, r2, #2
 80003b4:	32c0      	adds	r2, #192	; 0xc0
 80003b6:	0092      	lsls	r2, r2, #2
 80003b8:	5852      	ldr	r2, [r2, r1]
 80003ba:	1df9      	adds	r1, r7, #7
 80003bc:	7809      	ldrb	r1, [r1, #0]
 80003be:	0008      	movs	r0, r1
 80003c0:	2103      	movs	r1, #3
 80003c2:	4001      	ands	r1, r0
 80003c4:	00c9      	lsls	r1, r1, #3
 80003c6:	20ff      	movs	r0, #255	; 0xff
 80003c8:	4088      	lsls	r0, r1
 80003ca:	0001      	movs	r1, r0
 80003cc:	43c9      	mvns	r1, r1
 80003ce:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003d0:	683a      	ldr	r2, [r7, #0]
 80003d2:	0192      	lsls	r2, r2, #6
 80003d4:	20ff      	movs	r0, #255	; 0xff
 80003d6:	4010      	ands	r0, r2
 80003d8:	1dfa      	adds	r2, r7, #7
 80003da:	7812      	ldrb	r2, [r2, #0]
 80003dc:	0015      	movs	r5, r2
 80003de:	2203      	movs	r2, #3
 80003e0:	402a      	ands	r2, r5
 80003e2:	00d2      	lsls	r2, r2, #3
 80003e4:	4090      	lsls	r0, r2
 80003e6:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003e8:	430a      	orrs	r2, r1
 80003ea:	33c0      	adds	r3, #192	; 0xc0
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	511a      	str	r2, [r3, r4]
}
 80003f0:	46c0      	nop			; (mov r8, r8)
 80003f2:	46bd      	mov	sp, r7
 80003f4:	b002      	add	sp, #8
 80003f6:	bdb0      	pop	{r4, r5, r7, pc}
 80003f8:	e000ed00 	.word	0xe000ed00
 80003fc:	e000e100 	.word	0xe000e100

08000400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	3b01      	subs	r3, #1
 800040c:	4a0c      	ldr	r2, [pc, #48]	; (8000440 <SysTick_Config+0x40>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d901      	bls.n	8000416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000412:	2301      	movs	r3, #1
 8000414:	e010      	b.n	8000438 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000416:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <SysTick_Config+0x44>)
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	3a01      	subs	r2, #1
 800041c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800041e:	2301      	movs	r3, #1
 8000420:	425b      	negs	r3, r3
 8000422:	2103      	movs	r1, #3
 8000424:	0018      	movs	r0, r3
 8000426:	f7ff ff7d 	bl	8000324 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800042a:	4b06      	ldr	r3, [pc, #24]	; (8000444 <SysTick_Config+0x44>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000430:	4b04      	ldr	r3, [pc, #16]	; (8000444 <SysTick_Config+0x44>)
 8000432:	2207      	movs	r2, #7
 8000434:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000436:	2300      	movs	r3, #0
}
 8000438:	0018      	movs	r0, r3
 800043a:	46bd      	mov	sp, r7
 800043c:	b002      	add	sp, #8
 800043e:	bd80      	pop	{r7, pc}
 8000440:	00ffffff 	.word	0x00ffffff
 8000444:	e000e010 	.word	0xe000e010

08000448 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	60b9      	str	r1, [r7, #8]
 8000450:	607a      	str	r2, [r7, #4]
 8000452:	230f      	movs	r3, #15
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	1c02      	adds	r2, r0, #0
 8000458:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800045a:	68ba      	ldr	r2, [r7, #8]
 800045c:	230f      	movs	r3, #15
 800045e:	18fb      	adds	r3, r7, r3
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	b25b      	sxtb	r3, r3
 8000464:	0011      	movs	r1, r2
 8000466:	0018      	movs	r0, r3
 8000468:	f7ff ff5c 	bl	8000324 <NVIC_SetPriority>
}
 800046c:	46c0      	nop			; (mov r8, r8)
 800046e:	46bd      	mov	sp, r7
 8000470:	b004      	add	sp, #16
 8000472:	bd80      	pop	{r7, pc}

08000474 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	0002      	movs	r2, r0
 800047c:	1dfb      	adds	r3, r7, #7
 800047e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	b25b      	sxtb	r3, r3
 8000486:	0018      	movs	r0, r3
 8000488:	f7ff ff36 	bl	80002f8 <NVIC_EnableIRQ>
}
 800048c:	46c0      	nop			; (mov r8, r8)
 800048e:	46bd      	mov	sp, r7
 8000490:	b002      	add	sp, #8
 8000492:	bd80      	pop	{r7, pc}

08000494 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	0018      	movs	r0, r3
 80004a0:	f7ff ffae 	bl	8000400 <SysTick_Config>
 80004a4:	0003      	movs	r3, r0
}
 80004a6:	0018      	movs	r0, r3
 80004a8:	46bd      	mov	sp, r7
 80004aa:	b002      	add	sp, #8
 80004ac:	bd80      	pop	{r7, pc}
	...

080004b0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2b04      	cmp	r3, #4
 80004bc:	d106      	bne.n	80004cc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80004c0:	4a07      	ldr	r2, [pc, #28]	; (80004e0 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80004c2:	6812      	ldr	r2, [r2, #0]
 80004c4:	2104      	movs	r1, #4
 80004c6:	430a      	orrs	r2, r1
 80004c8:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80004ca:	e005      	b.n	80004d8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80004cc:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80004ce:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80004d0:	6812      	ldr	r2, [r2, #0]
 80004d2:	2104      	movs	r1, #4
 80004d4:	438a      	bics	r2, r1
 80004d6:	601a      	str	r2, [r3, #0]
}
 80004d8:	46c0      	nop			; (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	b002      	add	sp, #8
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	e000e010 	.word	0xe000e010

080004e4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80004e8:	f000 f803 	bl	80004f2 <HAL_SYSTICK_Callback>
}
 80004ec:	46c0      	nop			; (mov r8, r8)
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800050e:	2300      	movs	r3, #0
 8000510:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000512:	e14f      	b.n	80007b4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2101      	movs	r1, #1
 800051a:	697a      	ldr	r2, [r7, #20]
 800051c:	4091      	lsls	r1, r2
 800051e:	000a      	movs	r2, r1
 8000520:	4013      	ands	r3, r2
 8000522:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d100      	bne.n	800052c <HAL_GPIO_Init+0x30>
 800052a:	e140      	b.n	80007ae <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	2b02      	cmp	r3, #2
 8000532:	d003      	beq.n	800053c <HAL_GPIO_Init+0x40>
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	2b12      	cmp	r3, #18
 800053a:	d123      	bne.n	8000584 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	08da      	lsrs	r2, r3, #3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	3208      	adds	r2, #8
 8000544:	0092      	lsls	r2, r2, #2
 8000546:	58d3      	ldr	r3, [r2, r3]
 8000548:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	2207      	movs	r2, #7
 800054e:	4013      	ands	r3, r2
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	220f      	movs	r2, #15
 8000554:	409a      	lsls	r2, r3
 8000556:	0013      	movs	r3, r2
 8000558:	43da      	mvns	r2, r3
 800055a:	693b      	ldr	r3, [r7, #16]
 800055c:	4013      	ands	r3, r2
 800055e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	691a      	ldr	r2, [r3, #16]
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	2107      	movs	r1, #7
 8000568:	400b      	ands	r3, r1
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	409a      	lsls	r2, r3
 800056e:	0013      	movs	r3, r2
 8000570:	693a      	ldr	r2, [r7, #16]
 8000572:	4313      	orrs	r3, r2
 8000574:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	08da      	lsrs	r2, r3, #3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	3208      	adds	r2, #8
 800057e:	0092      	lsls	r2, r2, #2
 8000580:	6939      	ldr	r1, [r7, #16]
 8000582:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	2203      	movs	r2, #3
 8000590:	409a      	lsls	r2, r3
 8000592:	0013      	movs	r3, r2
 8000594:	43da      	mvns	r2, r3
 8000596:	693b      	ldr	r3, [r7, #16]
 8000598:	4013      	ands	r3, r2
 800059a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	2203      	movs	r2, #3
 80005a2:	401a      	ands	r2, r3
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	409a      	lsls	r2, r3
 80005aa:	0013      	movs	r3, r2
 80005ac:	693a      	ldr	r2, [r7, #16]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	693a      	ldr	r2, [r7, #16]
 80005b6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d00b      	beq.n	80005d8 <HAL_GPIO_Init+0xdc>
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	d007      	beq.n	80005d8 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005cc:	2b11      	cmp	r3, #17
 80005ce:	d003      	beq.n	80005d8 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	2b12      	cmp	r3, #18
 80005d6:	d130      	bne.n	800063a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	2203      	movs	r2, #3
 80005e4:	409a      	lsls	r2, r3
 80005e6:	0013      	movs	r3, r2
 80005e8:	43da      	mvns	r2, r3
 80005ea:	693b      	ldr	r3, [r7, #16]
 80005ec:	4013      	ands	r3, r2
 80005ee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	68da      	ldr	r2, [r3, #12]
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	409a      	lsls	r2, r3
 80005fa:	0013      	movs	r3, r2
 80005fc:	693a      	ldr	r2, [r7, #16]
 80005fe:	4313      	orrs	r3, r2
 8000600:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	693a      	ldr	r2, [r7, #16]
 8000606:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800060e:	2201      	movs	r2, #1
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	409a      	lsls	r2, r3
 8000614:	0013      	movs	r3, r2
 8000616:	43da      	mvns	r2, r3
 8000618:	693b      	ldr	r3, [r7, #16]
 800061a:	4013      	ands	r3, r2
 800061c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	091b      	lsrs	r3, r3, #4
 8000624:	2201      	movs	r2, #1
 8000626:	401a      	ands	r2, r3
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	409a      	lsls	r2, r3
 800062c:	0013      	movs	r3, r2
 800062e:	693a      	ldr	r2, [r7, #16]
 8000630:	4313      	orrs	r3, r2
 8000632:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	693a      	ldr	r2, [r7, #16]
 8000638:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	68db      	ldr	r3, [r3, #12]
 800063e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	2203      	movs	r2, #3
 8000646:	409a      	lsls	r2, r3
 8000648:	0013      	movs	r3, r2
 800064a:	43da      	mvns	r2, r3
 800064c:	693b      	ldr	r3, [r7, #16]
 800064e:	4013      	ands	r3, r2
 8000650:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	689a      	ldr	r2, [r3, #8]
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	409a      	lsls	r2, r3
 800065c:	0013      	movs	r3, r2
 800065e:	693a      	ldr	r2, [r7, #16]
 8000660:	4313      	orrs	r3, r2
 8000662:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	693a      	ldr	r2, [r7, #16]
 8000668:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	685a      	ldr	r2, [r3, #4]
 800066e:	2380      	movs	r3, #128	; 0x80
 8000670:	055b      	lsls	r3, r3, #21
 8000672:	4013      	ands	r3, r2
 8000674:	d100      	bne.n	8000678 <HAL_GPIO_Init+0x17c>
 8000676:	e09a      	b.n	80007ae <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000678:	4b54      	ldr	r3, [pc, #336]	; (80007cc <HAL_GPIO_Init+0x2d0>)
 800067a:	4a54      	ldr	r2, [pc, #336]	; (80007cc <HAL_GPIO_Init+0x2d0>)
 800067c:	6992      	ldr	r2, [r2, #24]
 800067e:	2101      	movs	r1, #1
 8000680:	430a      	orrs	r2, r1
 8000682:	619a      	str	r2, [r3, #24]
 8000684:	4b51      	ldr	r3, [pc, #324]	; (80007cc <HAL_GPIO_Init+0x2d0>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	2201      	movs	r2, #1
 800068a:	4013      	ands	r3, r2
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000690:	4a4f      	ldr	r2, [pc, #316]	; (80007d0 <HAL_GPIO_Init+0x2d4>)
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	089b      	lsrs	r3, r3, #2
 8000696:	3302      	adds	r3, #2
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	589b      	ldr	r3, [r3, r2]
 800069c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	2203      	movs	r2, #3
 80006a2:	4013      	ands	r3, r2
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	220f      	movs	r2, #15
 80006a8:	409a      	lsls	r2, r3
 80006aa:	0013      	movs	r3, r2
 80006ac:	43da      	mvns	r2, r3
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	4013      	ands	r3, r2
 80006b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	2390      	movs	r3, #144	; 0x90
 80006b8:	05db      	lsls	r3, r3, #23
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d013      	beq.n	80006e6 <HAL_GPIO_Init+0x1ea>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a44      	ldr	r2, [pc, #272]	; (80007d4 <HAL_GPIO_Init+0x2d8>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d00d      	beq.n	80006e2 <HAL_GPIO_Init+0x1e6>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a43      	ldr	r2, [pc, #268]	; (80007d8 <HAL_GPIO_Init+0x2dc>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d007      	beq.n	80006de <HAL_GPIO_Init+0x1e2>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a42      	ldr	r2, [pc, #264]	; (80007dc <HAL_GPIO_Init+0x2e0>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d101      	bne.n	80006da <HAL_GPIO_Init+0x1de>
 80006d6:	2303      	movs	r3, #3
 80006d8:	e006      	b.n	80006e8 <HAL_GPIO_Init+0x1ec>
 80006da:	2305      	movs	r3, #5
 80006dc:	e004      	b.n	80006e8 <HAL_GPIO_Init+0x1ec>
 80006de:	2302      	movs	r3, #2
 80006e0:	e002      	b.n	80006e8 <HAL_GPIO_Init+0x1ec>
 80006e2:	2301      	movs	r3, #1
 80006e4:	e000      	b.n	80006e8 <HAL_GPIO_Init+0x1ec>
 80006e6:	2300      	movs	r3, #0
 80006e8:	697a      	ldr	r2, [r7, #20]
 80006ea:	2103      	movs	r1, #3
 80006ec:	400a      	ands	r2, r1
 80006ee:	0092      	lsls	r2, r2, #2
 80006f0:	4093      	lsls	r3, r2
 80006f2:	693a      	ldr	r2, [r7, #16]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80006f8:	4935      	ldr	r1, [pc, #212]	; (80007d0 <HAL_GPIO_Init+0x2d4>)
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	089b      	lsrs	r3, r3, #2
 80006fe:	3302      	adds	r3, #2
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	693a      	ldr	r2, [r7, #16]
 8000704:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000706:	4b36      	ldr	r3, [pc, #216]	; (80007e0 <HAL_GPIO_Init+0x2e4>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	43da      	mvns	r2, r3
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	4013      	ands	r3, r2
 8000714:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	685a      	ldr	r2, [r3, #4]
 800071a:	2380      	movs	r3, #128	; 0x80
 800071c:	025b      	lsls	r3, r3, #9
 800071e:	4013      	ands	r3, r2
 8000720:	d003      	beq.n	800072a <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 8000722:	693a      	ldr	r2, [r7, #16]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	4313      	orrs	r3, r2
 8000728:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800072a:	4b2d      	ldr	r3, [pc, #180]	; (80007e0 <HAL_GPIO_Init+0x2e4>)
 800072c:	693a      	ldr	r2, [r7, #16]
 800072e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000730:	4b2b      	ldr	r3, [pc, #172]	; (80007e0 <HAL_GPIO_Init+0x2e4>)
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	43da      	mvns	r2, r3
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	4013      	ands	r3, r2
 800073e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	685a      	ldr	r2, [r3, #4]
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	029b      	lsls	r3, r3, #10
 8000748:	4013      	ands	r3, r2
 800074a:	d003      	beq.n	8000754 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 800074c:	693a      	ldr	r2, [r7, #16]
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	4313      	orrs	r3, r2
 8000752:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <HAL_GPIO_Init+0x2e4>)
 8000756:	693a      	ldr	r2, [r7, #16]
 8000758:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800075a:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <HAL_GPIO_Init+0x2e4>)
 800075c:	689b      	ldr	r3, [r3, #8]
 800075e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	43da      	mvns	r2, r3
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	4013      	ands	r3, r2
 8000768:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	685a      	ldr	r2, [r3, #4]
 800076e:	2380      	movs	r3, #128	; 0x80
 8000770:	035b      	lsls	r3, r3, #13
 8000772:	4013      	ands	r3, r2
 8000774:	d003      	beq.n	800077e <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 8000776:	693a      	ldr	r2, [r7, #16]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	4313      	orrs	r3, r2
 800077c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <HAL_GPIO_Init+0x2e4>)
 8000780:	693a      	ldr	r2, [r7, #16]
 8000782:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000784:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <HAL_GPIO_Init+0x2e4>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	43da      	mvns	r2, r3
 800078e:	693b      	ldr	r3, [r7, #16]
 8000790:	4013      	ands	r3, r2
 8000792:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	685a      	ldr	r2, [r3, #4]
 8000798:	2380      	movs	r3, #128	; 0x80
 800079a:	039b      	lsls	r3, r3, #14
 800079c:	4013      	ands	r3, r2
 800079e:	d003      	beq.n	80007a8 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 80007a0:	693a      	ldr	r2, [r7, #16]
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	4313      	orrs	r3, r2
 80007a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80007a8:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <HAL_GPIO_Init+0x2e4>)
 80007aa:	693a      	ldr	r2, [r7, #16]
 80007ac:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	3301      	adds	r3, #1
 80007b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	40da      	lsrs	r2, r3
 80007bc:	1e13      	subs	r3, r2, #0
 80007be:	d000      	beq.n	80007c2 <HAL_GPIO_Init+0x2c6>
 80007c0:	e6a8      	b.n	8000514 <HAL_GPIO_Init+0x18>
  } 
}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b006      	add	sp, #24
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	40021000 	.word	0x40021000
 80007d0:	40010000 	.word	0x40010000
 80007d4:	48000400 	.word	0x48000400
 80007d8:	48000800 	.word	0x48000800
 80007dc:	48000c00 	.word	0x48000c00
 80007e0:	40010400 	.word	0x40010400

080007e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	000a      	movs	r2, r1
 80007ee:	1cbb      	adds	r3, r7, #2
 80007f0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	691b      	ldr	r3, [r3, #16]
 80007f6:	1cba      	adds	r2, r7, #2
 80007f8:	8812      	ldrh	r2, [r2, #0]
 80007fa:	4013      	ands	r3, r2
 80007fc:	d004      	beq.n	8000808 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80007fe:	230f      	movs	r3, #15
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	2201      	movs	r2, #1
 8000804:	701a      	strb	r2, [r3, #0]
 8000806:	e003      	b.n	8000810 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000808:	230f      	movs	r3, #15
 800080a:	18fb      	adds	r3, r7, r3
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000810:	230f      	movs	r3, #15
 8000812:	18fb      	adds	r3, r7, r3
 8000814:	781b      	ldrb	r3, [r3, #0]
  }
 8000816:	0018      	movs	r0, r3
 8000818:	46bd      	mov	sp, r7
 800081a:	b004      	add	sp, #16
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
 8000826:	0008      	movs	r0, r1
 8000828:	0011      	movs	r1, r2
 800082a:	1cbb      	adds	r3, r7, #2
 800082c:	1c02      	adds	r2, r0, #0
 800082e:	801a      	strh	r2, [r3, #0]
 8000830:	1c7b      	adds	r3, r7, #1
 8000832:	1c0a      	adds	r2, r1, #0
 8000834:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000836:	1c7b      	adds	r3, r7, #1
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d004      	beq.n	8000848 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800083e:	1cbb      	adds	r3, r7, #2
 8000840:	881a      	ldrh	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000846:	e003      	b.n	8000850 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000848:	1cbb      	adds	r3, r7, #2
 800084a:	881a      	ldrh	r2, [r3, #0]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	b002      	add	sp, #8
 8000856:	bd80      	pop	{r7, pc}

08000858 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	0002      	movs	r2, r0
 8000860:	1dbb      	adds	r3, r7, #6
 8000862:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000866:	695b      	ldr	r3, [r3, #20]
 8000868:	1dba      	adds	r2, r7, #6
 800086a:	8812      	ldrh	r2, [r2, #0]
 800086c:	4013      	ands	r3, r2
 800086e:	d008      	beq.n	8000882 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000872:	1dba      	adds	r2, r7, #6
 8000874:	8812      	ldrh	r2, [r2, #0]
 8000876:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000878:	1dbb      	adds	r3, r7, #6
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	0018      	movs	r0, r3
 800087e:	f000 f807 	bl	8000890 <HAL_GPIO_EXTI_Callback>
  }
}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b002      	add	sp, #8
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	40010400 	.word	0x40010400

08000890 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	0002      	movs	r2, r0
 8000898:	1dbb      	adds	r3, r7, #6
 800089a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b002      	add	sp, #8
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80008ac:	2300      	movs	r3, #0
 80008ae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2201      	movs	r2, #1
 80008b6:	4013      	ands	r3, r2
 80008b8:	d100      	bne.n	80008bc <HAL_RCC_OscConfig+0x18>
 80008ba:	e08d      	b.n	80009d8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80008bc:	4bc3      	ldr	r3, [pc, #780]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	220c      	movs	r2, #12
 80008c2:	4013      	ands	r3, r2
 80008c4:	2b04      	cmp	r3, #4
 80008c6:	d00e      	beq.n	80008e6 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008c8:	4bc0      	ldr	r3, [pc, #768]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	220c      	movs	r2, #12
 80008ce:	4013      	ands	r3, r2
 80008d0:	2b08      	cmp	r3, #8
 80008d2:	d116      	bne.n	8000902 <HAL_RCC_OscConfig+0x5e>
 80008d4:	4bbd      	ldr	r3, [pc, #756]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 80008d6:	685a      	ldr	r2, [r3, #4]
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	025b      	lsls	r3, r3, #9
 80008dc:	401a      	ands	r2, r3
 80008de:	2380      	movs	r3, #128	; 0x80
 80008e0:	025b      	lsls	r3, r3, #9
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d10d      	bne.n	8000902 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008e6:	4bb9      	ldr	r3, [pc, #740]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	029b      	lsls	r3, r3, #10
 80008ee:	4013      	ands	r3, r2
 80008f0:	d100      	bne.n	80008f4 <HAL_RCC_OscConfig+0x50>
 80008f2:	e070      	b.n	80009d6 <HAL_RCC_OscConfig+0x132>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d000      	beq.n	80008fe <HAL_RCC_OscConfig+0x5a>
 80008fc:	e06b      	b.n	80009d6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e2b5      	b.n	8000e6e <HAL_RCC_OscConfig+0x5ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d107      	bne.n	800091a <HAL_RCC_OscConfig+0x76>
 800090a:	4bb0      	ldr	r3, [pc, #704]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 800090c:	4aaf      	ldr	r2, [pc, #700]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 800090e:	6812      	ldr	r2, [r2, #0]
 8000910:	2180      	movs	r1, #128	; 0x80
 8000912:	0249      	lsls	r1, r1, #9
 8000914:	430a      	orrs	r2, r1
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	e02f      	b.n	800097a <HAL_RCC_OscConfig+0xd6>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d10c      	bne.n	800093c <HAL_RCC_OscConfig+0x98>
 8000922:	4baa      	ldr	r3, [pc, #680]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000924:	4aa9      	ldr	r2, [pc, #676]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000926:	6812      	ldr	r2, [r2, #0]
 8000928:	49a9      	ldr	r1, [pc, #676]	; (8000bd0 <HAL_RCC_OscConfig+0x32c>)
 800092a:	400a      	ands	r2, r1
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	4ba7      	ldr	r3, [pc, #668]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000930:	4aa6      	ldr	r2, [pc, #664]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000932:	6812      	ldr	r2, [r2, #0]
 8000934:	49a7      	ldr	r1, [pc, #668]	; (8000bd4 <HAL_RCC_OscConfig+0x330>)
 8000936:	400a      	ands	r2, r1
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	e01e      	b.n	800097a <HAL_RCC_OscConfig+0xd6>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	2b05      	cmp	r3, #5
 8000942:	d10e      	bne.n	8000962 <HAL_RCC_OscConfig+0xbe>
 8000944:	4ba1      	ldr	r3, [pc, #644]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000946:	4aa1      	ldr	r2, [pc, #644]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000948:	6812      	ldr	r2, [r2, #0]
 800094a:	2180      	movs	r1, #128	; 0x80
 800094c:	02c9      	lsls	r1, r1, #11
 800094e:	430a      	orrs	r2, r1
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	4b9e      	ldr	r3, [pc, #632]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000954:	4a9d      	ldr	r2, [pc, #628]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000956:	6812      	ldr	r2, [r2, #0]
 8000958:	2180      	movs	r1, #128	; 0x80
 800095a:	0249      	lsls	r1, r1, #9
 800095c:	430a      	orrs	r2, r1
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	e00b      	b.n	800097a <HAL_RCC_OscConfig+0xd6>
 8000962:	4b9a      	ldr	r3, [pc, #616]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000964:	4a99      	ldr	r2, [pc, #612]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000966:	6812      	ldr	r2, [r2, #0]
 8000968:	4999      	ldr	r1, [pc, #612]	; (8000bd0 <HAL_RCC_OscConfig+0x32c>)
 800096a:	400a      	ands	r2, r1
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	4b97      	ldr	r3, [pc, #604]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000970:	4a96      	ldr	r2, [pc, #600]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000972:	6812      	ldr	r2, [r2, #0]
 8000974:	4997      	ldr	r1, [pc, #604]	; (8000bd4 <HAL_RCC_OscConfig+0x330>)
 8000976:	400a      	ands	r2, r1
 8000978:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d014      	beq.n	80009ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000982:	f7ff fc91 	bl	80002a8 <HAL_GetTick>
 8000986:	0003      	movs	r3, r0
 8000988:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800098a:	e008      	b.n	800099e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800098c:	f7ff fc8c 	bl	80002a8 <HAL_GetTick>
 8000990:	0002      	movs	r2, r0
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	2b64      	cmp	r3, #100	; 0x64
 8000998:	d901      	bls.n	800099e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800099a:	2303      	movs	r3, #3
 800099c:	e267      	b.n	8000e6e <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800099e:	4b8b      	ldr	r3, [pc, #556]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	2380      	movs	r3, #128	; 0x80
 80009a4:	029b      	lsls	r3, r3, #10
 80009a6:	4013      	ands	r3, r2
 80009a8:	d0f0      	beq.n	800098c <HAL_RCC_OscConfig+0xe8>
 80009aa:	e015      	b.n	80009d8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009ac:	f7ff fc7c 	bl	80002a8 <HAL_GetTick>
 80009b0:	0003      	movs	r3, r0
 80009b2:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009b4:	e008      	b.n	80009c8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009b6:	f7ff fc77 	bl	80002a8 <HAL_GetTick>
 80009ba:	0002      	movs	r2, r0
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	2b64      	cmp	r3, #100	; 0x64
 80009c2:	d901      	bls.n	80009c8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80009c4:	2303      	movs	r3, #3
 80009c6:	e252      	b.n	8000e6e <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009c8:	4b80      	ldr	r3, [pc, #512]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	029b      	lsls	r3, r3, #10
 80009d0:	4013      	ands	r3, r2
 80009d2:	d1f0      	bne.n	80009b6 <HAL_RCC_OscConfig+0x112>
 80009d4:	e000      	b.n	80009d8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009d6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2202      	movs	r2, #2
 80009de:	4013      	ands	r3, r2
 80009e0:	d100      	bne.n	80009e4 <HAL_RCC_OscConfig+0x140>
 80009e2:	e069      	b.n	8000ab8 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80009e4:	4b79      	ldr	r3, [pc, #484]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	220c      	movs	r2, #12
 80009ea:	4013      	ands	r3, r2
 80009ec:	d00b      	beq.n	8000a06 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80009ee:	4b77      	ldr	r3, [pc, #476]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	220c      	movs	r2, #12
 80009f4:	4013      	ands	r3, r2
 80009f6:	2b08      	cmp	r3, #8
 80009f8:	d11c      	bne.n	8000a34 <HAL_RCC_OscConfig+0x190>
 80009fa:	4b74      	ldr	r3, [pc, #464]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 80009fc:	685a      	ldr	r2, [r3, #4]
 80009fe:	2380      	movs	r3, #128	; 0x80
 8000a00:	025b      	lsls	r3, r3, #9
 8000a02:	4013      	ands	r3, r2
 8000a04:	d116      	bne.n	8000a34 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a06:	4b71      	ldr	r3, [pc, #452]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	d005      	beq.n	8000a1c <HAL_RCC_OscConfig+0x178>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d001      	beq.n	8000a1c <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e228      	b.n	8000e6e <HAL_RCC_OscConfig+0x5ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a1c:	4a6b      	ldr	r2, [pc, #428]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000a1e:	4b6b      	ldr	r3, [pc, #428]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	21f8      	movs	r1, #248	; 0xf8
 8000a24:	438b      	bics	r3, r1
 8000a26:	0019      	movs	r1, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	691b      	ldr	r3, [r3, #16]
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	430b      	orrs	r3, r1
 8000a30:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a32:	e041      	b.n	8000ab8 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d024      	beq.n	8000a86 <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a3c:	4b63      	ldr	r3, [pc, #396]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000a3e:	4a63      	ldr	r2, [pc, #396]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000a40:	6812      	ldr	r2, [r2, #0]
 8000a42:	2101      	movs	r1, #1
 8000a44:	430a      	orrs	r2, r1
 8000a46:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a48:	f7ff fc2e 	bl	80002a8 <HAL_GetTick>
 8000a4c:	0003      	movs	r3, r0
 8000a4e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a50:	e008      	b.n	8000a64 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a52:	f7ff fc29 	bl	80002a8 <HAL_GetTick>
 8000a56:	0002      	movs	r2, r0
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d901      	bls.n	8000a64 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8000a60:	2303      	movs	r3, #3
 8000a62:	e204      	b.n	8000e6e <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a64:	4b59      	ldr	r3, [pc, #356]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2202      	movs	r2, #2
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	d0f1      	beq.n	8000a52 <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a6e:	4a57      	ldr	r2, [pc, #348]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000a70:	4b56      	ldr	r3, [pc, #344]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	21f8      	movs	r1, #248	; 0xf8
 8000a76:	438b      	bics	r3, r1
 8000a78:	0019      	movs	r1, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	691b      	ldr	r3, [r3, #16]
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	430b      	orrs	r3, r1
 8000a82:	6013      	str	r3, [r2, #0]
 8000a84:	e018      	b.n	8000ab8 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a86:	4b51      	ldr	r3, [pc, #324]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000a88:	4a50      	ldr	r2, [pc, #320]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000a8a:	6812      	ldr	r2, [r2, #0]
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	438a      	bics	r2, r1
 8000a90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a92:	f7ff fc09 	bl	80002a8 <HAL_GetTick>
 8000a96:	0003      	movs	r3, r0
 8000a98:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a9a:	e008      	b.n	8000aae <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a9c:	f7ff fc04 	bl	80002a8 <HAL_GetTick>
 8000aa0:	0002      	movs	r2, r0
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d901      	bls.n	8000aae <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	e1df      	b.n	8000e6e <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000aae:	4b47      	ldr	r3, [pc, #284]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	d1f1      	bne.n	8000a9c <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2208      	movs	r2, #8
 8000abe:	4013      	ands	r3, r2
 8000ac0:	d036      	beq.n	8000b30 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d019      	beq.n	8000afe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000aca:	4b40      	ldr	r3, [pc, #256]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000acc:	4a3f      	ldr	r2, [pc, #252]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000ace:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ad6:	f7ff fbe7 	bl	80002a8 <HAL_GetTick>
 8000ada:	0003      	movs	r3, r0
 8000adc:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ade:	e008      	b.n	8000af2 <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ae0:	f7ff fbe2 	bl	80002a8 <HAL_GetTick>
 8000ae4:	0002      	movs	r2, r0
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	2b02      	cmp	r3, #2
 8000aec:	d901      	bls.n	8000af2 <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 8000aee:	2303      	movs	r3, #3
 8000af0:	e1bd      	b.n	8000e6e <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000af2:	4b36      	ldr	r3, [pc, #216]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af6:	2202      	movs	r2, #2
 8000af8:	4013      	ands	r3, r2
 8000afa:	d0f1      	beq.n	8000ae0 <HAL_RCC_OscConfig+0x23c>
 8000afc:	e018      	b.n	8000b30 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000afe:	4b33      	ldr	r3, [pc, #204]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000b00:	4a32      	ldr	r2, [pc, #200]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000b02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000b04:	2101      	movs	r1, #1
 8000b06:	438a      	bics	r2, r1
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b0a:	f7ff fbcd 	bl	80002a8 <HAL_GetTick>
 8000b0e:	0003      	movs	r3, r0
 8000b10:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b12:	e008      	b.n	8000b26 <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b14:	f7ff fbc8 	bl	80002a8 <HAL_GetTick>
 8000b18:	0002      	movs	r2, r0
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d901      	bls.n	8000b26 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8000b22:	2303      	movs	r3, #3
 8000b24:	e1a3      	b.n	8000e6e <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b26:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	d1f1      	bne.n	8000b14 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2204      	movs	r2, #4
 8000b36:	4013      	ands	r3, r2
 8000b38:	d100      	bne.n	8000b3c <HAL_RCC_OscConfig+0x298>
 8000b3a:	e0b5      	b.n	8000ca8 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b3c:	2317      	movs	r3, #23
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b44:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000b46:	69da      	ldr	r2, [r3, #28]
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	055b      	lsls	r3, r3, #21
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	d111      	bne.n	8000b74 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b50:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000b52:	4a1e      	ldr	r2, [pc, #120]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000b54:	69d2      	ldr	r2, [r2, #28]
 8000b56:	2180      	movs	r1, #128	; 0x80
 8000b58:	0549      	lsls	r1, r1, #21
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	61da      	str	r2, [r3, #28]
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000b60:	69da      	ldr	r2, [r3, #28]
 8000b62:	2380      	movs	r3, #128	; 0x80
 8000b64:	055b      	lsls	r3, r3, #21
 8000b66:	4013      	ands	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000b6c:	2317      	movs	r3, #23
 8000b6e:	18fb      	adds	r3, r7, r3
 8000b70:	2201      	movs	r2, #1
 8000b72:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b74:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <HAL_RCC_OscConfig+0x334>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	d11a      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_RCC_OscConfig+0x334>)
 8000b82:	4a15      	ldr	r2, [pc, #84]	; (8000bd8 <HAL_RCC_OscConfig+0x334>)
 8000b84:	6812      	ldr	r2, [r2, #0]
 8000b86:	2180      	movs	r1, #128	; 0x80
 8000b88:	0049      	lsls	r1, r1, #1
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b8e:	f7ff fb8b 	bl	80002a8 <HAL_GetTick>
 8000b92:	0003      	movs	r3, r0
 8000b94:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b96:	e008      	b.n	8000baa <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b98:	f7ff fb86 	bl	80002a8 <HAL_GetTick>
 8000b9c:	0002      	movs	r2, r0
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	2b64      	cmp	r3, #100	; 0x64
 8000ba4:	d901      	bls.n	8000baa <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	e161      	b.n	8000e6e <HAL_RCC_OscConfig+0x5ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <HAL_RCC_OscConfig+0x334>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	d0f0      	beq.n	8000b98 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d10e      	bne.n	8000bdc <HAL_RCC_OscConfig+0x338>
 8000bbe:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000bc0:	4a02      	ldr	r2, [pc, #8]	; (8000bcc <HAL_RCC_OscConfig+0x328>)
 8000bc2:	6a12      	ldr	r2, [r2, #32]
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	621a      	str	r2, [r3, #32]
 8000bca:	e035      	b.n	8000c38 <HAL_RCC_OscConfig+0x394>
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	fffeffff 	.word	0xfffeffff
 8000bd4:	fffbffff 	.word	0xfffbffff
 8000bd8:	40007000 	.word	0x40007000
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d10c      	bne.n	8000bfe <HAL_RCC_OscConfig+0x35a>
 8000be4:	4ba4      	ldr	r3, [pc, #656]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000be6:	4aa4      	ldr	r2, [pc, #656]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000be8:	6a12      	ldr	r2, [r2, #32]
 8000bea:	2101      	movs	r1, #1
 8000bec:	438a      	bics	r2, r1
 8000bee:	621a      	str	r2, [r3, #32]
 8000bf0:	4ba1      	ldr	r3, [pc, #644]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000bf2:	4aa1      	ldr	r2, [pc, #644]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000bf4:	6a12      	ldr	r2, [r2, #32]
 8000bf6:	2104      	movs	r1, #4
 8000bf8:	438a      	bics	r2, r1
 8000bfa:	621a      	str	r2, [r3, #32]
 8000bfc:	e01c      	b.n	8000c38 <HAL_RCC_OscConfig+0x394>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	2b05      	cmp	r3, #5
 8000c04:	d10c      	bne.n	8000c20 <HAL_RCC_OscConfig+0x37c>
 8000c06:	4b9c      	ldr	r3, [pc, #624]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000c08:	4a9b      	ldr	r2, [pc, #620]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000c0a:	6a12      	ldr	r2, [r2, #32]
 8000c0c:	2104      	movs	r1, #4
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	621a      	str	r2, [r3, #32]
 8000c12:	4b99      	ldr	r3, [pc, #612]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000c14:	4a98      	ldr	r2, [pc, #608]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000c16:	6a12      	ldr	r2, [r2, #32]
 8000c18:	2101      	movs	r1, #1
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	621a      	str	r2, [r3, #32]
 8000c1e:	e00b      	b.n	8000c38 <HAL_RCC_OscConfig+0x394>
 8000c20:	4b95      	ldr	r3, [pc, #596]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000c22:	4a95      	ldr	r2, [pc, #596]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000c24:	6a12      	ldr	r2, [r2, #32]
 8000c26:	2101      	movs	r1, #1
 8000c28:	438a      	bics	r2, r1
 8000c2a:	621a      	str	r2, [r3, #32]
 8000c2c:	4b92      	ldr	r3, [pc, #584]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000c2e:	4a92      	ldr	r2, [pc, #584]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000c30:	6a12      	ldr	r2, [r2, #32]
 8000c32:	2104      	movs	r1, #4
 8000c34:	438a      	bics	r2, r1
 8000c36:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d014      	beq.n	8000c6a <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c40:	f7ff fb32 	bl	80002a8 <HAL_GetTick>
 8000c44:	0003      	movs	r3, r0
 8000c46:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c48:	e009      	b.n	8000c5e <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c4a:	f7ff fb2d 	bl	80002a8 <HAL_GetTick>
 8000c4e:	0002      	movs	r2, r0
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	4a89      	ldr	r2, [pc, #548]	; (8000e7c <HAL_RCC_OscConfig+0x5d8>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d901      	bls.n	8000c5e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e107      	b.n	8000e6e <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c5e:	4b86      	ldr	r3, [pc, #536]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000c60:	6a1b      	ldr	r3, [r3, #32]
 8000c62:	2202      	movs	r2, #2
 8000c64:	4013      	ands	r3, r2
 8000c66:	d0f0      	beq.n	8000c4a <HAL_RCC_OscConfig+0x3a6>
 8000c68:	e013      	b.n	8000c92 <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c6a:	f7ff fb1d 	bl	80002a8 <HAL_GetTick>
 8000c6e:	0003      	movs	r3, r0
 8000c70:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c72:	e009      	b.n	8000c88 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c74:	f7ff fb18 	bl	80002a8 <HAL_GetTick>
 8000c78:	0002      	movs	r2, r0
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	4a7f      	ldr	r2, [pc, #508]	; (8000e7c <HAL_RCC_OscConfig+0x5d8>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d901      	bls.n	8000c88 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8000c84:	2303      	movs	r3, #3
 8000c86:	e0f2      	b.n	8000e6e <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c88:	4b7b      	ldr	r3, [pc, #492]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000c8a:	6a1b      	ldr	r3, [r3, #32]
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	4013      	ands	r3, r2
 8000c90:	d1f0      	bne.n	8000c74 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c92:	2317      	movs	r3, #23
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d105      	bne.n	8000ca8 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c9c:	4b76      	ldr	r3, [pc, #472]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000c9e:	4a76      	ldr	r2, [pc, #472]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000ca0:	69d2      	ldr	r2, [r2, #28]
 8000ca2:	4977      	ldr	r1, [pc, #476]	; (8000e80 <HAL_RCC_OscConfig+0x5dc>)
 8000ca4:	400a      	ands	r2, r1
 8000ca6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2210      	movs	r2, #16
 8000cae:	4013      	ands	r3, r2
 8000cb0:	d063      	beq.n	8000d7a <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d12a      	bne.n	8000d10 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000cba:	4b6f      	ldr	r3, [pc, #444]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000cbc:	4a6e      	ldr	r2, [pc, #440]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000cbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000cc0:	2104      	movs	r1, #4
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000cc6:	4b6c      	ldr	r3, [pc, #432]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000cc8:	4a6b      	ldr	r2, [pc, #428]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000cca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000ccc:	2101      	movs	r1, #1
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cd2:	f7ff fae9 	bl	80002a8 <HAL_GetTick>
 8000cd6:	0003      	movs	r3, r0
 8000cd8:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000cda:	e008      	b.n	8000cee <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000cdc:	f7ff fae4 	bl	80002a8 <HAL_GetTick>
 8000ce0:	0002      	movs	r2, r0
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d901      	bls.n	8000cee <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8000cea:	2303      	movs	r3, #3
 8000cec:	e0bf      	b.n	8000e6e <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000cee:	4b62      	ldr	r3, [pc, #392]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	d0f1      	beq.n	8000cdc <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000cf8:	4a5f      	ldr	r2, [pc, #380]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000cfa:	4b5f      	ldr	r3, [pc, #380]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cfe:	21f8      	movs	r1, #248	; 0xf8
 8000d00:	438b      	bics	r3, r1
 8000d02:	0019      	movs	r1, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	430b      	orrs	r3, r1
 8000d0c:	6353      	str	r3, [r2, #52]	; 0x34
 8000d0e:	e034      	b.n	8000d7a <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	3305      	adds	r3, #5
 8000d16:	d111      	bne.n	8000d3c <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000d18:	4b57      	ldr	r3, [pc, #348]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000d1a:	4a57      	ldr	r2, [pc, #348]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000d1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d1e:	2104      	movs	r1, #4
 8000d20:	438a      	bics	r2, r1
 8000d22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000d24:	4a54      	ldr	r2, [pc, #336]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000d26:	4b54      	ldr	r3, [pc, #336]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d2a:	21f8      	movs	r1, #248	; 0xf8
 8000d2c:	438b      	bics	r3, r1
 8000d2e:	0019      	movs	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	430b      	orrs	r3, r1
 8000d38:	6353      	str	r3, [r2, #52]	; 0x34
 8000d3a:	e01e      	b.n	8000d7a <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d3c:	4b4e      	ldr	r3, [pc, #312]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000d3e:	4a4e      	ldr	r2, [pc, #312]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000d40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d42:	2104      	movs	r1, #4
 8000d44:	430a      	orrs	r2, r1
 8000d46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000d48:	4b4b      	ldr	r3, [pc, #300]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000d4a:	4a4b      	ldr	r2, [pc, #300]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000d4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d4e:	2101      	movs	r1, #1
 8000d50:	438a      	bics	r2, r1
 8000d52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d54:	f7ff faa8 	bl	80002a8 <HAL_GetTick>
 8000d58:	0003      	movs	r3, r0
 8000d5a:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000d5c:	e008      	b.n	8000d70 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000d5e:	f7ff faa3 	bl	80002a8 <HAL_GetTick>
 8000d62:	0002      	movs	r2, r0
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d901      	bls.n	8000d70 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	e07e      	b.n	8000e6e <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000d70:	4b41      	ldr	r3, [pc, #260]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d74:	2202      	movs	r2, #2
 8000d76:	4013      	ands	r3, r2
 8000d78:	d1f1      	bne.n	8000d5e <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a1b      	ldr	r3, [r3, #32]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d100      	bne.n	8000d84 <HAL_RCC_OscConfig+0x4e0>
 8000d82:	e073      	b.n	8000e6c <HAL_RCC_OscConfig+0x5c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d84:	4b3c      	ldr	r3, [pc, #240]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	220c      	movs	r2, #12
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	2b08      	cmp	r3, #8
 8000d8e:	d100      	bne.n	8000d92 <HAL_RCC_OscConfig+0x4ee>
 8000d90:	e06a      	b.n	8000e68 <HAL_RCC_OscConfig+0x5c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6a1b      	ldr	r3, [r3, #32]
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d14b      	bne.n	8000e32 <HAL_RCC_OscConfig+0x58e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d9a:	4b37      	ldr	r3, [pc, #220]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000d9c:	4a36      	ldr	r2, [pc, #216]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000d9e:	6812      	ldr	r2, [r2, #0]
 8000da0:	4938      	ldr	r1, [pc, #224]	; (8000e84 <HAL_RCC_OscConfig+0x5e0>)
 8000da2:	400a      	ands	r2, r1
 8000da4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da6:	f7ff fa7f 	bl	80002a8 <HAL_GetTick>
 8000daa:	0003      	movs	r3, r0
 8000dac:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dae:	e008      	b.n	8000dc2 <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000db0:	f7ff fa7a 	bl	80002a8 <HAL_GetTick>
 8000db4:	0002      	movs	r2, r0
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d901      	bls.n	8000dc2 <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	e055      	b.n	8000e6e <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dc2:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	049b      	lsls	r3, r3, #18
 8000dca:	4013      	ands	r3, r2
 8000dcc:	d1f0      	bne.n	8000db0 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000dce:	4a2a      	ldr	r2, [pc, #168]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000dd0:	4b29      	ldr	r3, [pc, #164]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd4:	210f      	movs	r1, #15
 8000dd6:	438b      	bics	r3, r1
 8000dd8:	0019      	movs	r1, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dde:	430b      	orrs	r3, r1
 8000de0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000de2:	4a25      	ldr	r2, [pc, #148]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000de4:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	4927      	ldr	r1, [pc, #156]	; (8000e88 <HAL_RCC_OscConfig+0x5e4>)
 8000dea:	4019      	ands	r1, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df4:	4303      	orrs	r3, r0
 8000df6:	430b      	orrs	r3, r1
 8000df8:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000dfa:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000dfc:	4a1e      	ldr	r2, [pc, #120]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000dfe:	6812      	ldr	r2, [r2, #0]
 8000e00:	2180      	movs	r1, #128	; 0x80
 8000e02:	0449      	lsls	r1, r1, #17
 8000e04:	430a      	orrs	r2, r1
 8000e06:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e08:	f7ff fa4e 	bl	80002a8 <HAL_GetTick>
 8000e0c:	0003      	movs	r3, r0
 8000e0e:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e10:	e008      	b.n	8000e24 <HAL_RCC_OscConfig+0x580>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e12:	f7ff fa49 	bl	80002a8 <HAL_GetTick>
 8000e16:	0002      	movs	r2, r0
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d901      	bls.n	8000e24 <HAL_RCC_OscConfig+0x580>
          {
            return HAL_TIMEOUT;
 8000e20:	2303      	movs	r3, #3
 8000e22:	e024      	b.n	8000e6e <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	049b      	lsls	r3, r3, #18
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	d0f0      	beq.n	8000e12 <HAL_RCC_OscConfig+0x56e>
 8000e30:	e01c      	b.n	8000e6c <HAL_RCC_OscConfig+0x5c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000e34:	4a10      	ldr	r2, [pc, #64]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000e36:	6812      	ldr	r2, [r2, #0]
 8000e38:	4912      	ldr	r1, [pc, #72]	; (8000e84 <HAL_RCC_OscConfig+0x5e0>)
 8000e3a:	400a      	ands	r2, r1
 8000e3c:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e3e:	f7ff fa33 	bl	80002a8 <HAL_GetTick>
 8000e42:	0003      	movs	r3, r0
 8000e44:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e46:	e008      	b.n	8000e5a <HAL_RCC_OscConfig+0x5b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e48:	f7ff fa2e 	bl	80002a8 <HAL_GetTick>
 8000e4c:	0002      	movs	r2, r0
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d901      	bls.n	8000e5a <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e009      	b.n	8000e6e <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <HAL_RCC_OscConfig+0x5d4>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	049b      	lsls	r3, r3, #18
 8000e62:	4013      	ands	r3, r2
 8000e64:	d1f0      	bne.n	8000e48 <HAL_RCC_OscConfig+0x5a4>
 8000e66:	e001      	b.n	8000e6c <HAL_RCC_OscConfig+0x5c8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e000      	b.n	8000e6e <HAL_RCC_OscConfig+0x5ca>
    }
  }
  
  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	0018      	movs	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b006      	add	sp, #24
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	00001388 	.word	0x00001388
 8000e80:	efffffff 	.word	0xefffffff
 8000e84:	feffffff 	.word	0xfeffffff
 8000e88:	ffc2ffff 	.word	0xffc2ffff

08000e8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e9a:	4b69      	ldr	r3, [pc, #420]	; (8001040 <HAL_RCC_ClockConfig+0x1b4>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	401a      	ands	r2, r3
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d211      	bcs.n	8000ecc <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ea8:	4b65      	ldr	r3, [pc, #404]	; (8001040 <HAL_RCC_ClockConfig+0x1b4>)
 8000eaa:	4a65      	ldr	r2, [pc, #404]	; (8001040 <HAL_RCC_ClockConfig+0x1b4>)
 8000eac:	6812      	ldr	r2, [r2, #0]
 8000eae:	2101      	movs	r1, #1
 8000eb0:	438a      	bics	r2, r1
 8000eb2:	0011      	movs	r1, r2
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000eba:	4b61      	ldr	r3, [pc, #388]	; (8001040 <HAL_RCC_ClockConfig+0x1b4>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	401a      	ands	r2, r3
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d001      	beq.n	8000ecc <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e0b5      	b.n	8001038 <HAL_RCC_ClockConfig+0x1ac>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d009      	beq.n	8000eea <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ed6:	4a5b      	ldr	r2, [pc, #364]	; (8001044 <HAL_RCC_ClockConfig+0x1b8>)
 8000ed8:	4b5a      	ldr	r3, [pc, #360]	; (8001044 <HAL_RCC_ClockConfig+0x1b8>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	21f0      	movs	r1, #240	; 0xf0
 8000ede:	438b      	bics	r3, r1
 8000ee0:	0019      	movs	r1, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	430b      	orrs	r3, r1
 8000ee8:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d100      	bne.n	8000ef6 <HAL_RCC_ClockConfig+0x6a>
 8000ef4:	e067      	b.n	8000fc6 <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d107      	bne.n	8000f0e <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efe:	4b51      	ldr	r3, [pc, #324]	; (8001044 <HAL_RCC_ClockConfig+0x1b8>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	029b      	lsls	r3, r3, #10
 8000f06:	4013      	ands	r3, r2
 8000f08:	d114      	bne.n	8000f34 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e094      	b.n	8001038 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d107      	bne.n	8000f26 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f16:	4b4b      	ldr	r3, [pc, #300]	; (8001044 <HAL_RCC_ClockConfig+0x1b8>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	049b      	lsls	r3, r3, #18
 8000f1e:	4013      	ands	r3, r2
 8000f20:	d108      	bne.n	8000f34 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e088      	b.n	8001038 <HAL_RCC_ClockConfig+0x1ac>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f26:	4b47      	ldr	r3, [pc, #284]	; (8001044 <HAL_RCC_ClockConfig+0x1b8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	d101      	bne.n	8000f34 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e081      	b.n	8001038 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f34:	4a43      	ldr	r2, [pc, #268]	; (8001044 <HAL_RCC_ClockConfig+0x1b8>)
 8000f36:	4b43      	ldr	r3, [pc, #268]	; (8001044 <HAL_RCC_ClockConfig+0x1b8>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	2103      	movs	r1, #3
 8000f3c:	438b      	bics	r3, r1
 8000f3e:	0019      	movs	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	430b      	orrs	r3, r1
 8000f46:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f48:	f7ff f9ae 	bl	80002a8 <HAL_GetTick>
 8000f4c:	0003      	movs	r3, r0
 8000f4e:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d111      	bne.n	8000f7c <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f58:	e009      	b.n	8000f6e <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f5a:	f7ff f9a5 	bl	80002a8 <HAL_GetTick>
 8000f5e:	0002      	movs	r2, r0
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	4a38      	ldr	r2, [pc, #224]	; (8001048 <HAL_RCC_ClockConfig+0x1bc>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e064      	b.n	8001038 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f6e:	4b35      	ldr	r3, [pc, #212]	; (8001044 <HAL_RCC_ClockConfig+0x1b8>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	220c      	movs	r2, #12
 8000f74:	4013      	ands	r3, r2
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	d1ef      	bne.n	8000f5a <HAL_RCC_ClockConfig+0xce>
 8000f7a:	e024      	b.n	8000fc6 <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d11b      	bne.n	8000fbc <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f84:	e009      	b.n	8000f9a <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f86:	f7ff f98f 	bl	80002a8 <HAL_GetTick>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	4a2d      	ldr	r2, [pc, #180]	; (8001048 <HAL_RCC_ClockConfig+0x1bc>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e04e      	b.n	8001038 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <HAL_RCC_ClockConfig+0x1b8>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	2b08      	cmp	r3, #8
 8000fa4:	d1ef      	bne.n	8000f86 <HAL_RCC_ClockConfig+0xfa>
 8000fa6:	e00e      	b.n	8000fc6 <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fa8:	f7ff f97e 	bl	80002a8 <HAL_GetTick>
 8000fac:	0002      	movs	r2, r0
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	4a25      	ldr	r2, [pc, #148]	; (8001048 <HAL_RCC_ClockConfig+0x1bc>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d901      	bls.n	8000fbc <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e03d      	b.n	8001038 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fbc:	4b21      	ldr	r3, [pc, #132]	; (8001044 <HAL_RCC_ClockConfig+0x1b8>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	220c      	movs	r2, #12
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d1f0      	bne.n	8000fa8 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <HAL_RCC_ClockConfig+0x1b4>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	401a      	ands	r2, r3
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d911      	bls.n	8000ff8 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <HAL_RCC_ClockConfig+0x1b4>)
 8000fd6:	4a1a      	ldr	r2, [pc, #104]	; (8001040 <HAL_RCC_ClockConfig+0x1b4>)
 8000fd8:	6812      	ldr	r2, [r2, #0]
 8000fda:	2101      	movs	r1, #1
 8000fdc:	438a      	bics	r2, r1
 8000fde:	0011      	movs	r1, r2
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <HAL_RCC_ClockConfig+0x1b4>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2201      	movs	r2, #1
 8000fec:	401a      	ands	r2, r3
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d001      	beq.n	8000ff8 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e01f      	b.n	8001038 <HAL_RCC_ClockConfig+0x1ac>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	4013      	ands	r3, r2
 8001000:	d008      	beq.n	8001014 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001002:	4a10      	ldr	r2, [pc, #64]	; (8001044 <HAL_RCC_ClockConfig+0x1b8>)
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <HAL_RCC_ClockConfig+0x1b8>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	4910      	ldr	r1, [pc, #64]	; (800104c <HAL_RCC_ClockConfig+0x1c0>)
 800100a:	4019      	ands	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	430b      	orrs	r3, r1
 8001012:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001014:	f000 f820 	bl	8001058 <HAL_RCC_GetSysClockFreq>
 8001018:	0001      	movs	r1, r0
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_RCC_ClockConfig+0x1b8>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	091b      	lsrs	r3, r3, #4
 8001020:	220f      	movs	r2, #15
 8001022:	4013      	ands	r3, r2
 8001024:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <HAL_RCC_ClockConfig+0x1c4>)
 8001026:	5cd3      	ldrb	r3, [r2, r3]
 8001028:	000a      	movs	r2, r1
 800102a:	40da      	lsrs	r2, r3
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <HAL_RCC_ClockConfig+0x1c8>)
 800102e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001030:	2000      	movs	r0, #0
 8001032:	f7ff f911 	bl	8000258 <HAL_InitTick>
  
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
}
 8001038:	0018      	movs	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	b004      	add	sp, #16
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40022000 	.word	0x40022000
 8001044:	40021000 	.word	0x40021000
 8001048:	00001388 	.word	0x00001388
 800104c:	fffff8ff 	.word	0xfffff8ff
 8001050:	08002edc 	.word	0x08002edc
 8001054:	200000ac 	.word	0x200000ac

08001058 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b08f      	sub	sp, #60	; 0x3c
 800105c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800105e:	2314      	movs	r3, #20
 8001060:	18fb      	adds	r3, r7, r3
 8001062:	4a28      	ldr	r2, [pc, #160]	; (8001104 <HAL_RCC_GetSysClockFreq+0xac>)
 8001064:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001066:	c313      	stmia	r3!, {r0, r1, r4}
 8001068:	6812      	ldr	r2, [r2, #0]
 800106a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	4a26      	ldr	r2, [pc, #152]	; (8001108 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001070:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001072:	c313      	stmia	r3!, {r0, r1, r4}
 8001074:	6812      	ldr	r2, [r2, #0]
 8001076:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001078:	2300      	movs	r3, #0
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800107c:	2300      	movs	r3, #0
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001080:	2300      	movs	r3, #0
 8001082:	637b      	str	r3, [r7, #52]	; 0x34
 8001084:	2300      	movs	r3, #0
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001088:	2300      	movs	r3, #0
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <HAL_RCC_GetSysClockFreq+0xb4>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001094:	220c      	movs	r2, #12
 8001096:	4013      	ands	r3, r2
 8001098:	2b04      	cmp	r3, #4
 800109a:	d002      	beq.n	80010a2 <HAL_RCC_GetSysClockFreq+0x4a>
 800109c:	2b08      	cmp	r3, #8
 800109e:	d003      	beq.n	80010a8 <HAL_RCC_GetSysClockFreq+0x50>
 80010a0:	e027      	b.n	80010f2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80010a2:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <HAL_RCC_GetSysClockFreq+0xb8>)
 80010a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80010a6:	e027      	b.n	80010f8 <HAL_RCC_GetSysClockFreq+0xa0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80010a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010aa:	0c9b      	lsrs	r3, r3, #18
 80010ac:	220f      	movs	r2, #15
 80010ae:	4013      	ands	r3, r2
 80010b0:	2214      	movs	r2, #20
 80010b2:	18ba      	adds	r2, r7, r2
 80010b4:	5cd3      	ldrb	r3, [r2, r3]
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80010b8:	4b14      	ldr	r3, [pc, #80]	; (800110c <HAL_RCC_GetSysClockFreq+0xb4>)
 80010ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010bc:	220f      	movs	r2, #15
 80010be:	4013      	ands	r3, r2
 80010c0:	1d3a      	adds	r2, r7, #4
 80010c2:	5cd3      	ldrb	r3, [r2, r3]
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80010c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	025b      	lsls	r3, r3, #9
 80010cc:	4013      	ands	r3, r2
 80010ce:	d009      	beq.n	80010e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80010d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010d2:	480f      	ldr	r0, [pc, #60]	; (8001110 <HAL_RCC_GetSysClockFreq+0xb8>)
 80010d4:	f7ff f820 	bl	8000118 <__udivsi3>
 80010d8:	0003      	movs	r3, r0
 80010da:	001a      	movs	r2, r3
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	4353      	muls	r3, r2
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
 80010e2:	e003      	b.n	80010ec <HAL_RCC_GetSysClockFreq+0x94>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <HAL_RCC_GetSysClockFreq+0xbc>)
 80010e8:	4353      	muls	r3, r2
 80010ea:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80010ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80010f0:	e002      	b.n	80010f8 <HAL_RCC_GetSysClockFreq+0xa0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <HAL_RCC_GetSysClockFreq+0xb8>)
 80010f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80010f6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80010f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80010fa:	0018      	movs	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b00f      	add	sp, #60	; 0x3c
 8001100:	bd90      	pop	{r4, r7, pc}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	08002c70 	.word	0x08002c70
 8001108:	08002c80 	.word	0x08002c80
 800110c:	40021000 	.word	0x40021000
 8001110:	007a1200 	.word	0x007a1200
 8001114:	003d0900 	.word	0x003d0900

08001118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800111c:	4b02      	ldr	r3, [pc, #8]	; (8001128 <HAL_RCC_GetHCLKFreq+0x10>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	0018      	movs	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	200000ac 	.word	0x200000ac

0800112c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001130:	f7ff fff2 	bl	8001118 <HAL_RCC_GetHCLKFreq>
 8001134:	0001      	movs	r1, r0
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	0a1b      	lsrs	r3, r3, #8
 800113c:	2207      	movs	r2, #7
 800113e:	4013      	ands	r3, r2
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001142:	5cd3      	ldrb	r3, [r2, r3]
 8001144:	40d9      	lsrs	r1, r3
 8001146:	000b      	movs	r3, r1
}    
 8001148:	0018      	movs	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	40021000 	.word	0x40021000
 8001154:	08002eec 	.word	0x08002eec

08001158 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	025b      	lsls	r3, r3, #9
 8001170:	4013      	ands	r3, r2
 8001172:	d100      	bne.n	8001176 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001174:	e08e      	b.n	8001294 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001176:	2317      	movs	r3, #23
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800117e:	4b57      	ldr	r3, [pc, #348]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001180:	69da      	ldr	r2, [r3, #28]
 8001182:	2380      	movs	r3, #128	; 0x80
 8001184:	055b      	lsls	r3, r3, #21
 8001186:	4013      	ands	r3, r2
 8001188:	d111      	bne.n	80011ae <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	4b54      	ldr	r3, [pc, #336]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800118c:	4a53      	ldr	r2, [pc, #332]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800118e:	69d2      	ldr	r2, [r2, #28]
 8001190:	2180      	movs	r1, #128	; 0x80
 8001192:	0549      	lsls	r1, r1, #21
 8001194:	430a      	orrs	r2, r1
 8001196:	61da      	str	r2, [r3, #28]
 8001198:	4b50      	ldr	r3, [pc, #320]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800119a:	69da      	ldr	r2, [r3, #28]
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	055b      	lsls	r3, r3, #21
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011a6:	2317      	movs	r3, #23
 80011a8:	18fb      	adds	r3, r7, r3
 80011aa:	2201      	movs	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ae:	4b4c      	ldr	r3, [pc, #304]	; (80012e0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4013      	ands	r3, r2
 80011b8:	d11a      	bne.n	80011f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ba:	4b49      	ldr	r3, [pc, #292]	; (80012e0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80011bc:	4a48      	ldr	r2, [pc, #288]	; (80012e0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80011be:	6812      	ldr	r2, [r2, #0]
 80011c0:	2180      	movs	r1, #128	; 0x80
 80011c2:	0049      	lsls	r1, r1, #1
 80011c4:	430a      	orrs	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011c8:	f7ff f86e 	bl	80002a8 <HAL_GetTick>
 80011cc:	0003      	movs	r3, r0
 80011ce:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d0:	e008      	b.n	80011e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011d2:	f7ff f869 	bl	80002a8 <HAL_GetTick>
 80011d6:	0002      	movs	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b64      	cmp	r3, #100	; 0x64
 80011de:	d901      	bls.n	80011e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e076      	b.n	80012d2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e4:	4b3e      	ldr	r3, [pc, #248]	; (80012e0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4013      	ands	r3, r2
 80011ee:	d0f0      	beq.n	80011d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80011f0:	4b3a      	ldr	r3, [pc, #232]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80011f2:	6a1a      	ldr	r2, [r3, #32]
 80011f4:	23c0      	movs	r3, #192	; 0xc0
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4013      	ands	r3, r2
 80011fa:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d034      	beq.n	800126c <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	23c0      	movs	r3, #192	; 0xc0
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	401a      	ands	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	429a      	cmp	r2, r3
 8001210:	d02c      	beq.n	800126c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001212:	4b32      	ldr	r3, [pc, #200]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	4a33      	ldr	r2, [pc, #204]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001218:	4013      	ands	r3, r2
 800121a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800121c:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800121e:	4a2f      	ldr	r2, [pc, #188]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001220:	6a12      	ldr	r2, [r2, #32]
 8001222:	2180      	movs	r1, #128	; 0x80
 8001224:	0249      	lsls	r1, r1, #9
 8001226:	430a      	orrs	r2, r1
 8001228:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800122a:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800122c:	4a2b      	ldr	r2, [pc, #172]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800122e:	6a12      	ldr	r2, [r2, #32]
 8001230:	492d      	ldr	r1, [pc, #180]	; (80012e8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001232:	400a      	ands	r2, r1
 8001234:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001236:	4b29      	ldr	r3, [pc, #164]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2201      	movs	r2, #1
 8001240:	4013      	ands	r3, r2
 8001242:	d013      	beq.n	800126c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001244:	f7ff f830 	bl	80002a8 <HAL_GetTick>
 8001248:	0003      	movs	r3, r0
 800124a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800124c:	e009      	b.n	8001262 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800124e:	f7ff f82b 	bl	80002a8 <HAL_GetTick>
 8001252:	0002      	movs	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	4a24      	ldr	r2, [pc, #144]	; (80012ec <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d901      	bls.n	8001262 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e037      	b.n	80012d2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001262:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	2202      	movs	r2, #2
 8001268:	4013      	ands	r3, r2
 800126a:	d0f0      	beq.n	800124e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800126c:	4a1b      	ldr	r2, [pc, #108]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800126e:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	491c      	ldr	r1, [pc, #112]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001274:	4019      	ands	r1, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	430b      	orrs	r3, r1
 800127c:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800127e:	2317      	movs	r3, #23
 8001280:	18fb      	adds	r3, r7, r3
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d105      	bne.n	8001294 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800128a:	4a14      	ldr	r2, [pc, #80]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800128c:	69d2      	ldr	r2, [r2, #28]
 800128e:	4918      	ldr	r1, [pc, #96]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001290:	400a      	ands	r2, r1
 8001292:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2201      	movs	r2, #1
 800129a:	4013      	ands	r3, r2
 800129c:	d009      	beq.n	80012b2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800129e:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	2103      	movs	r1, #3
 80012a6:	438b      	bics	r3, r1
 80012a8:	0019      	movs	r1, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	430b      	orrs	r3, r1
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2220      	movs	r2, #32
 80012b8:	4013      	ands	r3, r2
 80012ba:	d009      	beq.n	80012d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80012bc:	4a07      	ldr	r2, [pc, #28]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	2110      	movs	r1, #16
 80012c4:	438b      	bics	r3, r1
 80012c6:	0019      	movs	r1, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	430b      	orrs	r3, r1
 80012ce:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	0018      	movs	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b006      	add	sp, #24
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40007000 	.word	0x40007000
 80012e4:	fffffcff 	.word	0xfffffcff
 80012e8:	fffeffff 	.word	0xfffeffff
 80012ec:	00001388 	.word	0x00001388
 80012f0:	efffffff 	.word	0xefffffff

080012f4 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e01e      	b.n	8001344 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	223d      	movs	r2, #61	; 0x3d
 800130a:	5c9b      	ldrb	r3, [r3, r2]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d107      	bne.n	8001322 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	223c      	movs	r2, #60	; 0x3c
 8001316:	2100      	movs	r1, #0
 8001318:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	0018      	movs	r0, r3
 800131e:	f001 fbb3 	bl	8002a88 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	223d      	movs	r2, #61	; 0x3d
 8001326:	2102      	movs	r1, #2
 8001328:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3304      	adds	r3, #4
 8001332:	0019      	movs	r1, r3
 8001334:	0010      	movs	r0, r2
 8001336:	f000 f809 	bl	800134c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	223d      	movs	r2, #61	; 0x3d
 800133e:	2101      	movs	r1, #1
 8001340:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	0018      	movs	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	b002      	add	sp, #8
 800134a:	bd80      	pop	{r7, pc}

0800134c <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a2b      	ldr	r2, [pc, #172]	; (8001410 <TIM_Base_SetConfig+0xc4>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d003      	beq.n	8001370 <TIM_Base_SetConfig+0x24>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a2a      	ldr	r2, [pc, #168]	; (8001414 <TIM_Base_SetConfig+0xc8>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d108      	bne.n	8001382 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2270      	movs	r2, #112	; 0x70
 8001374:	4393      	bics	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	4313      	orrs	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a22      	ldr	r2, [pc, #136]	; (8001410 <TIM_Base_SetConfig+0xc4>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d00f      	beq.n	80013aa <TIM_Base_SetConfig+0x5e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a21      	ldr	r2, [pc, #132]	; (8001414 <TIM_Base_SetConfig+0xc8>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d00b      	beq.n	80013aa <TIM_Base_SetConfig+0x5e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a20      	ldr	r2, [pc, #128]	; (8001418 <TIM_Base_SetConfig+0xcc>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d007      	beq.n	80013aa <TIM_Base_SetConfig+0x5e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a1f      	ldr	r2, [pc, #124]	; (800141c <TIM_Base_SetConfig+0xd0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d003      	beq.n	80013aa <TIM_Base_SetConfig+0x5e>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a1e      	ldr	r2, [pc, #120]	; (8001420 <TIM_Base_SetConfig+0xd4>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d108      	bne.n	80013bc <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <TIM_Base_SetConfig+0xd8>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2280      	movs	r2, #128	; 0x80
 80013c0:	4393      	bics	r3, r2
 80013c2:	001a      	movs	r2, r3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <TIM_Base_SetConfig+0xc4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d007      	beq.n	80013fa <TIM_Base_SetConfig+0xae>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a0b      	ldr	r2, [pc, #44]	; (800141c <TIM_Base_SetConfig+0xd0>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d003      	beq.n	80013fa <TIM_Base_SetConfig+0xae>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <TIM_Base_SetConfig+0xd4>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d103      	bne.n	8001402 <TIM_Base_SetConfig+0xb6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	691a      	ldr	r2, [r3, #16]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2201      	movs	r2, #1
 8001406:	615a      	str	r2, [r3, #20]
}
 8001408:	46c0      	nop			; (mov r8, r8)
 800140a:	46bd      	mov	sp, r7
 800140c:	b004      	add	sp, #16
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40012c00 	.word	0x40012c00
 8001414:	40000400 	.word	0x40000400
 8001418:	40002000 	.word	0x40002000
 800141c:	40014400 	.word	0x40014400
 8001420:	40014800 	.word	0x40014800
 8001424:	fffffcff 	.word	0xfffffcff

08001428 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e047      	b.n	80014ca <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2269      	movs	r2, #105	; 0x69
 800143e:	5c9b      	ldrb	r3, [r3, r2]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d107      	bne.n	8001456 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2268      	movs	r2, #104	; 0x68
 800144a:	2100      	movs	r1, #0
 800144c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	0018      	movs	r0, r3
 8001452:	f001 fb6f 	bl	8002b34 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2269      	movs	r2, #105	; 0x69
 800145a:	2124      	movs	r1, #36	; 0x24
 800145c:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	6812      	ldr	r2, [r2, #0]
 8001468:	2101      	movs	r1, #1
 800146a:	438a      	bics	r2, r1
 800146c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	0018      	movs	r0, r3
 8001472:	f000 f8d5 	bl	8001620 <UART_SetConfig>
 8001476:	0003      	movs	r3, r0
 8001478:	2b01      	cmp	r3, #1
 800147a:	d101      	bne.n	8001480 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e024      	b.n	80014ca <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	0018      	movs	r0, r3
 800148c:	f000 fa26 	bl	80018dc <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	6852      	ldr	r2, [r2, #4]
 800149a:	490e      	ldr	r1, [pc, #56]	; (80014d4 <HAL_UART_Init+0xac>)
 800149c:	400a      	ands	r2, r1
 800149e:	605a      	str	r2, [r3, #4]
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	6812      	ldr	r2, [r2, #0]
 80014a8:	6892      	ldr	r2, [r2, #8]
 80014aa:	2108      	movs	r1, #8
 80014ac:	438a      	bics	r2, r1
 80014ae:	609a      	str	r2, [r3, #8]
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	6812      	ldr	r2, [r2, #0]
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	2101      	movs	r1, #1
 80014bc:	430a      	orrs	r2, r1
 80014be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	0018      	movs	r0, r3
 80014c4:	f000 fab6 	bl	8001a34 <UART_CheckIdleState>
 80014c8:	0003      	movs	r3, r0
}
 80014ca:	0018      	movs	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b002      	add	sp, #8
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	fffff7ff 	.word	0xfffff7ff

080014d8 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af02      	add	r7, sp, #8
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	1dbb      	adds	r3, r7, #6
 80014e6:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2269      	movs	r2, #105	; 0x69
 80014f0:	5c9b      	ldrb	r3, [r3, r2]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b20      	cmp	r3, #32
 80014f6:	d000      	beq.n	80014fa <HAL_UART_Transmit+0x22>
 80014f8:	e08c      	b.n	8001614 <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_UART_Transmit+0x30>
 8001500:	1dbb      	adds	r3, r7, #6
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e084      	b.n	8001616 <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	015b      	lsls	r3, r3, #5
 8001514:	429a      	cmp	r2, r3
 8001516:	d109      	bne.n	800152c <HAL_UART_Transmit+0x54>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d105      	bne.n	800152c <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	2201      	movs	r2, #1
 8001524:	4013      	ands	r3, r2
 8001526:	d001      	beq.n	800152c <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e074      	b.n	8001616 <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2268      	movs	r2, #104	; 0x68
 8001530:	5c9b      	ldrb	r3, [r3, r2]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d101      	bne.n	800153a <HAL_UART_Transmit+0x62>
 8001536:	2302      	movs	r3, #2
 8001538:	e06d      	b.n	8001616 <HAL_UART_Transmit+0x13e>
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2268      	movs	r2, #104	; 0x68
 800153e:	2101      	movs	r1, #1
 8001540:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2200      	movs	r2, #0
 8001546:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2269      	movs	r2, #105	; 0x69
 800154c:	2121      	movs	r1, #33	; 0x21
 800154e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001550:	f7fe feaa 	bl	80002a8 <HAL_GetTick>
 8001554:	0003      	movs	r3, r0
 8001556:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	1dba      	adds	r2, r7, #6
 800155c:	2150      	movs	r1, #80	; 0x50
 800155e:	8812      	ldrh	r2, [r2, #0]
 8001560:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1dba      	adds	r2, r7, #6
 8001566:	2152      	movs	r1, #82	; 0x52
 8001568:	8812      	ldrh	r2, [r2, #0]
 800156a:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 800156c:	e035      	b.n	80015da <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2252      	movs	r2, #82	; 0x52
 8001572:	5a9b      	ldrh	r3, [r3, r2]
 8001574:	b29b      	uxth	r3, r3
 8001576:	3b01      	subs	r3, #1
 8001578:	b299      	uxth	r1, r3
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2252      	movs	r2, #82	; 0x52
 800157e:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	0013      	movs	r3, r2
 800158a:	2200      	movs	r2, #0
 800158c:	2180      	movs	r1, #128	; 0x80
 800158e:	f000 fa69 	bl	8001a64 <UART_WaitOnFlagUntilTimeout>
 8001592:	1e03      	subs	r3, r0, #0
 8001594:	d001      	beq.n	800159a <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e03d      	b.n	8001616 <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	015b      	lsls	r3, r3, #5
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d111      	bne.n	80015ca <HAL_UART_Transmit+0xf2>
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10d      	bne.n	80015ca <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	8812      	ldrh	r2, [r2, #0]
 80015ba:	05d2      	lsls	r2, r2, #23
 80015bc:	0dd2      	lsrs	r2, r2, #23
 80015be:	b292      	uxth	r2, r2
 80015c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	3302      	adds	r3, #2
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	e007      	b.n	80015da <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	1c59      	adds	r1, r3, #1
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2252      	movs	r2, #82	; 0x52
 80015de:	5a9b      	ldrh	r3, [r3, r2]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1c3      	bne.n	800156e <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	0013      	movs	r3, r2
 80015f0:	2200      	movs	r2, #0
 80015f2:	2140      	movs	r1, #64	; 0x40
 80015f4:	f000 fa36 	bl	8001a64 <UART_WaitOnFlagUntilTimeout>
 80015f8:	1e03      	subs	r3, r0, #0
 80015fa:	d001      	beq.n	8001600 <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e00a      	b.n	8001616 <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2269      	movs	r2, #105	; 0x69
 8001604:	2120      	movs	r1, #32
 8001606:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2268      	movs	r2, #104	; 0x68
 800160c:	2100      	movs	r1, #0
 800160e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001610:	2300      	movs	r3, #0
 8001612:	e000      	b.n	8001616 <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 8001614:	2302      	movs	r3, #2
  }
}
 8001616:	0018      	movs	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	b006      	add	sp, #24
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800162c:	2317      	movs	r3, #23
 800162e:	18fb      	adds	r3, r7, r3
 8001630:	2210      	movs	r2, #16
 8001632:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8001634:	230a      	movs	r3, #10
 8001636:	18fb      	adds	r3, r7, r3
 8001638:	2200      	movs	r2, #0
 800163a:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 800163c:	2314      	movs	r3, #20
 800163e:	18fb      	adds	r3, r7, r3
 8001640:	2200      	movs	r2, #0
 8001642:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001644:	2313      	movs	r3, #19
 8001646:	18fb      	adds	r3, r7, r3
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	4313      	orrs	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	6812      	ldr	r2, [r2, #0]
 800166e:	4995      	ldr	r1, [pc, #596]	; (80018c4 <UART_SetConfig+0x2a4>)
 8001670:	4011      	ands	r1, r2
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	430a      	orrs	r2, r1
 8001676:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	6852      	ldr	r2, [r2, #4]
 8001682:	4991      	ldr	r1, [pc, #580]	; (80018c8 <UART_SetConfig+0x2a8>)
 8001684:	4011      	ands	r1, r2
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	68d2      	ldr	r2, [r2, #12]
 800168a:	430a      	orrs	r2, r1
 800168c:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699a      	ldr	r2, [r3, #24]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a1b      	ldr	r3, [r3, #32]
 8001696:	4313      	orrs	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6812      	ldr	r2, [r2, #0]
 80016a2:	6892      	ldr	r2, [r2, #8]
 80016a4:	4989      	ldr	r1, [pc, #548]	; (80018cc <UART_SetConfig+0x2ac>)
 80016a6:	4011      	ands	r1, r2
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80016ae:	4b88      	ldr	r3, [pc, #544]	; (80018d0 <UART_SetConfig+0x2b0>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	2203      	movs	r2, #3
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d00f      	beq.n	80016da <UART_SetConfig+0xba>
 80016ba:	d304      	bcc.n	80016c6 <UART_SetConfig+0xa6>
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d011      	beq.n	80016e4 <UART_SetConfig+0xc4>
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d005      	beq.n	80016d0 <UART_SetConfig+0xb0>
 80016c4:	e013      	b.n	80016ee <UART_SetConfig+0xce>
 80016c6:	2317      	movs	r3, #23
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
 80016ce:	e012      	b.n	80016f6 <UART_SetConfig+0xd6>
 80016d0:	2317      	movs	r3, #23
 80016d2:	18fb      	adds	r3, r7, r3
 80016d4:	2202      	movs	r2, #2
 80016d6:	701a      	strb	r2, [r3, #0]
 80016d8:	e00d      	b.n	80016f6 <UART_SetConfig+0xd6>
 80016da:	2317      	movs	r3, #23
 80016dc:	18fb      	adds	r3, r7, r3
 80016de:	2204      	movs	r2, #4
 80016e0:	701a      	strb	r2, [r3, #0]
 80016e2:	e008      	b.n	80016f6 <UART_SetConfig+0xd6>
 80016e4:	2317      	movs	r3, #23
 80016e6:	18fb      	adds	r3, r7, r3
 80016e8:	2208      	movs	r2, #8
 80016ea:	701a      	strb	r2, [r3, #0]
 80016ec:	e003      	b.n	80016f6 <UART_SetConfig+0xd6>
 80016ee:	2317      	movs	r3, #23
 80016f0:	18fb      	adds	r3, r7, r3
 80016f2:	2210      	movs	r2, #16
 80016f4:	701a      	strb	r2, [r3, #0]
 80016f6:	46c0      	nop			; (mov r8, r8)
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69da      	ldr	r2, [r3, #28]
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	429a      	cmp	r2, r3
 8001702:	d000      	beq.n	8001706 <UART_SetConfig+0xe6>
 8001704:	e07b      	b.n	80017fe <UART_SetConfig+0x1de>
  {
    switch (clocksource)
 8001706:	2317      	movs	r3, #23
 8001708:	18fb      	adds	r3, r7, r3
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d01c      	beq.n	800174a <UART_SetConfig+0x12a>
 8001710:	dc02      	bgt.n	8001718 <UART_SetConfig+0xf8>
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <UART_SetConfig+0x102>
 8001716:	e04f      	b.n	80017b8 <UART_SetConfig+0x198>
 8001718:	2b04      	cmp	r3, #4
 800171a:	d027      	beq.n	800176c <UART_SetConfig+0x14c>
 800171c:	2b08      	cmp	r3, #8
 800171e:	d039      	beq.n	8001794 <UART_SetConfig+0x174>
 8001720:	e04a      	b.n	80017b8 <UART_SetConfig+0x198>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001722:	f7ff fd03 	bl	800112c <HAL_RCC_GetPCLK1Freq>
 8001726:	0003      	movs	r3, r0
 8001728:	005a      	lsls	r2, r3, #1
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	085b      	lsrs	r3, r3, #1
 8001730:	18d2      	adds	r2, r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	0019      	movs	r1, r3
 8001738:	0010      	movs	r0, r2
 800173a:	f7fe fced 	bl	8000118 <__udivsi3>
 800173e:	0003      	movs	r3, r0
 8001740:	001a      	movs	r2, r3
 8001742:	2314      	movs	r3, #20
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	801a      	strh	r2, [r3, #0]
        break;
 8001748:	e03b      	b.n	80017c2 <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	085b      	lsrs	r3, r3, #1
 8001750:	4a60      	ldr	r2, [pc, #384]	; (80018d4 <UART_SetConfig+0x2b4>)
 8001752:	189a      	adds	r2, r3, r2
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	0019      	movs	r1, r3
 800175a:	0010      	movs	r0, r2
 800175c:	f7fe fcdc 	bl	8000118 <__udivsi3>
 8001760:	0003      	movs	r3, r0
 8001762:	001a      	movs	r2, r3
 8001764:	2314      	movs	r3, #20
 8001766:	18fb      	adds	r3, r7, r3
 8001768:	801a      	strh	r2, [r3, #0]
        break;
 800176a:	e02a      	b.n	80017c2 <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800176c:	f7ff fc74 	bl	8001058 <HAL_RCC_GetSysClockFreq>
 8001770:	0003      	movs	r3, r0
 8001772:	005a      	lsls	r2, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	085b      	lsrs	r3, r3, #1
 800177a:	18d2      	adds	r2, r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	0019      	movs	r1, r3
 8001782:	0010      	movs	r0, r2
 8001784:	f7fe fcc8 	bl	8000118 <__udivsi3>
 8001788:	0003      	movs	r3, r0
 800178a:	001a      	movs	r2, r3
 800178c:	2314      	movs	r3, #20
 800178e:	18fb      	adds	r3, r7, r3
 8001790:	801a      	strh	r2, [r3, #0]
        break;
 8001792:	e016      	b.n	80017c2 <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	085b      	lsrs	r3, r3, #1
 800179a:	2280      	movs	r2, #128	; 0x80
 800179c:	0252      	lsls	r2, r2, #9
 800179e:	189a      	adds	r2, r3, r2
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	0019      	movs	r1, r3
 80017a6:	0010      	movs	r0, r2
 80017a8:	f7fe fcb6 	bl	8000118 <__udivsi3>
 80017ac:	0003      	movs	r3, r0
 80017ae:	001a      	movs	r2, r3
 80017b0:	2314      	movs	r3, #20
 80017b2:	18fb      	adds	r3, r7, r3
 80017b4:	801a      	strh	r2, [r3, #0]
        break;
 80017b6:	e004      	b.n	80017c2 <UART_SetConfig+0x1a2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80017b8:	2313      	movs	r3, #19
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
        break;
 80017c0:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 80017c2:	230a      	movs	r3, #10
 80017c4:	18fb      	adds	r3, r7, r3
 80017c6:	2214      	movs	r2, #20
 80017c8:	18ba      	adds	r2, r7, r2
 80017ca:	8812      	ldrh	r2, [r2, #0]
 80017cc:	210f      	movs	r1, #15
 80017ce:	438a      	bics	r2, r1
 80017d0:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80017d2:	2314      	movs	r3, #20
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	105b      	asrs	r3, r3, #1
 80017da:	b29b      	uxth	r3, r3
 80017dc:	2207      	movs	r2, #7
 80017de:	4013      	ands	r3, r2
 80017e0:	b299      	uxth	r1, r3
 80017e2:	230a      	movs	r3, #10
 80017e4:	18fb      	adds	r3, r7, r3
 80017e6:	220a      	movs	r2, #10
 80017e8:	18ba      	adds	r2, r7, r2
 80017ea:	8812      	ldrh	r2, [r2, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	220a      	movs	r2, #10
 80017f6:	18ba      	adds	r2, r7, r2
 80017f8:	8812      	ldrh	r2, [r2, #0]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	e05b      	b.n	80018b6 <UART_SetConfig+0x296>
  }
  else
  {
    switch (clocksource)
 80017fe:	2317      	movs	r3, #23
 8001800:	18fb      	adds	r3, r7, r3
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d01b      	beq.n	8001840 <UART_SetConfig+0x220>
 8001808:	dc02      	bgt.n	8001810 <UART_SetConfig+0x1f0>
 800180a:	2b00      	cmp	r3, #0
 800180c:	d005      	beq.n	800181a <UART_SetConfig+0x1fa>
 800180e:	e04d      	b.n	80018ac <UART_SetConfig+0x28c>
 8001810:	2b04      	cmp	r3, #4
 8001812:	d026      	beq.n	8001862 <UART_SetConfig+0x242>
 8001814:	2b08      	cmp	r3, #8
 8001816:	d037      	beq.n	8001888 <UART_SetConfig+0x268>
 8001818:	e048      	b.n	80018ac <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681c      	ldr	r4, [r3, #0]
 800181e:	f7ff fc85 	bl	800112c <HAL_RCC_GetPCLK1Freq>
 8001822:	0002      	movs	r2, r0
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	085b      	lsrs	r3, r3, #1
 800182a:	18d2      	adds	r2, r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	0019      	movs	r1, r3
 8001832:	0010      	movs	r0, r2
 8001834:	f7fe fc70 	bl	8000118 <__udivsi3>
 8001838:	0003      	movs	r3, r0
 800183a:	b29b      	uxth	r3, r3
 800183c:	60e3      	str	r3, [r4, #12]
        break;
 800183e:	e03a      	b.n	80018b6 <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681c      	ldr	r4, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	085b      	lsrs	r3, r3, #1
 800184a:	4a23      	ldr	r2, [pc, #140]	; (80018d8 <UART_SetConfig+0x2b8>)
 800184c:	189a      	adds	r2, r3, r2
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	0019      	movs	r1, r3
 8001854:	0010      	movs	r0, r2
 8001856:	f7fe fc5f 	bl	8000118 <__udivsi3>
 800185a:	0003      	movs	r3, r0
 800185c:	b29b      	uxth	r3, r3
 800185e:	60e3      	str	r3, [r4, #12]
        break;
 8001860:	e029      	b.n	80018b6 <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681c      	ldr	r4, [r3, #0]
 8001866:	f7ff fbf7 	bl	8001058 <HAL_RCC_GetSysClockFreq>
 800186a:	0002      	movs	r2, r0
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	085b      	lsrs	r3, r3, #1
 8001872:	18d2      	adds	r2, r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	0019      	movs	r1, r3
 800187a:	0010      	movs	r0, r2
 800187c:	f7fe fc4c 	bl	8000118 <__udivsi3>
 8001880:	0003      	movs	r3, r0
 8001882:	b29b      	uxth	r3, r3
 8001884:	60e3      	str	r3, [r4, #12]
        break;
 8001886:	e016      	b.n	80018b6 <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681c      	ldr	r4, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	085b      	lsrs	r3, r3, #1
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	0212      	lsls	r2, r2, #8
 8001896:	189a      	adds	r2, r3, r2
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	0019      	movs	r1, r3
 800189e:	0010      	movs	r0, r2
 80018a0:	f7fe fc3a 	bl	8000118 <__udivsi3>
 80018a4:	0003      	movs	r3, r0
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	60e3      	str	r3, [r4, #12]
        break;
 80018aa:	e004      	b.n	80018b6 <UART_SetConfig+0x296>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80018ac:	2313      	movs	r3, #19
 80018ae:	18fb      	adds	r3, r7, r3
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
        break;
 80018b4:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 80018b6:	2313      	movs	r3, #19
 80018b8:	18fb      	adds	r3, r7, r3
 80018ba:	781b      	ldrb	r3, [r3, #0]

}
 80018bc:	0018      	movs	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	b007      	add	sp, #28
 80018c2:	bd90      	pop	{r4, r7, pc}
 80018c4:	ffff69f3 	.word	0xffff69f3
 80018c8:	ffffcfff 	.word	0xffffcfff
 80018cc:	fffff4ff 	.word	0xfffff4ff
 80018d0:	40021000 	.word	0x40021000
 80018d4:	00f42400 	.word	0x00f42400
 80018d8:	007a1200 	.word	0x007a1200

080018dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	2201      	movs	r2, #1
 80018ea:	4013      	ands	r3, r2
 80018ec:	d00a      	beq.n	8001904 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6812      	ldr	r2, [r2, #0]
 80018f6:	6852      	ldr	r2, [r2, #4]
 80018f8:	4945      	ldr	r1, [pc, #276]	; (8001a10 <UART_AdvFeatureConfig+0x134>)
 80018fa:	4011      	ands	r1, r2
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001900:	430a      	orrs	r2, r1
 8001902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	2202      	movs	r2, #2
 800190a:	4013      	ands	r3, r2
 800190c:	d00a      	beq.n	8001924 <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6812      	ldr	r2, [r2, #0]
 8001916:	6852      	ldr	r2, [r2, #4]
 8001918:	493e      	ldr	r1, [pc, #248]	; (8001a14 <UART_AdvFeatureConfig+0x138>)
 800191a:	4011      	ands	r1, r2
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001920:	430a      	orrs	r2, r1
 8001922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	2204      	movs	r2, #4
 800192a:	4013      	ands	r3, r2
 800192c:	d00a      	beq.n	8001944 <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	6852      	ldr	r2, [r2, #4]
 8001938:	4937      	ldr	r1, [pc, #220]	; (8001a18 <UART_AdvFeatureConfig+0x13c>)
 800193a:	4011      	ands	r1, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001940:	430a      	orrs	r2, r1
 8001942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	2208      	movs	r2, #8
 800194a:	4013      	ands	r3, r2
 800194c:	d00a      	beq.n	8001964 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	6852      	ldr	r2, [r2, #4]
 8001958:	4930      	ldr	r1, [pc, #192]	; (8001a1c <UART_AdvFeatureConfig+0x140>)
 800195a:	4011      	ands	r1, r2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001960:	430a      	orrs	r2, r1
 8001962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	2210      	movs	r2, #16
 800196a:	4013      	ands	r3, r2
 800196c:	d00a      	beq.n	8001984 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	6892      	ldr	r2, [r2, #8]
 8001978:	4929      	ldr	r1, [pc, #164]	; (8001a20 <UART_AdvFeatureConfig+0x144>)
 800197a:	4011      	ands	r1, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001980:	430a      	orrs	r2, r1
 8001982:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	2220      	movs	r2, #32
 800198a:	4013      	ands	r3, r2
 800198c:	d00a      	beq.n	80019a4 <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	6892      	ldr	r2, [r2, #8]
 8001998:	4922      	ldr	r1, [pc, #136]	; (8001a24 <UART_AdvFeatureConfig+0x148>)
 800199a:	4011      	ands	r1, r2
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019a0:	430a      	orrs	r2, r1
 80019a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	2240      	movs	r2, #64	; 0x40
 80019aa:	4013      	ands	r3, r2
 80019ac:	d01b      	beq.n	80019e6 <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	6852      	ldr	r2, [r2, #4]
 80019b8:	491b      	ldr	r1, [pc, #108]	; (8001a28 <UART_AdvFeatureConfig+0x14c>)
 80019ba:	4011      	ands	r1, r2
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019c0:	430a      	orrs	r2, r1
 80019c2:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	035b      	lsls	r3, r3, #13
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d10a      	bne.n	80019e6 <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	6852      	ldr	r2, [r2, #4]
 80019da:	4914      	ldr	r1, [pc, #80]	; (8001a2c <UART_AdvFeatureConfig+0x150>)
 80019dc:	4011      	ands	r1, r2
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80019e2:	430a      	orrs	r2, r1
 80019e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	2280      	movs	r2, #128	; 0x80
 80019ec:	4013      	ands	r3, r2
 80019ee:	d00a      	beq.n	8001a06 <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	6852      	ldr	r2, [r2, #4]
 80019fa:	490d      	ldr	r1, [pc, #52]	; (8001a30 <UART_AdvFeatureConfig+0x154>)
 80019fc:	4011      	ands	r1, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a02:	430a      	orrs	r2, r1
 8001a04:	605a      	str	r2, [r3, #4]
  }
}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b002      	add	sp, #8
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	fffdffff 	.word	0xfffdffff
 8001a14:	fffeffff 	.word	0xfffeffff
 8001a18:	fffbffff 	.word	0xfffbffff
 8001a1c:	ffff7fff 	.word	0xffff7fff
 8001a20:	ffffefff 	.word	0xffffefff
 8001a24:	ffffdfff 	.word	0xffffdfff
 8001a28:	ffefffff 	.word	0xffefffff
 8001a2c:	ff9fffff 	.word	0xff9fffff
 8001a30:	fff7ffff 	.word	0xfff7ffff

08001a34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2269      	movs	r2, #105	; 0x69
 8001a46:	2120      	movs	r1, #32
 8001a48:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	226a      	movs	r2, #106	; 0x6a
 8001a4e:	2120      	movs	r1, #32
 8001a50:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2268      	movs	r2, #104	; 0x68
 8001a56:	2100      	movs	r1, #0
 8001a58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	b002      	add	sp, #8
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	1dfb      	adds	r3, r7, #7
 8001a72:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a74:	e02b      	b.n	8001ace <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	d028      	beq.n	8001ace <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d007      	beq.n	8001a92 <UART_WaitOnFlagUntilTimeout+0x2e>
 8001a82:	f7fe fc11 	bl	80002a8 <HAL_GetTick>
 8001a86:	0002      	movs	r2, r0
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	1ad2      	subs	r2, r2, r3
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d91d      	bls.n	8001ace <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	4916      	ldr	r1, [pc, #88]	; (8001af8 <UART_WaitOnFlagUntilTimeout+0x94>)
 8001a9e:	400a      	ands	r2, r1
 8001aa0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	6892      	ldr	r2, [r2, #8]
 8001aac:	2101      	movs	r1, #1
 8001aae:	438a      	bics	r2, r1
 8001ab0:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2269      	movs	r2, #105	; 0x69
 8001ab6:	2120      	movs	r1, #32
 8001ab8:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	226a      	movs	r2, #106	; 0x6a
 8001abe:	2120      	movs	r1, #32
 8001ac0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2268      	movs	r2, #104	; 0x68
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e00f      	b.n	8001aee <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	425a      	negs	r2, r3
 8001ade:	4153      	adcs	r3, r2
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	001a      	movs	r2, r3
 8001ae4:	1dfb      	adds	r3, r7, #7
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d0c4      	beq.n	8001a76 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	0018      	movs	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b004      	add	sp, #16
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	fffffe5f 	.word	0xfffffe5f

08001afc <motorSimpleBegin>:
	return num1;
}

void en_updateAxis(MotorControl_t* motor,signed long setPoint){}

void motorSimpleBegin(MotorControl_Simple_t* motor, GPIO_TypeDef* a_port, uint16_t a_pin, GPIO_TypeDef* b_port, uint16_t b_pin){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	1dbb      	adds	r3, r7, #6
 8001b0a:	801a      	strh	r2, [r3, #0]
	motor->A_PORT = a_port;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	601a      	str	r2, [r3, #0]
	motor->A_PIN = a_pin;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1dba      	adds	r2, r7, #6
 8001b16:	8812      	ldrh	r2, [r2, #0]
 8001b18:	809a      	strh	r2, [r3, #4]

	motor->B_PORT = b_port;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	609a      	str	r2, [r3, #8]
	motor->B_PIN = b_pin;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2218      	movs	r2, #24
 8001b24:	18ba      	adds	r2, r7, r2
 8001b26:	8812      	ldrh	r2, [r2, #0]
 8001b28:	819a      	strh	r2, [r3, #12]
}
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b004      	add	sp, #16
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <motorForward>:
//Faz o motor da pin�a ir pra frente
void motorForward(MotorControl_Simple_t* motor, uint32_t time){
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(motor->A_PORT, motor->A_PIN, GPIO_PIN_SET);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	889b      	ldrh	r3, [r3, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	0019      	movs	r1, r3
 8001b48:	f7fe fe69 	bl	800081e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->B_PORT, motor->B_PIN, GPIO_PIN_RESET);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6898      	ldr	r0, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	899b      	ldrh	r3, [r3, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	0019      	movs	r1, r3
 8001b58:	f7fe fe61 	bl	800081e <HAL_GPIO_WritePin>
	HAL_Delay(time);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f7fe fbac 	bl	80002bc <HAL_Delay>

	HAL_GPIO_WritePin(motor->A_PORT, motor->A_PIN, GPIO_PIN_RESET);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6818      	ldr	r0, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	889b      	ldrh	r3, [r3, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	0019      	movs	r1, r3
 8001b70:	f7fe fe55 	bl	800081e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->B_PORT, motor->B_PIN, GPIO_PIN_RESET);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6898      	ldr	r0, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	899b      	ldrh	r3, [r3, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	0019      	movs	r1, r3
 8001b80:	f7fe fe4d 	bl	800081e <HAL_GPIO_WritePin>

}
 8001b84:	46c0      	nop			; (mov r8, r8)
 8001b86:	46bd      	mov	sp, r7
 8001b88:	b002      	add	sp, #8
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <motorBackward>:
//Faz o motor da pin�a voltar para tr�s
void  motorBackward(MotorControl_Simple_t* motor, uint32_t time){
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(motor->A_PORT, motor->A_PIN, GPIO_PIN_RESET);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	889b      	ldrh	r3, [r3, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	0019      	movs	r1, r3
 8001ba2:	f7fe fe3c 	bl	800081e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->B_PORT, motor->B_PIN, GPIO_PIN_SET);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6898      	ldr	r0, [r3, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	899b      	ldrh	r3, [r3, #12]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	0019      	movs	r1, r3
 8001bb2:	f7fe fe34 	bl	800081e <HAL_GPIO_WritePin>
	HAL_Delay(time);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f7fe fb7f 	bl	80002bc <HAL_Delay>

	HAL_GPIO_WritePin(motor->A_PORT, motor->A_PIN, GPIO_PIN_RESET);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6818      	ldr	r0, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	889b      	ldrh	r3, [r3, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	0019      	movs	r1, r3
 8001bca:	f7fe fe28 	bl	800081e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->B_PORT, motor->B_PIN, GPIO_PIN_RESET);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6898      	ldr	r0, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	899b      	ldrh	r3, [r3, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	0019      	movs	r1, r3
 8001bda:	f7fe fe20 	bl	800081e <HAL_GPIO_WritePin>

}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	46bd      	mov	sp, r7
 8001be2:	b002      	add	sp, #8
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <updateAxis>:
/*void pierce(MotorControl_Simple_t* motor, uint32_t time){
	motorForward(motor, time);
	motorBackward(motor, time);
}*/

void updateAxis(MotorControl_Simple_t* motor, uint8_t direction){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	000a      	movs	r2, r1
 8001bf2:	1cfb      	adds	r3, r7, #3
 8001bf4:	701a      	strb	r2, [r3, #0]
	switch (direction){
 8001bf6:	1cfb      	adds	r3, r7, #3
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d83d      	bhi.n	8001c7a <updateAxis+0x92>
 8001bfe:	009a      	lsls	r2, r3, #2
 8001c00:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <updateAxis+0x9c>)
 8001c02:	18d3      	adds	r3, r2, r3
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	469f      	mov	pc, r3
		case RIGHT:
			motorForward(motor, TIME_HOR);
 8001c08:	4a1f      	ldr	r2, [pc, #124]	; (8001c88 <updateAxis+0xa0>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	0011      	movs	r1, r2
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f7ff ff8f 	bl	8001b32 <motorForward>
		break;
 8001c14:	e031      	b.n	8001c7a <updateAxis+0x92>
		case LEFT:
			motorBackward(motor, TIME_HOR);
 8001c16:	4a1c      	ldr	r2, [pc, #112]	; (8001c88 <updateAxis+0xa0>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f7ff ffb5 	bl	8001b8c <motorBackward>
		break;
 8001c22:	e02a      	b.n	8001c7a <updateAxis+0x92>
		case DOWN:
			motorForward(motor, TIME_VER);
 8001c24:	4a18      	ldr	r2, [pc, #96]	; (8001c88 <updateAxis+0xa0>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	0011      	movs	r1, r2
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f7ff ff81 	bl	8001b32 <motorForward>
		break;
 8001c30:	e023      	b.n	8001c7a <updateAxis+0x92>
		case UP:
			motorBackward(motor, TIME_VER);
 8001c32:	4a15      	ldr	r2, [pc, #84]	; (8001c88 <updateAxis+0xa0>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	0011      	movs	r1, r2
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f7ff ffa7 	bl	8001b8c <motorBackward>
		break;
 8001c3e:	e01c      	b.n	8001c7a <updateAxis+0x92>
		case NEXT_DOT_RIGHT:
			motorForward(motor, TIME_NEXT_DOT);
 8001c40:	4a11      	ldr	r2, [pc, #68]	; (8001c88 <updateAxis+0xa0>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	0011      	movs	r1, r2
 8001c46:	0018      	movs	r0, r3
 8001c48:	f7ff ff73 	bl	8001b32 <motorForward>
		break;
 8001c4c:	e015      	b.n	8001c7a <updateAxis+0x92>
		case NEXT_DOT_LEFT:
			motorBackward(motor, TIME_NEXT_DOT);
 8001c4e:	4a0e      	ldr	r2, [pc, #56]	; (8001c88 <updateAxis+0xa0>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	0011      	movs	r1, r2
 8001c54:	0018      	movs	r0, r3
 8001c56:	f7ff ff99 	bl	8001b8c <motorBackward>
		break;
 8001c5a:	e00e      	b.n	8001c7a <updateAxis+0x92>
		case DOWN_NEXT_LINE:
			motorForward(motor, TIME_NEXT_DOT);
 8001c5c:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <updateAxis+0xa0>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	0011      	movs	r1, r2
 8001c62:	0018      	movs	r0, r3
 8001c64:	f7ff ff65 	bl	8001b32 <motorForward>
		break;
 8001c68:	e007      	b.n	8001c7a <updateAxis+0x92>
		case INIT:
			motorBackward(motor, TIME_INIT);
 8001c6a:	23fa      	movs	r3, #250	; 0xfa
 8001c6c:	011a      	lsls	r2, r3, #4
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	0011      	movs	r1, r2
 8001c72:	0018      	movs	r0, r3
 8001c74:	f7ff ff8a 	bl	8001b8c <motorBackward>
	}
}
 8001c78:	e7ff      	b.n	8001c7a <updateAxis+0x92>
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b002      	add	sp, #8
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	08002cd4 	.word	0x08002cd4
 8001c88:	000005dc 	.word	0x000005dc

08001c8c <ps2interrupt>:



// The ISR for the external interrupt
void ps2interrupt(Keyboard_TypeDef* keyboard)
{
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
	static uint8_t incoming=0;
	static uint32_t prev_ms=0;
	uint32_t now_ms;
	uint8_t n, val;

	val = HAL_GPIO_ReadPin(keyboard->DataPort, keyboard->DataPin); 
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	222f      	movs	r2, #47	; 0x2f
 8001c9c:	5c9b      	ldrb	r3, [r3, r2]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	2216      	movs	r2, #22
 8001ca2:	18bc      	adds	r4, r7, r2
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	f7fe fd9d 	bl	80007e4 <HAL_GPIO_ReadPin>
 8001caa:	0003      	movs	r3, r0
 8001cac:	7023      	strb	r3, [r4, #0]
	now_ms = HAL_GetTick() ;
 8001cae:	f7fe fafb 	bl	80002a8 <HAL_GetTick>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	613b      	str	r3, [r7, #16]
	if (now_ms - prev_ms > 250) {
 8001cb6:	4b33      	ldr	r3, [pc, #204]	; (8001d84 <ps2interrupt+0xf8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2bfa      	cmp	r3, #250	; 0xfa
 8001cc0:	d905      	bls.n	8001cce <ps2interrupt+0x42>
		bitcount = 0;
 8001cc2:	4b31      	ldr	r3, [pc, #196]	; (8001d88 <ps2interrupt+0xfc>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
		incoming = 0;
 8001cc8:	4b30      	ldr	r3, [pc, #192]	; (8001d8c <ps2interrupt+0x100>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
	}
	prev_ms = now_ms;
 8001cce:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <ps2interrupt+0xf8>)
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	601a      	str	r2, [r3, #0]
	n = bitcount - 1;
 8001cd4:	4b2c      	ldr	r3, [pc, #176]	; (8001d88 <ps2interrupt+0xfc>)
 8001cd6:	781a      	ldrb	r2, [r3, #0]
 8001cd8:	230f      	movs	r3, #15
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	3a01      	subs	r2, #1
 8001cde:	701a      	strb	r2, [r3, #0]
	if (n <= 7) {
 8001ce0:	230f      	movs	r3, #15
 8001ce2:	18fb      	adds	r3, r7, r3
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b07      	cmp	r3, #7
 8001ce8:	d810      	bhi.n	8001d0c <ps2interrupt+0x80>
		incoming |= (val << n);
 8001cea:	2316      	movs	r3, #22
 8001cec:	18fb      	adds	r3, r7, r3
 8001cee:	781a      	ldrb	r2, [r3, #0]
 8001cf0:	230f      	movs	r3, #15
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	0013      	movs	r3, r2
 8001cfa:	b25a      	sxtb	r2, r3
 8001cfc:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <ps2interrupt+0x100>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	b25b      	sxtb	r3, r3
 8001d02:	4313      	orrs	r3, r2
 8001d04:	b25b      	sxtb	r3, r3
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <ps2interrupt+0x100>)
 8001d0a:	701a      	strb	r2, [r3, #0]
	}
	bitcount++;
 8001d0c:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <ps2interrupt+0xfc>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <ps2interrupt+0xfc>)
 8001d16:	701a      	strb	r2, [r3, #0]
	if (bitcount == 11) {
 8001d18:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <ps2interrupt+0xfc>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b0b      	cmp	r3, #11
 8001d1e:	d12c      	bne.n	8001d7a <ps2interrupt+0xee>
		uint8_t i = keyboard->head + 1;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	222d      	movs	r2, #45	; 0x2d
 8001d24:	5c9b      	ldrb	r3, [r3, r2]
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	2317      	movs	r3, #23
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	3201      	adds	r2, #1
 8001d2e:	701a      	strb	r2, [r3, #0]
		if (i >= BUFFER_SIZE) i = 0;
 8001d30:	2317      	movs	r3, #23
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b2c      	cmp	r3, #44	; 0x2c
 8001d38:	d903      	bls.n	8001d42 <ps2interrupt+0xb6>
 8001d3a:	2317      	movs	r3, #23
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
		if (i != keyboard->tail) {
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	222e      	movs	r2, #46	; 0x2e
 8001d46:	5c9b      	ldrb	r3, [r3, r2]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2217      	movs	r2, #23
 8001d4c:	18ba      	adds	r2, r7, r2
 8001d4e:	7812      	ldrb	r2, [r2, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d00c      	beq.n	8001d6e <ps2interrupt+0xe2>
			keyboard->buffer[i] = incoming;
 8001d54:	2317      	movs	r3, #23
 8001d56:	18fb      	adds	r3, r7, r3
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	4a0c      	ldr	r2, [pc, #48]	; (8001d8c <ps2interrupt+0x100>)
 8001d5c:	7811      	ldrb	r1, [r2, #0]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	54d1      	strb	r1, [r2, r3]
			keyboard->head = i;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2217      	movs	r2, #23
 8001d66:	18ba      	adds	r2, r7, r2
 8001d68:	212d      	movs	r1, #45	; 0x2d
 8001d6a:	7812      	ldrb	r2, [r2, #0]
 8001d6c:	545a      	strb	r2, [r3, r1]
		}
		bitcount = 0;
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <ps2interrupt+0xfc>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
		incoming = 0;
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <ps2interrupt+0x100>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
	}
}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b007      	add	sp, #28
 8001d80:	bd90      	pop	{r4, r7, pc}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	200000cc 	.word	0x200000cc
 8001d88:	200000d0 	.word	0x200000d0
 8001d8c:	200000d1 	.word	0x200000d1

08001d90 <get_scan_code>:

static inline uint8_t get_scan_code(Keyboard_TypeDef* keyboard)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	uint8_t c, i;

	i = keyboard->tail;
 8001d98:	230f      	movs	r3, #15
 8001d9a:	18fb      	adds	r3, r7, r3
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	212e      	movs	r1, #46	; 0x2e
 8001da0:	5c52      	ldrb	r2, [r2, r1]
 8001da2:	701a      	strb	r2, [r3, #0]
	if (i == keyboard->head) return 0;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	222d      	movs	r2, #45	; 0x2d
 8001da8:	5c9b      	ldrb	r3, [r3, r2]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	220f      	movs	r2, #15
 8001dae:	18ba      	adds	r2, r7, r2
 8001db0:	7812      	ldrb	r2, [r2, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d101      	bne.n	8001dba <get_scan_code+0x2a>
 8001db6:	2300      	movs	r3, #0
 8001db8:	e020      	b.n	8001dfc <get_scan_code+0x6c>
	i++;
 8001dba:	230f      	movs	r3, #15
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	781a      	ldrb	r2, [r3, #0]
 8001dc0:	230f      	movs	r3, #15
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	3201      	adds	r2, #1
 8001dc6:	701a      	strb	r2, [r3, #0]
	if (i >= BUFFER_SIZE) i = 0;
 8001dc8:	230f      	movs	r3, #15
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b2c      	cmp	r3, #44	; 0x2c
 8001dd0:	d903      	bls.n	8001dda <get_scan_code+0x4a>
 8001dd2:	230f      	movs	r3, #15
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
	c = keyboard->buffer[i];
 8001dda:	230f      	movs	r3, #15
 8001ddc:	18fb      	adds	r3, r7, r3
 8001dde:	781a      	ldrb	r2, [r3, #0]
 8001de0:	230e      	movs	r3, #14
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	5c8a      	ldrb	r2, [r1, r2]
 8001de8:	701a      	strb	r2, [r3, #0]
	keyboard->tail = i;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	220f      	movs	r2, #15
 8001dee:	18ba      	adds	r2, r7, r2
 8001df0:	212e      	movs	r1, #46	; 0x2e
 8001df2:	7812      	ldrb	r2, [r2, #0]
 8001df4:	545a      	strb	r2, [r3, r1]
	return c;
 8001df6:	230e      	movs	r3, #14
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	781b      	ldrb	r3, [r3, #0]
}
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b004      	add	sp, #16
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <get_iso8859_code>:
#define SHIFT_L   0x04
#define SHIFT_R   0x08
#define ALTGR     0x10

static char get_iso8859_code(Keyboard_TypeDef* keyboard)
{
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
	static uint8_t state=0;
	uint8_t s;
	char c;

	while (1) {
		s = get_scan_code(keyboard);
 8001e0c:	230e      	movs	r3, #14
 8001e0e:	18fc      	adds	r4, r7, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	0018      	movs	r0, r3
 8001e14:	f7ff ffbc 	bl	8001d90 <get_scan_code>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	7023      	strb	r3, [r4, #0]
		if (!s) return 0;
 8001e1c:	230e      	movs	r3, #14
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <get_iso8859_code+0x26>
 8001e26:	2300      	movs	r3, #0
 8001e28:	e119      	b.n	800205e <get_iso8859_code+0x25a>
		if (s == 0xF0) {
 8001e2a:	230e      	movs	r3, #14
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2bf0      	cmp	r3, #240	; 0xf0
 8001e32:	d107      	bne.n	8001e44 <get_iso8859_code+0x40>
			state |= BREAK;
 8001e34:	4b8c      	ldr	r3, [pc, #560]	; (8002068 <get_iso8859_code+0x264>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4b8a      	ldr	r3, [pc, #552]	; (8002068 <get_iso8859_code+0x264>)
 8001e40:	701a      	strb	r2, [r3, #0]
 8001e42:	e7e3      	b.n	8001e0c <get_iso8859_code+0x8>
		} else if (s == 0xE0) {
 8001e44:	230e      	movs	r3, #14
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2be0      	cmp	r3, #224	; 0xe0
 8001e4c:	d107      	bne.n	8001e5e <get_iso8859_code+0x5a>
			state |= MODIFIER;
 8001e4e:	4b86      	ldr	r3, [pc, #536]	; (8002068 <get_iso8859_code+0x264>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2202      	movs	r2, #2
 8001e54:	4313      	orrs	r3, r2
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	4b83      	ldr	r3, [pc, #524]	; (8002068 <get_iso8859_code+0x264>)
 8001e5a:	701a      	strb	r2, [r3, #0]
 8001e5c:	e7d6      	b.n	8001e0c <get_iso8859_code+0x8>
		} else {
			if (state & BREAK) {
 8001e5e:	4b82      	ldr	r3, [pc, #520]	; (8002068 <get_iso8859_code+0x264>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	001a      	movs	r2, r3
 8001e64:	2301      	movs	r3, #1
 8001e66:	4013      	ands	r3, r2
 8001e68:	d033      	beq.n	8001ed2 <get_iso8859_code+0xce>
				if (s == 0x12) {
 8001e6a:	230e      	movs	r3, #14
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b12      	cmp	r3, #18
 8001e72:	d107      	bne.n	8001e84 <get_iso8859_code+0x80>
					state &= ~SHIFT_L;
 8001e74:	4b7c      	ldr	r3, [pc, #496]	; (8002068 <get_iso8859_code+0x264>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2204      	movs	r2, #4
 8001e7a:	4393      	bics	r3, r2
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	4b7a      	ldr	r3, [pc, #488]	; (8002068 <get_iso8859_code+0x264>)
 8001e80:	701a      	strb	r2, [r3, #0]
 8001e82:	e01e      	b.n	8001ec2 <get_iso8859_code+0xbe>
				} else if (s == 0x59) {
 8001e84:	230e      	movs	r3, #14
 8001e86:	18fb      	adds	r3, r7, r3
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b59      	cmp	r3, #89	; 0x59
 8001e8c:	d107      	bne.n	8001e9e <get_iso8859_code+0x9a>
					state &= ~SHIFT_R;
 8001e8e:	4b76      	ldr	r3, [pc, #472]	; (8002068 <get_iso8859_code+0x264>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2208      	movs	r2, #8
 8001e94:	4393      	bics	r3, r2
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	4b73      	ldr	r3, [pc, #460]	; (8002068 <get_iso8859_code+0x264>)
 8001e9a:	701a      	strb	r2, [r3, #0]
 8001e9c:	e011      	b.n	8001ec2 <get_iso8859_code+0xbe>
				} else if (s == 0x11 && (state & MODIFIER)) {
 8001e9e:	230e      	movs	r3, #14
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b11      	cmp	r3, #17
 8001ea6:	d10c      	bne.n	8001ec2 <get_iso8859_code+0xbe>
 8001ea8:	4b6f      	ldr	r3, [pc, #444]	; (8002068 <get_iso8859_code+0x264>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	001a      	movs	r2, r3
 8001eae:	2302      	movs	r3, #2
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d006      	beq.n	8001ec2 <get_iso8859_code+0xbe>
					state &= ~ALTGR;
 8001eb4:	4b6c      	ldr	r3, [pc, #432]	; (8002068 <get_iso8859_code+0x264>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2210      	movs	r2, #16
 8001eba:	4393      	bics	r3, r2
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4b6a      	ldr	r3, [pc, #424]	; (8002068 <get_iso8859_code+0x264>)
 8001ec0:	701a      	strb	r2, [r3, #0]
				}
				// CTRL, ALT & WIN keys could be added
				// but is that really worth the overkeyboard->head?
				state &= ~(BREAK | MODIFIER);
 8001ec2:	4b69      	ldr	r3, [pc, #420]	; (8002068 <get_iso8859_code+0x264>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	4393      	bics	r3, r2
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	4b66      	ldr	r3, [pc, #408]	; (8002068 <get_iso8859_code+0x264>)
 8001ece:	701a      	strb	r2, [r3, #0]
				continue;
 8001ed0:	e0c4      	b.n	800205c <get_iso8859_code+0x258>
			}
			if (s == 0x12) {
 8001ed2:	230e      	movs	r3, #14
 8001ed4:	18fb      	adds	r3, r7, r3
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b12      	cmp	r3, #18
 8001eda:	d107      	bne.n	8001eec <get_iso8859_code+0xe8>
				state |= SHIFT_L;
 8001edc:	4b62      	ldr	r3, [pc, #392]	; (8002068 <get_iso8859_code+0x264>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4b60      	ldr	r3, [pc, #384]	; (8002068 <get_iso8859_code+0x264>)
 8001ee8:	701a      	strb	r2, [r3, #0]
				continue;
 8001eea:	e0b7      	b.n	800205c <get_iso8859_code+0x258>
			} else if (s == 0x59) {
 8001eec:	230e      	movs	r3, #14
 8001eee:	18fb      	adds	r3, r7, r3
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b59      	cmp	r3, #89	; 0x59
 8001ef4:	d107      	bne.n	8001f06 <get_iso8859_code+0x102>
				state |= SHIFT_R;
 8001ef6:	4b5c      	ldr	r3, [pc, #368]	; (8002068 <get_iso8859_code+0x264>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2208      	movs	r2, #8
 8001efc:	4313      	orrs	r3, r2
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	4b59      	ldr	r3, [pc, #356]	; (8002068 <get_iso8859_code+0x264>)
 8001f02:	701a      	strb	r2, [r3, #0]
				continue;
 8001f04:	e0aa      	b.n	800205c <get_iso8859_code+0x258>
			} else if (s == 0x11 && (state & MODIFIER)) {
 8001f06:	230e      	movs	r3, #14
 8001f08:	18fb      	adds	r3, r7, r3
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b11      	cmp	r3, #17
 8001f0e:	d10c      	bne.n	8001f2a <get_iso8859_code+0x126>
 8001f10:	4b55      	ldr	r3, [pc, #340]	; (8002068 <get_iso8859_code+0x264>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	001a      	movs	r2, r3
 8001f16:	2302      	movs	r3, #2
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d006      	beq.n	8001f2a <get_iso8859_code+0x126>
				state |= ALTGR;
 8001f1c:	4b52      	ldr	r3, [pc, #328]	; (8002068 <get_iso8859_code+0x264>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2210      	movs	r2, #16
 8001f22:	4313      	orrs	r3, r2
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	4b50      	ldr	r3, [pc, #320]	; (8002068 <get_iso8859_code+0x264>)
 8001f28:	701a      	strb	r2, [r3, #0]
			}
			c = 0;
 8001f2a:	230f      	movs	r3, #15
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
			if (state & MODIFIER) {
 8001f32:	4b4d      	ldr	r3, [pc, #308]	; (8002068 <get_iso8859_code+0x264>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	001a      	movs	r2, r3
 8001f38:	2302      	movs	r3, #2
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d047      	beq.n	8001fce <get_iso8859_code+0x1ca>
				switch (s) {
 8001f3e:	230e      	movs	r3, #14
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	3b4a      	subs	r3, #74	; 0x4a
 8001f46:	2b33      	cmp	r3, #51	; 0x33
 8001f48:	d900      	bls.n	8001f4c <get_iso8859_code+0x148>
 8001f4a:	e075      	b.n	8002038 <get_iso8859_code+0x234>
 8001f4c:	009a      	lsls	r2, r3, #2
 8001f4e:	4b47      	ldr	r3, [pc, #284]	; (800206c <get_iso8859_code+0x268>)
 8001f50:	18d3      	adds	r3, r2, r3
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	469f      	mov	pc, r3
				  case 0x70: c = PS2_INSERT;      break;
 8001f56:	230f      	movs	r3, #15
 8001f58:	18fb      	adds	r3, r7, r3
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
 8001f5e:	e06c      	b.n	800203a <get_iso8859_code+0x236>
				  case 0x6C: c = PS2_HOME;        break;
 8001f60:	230f      	movs	r3, #15
 8001f62:	18fb      	adds	r3, r7, r3
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
 8001f68:	e067      	b.n	800203a <get_iso8859_code+0x236>
				  case 0x7D: c = PS2_PAGEUP;      break;
 8001f6a:	230f      	movs	r3, #15
 8001f6c:	18fb      	adds	r3, r7, r3
 8001f6e:	2219      	movs	r2, #25
 8001f70:	701a      	strb	r2, [r3, #0]
 8001f72:	e062      	b.n	800203a <get_iso8859_code+0x236>
				  case 0x71: c = PS2_DELETE;      break;
 8001f74:	230f      	movs	r3, #15
 8001f76:	18fb      	adds	r3, r7, r3
 8001f78:	227f      	movs	r2, #127	; 0x7f
 8001f7a:	701a      	strb	r2, [r3, #0]
 8001f7c:	e05d      	b.n	800203a <get_iso8859_code+0x236>
				  case 0x69: c = PS2_END;         break;
 8001f7e:	230f      	movs	r3, #15
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
 8001f86:	e058      	b.n	800203a <get_iso8859_code+0x236>
				  case 0x7A: c = PS2_PAGEDOWN;    break;
 8001f88:	230f      	movs	r3, #15
 8001f8a:	18fb      	adds	r3, r7, r3
 8001f8c:	221a      	movs	r2, #26
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	e053      	b.n	800203a <get_iso8859_code+0x236>
				  case 0x75: c = PS2_UPARROW;     break;
 8001f92:	230f      	movs	r3, #15
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	220b      	movs	r2, #11
 8001f98:	701a      	strb	r2, [r3, #0]
 8001f9a:	e04e      	b.n	800203a <get_iso8859_code+0x236>
				  case 0x6B: c = PS2_LEFTARROW;   break;
 8001f9c:	230f      	movs	r3, #15
 8001f9e:	18fb      	adds	r3, r7, r3
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	701a      	strb	r2, [r3, #0]
 8001fa4:	e049      	b.n	800203a <get_iso8859_code+0x236>
				  case 0x72: c = PS2_DOWNARROW;   break;
 8001fa6:	230f      	movs	r3, #15
 8001fa8:	18fb      	adds	r3, r7, r3
 8001faa:	220a      	movs	r2, #10
 8001fac:	701a      	strb	r2, [r3, #0]
 8001fae:	e044      	b.n	800203a <get_iso8859_code+0x236>
				  case 0x74: c = PS2_RIGHTARROW;  break;
 8001fb0:	230f      	movs	r3, #15
 8001fb2:	18fb      	adds	r3, r7, r3
 8001fb4:	2215      	movs	r2, #21
 8001fb6:	701a      	strb	r2, [r3, #0]
 8001fb8:	e03f      	b.n	800203a <get_iso8859_code+0x236>
				  case 0x4A: c = '/';             break;
 8001fba:	230f      	movs	r3, #15
 8001fbc:	18fb      	adds	r3, r7, r3
 8001fbe:	222f      	movs	r2, #47	; 0x2f
 8001fc0:	701a      	strb	r2, [r3, #0]
 8001fc2:	e03a      	b.n	800203a <get_iso8859_code+0x236>
				  case 0x5A: c = PS2_ENTER;       break;
 8001fc4:	230f      	movs	r3, #15
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	220d      	movs	r2, #13
 8001fca:	701a      	strb	r2, [r3, #0]
 8001fcc:	e035      	b.n	800203a <get_iso8859_code+0x236>
				  default: break;
				}
			} else if ((state & ALTGR) && keyboard->keymap->uses_altgr) {
 8001fce:	4b26      	ldr	r3, [pc, #152]	; (8002068 <get_iso8859_code+0x264>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	001a      	movs	r2, r3
 8001fd4:	2310      	movs	r3, #16
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d017      	beq.n	800200a <get_iso8859_code+0x206>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	2288      	movs	r2, #136	; 0x88
 8001fe0:	589b      	ldr	r3, [r3, r2]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d011      	beq.n	800200a <get_iso8859_code+0x206>
				if (s < PS2_KEYMAP_SIZE)
 8001fe6:	230e      	movs	r3, #14
 8001fe8:	18fb      	adds	r3, r7, r3
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b87      	cmp	r3, #135	; 0x87
 8001fee:	d824      	bhi.n	800203a <get_iso8859_code+0x236>
					c = pgm_read_byte(keyboard->keymap->altgr + s); // MUDAR
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	338c      	adds	r3, #140	; 0x8c
 8001ff6:	001a      	movs	r2, r3
 8001ff8:	230e      	movs	r3, #14
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	18d2      	adds	r2, r2, r3
 8002000:	230f      	movs	r3, #15
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	7812      	ldrb	r2, [r2, #0]
 8002006:	701a      	strb	r2, [r3, #0]
				if (s < PS2_KEYMAP_SIZE)
 8002008:	e017      	b.n	800203a <get_iso8859_code+0x236>
			} else if (state & (SHIFT_L | SHIFT_R)) {
 800200a:	4b17      	ldr	r3, [pc, #92]	; (8002068 <get_iso8859_code+0x264>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	001a      	movs	r2, r3
 8002010:	230c      	movs	r3, #12
 8002012:	4013      	ands	r3, r2
 8002014:	d111      	bne.n	800203a <get_iso8859_code+0x236>
//				if (s < PS2_KEYMAP_SIZE)
				//	c = pgm_read_byte(keyboard->keymap->shift + s);
			} else {
				if (s < PS2_KEYMAP_SIZE)
 8002016:	230e      	movs	r3, #14
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b87      	cmp	r3, #135	; 0x87
 800201e:	d80c      	bhi.n	800203a <get_iso8859_code+0x236>
					c = pgm_read_byte(keyboard->keymap->noshift + s);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	001a      	movs	r2, r3
 8002026:	230e      	movs	r3, #14
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	18d2      	adds	r2, r2, r3
 800202e:	230f      	movs	r3, #15
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	7812      	ldrb	r2, [r2, #0]
 8002034:	701a      	strb	r2, [r3, #0]
 8002036:	e000      	b.n	800203a <get_iso8859_code+0x236>
				  default: break;
 8002038:	46c0      	nop			; (mov r8, r8)
			}
			state &= ~(BREAK | MODIFIER);
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <get_iso8859_code+0x264>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2203      	movs	r2, #3
 8002040:	4393      	bics	r3, r2
 8002042:	b2da      	uxtb	r2, r3
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <get_iso8859_code+0x264>)
 8002046:	701a      	strb	r2, [r3, #0]
			if (c) return c;
 8002048:	230f      	movs	r3, #15
 800204a:	18fb      	adds	r3, r7, r3
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d100      	bne.n	8002054 <get_iso8859_code+0x250>
 8002052:	e6db      	b.n	8001e0c <get_iso8859_code+0x8>
 8002054:	230f      	movs	r3, #15
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	e000      	b.n	800205e <get_iso8859_code+0x25a>
		s = get_scan_code(keyboard);
 800205c:	e6d6      	b.n	8001e0c <get_iso8859_code+0x8>
		}
	}
}
 800205e:	0018      	movs	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	b005      	add	sp, #20
 8002064:	bd90      	pop	{r4, r7, pc}
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	200000d2 	.word	0x200000d2
 800206c:	08002e0c 	.word	0x08002e0c

08002070 <keyboardAvailable>:

uint8_t keyboardAvailable(Keyboard_TypeDef* keyboard) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
	if (keyboard->CharBuffer || keyboard->UTF8next) return 1;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	223c      	movs	r2, #60	; 0x3c
 800207c:	5c9b      	ldrb	r3, [r3, r2]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d104      	bne.n	800208c <keyboardAvailable+0x1c>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	223d      	movs	r2, #61	; 0x3d
 8002086:	5c9b      	ldrb	r3, [r3, r2]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <keyboardAvailable+0x20>
 800208c:	2301      	movs	r3, #1
 800208e:	e010      	b.n	80020b2 <keyboardAvailable+0x42>
	keyboard->CharBuffer = get_iso8859_code(keyboard);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	0018      	movs	r0, r3
 8002094:	f7ff feb6 	bl	8001e04 <get_iso8859_code>
 8002098:	0003      	movs	r3, r0
 800209a:	0019      	movs	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	223c      	movs	r2, #60	; 0x3c
 80020a0:	5499      	strb	r1, [r3, r2]
	if (keyboard->CharBuffer) return 1;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	223c      	movs	r2, #60	; 0x3c
 80020a6:	5c9b      	ldrb	r3, [r3, r2]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <keyboardAvailable+0x40>
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <keyboardAvailable+0x42>
	return 0;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	0018      	movs	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	b002      	add	sp, #8
 80020b8:	bd80      	pop	{r7, pc}

080020ba <keyboardRead>:
uint8_t keyboardReadScanCode(Keyboard_TypeDef* keyboard) 
{
	return get_scan_code(keyboard);
}

uint8_t keyboardRead(Keyboard_TypeDef* keyboard) { 
 80020ba:	b590      	push	{r4, r7, lr}
 80020bc:	b085      	sub	sp, #20
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
	uint8_t result;

	result = keyboard->UTF8next;
 80020c2:	230f      	movs	r3, #15
 80020c4:	18fb      	adds	r3, r7, r3
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	213d      	movs	r1, #61	; 0x3d
 80020ca:	5c52      	ldrb	r2, [r2, r1]
 80020cc:	701a      	strb	r2, [r3, #0]
	if (result) {
 80020ce:	230f      	movs	r3, #15
 80020d0:	18fb      	adds	r3, r7, r3
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d004      	beq.n	80020e2 <keyboardRead+0x28>
		keyboard->UTF8next = 0;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	223d      	movs	r2, #61	; 0x3d
 80020dc:	2100      	movs	r1, #0
 80020de:	5499      	strb	r1, [r3, r2]
 80020e0:	e039      	b.n	8002156 <keyboardRead+0x9c>
	} else {
		result = keyboard->CharBuffer;
 80020e2:	230f      	movs	r3, #15
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	213c      	movs	r1, #60	; 0x3c
 80020ea:	5c52      	ldrb	r2, [r2, r1]
 80020ec:	701a      	strb	r2, [r3, #0]
		if (result) {
 80020ee:	230f      	movs	r3, #15
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d004      	beq.n	8002102 <keyboardRead+0x48>
			keyboard->CharBuffer = 0;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	223c      	movs	r2, #60	; 0x3c
 80020fc:	2100      	movs	r1, #0
 80020fe:	5499      	strb	r1, [r3, r2]
 8002100:	e007      	b.n	8002112 <keyboardRead+0x58>
		} else {
			result = get_iso8859_code(keyboard);
 8002102:	230f      	movs	r3, #15
 8002104:	18fc      	adds	r4, r7, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	0018      	movs	r0, r3
 800210a:	f7ff fe7b 	bl	8001e04 <get_iso8859_code>
 800210e:	0003      	movs	r3, r0
 8002110:	7023      	strb	r3, [r4, #0]
		}
		if (result >= 128) {
 8002112:	230f      	movs	r3, #15
 8002114:	18fb      	adds	r3, r7, r3
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	b25b      	sxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	da1b      	bge.n	8002156 <keyboardRead+0x9c>
			keyboard->UTF8next = (result & 0x3F) | 0x80;
 800211e:	230f      	movs	r3, #15
 8002120:	18fb      	adds	r3, r7, r3
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	b25b      	sxtb	r3, r3
 8002126:	223f      	movs	r2, #63	; 0x3f
 8002128:	4013      	ands	r3, r2
 800212a:	b25b      	sxtb	r3, r3
 800212c:	2280      	movs	r2, #128	; 0x80
 800212e:	4252      	negs	r2, r2
 8002130:	4313      	orrs	r3, r2
 8002132:	b25b      	sxtb	r3, r3
 8002134:	b2d9      	uxtb	r1, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	223d      	movs	r2, #61	; 0x3d
 800213a:	5499      	strb	r1, [r3, r2]
			result = ((result >> 6) & 0x1F) | 0xC0;
 800213c:	230f      	movs	r3, #15
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	099b      	lsrs	r3, r3, #6
 8002144:	b2db      	uxtb	r3, r3
 8002146:	b25b      	sxtb	r3, r3
 8002148:	2240      	movs	r2, #64	; 0x40
 800214a:	4252      	negs	r2, r2
 800214c:	4313      	orrs	r3, r2
 800214e:	b25a      	sxtb	r2, r3
 8002150:	230f      	movs	r3, #15
 8002152:	18fb      	adds	r3, r7, r3
 8002154:	701a      	strb	r2, [r3, #0]
		}
	}
	if (!result) return -1;
 8002156:	230f      	movs	r3, #15
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <keyboardRead+0xaa>
 8002160:	23ff      	movs	r3, #255	; 0xff
 8002162:	e002      	b.n	800216a <keyboardRead+0xb0>
	return result;
 8002164:	230f      	movs	r3, #15
 8002166:	18fb      	adds	r3, r7, r3
 8002168:	781b      	ldrb	r3, [r3, #0]
}
 800216a:	0018      	movs	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	b005      	add	sp, #20
 8002170:	bd90      	pop	{r4, r7, pc}
	...

08002174 <keyboardBegin>:


/* PIN CONFIGURATION: both DataPin and IQRPin must be iniciatized with PULLUP configuration
*/

void keyboardBegin(Keyboard_TypeDef* keyboard, GPIO_TypeDef* data_port, uint8_t data_pin, GPIO_TypeDef* iqr_port, uint8_t iqr_pin) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	603b      	str	r3, [r7, #0]
 8002180:	1dfb      	adds	r3, r7, #7
 8002182:	701a      	strb	r2, [r3, #0]

  keyboard->DataPort = data_port;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	631a      	str	r2, [r3, #48]	; 0x30
  keyboard->DataPin = data_pin;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1dfa      	adds	r2, r7, #7
 800218e:	212f      	movs	r1, #47	; 0x2f
 8002190:	7812      	ldrb	r2, [r2, #0]
 8002192:	545a      	strb	r2, [r3, r1]

  keyboard->IQRPort = iqr_port;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	639a      	str	r2, [r3, #56]	; 0x38
  keyboard->IQRPin = iqr_pin;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2218      	movs	r2, #24
 800219e:	18ba      	adds	r2, r7, r2
 80021a0:	2134      	movs	r1, #52	; 0x34
 80021a2:	7812      	ldrb	r2, [r2, #0]
 80021a4:	545a      	strb	r2, [r3, r1]

  keyboard->keymap = &PS2Keymap_US;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <keyboardBegin+0x60>)
 80021aa:	641a      	str	r2, [r3, #64]	; 0x40

  keyboard->head = 0;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	222d      	movs	r2, #45	; 0x2d
 80021b0:	2100      	movs	r1, #0
 80021b2:	5499      	strb	r1, [r3, r2]
  keyboard->tail = 0;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	222e      	movs	r2, #46	; 0x2e
 80021b8:	2100      	movs	r1, #0
 80021ba:	5499      	strb	r1, [r3, r2]
  keyboard->CharBuffer = 0;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	223c      	movs	r2, #60	; 0x3c
 80021c0:	2100      	movs	r1, #0
 80021c2:	5499      	strb	r1, [r3, r2]
  keyboard->UTF8next = 0;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	223d      	movs	r2, #61	; 0x3d
 80021c8:	2100      	movs	r1, #0
 80021ca:	5499      	strb	r1, [r3, r2]

}
 80021cc:	46c0      	nop			; (mov r8, r8)
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b004      	add	sp, #16
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	08002cf8 	.word	0x08002cf8

080021d8 <fillLineWithBraille>:
//  {{1,1,1,0},{0,1,1,0},{0,0,1,1}},
//  {{1,1,1,0},{1,1,1,0},{0,0,1,1}},
//  {{0,1,1,0},{1,1,1,0},{0,0,1,1}},
//  {{1,0,1,0},{0,1,1,0},{0,0,1,1}}
//                  };
void fillLineWithBraille( unsigned char *lineBraille, unsigned char line, unsigned char letter){
 80021d8:	b590      	push	{r4, r7, lr}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	0008      	movs	r0, r1
 80021e2:	0011      	movs	r1, r2
 80021e4:	1cfb      	adds	r3, r7, #3
 80021e6:	1c02      	adds	r2, r0, #0
 80021e8:	701a      	strb	r2, [r3, #0]
 80021ea:	1cbb      	adds	r3, r7, #2
 80021ec:	1c0a      	adds	r2, r1, #0
 80021ee:	701a      	strb	r2, [r3, #0]

	/*
	 * OVERFLOW NA MEMÓRIA FLASH
	 */
	if(letter>=48 && letter<=57){
 80021f0:	1cbb      	adds	r3, r7, #2
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b2f      	cmp	r3, #47	; 0x2f
 80021f6:	d903      	bls.n	8002200 <fillLineWithBraille+0x28>
 80021f8:	1cbb      	adds	r3, r7, #2
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b39      	cmp	r3, #57	; 0x39
 80021fe:	d942      	bls.n	8002286 <fillLineWithBraille+0xae>
//		for(int i=0;i<4;i++){
//			lineBraille[i]=numbersBraille[letter-48][line][i];
//		}
	}
	else{
		if(letter>=65 && letter<=90){
 8002200:	1cbb      	adds	r3, r7, #2
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b40      	cmp	r3, #64	; 0x40
 8002206:	d908      	bls.n	800221a <fillLineWithBraille+0x42>
 8002208:	1cbb      	adds	r3, r7, #2
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b5a      	cmp	r3, #90	; 0x5a
 800220e:	d804      	bhi.n	800221a <fillLineWithBraille+0x42>
			letter+=32;
 8002210:	1cbb      	adds	r3, r7, #2
 8002212:	1cba      	adds	r2, r7, #2
 8002214:	7812      	ldrb	r2, [r2, #0]
 8002216:	3220      	adds	r2, #32
 8002218:	701a      	strb	r2, [r3, #0]
		}

		for(int i=0;i<2;i++){
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	e027      	b.n	8002270 <fillLineWithBraille+0x98>
			if(letter>=97 && letter<=122){
 8002220:	1cbb      	adds	r3, r7, #2
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b60      	cmp	r3, #96	; 0x60
 8002226:	d917      	bls.n	8002258 <fillLineWithBraille+0x80>
 8002228:	1cbb      	adds	r3, r7, #2
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b7a      	cmp	r3, #122	; 0x7a
 800222e:	d813      	bhi.n	8002258 <fillLineWithBraille+0x80>
				lineBraille[i]=lettersBraille[letter-97][line][i];
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	18d1      	adds	r1, r2, r3
 8002236:	1cbb      	adds	r3, r7, #2
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	3b61      	subs	r3, #97	; 0x61
 800223c:	001a      	movs	r2, r3
 800223e:	1cfb      	adds	r3, r7, #3
 8002240:	781c      	ldrb	r4, [r3, #0]
 8002242:	4813      	ldr	r0, [pc, #76]	; (8002290 <fillLineWithBraille+0xb8>)
 8002244:	0013      	movs	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	189b      	adds	r3, r3, r2
 800224a:	191b      	adds	r3, r3, r4
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	18c2      	adds	r2, r0, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	18d3      	adds	r3, r2, r3
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	700b      	strb	r3, [r1, #0]
			}
			if(letter==32){
 8002258:	1cbb      	adds	r3, r7, #2
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b20      	cmp	r3, #32
 800225e:	d104      	bne.n	800226a <fillLineWithBraille+0x92>
				lineBraille[i]=0;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	18d3      	adds	r3, r2, r3
 8002266:	2200      	movs	r2, #0
 8002268:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<2;i++){
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	3301      	adds	r3, #1
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b01      	cmp	r3, #1
 8002274:	ddd4      	ble.n	8002220 <fillLineWithBraille+0x48>
			}
		}
		lineBraille[2]='\0';
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3302      	adds	r3, #2
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
		lineBraille[3]='\0';
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3303      	adds	r3, #3
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]


	}
}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	46bd      	mov	sp, r7
 800228a:	b005      	add	sp, #20
 800228c:	bd90      	pop	{r4, r7, pc}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	20000000 	.word	0x20000000

08002294 <feedBuffer>:

/*
 * Adiciona caracteres a uma string
 */

void feedBuffer(unsigned char* buffer, short SIZE, unsigned char c){
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	0008      	movs	r0, r1
 800229e:	0011      	movs	r1, r2
 80022a0:	1cbb      	adds	r3, r7, #2
 80022a2:	1c02      	adds	r2, r0, #0
 80022a4:	801a      	strh	r2, [r3, #0]
 80022a6:	1c7b      	adds	r3, r7, #1
 80022a8:	1c0a      	adds	r2, r1, #0
 80022aa:	701a      	strb	r2, [r3, #0]
    unsigned short len = strlen((const char*)buffer);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	0018      	movs	r0, r3
 80022b0:	f7fd ff2a 	bl	8000108 <strlen>
 80022b4:	0002      	movs	r2, r0
 80022b6:	230e      	movs	r3, #14
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	801a      	strh	r2, [r3, #0]
    if(len != (SIZE-1)){
 80022bc:	230e      	movs	r3, #14
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	881a      	ldrh	r2, [r3, #0]
 80022c2:	1cbb      	adds	r3, r7, #2
 80022c4:	2100      	movs	r1, #0
 80022c6:	5e5b      	ldrsh	r3, [r3, r1]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d00f      	beq.n	80022ee <feedBuffer+0x5a>
        buffer[len] = c;
 80022ce:	230e      	movs	r3, #14
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	18d3      	adds	r3, r2, r3
 80022d8:	1c7a      	adds	r2, r7, #1
 80022da:	7812      	ldrb	r2, [r2, #0]
 80022dc:	701a      	strb	r2, [r3, #0]
        buffer[len+1] = '\0';
 80022de:	230e      	movs	r3, #14
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	3301      	adds	r3, #1
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	18d3      	adds	r3, r2, r3
 80022ea:	2200      	movs	r2, #0
 80022ec:	701a      	strb	r2, [r3, #0]
    }
}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b004      	add	sp, #16
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <clearBuffer>:

/*
 * Limpa uma string
 */
void clearBuffer(unsigned char* buffer){
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
    buffer[0] = '\0';
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]
}
 8002304:	46c0      	nop			; (mov r8, r8)
 8002306:	46bd      	mov	sp, r7
 8002308:	b002      	add	sp, #8
 800230a:	bd80      	pop	{r7, pc}

0800230c <reverse>:

void reverse (unsigned char* buffer){
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	unsigned char aux;
	uint16_t i,j;
	uint16_t length = strlen((const char*)buffer);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	0018      	movs	r0, r3
 8002318:	f7fd fef6 	bl	8000108 <strlen>
 800231c:	0002      	movs	r2, r0
 800231e:	230a      	movs	r3, #10
 8002320:	18fb      	adds	r3, r7, r3
 8002322:	801a      	strh	r2, [r3, #0]
	for(i=0;i<length-1;i++){
 8002324:	230e      	movs	r3, #14
 8002326:	18fb      	adds	r3, r7, r3
 8002328:	2200      	movs	r2, #0
 800232a:	801a      	strh	r2, [r3, #0]
 800232c:	e03f      	b.n	80023ae <reverse+0xa2>
	    for(j=0;j<length-1-i;j++){
 800232e:	230c      	movs	r3, #12
 8002330:	18fb      	adds	r3, r7, r3
 8002332:	2200      	movs	r2, #0
 8002334:	801a      	strh	r2, [r3, #0]
 8002336:	e026      	b.n	8002386 <reverse+0x7a>
	        aux = buffer[j];
 8002338:	230c      	movs	r3, #12
 800233a:	18fb      	adds	r3, r7, r3
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	18d2      	adds	r2, r2, r3
 8002342:	2309      	movs	r3, #9
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	7812      	ldrb	r2, [r2, #0]
 8002348:	701a      	strb	r2, [r3, #0]
	        buffer[j] = buffer[j+1];
 800234a:	230c      	movs	r3, #12
 800234c:	18fb      	adds	r3, r7, r3
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	18d3      	adds	r3, r2, r3
 8002354:	220c      	movs	r2, #12
 8002356:	18ba      	adds	r2, r7, r2
 8002358:	8812      	ldrh	r2, [r2, #0]
 800235a:	3201      	adds	r2, #1
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	188a      	adds	r2, r1, r2
 8002360:	7812      	ldrb	r2, [r2, #0]
 8002362:	701a      	strb	r2, [r3, #0]
	        buffer[j+1] = aux;
 8002364:	230c      	movs	r3, #12
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	3301      	adds	r3, #1
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	18d3      	adds	r3, r2, r3
 8002370:	2209      	movs	r2, #9
 8002372:	18ba      	adds	r2, r7, r2
 8002374:	7812      	ldrb	r2, [r2, #0]
 8002376:	701a      	strb	r2, [r3, #0]
	    for(j=0;j<length-1-i;j++){
 8002378:	230c      	movs	r3, #12
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	881a      	ldrh	r2, [r3, #0]
 800237e:	230c      	movs	r3, #12
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	3201      	adds	r2, #1
 8002384:	801a      	strh	r2, [r3, #0]
 8002386:	230c      	movs	r3, #12
 8002388:	18fb      	adds	r3, r7, r3
 800238a:	881a      	ldrh	r2, [r3, #0]
 800238c:	230a      	movs	r3, #10
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	1e59      	subs	r1, r3, #1
 8002394:	230e      	movs	r3, #14
 8002396:	18fb      	adds	r3, r7, r3
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	1acb      	subs	r3, r1, r3
 800239c:	429a      	cmp	r2, r3
 800239e:	dbcb      	blt.n	8002338 <reverse+0x2c>
	for(i=0;i<length-1;i++){
 80023a0:	230e      	movs	r3, #14
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	881a      	ldrh	r2, [r3, #0]
 80023a6:	230e      	movs	r3, #14
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	3201      	adds	r2, #1
 80023ac:	801a      	strh	r2, [r3, #0]
 80023ae:	230e      	movs	r3, #14
 80023b0:	18fb      	adds	r3, r7, r3
 80023b2:	881a      	ldrh	r2, [r3, #0]
 80023b4:	230a      	movs	r3, #10
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	429a      	cmp	r2, r3
 80023be:	dbb6      	blt.n	800232e <reverse+0x22>
	    }
	}

}
 80023c0:	46c0      	nop			; (mov r8, r8)
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b004      	add	sp, #16
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023ce:	4b57      	ldr	r3, [pc, #348]	; (800252c <MX_GPIO_Init+0x164>)
 80023d0:	4a56      	ldr	r2, [pc, #344]	; (800252c <MX_GPIO_Init+0x164>)
 80023d2:	6952      	ldr	r2, [r2, #20]
 80023d4:	2180      	movs	r1, #128	; 0x80
 80023d6:	03c9      	lsls	r1, r1, #15
 80023d8:	430a      	orrs	r2, r1
 80023da:	615a      	str	r2, [r3, #20]
 80023dc:	4b53      	ldr	r3, [pc, #332]	; (800252c <MX_GPIO_Init+0x164>)
 80023de:	695a      	ldr	r2, [r3, #20]
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	03db      	lsls	r3, r3, #15
 80023e4:	4013      	ands	r3, r2
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ea:	4b50      	ldr	r3, [pc, #320]	; (800252c <MX_GPIO_Init+0x164>)
 80023ec:	4a4f      	ldr	r2, [pc, #316]	; (800252c <MX_GPIO_Init+0x164>)
 80023ee:	6952      	ldr	r2, [r2, #20]
 80023f0:	2180      	movs	r1, #128	; 0x80
 80023f2:	0289      	lsls	r1, r1, #10
 80023f4:	430a      	orrs	r2, r1
 80023f6:	615a      	str	r2, [r3, #20]
 80023f8:	4b4c      	ldr	r3, [pc, #304]	; (800252c <MX_GPIO_Init+0x164>)
 80023fa:	695a      	ldr	r2, [r3, #20]
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	029b      	lsls	r3, r3, #10
 8002400:	4013      	ands	r3, r2
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002406:	4b49      	ldr	r3, [pc, #292]	; (800252c <MX_GPIO_Init+0x164>)
 8002408:	4a48      	ldr	r2, [pc, #288]	; (800252c <MX_GPIO_Init+0x164>)
 800240a:	6952      	ldr	r2, [r2, #20]
 800240c:	2180      	movs	r1, #128	; 0x80
 800240e:	02c9      	lsls	r1, r1, #11
 8002410:	430a      	orrs	r2, r1
 8002412:	615a      	str	r2, [r3, #20]
 8002414:	4b45      	ldr	r3, [pc, #276]	; (800252c <MX_GPIO_Init+0x164>)
 8002416:	695a      	ldr	r2, [r3, #20]
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	02db      	lsls	r3, r3, #11
 800241c:	4013      	ands	r3, r2
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR___X___A_Pin|LED_Pin|MOTOR___X___B_Pin|MOTOR___Y___A_Pin 
 8002422:	23de      	movs	r3, #222	; 0xde
 8002424:	00d9      	lsls	r1, r3, #3
 8002426:	2390      	movs	r3, #144	; 0x90
 8002428:	05db      	lsls	r3, r3, #23
 800242a:	2200      	movs	r2, #0
 800242c:	0018      	movs	r0, r3
 800242e:	f7fe f9f6 	bl	800081e <HAL_GPIO_WritePin>
                          |MOTOR___Z___A_Pin|MOTOR___Z___B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR___Y___B_GPIO_Port, MOTOR___Y___B_Pin, GPIO_PIN_RESET);
 8002432:	4b3f      	ldr	r3, [pc, #252]	; (8002530 <MX_GPIO_Init+0x168>)
 8002434:	2200      	movs	r2, #0
 8002436:	2102      	movs	r1, #2
 8002438:	0018      	movs	r0, r3
 800243a:	f7fe f9f0 	bl	800081e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = SENSOR_1_A_Pin|SENSOR_1_B_Pin;
 800243e:	230c      	movs	r3, #12
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	2203      	movs	r2, #3
 8002444:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002446:	230c      	movs	r3, #12
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	2200      	movs	r2, #0
 800244c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	230c      	movs	r3, #12
 8002450:	18fb      	adds	r3, r7, r3
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002456:	230c      	movs	r3, #12
 8002458:	18fb      	adds	r3, r7, r3
 800245a:	4a36      	ldr	r2, [pc, #216]	; (8002534 <MX_GPIO_Init+0x16c>)
 800245c:	0019      	movs	r1, r3
 800245e:	0010      	movs	r0, r2
 8002460:	f7fe f84c 	bl	80004fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK__Keyboard_Pin;
 8002464:	230c      	movs	r3, #12
 8002466:	18fb      	adds	r3, r7, r3
 8002468:	2201      	movs	r2, #1
 800246a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800246c:	230c      	movs	r3, #12
 800246e:	18fb      	adds	r3, r7, r3
 8002470:	4a31      	ldr	r2, [pc, #196]	; (8002538 <MX_GPIO_Init+0x170>)
 8002472:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002474:	230c      	movs	r3, #12
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	2201      	movs	r2, #1
 800247a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CLK__Keyboard_GPIO_Port, &GPIO_InitStruct);
 800247c:	230c      	movs	r3, #12
 800247e:	18fa      	adds	r2, r7, r3
 8002480:	2390      	movs	r3, #144	; 0x90
 8002482:	05db      	lsls	r3, r3, #23
 8002484:	0011      	movs	r1, r2
 8002486:	0018      	movs	r0, r3
 8002488:	f7fe f838 	bl	80004fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA___Keyboard_Pin;
 800248c:	230c      	movs	r3, #12
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	2202      	movs	r2, #2
 8002492:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002494:	230c      	movs	r3, #12
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	2200      	movs	r2, #0
 800249a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800249c:	230c      	movs	r3, #12
 800249e:	18fb      	adds	r3, r7, r3
 80024a0:	2201      	movs	r2, #1
 80024a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DATA___Keyboard_GPIO_Port, &GPIO_InitStruct);
 80024a4:	230c      	movs	r3, #12
 80024a6:	18fa      	adds	r2, r7, r3
 80024a8:	2390      	movs	r3, #144	; 0x90
 80024aa:	05db      	lsls	r3, r3, #23
 80024ac:	0011      	movs	r1, r2
 80024ae:	0018      	movs	r0, r3
 80024b0:	f7fe f824 	bl	80004fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR___X___A_Pin|LED_Pin|MOTOR___X___B_Pin|MOTOR___Y___A_Pin 
 80024b4:	230c      	movs	r3, #12
 80024b6:	18fb      	adds	r3, r7, r3
 80024b8:	22de      	movs	r2, #222	; 0xde
 80024ba:	00d2      	lsls	r2, r2, #3
 80024bc:	601a      	str	r2, [r3, #0]
                          |MOTOR___Z___A_Pin|MOTOR___Z___B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024be:	230c      	movs	r3, #12
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	2201      	movs	r2, #1
 80024c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	230c      	movs	r3, #12
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ce:	230c      	movs	r3, #12
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	2200      	movs	r2, #0
 80024d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d6:	230c      	movs	r3, #12
 80024d8:	18fa      	adds	r2, r7, r3
 80024da:	2390      	movs	r3, #144	; 0x90
 80024dc:	05db      	lsls	r3, r3, #23
 80024de:	0011      	movs	r1, r2
 80024e0:	0018      	movs	r0, r3
 80024e2:	f7fe f80b 	bl	80004fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR___Y___B_Pin;
 80024e6:	230c      	movs	r3, #12
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	2202      	movs	r2, #2
 80024ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ee:	230c      	movs	r3, #12
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	2201      	movs	r2, #1
 80024f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	230c      	movs	r3, #12
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fe:	230c      	movs	r3, #12
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	2200      	movs	r2, #0
 8002504:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MOTOR___Y___B_GPIO_Port, &GPIO_InitStruct);
 8002506:	230c      	movs	r3, #12
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	4a09      	ldr	r2, [pc, #36]	; (8002530 <MX_GPIO_Init+0x168>)
 800250c:	0019      	movs	r1, r3
 800250e:	0010      	movs	r0, r2
 8002510:	f7fd fff4 	bl	80004fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002514:	2200      	movs	r2, #0
 8002516:	2100      	movs	r1, #0
 8002518:	2005      	movs	r0, #5
 800251a:	f7fd ff95 	bl	8000448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800251e:	2005      	movs	r0, #5
 8002520:	f7fd ffa8 	bl	8000474 <HAL_NVIC_EnableIRQ>

}
 8002524:	46c0      	nop			; (mov r8, r8)
 8002526:	46bd      	mov	sp, r7
 8002528:	b008      	add	sp, #32
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40021000 	.word	0x40021000
 8002530:	48000400 	.word	0x48000400
 8002534:	48001400 	.word	0x48001400
 8002538:	10110000 	.word	0x10110000

0800253c <interruption>:
void interruption();

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void interruption(){
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
	ps2interrupt(&keyboard);
 8002540:	4b03      	ldr	r3, [pc, #12]	; (8002550 <interruption+0x14>)
 8002542:	0018      	movs	r0, r3
 8002544:	f7ff fba2 	bl	8001c8c <ps2interrupt>
}
 8002548:	46c0      	nop			; (mov r8, r8)
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	200000d8 	.word	0x200000d8

08002554 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b089      	sub	sp, #36	; 0x24
 8002558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800255a:	f7fd fe69 	bl	8000230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800255e:	f000 f953 	bl	8002808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002562:	f7ff ff31 	bl	80023c8 <MX_GPIO_Init>
  MX_TIM14_Init();
 8002566:	f000 fa67 	bl	8002a38 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 800256a:	f000 faad 	bl	8002ac8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

//	motorBegin(&motorX, ENCODER_1_A_PORT, ENCODER_1_A_PIN, ENCODER_1_B_PORT, ENCODER_1_B_PIN, htim14, htim3, TIM_CHANNEL_1,  TIM_CHANNEL_1);
//	motorBegin(&motorY, ENCODER_2_A_PORT, ENCODER_2_A_PIN, ENCODER_2_B_PORT, ENCODER_2_B_PIN, htim3, htim3, TIM_CHANNEL_2,  TIM_CHANNEL_4);

  	motorSimpleBegin(&motorX, MOTORX_A_PORT, MOTORX_A_PIN, MOTORX_B_PORT, MOTORX_B_PIN);
 800256e:	2390      	movs	r3, #144	; 0x90
 8002570:	05da      	lsls	r2, r3, #23
 8002572:	2390      	movs	r3, #144	; 0x90
 8002574:	05d9      	lsls	r1, r3, #23
 8002576:	489a      	ldr	r0, [pc, #616]	; (80027e0 <main+0x28c>)
 8002578:	2340      	movs	r3, #64	; 0x40
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	0013      	movs	r3, r2
 800257e:	2210      	movs	r2, #16
 8002580:	f7ff fabc 	bl	8001afc <motorSimpleBegin>
  	motorSimpleBegin(&motorY, MOTORY_A_PORT, MOTORY_A_PIN, MOTORY_B_PORT, MOTORY_B_PIN);
 8002584:	4a97      	ldr	r2, [pc, #604]	; (80027e4 <main+0x290>)
 8002586:	2390      	movs	r3, #144	; 0x90
 8002588:	05d9      	lsls	r1, r3, #23
 800258a:	4897      	ldr	r0, [pc, #604]	; (80027e8 <main+0x294>)
 800258c:	2302      	movs	r3, #2
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	0013      	movs	r3, r2
 8002592:	2280      	movs	r2, #128	; 0x80
 8002594:	f7ff fab2 	bl	8001afc <motorSimpleBegin>
	motorSimpleBegin(&motorZ, MOTORZ_A_PORT, MOTORZ_A_PIN, MOTORZ_B_PORT, MOTORZ_B_PIN);
 8002598:	2390      	movs	r3, #144	; 0x90
 800259a:	05dc      	lsls	r4, r3, #23
 800259c:	2380      	movs	r3, #128	; 0x80
 800259e:	009a      	lsls	r2, r3, #2
 80025a0:	2390      	movs	r3, #144	; 0x90
 80025a2:	05d9      	lsls	r1, r3, #23
 80025a4:	4891      	ldr	r0, [pc, #580]	; (80027ec <main+0x298>)
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	0023      	movs	r3, r4
 80025ae:	f7ff faa5 	bl	8001afc <motorSimpleBegin>

	keyboardBegin(&keyboard, PS2_DATA_PORT, PS2_DATA_PIN, PS2_IQR_PORT, PS2_IQR_PIN);
 80025b2:	2390      	movs	r3, #144	; 0x90
 80025b4:	05da      	lsls	r2, r3, #23
 80025b6:	2390      	movs	r3, #144	; 0x90
 80025b8:	05d9      	lsls	r1, r3, #23
 80025ba:	488d      	ldr	r0, [pc, #564]	; (80027f0 <main+0x29c>)
 80025bc:	2301      	movs	r3, #1
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	0013      	movs	r3, r2
 80025c2:	2202      	movs	r2, #2
 80025c4:	f7ff fdd6 	bl	8002174 <keyboardBegin>

	memset(buffer_braille, 0, sizeof(buffer_braille));
 80025c8:	4b8a      	ldr	r3, [pc, #552]	; (80027f4 <main+0x2a0>)
 80025ca:	2204      	movs	r2, #4
 80025cc:	2100      	movs	r1, #0
 80025ce:	0018      	movs	r0, r3
 80025d0:	f000 fb3a 	bl	8002c48 <memset>
  /* USER CODE BEGIN 3 */

		/* Faz a leitura do teclado e envia ao buffer_char */

		while(1){
			if(keyboardAvailable(&keyboard)){
 80025d4:	4b86      	ldr	r3, [pc, #536]	; (80027f0 <main+0x29c>)
 80025d6:	0018      	movs	r0, r3
 80025d8:	f7ff fd4a 	bl	8002070 <keyboardAvailable>
 80025dc:	1e03      	subs	r3, r0, #0
 80025de:	d0f9      	beq.n	80025d4 <main+0x80>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80025e0:	2390      	movs	r3, #144	; 0x90
 80025e2:	05db      	lsls	r3, r3, #23
 80025e4:	2201      	movs	r2, #1
 80025e6:	2120      	movs	r1, #32
 80025e8:	0018      	movs	r0, r3
 80025ea:	f7fe f918 	bl	800081e <HAL_GPIO_WritePin>
				HAL_Delay(50);
 80025ee:	2032      	movs	r0, #50	; 0x32
 80025f0:	f7fd fe64 	bl	80002bc <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80025f4:	2390      	movs	r3, #144	; 0x90
 80025f6:	05db      	lsls	r3, r3, #23
 80025f8:	2200      	movs	r2, #0
 80025fa:	2120      	movs	r1, #32
 80025fc:	0018      	movs	r0, r3
 80025fe:	f7fe f90e 	bl	800081e <HAL_GPIO_WritePin>
				uint8_t c = keyboardRead(&keyboard);
 8002602:	4b7b      	ldr	r3, [pc, #492]	; (80027f0 <main+0x29c>)
 8002604:	0018      	movs	r0, r3
 8002606:	f7ff fd58 	bl	80020ba <keyboardRead>
 800260a:	0003      	movs	r3, r0
 800260c:	001a      	movs	r2, r3
 800260e:	1c7b      	adds	r3, r7, #1
 8002610:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, (uint8_t *)&c, 1, 1000);
 8002612:	23fa      	movs	r3, #250	; 0xfa
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	1c79      	adds	r1, r7, #1
 8002618:	4877      	ldr	r0, [pc, #476]	; (80027f8 <main+0x2a4>)
 800261a:	2201      	movs	r2, #1
 800261c:	f7fe ff5c 	bl	80014d8 <HAL_UART_Transmit>
				if(c == PS2_ENTER){
 8002620:	1c7b      	adds	r3, r7, #1
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b0d      	cmp	r3, #13
 8002626:	d115      	bne.n	8002654 <main+0x100>
					pressedEnter = 1;
 8002628:	4b74      	ldr	r3, [pc, #464]	; (80027fc <main+0x2a8>)
 800262a:	2201      	movs	r2, #1
 800262c:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800262e:	2390      	movs	r3, #144	; 0x90
 8002630:	05db      	lsls	r3, r3, #23
 8002632:	2201      	movs	r2, #1
 8002634:	2120      	movs	r1, #32
 8002636:	0018      	movs	r0, r3
 8002638:	f7fe f8f1 	bl	800081e <HAL_GPIO_WritePin>
					}

				feedBuffer(buffer_char, MAX_CARACTERES, c);
			}
		}
		HAL_UART_Transmit(&huart1, "\n\rEnter apertado\n\r", 19, 1000);
 800263c:	23fa      	movs	r3, #250	; 0xfa
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	496f      	ldr	r1, [pc, #444]	; (8002800 <main+0x2ac>)
 8002642:	486d      	ldr	r0, [pc, #436]	; (80027f8 <main+0x2a4>)
 8002644:	2213      	movs	r2, #19
 8002646:	f7fe ff47 	bl	80014d8 <HAL_UART_Transmit>
		/* Programa leitura do teclado */
		if(pressedEnter){
 800264a:	4b6c      	ldr	r3, [pc, #432]	; (80027fc <main+0x2a8>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d108      	bne.n	8002664 <main+0x110>
 8002652:	e0c0      	b.n	80027d6 <main+0x282>
				feedBuffer(buffer_char, MAX_CARACTERES, c);
 8002654:	1c7b      	adds	r3, r7, #1
 8002656:	781a      	ldrb	r2, [r3, #0]
 8002658:	4b6a      	ldr	r3, [pc, #424]	; (8002804 <main+0x2b0>)
 800265a:	2105      	movs	r1, #5
 800265c:	0018      	movs	r0, r3
 800265e:	f7ff fe19 	bl	8002294 <feedBuffer>
			if(keyboardAvailable(&keyboard)){
 8002662:	e7b7      	b.n	80025d4 <main+0x80>
			reverse(buffer_char);
 8002664:	4b67      	ldr	r3, [pc, #412]	; (8002804 <main+0x2b0>)
 8002666:	0018      	movs	r0, r3
 8002668:	f7ff fe50 	bl	800230c <reverse>
			uint16_t length = strlen((const char*)buffer_char);
 800266c:	4b65      	ldr	r3, [pc, #404]	; (8002804 <main+0x2b0>)
 800266e:	0018      	movs	r0, r3
 8002670:	f7fd fd4a 	bl	8000108 <strlen>
 8002674:	0002      	movs	r2, r0
 8002676:	1cbb      	adds	r3, r7, #2
 8002678:	801a      	strh	r2, [r3, #0]
			for(int j=0;j<3;j++){
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	e092      	b.n	80027a6 <main+0x252>
				//Imprime as linhas em braille
				if(j==1){
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d142      	bne.n	800270c <main+0x1b8>
					//Linhas das matrizes
					for(int i= length- 1; i>=0; --i){
 8002686:	1cbb      	adds	r3, r7, #2
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	3b01      	subs	r3, #1
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	e039      	b.n	8002704 <main+0x1b0>

						// Recebe os pontos da linha para o caractere atual
						fillLineWithBraille(buffer_braille, j,buffer_char[i]);
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	b2d9      	uxtb	r1, r3
 8002694:	4a5b      	ldr	r2, [pc, #364]	; (8002804 <main+0x2b0>)
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	18d3      	adds	r3, r2, r3
 800269a:	781a      	ldrb	r2, [r3, #0]
 800269c:	4b55      	ldr	r3, [pc, #340]	; (80027f4 <main+0x2a0>)
 800269e:	0018      	movs	r0, r3
 80026a0:	f7ff fd9a 	bl	80021d8 <fillLineWithBraille>

						// Percorre os 4 bits, no máximo, para cada caractere
						for(int x = 1; x >=0; --x){
 80026a4:	2301      	movs	r3, #1
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	e01e      	b.n	80026e8 <main+0x194>
							if(buffer_braille[x] == '1'){
 80026aa:	4a52      	ldr	r2, [pc, #328]	; (80027f4 <main+0x2a0>)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	18d3      	adds	r3, r2, r3
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b31      	cmp	r3, #49	; 0x31
 80026b4:	d10d      	bne.n	80026d2 <main+0x17e>
								motorForward(&motorZ, PIERCE_TIME);
 80026b6:	2396      	movs	r3, #150	; 0x96
 80026b8:	005a      	lsls	r2, r3, #1
 80026ba:	4b4c      	ldr	r3, [pc, #304]	; (80027ec <main+0x298>)
 80026bc:	0011      	movs	r1, r2
 80026be:	0018      	movs	r0, r3
 80026c0:	f7ff fa37 	bl	8001b32 <motorForward>
								motorBackward(&motorZ, PIERCE_TIME);
 80026c4:	2396      	movs	r3, #150	; 0x96
 80026c6:	005a      	lsls	r2, r3, #1
 80026c8:	4b48      	ldr	r3, [pc, #288]	; (80027ec <main+0x298>)
 80026ca:	0011      	movs	r1, r2
 80026cc:	0018      	movs	r0, r3
 80026ce:	f7ff fa5d 	bl	8001b8c <motorBackward>
							}
							// Decrementa posição do eixo x, espaçamento entre colunas
							if(x != 0){
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d004      	beq.n	80026e2 <main+0x18e>
								updateAxis(&motorX, NEXT_DOT_LEFT);
 80026d8:	4b41      	ldr	r3, [pc, #260]	; (80027e0 <main+0x28c>)
 80026da:	2106      	movs	r1, #6
 80026dc:	0018      	movs	r0, r3
 80026de:	f7ff fa83 	bl	8001be8 <updateAxis>
						for(int x = 1; x >=0; --x){
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	3b01      	subs	r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	dadd      	bge.n	80026aa <main+0x156>
							}
						}

						// Decrementa posição do eixo x, espaçamento entre char na horizontal
						if(i != 0){
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d004      	beq.n	80026fe <main+0x1aa>
							updateAxis(&motorX, LEFT);
 80026f4:	4b3a      	ldr	r3, [pc, #232]	; (80027e0 <main+0x28c>)
 80026f6:	2101      	movs	r1, #1
 80026f8:	0018      	movs	r0, r3
 80026fa:	f7ff fa75 	bl	8001be8 <updateAxis>
					for(int i= length- 1; i>=0; --i){
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	3b01      	subs	r3, #1
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	2b00      	cmp	r3, #0
 8002708:	dac2      	bge.n	8002690 <main+0x13c>
 800270a:	e044      	b.n	8002796 <main+0x242>

					}
				}else{
					int i;
					//Linhas das matrizes
					for(i=0; i<length; i++){
 800270c:	2300      	movs	r3, #0
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	e03c      	b.n	800278c <main+0x238>

						//Recebe os pontos da linha para o caractere atual
						fillLineWithBraille(buffer_braille, j,buffer_char[i]);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	b2d9      	uxtb	r1, r3
 8002716:	4a3b      	ldr	r2, [pc, #236]	; (8002804 <main+0x2b0>)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	18d3      	adds	r3, r2, r3
 800271c:	781a      	ldrb	r2, [r3, #0]
 800271e:	4b35      	ldr	r3, [pc, #212]	; (80027f4 <main+0x2a0>)
 8002720:	0018      	movs	r0, r3
 8002722:	f7ff fd59 	bl	80021d8 <fillLineWithBraille>

						//Percorre os 4 bits, no máximo, para cada caractere
						for(int x = 0; x < 2; ++x){
 8002726:	2300      	movs	r3, #0
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	e01e      	b.n	800276a <main+0x216>
							if(buffer_braille[x] == '1'){
 800272c:	4a31      	ldr	r2, [pc, #196]	; (80027f4 <main+0x2a0>)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	18d3      	adds	r3, r2, r3
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b31      	cmp	r3, #49	; 0x31
 8002736:	d10d      	bne.n	8002754 <main+0x200>
								motorForward(&motorZ, PIERCE_TIME);
 8002738:	2396      	movs	r3, #150	; 0x96
 800273a:	005a      	lsls	r2, r3, #1
 800273c:	4b2b      	ldr	r3, [pc, #172]	; (80027ec <main+0x298>)
 800273e:	0011      	movs	r1, r2
 8002740:	0018      	movs	r0, r3
 8002742:	f7ff f9f6 	bl	8001b32 <motorForward>
								motorBackward(&motorZ, PIERCE_TIME);
 8002746:	2396      	movs	r3, #150	; 0x96
 8002748:	005a      	lsls	r2, r3, #1
 800274a:	4b28      	ldr	r3, [pc, #160]	; (80027ec <main+0x298>)
 800274c:	0011      	movs	r1, r2
 800274e:	0018      	movs	r0, r3
 8002750:	f7ff fa1c 	bl	8001b8c <motorBackward>
							}

							// Incrementa posição do eixo x, espaçamento entre colunas
							if(x != 1){
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d004      	beq.n	8002764 <main+0x210>
								updateAxis(&motorX, NEXT_DOT_RIGHT);
 800275a:	4b21      	ldr	r3, [pc, #132]	; (80027e0 <main+0x28c>)
 800275c:	2105      	movs	r1, #5
 800275e:	0018      	movs	r0, r3
 8002760:	f7ff fa42 	bl	8001be8 <updateAxis>
						for(int x = 0; x < 2; ++x){
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3301      	adds	r3, #1
 8002768:	607b      	str	r3, [r7, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b01      	cmp	r3, #1
 800276e:	dddd      	ble.n	800272c <main+0x1d8>
							}
						}

						// Incrementa posição do eixo x, espaçamento entre char na horizontal
						if(i != (length - 1)){
 8002770:	1cbb      	adds	r3, r7, #2
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	1e5a      	subs	r2, r3, #1
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	429a      	cmp	r2, r3
 800277a:	d004      	beq.n	8002786 <main+0x232>
							updateAxis(&motorX, RIGHT);
 800277c:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <main+0x28c>)
 800277e:	2100      	movs	r1, #0
 8002780:	0018      	movs	r0, r3
 8002782:	f7ff fa31 	bl	8001be8 <updateAxis>
					for(i=0; i<length; i++){
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	3301      	adds	r3, #1
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	1cbb      	adds	r3, r7, #2
 800278e:	881a      	ldrh	r2, [r3, #0]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	429a      	cmp	r2, r3
 8002794:	dcbd      	bgt.n	8002712 <main+0x1be>
						}

					}
				}
				// Decrementa posição do eixo y, espaçamento entre linhas
				updateAxis(&motorY, DOWN_NEXT_LINE);
 8002796:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <main+0x294>)
 8002798:	2107      	movs	r1, #7
 800279a:	0018      	movs	r0, r3
 800279c:	f7ff fa24 	bl	8001be8 <updateAxis>
			for(int j=0;j<3;j++){
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	3301      	adds	r3, #1
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	dc00      	bgt.n	80027ae <main+0x25a>
 80027ac:	e768      	b.n	8002680 <main+0x12c>
			}

			// Incrementa posição do eixo y, espaçamento entre char na vertical
			updateAxis(&motorY, DOWN);
 80027ae:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <main+0x294>)
 80027b0:	2104      	movs	r1, #4
 80027b2:	0018      	movs	r0, r3
 80027b4:	f7ff fa18 	bl	8001be8 <updateAxis>

			// Seta posição eixo x para inicial
			updateAxis(&motorX, POS_INI);
 80027b8:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <main+0x28c>)
 80027ba:	2100      	movs	r1, #0
 80027bc:	0018      	movs	r0, r3
 80027be:	f7ff fa13 	bl	8001be8 <updateAxis>

			pressedEnter = 0;
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <main+0x2a8>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80027c8:	2390      	movs	r3, #144	; 0x90
 80027ca:	05db      	lsls	r3, r3, #23
 80027cc:	2200      	movs	r2, #0
 80027ce:	2120      	movs	r1, #32
 80027d0:	0018      	movs	r0, r3
 80027d2:	f7fe f824 	bl	800081e <HAL_GPIO_WritePin>
		}
		clearBuffer(buffer_char);
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <main+0x2b0>)
 80027d8:	0018      	movs	r0, r3
 80027da:	f7ff fd8c 	bl	80022f6 <clearBuffer>
	while (1)  {
 80027de:	e6f9      	b.n	80025d4 <main+0x80>
 80027e0:	20000134 	.word	0x20000134
 80027e4:	48000400 	.word	0x48000400
 80027e8:	20000148 	.word	0x20000148
 80027ec:	20000124 	.word	0x20000124
 80027f0:	200000d8 	.word	0x200000d8
 80027f4:	20000144 	.word	0x20000144
 80027f8:	20000198 	.word	0x20000198
 80027fc:	200000a8 	.word	0x200000a8
 8002800:	08002c90 	.word	0x08002c90
 8002804:	2000011c 	.word	0x2000011c

08002808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b094      	sub	sp, #80	; 0x50
 800280c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800280e:	2320      	movs	r3, #32
 8002810:	18fb      	adds	r3, r7, r3
 8002812:	2202      	movs	r2, #2
 8002814:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002816:	2320      	movs	r3, #32
 8002818:	18fb      	adds	r3, r7, r3
 800281a:	2201      	movs	r2, #1
 800281c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800281e:	2320      	movs	r3, #32
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	2210      	movs	r2, #16
 8002824:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002826:	2320      	movs	r3, #32
 8002828:	18fb      	adds	r3, r7, r3
 800282a:	2200      	movs	r2, #0
 800282c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800282e:	2320      	movs	r3, #32
 8002830:	18fb      	adds	r3, r7, r3
 8002832:	0018      	movs	r0, r3
 8002834:	f7fe f836 	bl	80008a4 <HAL_RCC_OscConfig>
 8002838:	1e03      	subs	r3, r0, #0
 800283a:	d006      	beq.n	800284a <SystemClock_Config+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 800283c:	2392      	movs	r3, #146	; 0x92
 800283e:	005a      	lsls	r2, r3, #1
 8002840:	4b28      	ldr	r3, [pc, #160]	; (80028e4 <SystemClock_Config+0xdc>)
 8002842:	0011      	movs	r1, r2
 8002844:	0018      	movs	r0, r3
 8002846:	f000 f84f 	bl	80028e8 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800284a:	2310      	movs	r3, #16
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	2207      	movs	r2, #7
 8002850:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002852:	2310      	movs	r3, #16
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	2200      	movs	r2, #0
 8002858:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800285a:	2310      	movs	r3, #16
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	2200      	movs	r2, #0
 8002860:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002862:	2310      	movs	r3, #16
 8002864:	18fb      	adds	r3, r7, r3
 8002866:	2200      	movs	r2, #0
 8002868:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800286a:	2310      	movs	r3, #16
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	2100      	movs	r1, #0
 8002870:	0018      	movs	r0, r3
 8002872:	f7fe fb0b 	bl	8000e8c <HAL_RCC_ClockConfig>
 8002876:	1e03      	subs	r3, r0, #0
 8002878:	d007      	beq.n	800288a <SystemClock_Config+0x82>
  {
    _Error_Handler(__FILE__, __LINE__);
 800287a:	2332      	movs	r3, #50	; 0x32
 800287c:	33ff      	adds	r3, #255	; 0xff
 800287e:	001a      	movs	r2, r3
 8002880:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <SystemClock_Config+0xdc>)
 8002882:	0011      	movs	r1, r2
 8002884:	0018      	movs	r0, r3
 8002886:	f000 f82f 	bl	80028e8 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800288a:	003b      	movs	r3, r7
 800288c:	2201      	movs	r2, #1
 800288e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002890:	003b      	movs	r3, r7
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002896:	003b      	movs	r3, r7
 8002898:	0018      	movs	r0, r3
 800289a:	f7fe fc5d 	bl	8001158 <HAL_RCCEx_PeriphCLKConfig>
 800289e:	1e03      	subs	r3, r0, #0
 80028a0:	d006      	beq.n	80028b0 <SystemClock_Config+0xa8>
  {
    _Error_Handler(__FILE__, __LINE__);
 80028a2:	239c      	movs	r3, #156	; 0x9c
 80028a4:	005a      	lsls	r2, r3, #1
 80028a6:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <SystemClock_Config+0xdc>)
 80028a8:	0011      	movs	r1, r2
 80028aa:	0018      	movs	r0, r3
 80028ac:	f000 f81c 	bl	80028e8 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80028b0:	f7fe fc32 	bl	8001118 <HAL_RCC_GetHCLKFreq>
 80028b4:	0002      	movs	r2, r0
 80028b6:	23fa      	movs	r3, #250	; 0xfa
 80028b8:	0099      	lsls	r1, r3, #2
 80028ba:	0010      	movs	r0, r2
 80028bc:	f7fd fc2c 	bl	8000118 <__udivsi3>
 80028c0:	0003      	movs	r3, r0
 80028c2:	0018      	movs	r0, r3
 80028c4:	f7fd fde6 	bl	8000494 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80028c8:	2004      	movs	r0, #4
 80028ca:	f7fd fdf1 	bl	80004b0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80028ce:	2301      	movs	r3, #1
 80028d0:	425b      	negs	r3, r3
 80028d2:	2200      	movs	r2, #0
 80028d4:	2100      	movs	r1, #0
 80028d6:	0018      	movs	r0, r3
 80028d8:	f7fd fdb6 	bl	8000448 <HAL_NVIC_SetPriority>
}
 80028dc:	46c0      	nop			; (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	b014      	add	sp, #80	; 0x50
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	08002ca4 	.word	0x08002ca4

080028e8 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while(1)
 80028f2:	e7fe      	b.n	80028f2 <_Error_Handler+0xa>

080028f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fa:	4b19      	ldr	r3, [pc, #100]	; (8002960 <HAL_MspInit+0x6c>)
 80028fc:	4a18      	ldr	r2, [pc, #96]	; (8002960 <HAL_MspInit+0x6c>)
 80028fe:	6992      	ldr	r2, [r2, #24]
 8002900:	2101      	movs	r1, #1
 8002902:	430a      	orrs	r2, r1
 8002904:	619a      	str	r2, [r3, #24]
 8002906:	4b16      	ldr	r3, [pc, #88]	; (8002960 <HAL_MspInit+0x6c>)
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	2201      	movs	r2, #1
 800290c:	4013      	ands	r3, r2
 800290e:	607b      	str	r3, [r7, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002912:	4b13      	ldr	r3, [pc, #76]	; (8002960 <HAL_MspInit+0x6c>)
 8002914:	4a12      	ldr	r2, [pc, #72]	; (8002960 <HAL_MspInit+0x6c>)
 8002916:	69d2      	ldr	r2, [r2, #28]
 8002918:	2180      	movs	r1, #128	; 0x80
 800291a:	0549      	lsls	r1, r1, #21
 800291c:	430a      	orrs	r2, r1
 800291e:	61da      	str	r2, [r3, #28]
 8002920:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <HAL_MspInit+0x6c>)
 8002922:	69da      	ldr	r2, [r3, #28]
 8002924:	2380      	movs	r3, #128	; 0x80
 8002926:	055b      	lsls	r3, r3, #21
 8002928:	4013      	ands	r3, r2
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800292e:	2305      	movs	r3, #5
 8002930:	425b      	negs	r3, r3
 8002932:	2200      	movs	r2, #0
 8002934:	2100      	movs	r1, #0
 8002936:	0018      	movs	r0, r3
 8002938:	f7fd fd86 	bl	8000448 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800293c:	2302      	movs	r3, #2
 800293e:	425b      	negs	r3, r3
 8002940:	2200      	movs	r2, #0
 8002942:	2100      	movs	r1, #0
 8002944:	0018      	movs	r0, r3
 8002946:	f7fd fd7f 	bl	8000448 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800294a:	2301      	movs	r3, #1
 800294c:	425b      	negs	r3, r3
 800294e:	2200      	movs	r2, #0
 8002950:	2100      	movs	r1, #0
 8002952:	0018      	movs	r0, r3
 8002954:	f7fd fd78 	bl	8000448 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002958:	46c0      	nop			; (mov r8, r8)
 800295a:	46bd      	mov	sp, r7
 800295c:	b002      	add	sp, #8
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40021000 	.word	0x40021000

08002964 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002968:	46c0      	nop			; (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002972:	e7fe      	b.n	8002972 <HardFault_Handler+0x4>

08002974 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002978:	46c0      	nop			; (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800298c:	f7fd fc80 	bl	8000290 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002990:	f7fd fda8 	bl	80004e4 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002994:	46c0      	nop			; (mov r8, r8)
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <EXTI0_1_IRQHandler>:

/**
* @brief This function handles EXTI line 0 and 1 interrupts.
*/
void EXTI0_1_IRQHandler(void)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	interruption();
 800299e:	f7ff fdcd 	bl	800253c <interruption>
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80029a2:	2001      	movs	r0, #1
 80029a4:	f7fd ff58 	bl	8000858 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80029a8:	46c0      	nop			; (mov r8, r8)
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
	...

080029b0 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80029b4:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <SystemInit+0x70>)
 80029b6:	4a1a      	ldr	r2, [pc, #104]	; (8002a20 <SystemInit+0x70>)
 80029b8:	6812      	ldr	r2, [r2, #0]
 80029ba:	2101      	movs	r1, #1
 80029bc:	430a      	orrs	r2, r1
 80029be:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80029c0:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <SystemInit+0x70>)
 80029c2:	4a17      	ldr	r2, [pc, #92]	; (8002a20 <SystemInit+0x70>)
 80029c4:	6852      	ldr	r2, [r2, #4]
 80029c6:	4917      	ldr	r1, [pc, #92]	; (8002a24 <SystemInit+0x74>)
 80029c8:	400a      	ands	r2, r1
 80029ca:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80029cc:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <SystemInit+0x70>)
 80029ce:	4a14      	ldr	r2, [pc, #80]	; (8002a20 <SystemInit+0x70>)
 80029d0:	6812      	ldr	r2, [r2, #0]
 80029d2:	4915      	ldr	r1, [pc, #84]	; (8002a28 <SystemInit+0x78>)
 80029d4:	400a      	ands	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80029d8:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <SystemInit+0x70>)
 80029da:	4a11      	ldr	r2, [pc, #68]	; (8002a20 <SystemInit+0x70>)
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	4913      	ldr	r1, [pc, #76]	; (8002a2c <SystemInit+0x7c>)
 80029e0:	400a      	ands	r2, r1
 80029e2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80029e4:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <SystemInit+0x70>)
 80029e6:	4a0e      	ldr	r2, [pc, #56]	; (8002a20 <SystemInit+0x70>)
 80029e8:	6852      	ldr	r2, [r2, #4]
 80029ea:	4911      	ldr	r1, [pc, #68]	; (8002a30 <SystemInit+0x80>)
 80029ec:	400a      	ands	r2, r1
 80029ee:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <SystemInit+0x70>)
 80029f2:	4a0b      	ldr	r2, [pc, #44]	; (8002a20 <SystemInit+0x70>)
 80029f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029f6:	210f      	movs	r1, #15
 80029f8:	438a      	bics	r2, r1
 80029fa:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 80029fc:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <SystemInit+0x70>)
 80029fe:	4a08      	ldr	r2, [pc, #32]	; (8002a20 <SystemInit+0x70>)
 8002a00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a02:	490c      	ldr	r1, [pc, #48]	; (8002a34 <SystemInit+0x84>)
 8002a04:	400a      	ands	r2, r1
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <SystemInit+0x70>)
 8002a0a:	4a05      	ldr	r2, [pc, #20]	; (8002a20 <SystemInit+0x70>)
 8002a0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a0e:	2101      	movs	r1, #1
 8002a10:	438a      	bics	r2, r1
 8002a12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002a14:	4b02      	ldr	r3, [pc, #8]	; (8002a20 <SystemInit+0x70>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]

}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40021000 	.word	0x40021000
 8002a24:	08ffb80c 	.word	0x08ffb80c
 8002a28:	fef6ffff 	.word	0xfef6ffff
 8002a2c:	fffbffff 	.word	0xfffbffff
 8002a30:	ffc0ffff 	.word	0xffc0ffff
 8002a34:	fffffeec 	.word	0xfffffeec

08002a38 <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <MX_TIM14_Init+0x44>)
 8002a3e:	4a10      	ldr	r2, [pc, #64]	; (8002a80 <MX_TIM14_Init+0x48>)
 8002a40:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4;
 8002a42:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <MX_TIM14_Init+0x44>)
 8002a44:	2204      	movs	r2, #4
 8002a46:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <MX_TIM14_Init+0x44>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 255;
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <MX_TIM14_Init+0x44>)
 8002a50:	22ff      	movs	r2, #255	; 0xff
 8002a52:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a54:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <MX_TIM14_Init+0x44>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <MX_TIM14_Init+0x44>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <MX_TIM14_Init+0x44>)
 8002a62:	0018      	movs	r0, r3
 8002a64:	f7fe fc46 	bl	80012f4 <HAL_TIM_Base_Init>
 8002a68:	1e03      	subs	r3, r0, #0
 8002a6a:	d004      	beq.n	8002a76 <MX_TIM14_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002a6c:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <MX_TIM14_Init+0x4c>)
 8002a6e:	213d      	movs	r1, #61	; 0x3d
 8002a70:	0018      	movs	r0, r3
 8002a72:	f7ff ff39 	bl	80028e8 <_Error_Handler>
  }

}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20000158 	.word	0x20000158
 8002a80:	40002000 	.word	0x40002000
 8002a84:	08002cb4 	.word	0x08002cb4

08002a88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a0a      	ldr	r2, [pc, #40]	; (8002ac0 <HAL_TIM_Base_MspInit+0x38>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d10d      	bne.n	8002ab6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <HAL_TIM_Base_MspInit+0x3c>)
 8002a9c:	4a09      	ldr	r2, [pc, #36]	; (8002ac4 <HAL_TIM_Base_MspInit+0x3c>)
 8002a9e:	69d2      	ldr	r2, [r2, #28]
 8002aa0:	2180      	movs	r1, #128	; 0x80
 8002aa2:	0049      	lsls	r1, r1, #1
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	61da      	str	r2, [r3, #28]
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <HAL_TIM_Base_MspInit+0x3c>)
 8002aaa:	69da      	ldr	r2, [r3, #28]
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b004      	add	sp, #16
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	40002000 	.word	0x40002000
 8002ac4:	40021000 	.word	0x40021000

08002ac8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002acc:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <MX_USART1_UART_Init+0x60>)
 8002ace:	4a17      	ldr	r2, [pc, #92]	; (8002b2c <MX_USART1_UART_Init+0x64>)
 8002ad0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8002ad2:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <MX_USART1_UART_Init+0x60>)
 8002ad4:	2296      	movs	r2, #150	; 0x96
 8002ad6:	0212      	lsls	r2, r2, #8
 8002ad8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ada:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <MX_USART1_UART_Init+0x60>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ae0:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <MX_USART1_UART_Init+0x60>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ae6:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <MX_USART1_UART_Init+0x60>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002aec:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <MX_USART1_UART_Init+0x60>)
 8002aee:	220c      	movs	r2, #12
 8002af0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002af2:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <MX_USART1_UART_Init+0x60>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002af8:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <MX_USART1_UART_Init+0x60>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002afe:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <MX_USART1_UART_Init+0x60>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b04:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <MX_USART1_UART_Init+0x60>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b0a:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <MX_USART1_UART_Init+0x60>)
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f7fe fc8b 	bl	8001428 <HAL_UART_Init>
 8002b12:	1e03      	subs	r3, r0, #0
 8002b14:	d004      	beq.n	8002b20 <MX_USART1_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <MX_USART1_UART_Init+0x68>)
 8002b18:	2144      	movs	r1, #68	; 0x44
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f7ff fee4 	bl	80028e8 <_Error_Handler>
  }

}
 8002b20:	46c0      	nop			; (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	20000198 	.word	0x20000198
 8002b2c:	40013800 	.word	0x40013800
 8002b30:	08002cc4 	.word	0x08002cc4

08002b34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a18      	ldr	r2, [pc, #96]	; (8002ba4 <HAL_UART_MspInit+0x70>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d129      	bne.n	8002b9a <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b46:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <HAL_UART_MspInit+0x74>)
 8002b48:	4a17      	ldr	r2, [pc, #92]	; (8002ba8 <HAL_UART_MspInit+0x74>)
 8002b4a:	6992      	ldr	r2, [r2, #24]
 8002b4c:	2180      	movs	r1, #128	; 0x80
 8002b4e:	01c9      	lsls	r1, r1, #7
 8002b50:	430a      	orrs	r2, r1
 8002b52:	619a      	str	r2, [r3, #24]
 8002b54:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <HAL_UART_MspInit+0x74>)
 8002b56:	699a      	ldr	r2, [r3, #24]
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	01db      	lsls	r3, r3, #7
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	60bb      	str	r3, [r7, #8]
 8002b60:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b62:	230c      	movs	r3, #12
 8002b64:	18fb      	adds	r3, r7, r3
 8002b66:	220c      	movs	r2, #12
 8002b68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6a:	230c      	movs	r3, #12
 8002b6c:	18fb      	adds	r3, r7, r3
 8002b6e:	2202      	movs	r2, #2
 8002b70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	230c      	movs	r3, #12
 8002b74:	18fb      	adds	r3, r7, r3
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b7a:	230c      	movs	r3, #12
 8002b7c:	18fb      	adds	r3, r7, r3
 8002b7e:	2203      	movs	r2, #3
 8002b80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002b82:	230c      	movs	r3, #12
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	2201      	movs	r2, #1
 8002b88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8a:	230c      	movs	r3, #12
 8002b8c:	18fa      	adds	r2, r7, r3
 8002b8e:	2390      	movs	r3, #144	; 0x90
 8002b90:	05db      	lsls	r3, r3, #23
 8002b92:	0011      	movs	r1, r2
 8002b94:	0018      	movs	r0, r3
 8002b96:	f7fd fcb1 	bl	80004fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	b008      	add	sp, #32
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	40013800 	.word	0x40013800
 8002ba8:	40021000 	.word	0x40021000

08002bac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002bac:	480d      	ldr	r0, [pc, #52]	; (8002be4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bb0:	480d      	ldr	r0, [pc, #52]	; (8002be8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bb2:	490e      	ldr	r1, [pc, #56]	; (8002bec <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bb4:	4a0e      	ldr	r2, [pc, #56]	; (8002bf0 <LoopForever+0xe>)
  movs r3, #0
 8002bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bb8:	e002      	b.n	8002bc0 <LoopCopyDataInit>

08002bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bbe:	3304      	adds	r3, #4

08002bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bc4:	d3f9      	bcc.n	8002bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bc6:	4a0b      	ldr	r2, [pc, #44]	; (8002bf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bc8:	4c0b      	ldr	r4, [pc, #44]	; (8002bf8 <LoopForever+0x16>)
  movs r3, #0
 8002bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bcc:	e001      	b.n	8002bd2 <LoopFillZerobss>

08002bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bd0:	3204      	adds	r2, #4

08002bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bd4:	d3fb      	bcc.n	8002bce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002bd6:	f7ff feeb 	bl	80029b0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002bda:	f000 f811 	bl	8002c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bde:	f7ff fcb9 	bl	8002554 <main>

08002be2 <LoopForever>:

LoopForever:
    b LoopForever
 8002be2:	e7fe      	b.n	8002be2 <LoopForever>
  ldr   r0, =_estack
 8002be4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bec:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8002bf0:	08002efc 	.word	0x08002efc
  ldr r2, =_sbss
 8002bf4:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002bf8:	20000208 	.word	0x20000208

08002bfc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bfc:	e7fe      	b.n	8002bfc <ADC1_IRQHandler>
	...

08002c00 <__libc_init_array>:
 8002c00:	b570      	push	{r4, r5, r6, lr}
 8002c02:	2600      	movs	r6, #0
 8002c04:	4d0c      	ldr	r5, [pc, #48]	; (8002c38 <__libc_init_array+0x38>)
 8002c06:	4c0d      	ldr	r4, [pc, #52]	; (8002c3c <__libc_init_array+0x3c>)
 8002c08:	1b64      	subs	r4, r4, r5
 8002c0a:	10a4      	asrs	r4, r4, #2
 8002c0c:	42a6      	cmp	r6, r4
 8002c0e:	d109      	bne.n	8002c24 <__libc_init_array+0x24>
 8002c10:	2600      	movs	r6, #0
 8002c12:	f000 f821 	bl	8002c58 <_init>
 8002c16:	4d0a      	ldr	r5, [pc, #40]	; (8002c40 <__libc_init_array+0x40>)
 8002c18:	4c0a      	ldr	r4, [pc, #40]	; (8002c44 <__libc_init_array+0x44>)
 8002c1a:	1b64      	subs	r4, r4, r5
 8002c1c:	10a4      	asrs	r4, r4, #2
 8002c1e:	42a6      	cmp	r6, r4
 8002c20:	d105      	bne.n	8002c2e <__libc_init_array+0x2e>
 8002c22:	bd70      	pop	{r4, r5, r6, pc}
 8002c24:	00b3      	lsls	r3, r6, #2
 8002c26:	58eb      	ldr	r3, [r5, r3]
 8002c28:	4798      	blx	r3
 8002c2a:	3601      	adds	r6, #1
 8002c2c:	e7ee      	b.n	8002c0c <__libc_init_array+0xc>
 8002c2e:	00b3      	lsls	r3, r6, #2
 8002c30:	58eb      	ldr	r3, [r5, r3]
 8002c32:	4798      	blx	r3
 8002c34:	3601      	adds	r6, #1
 8002c36:	e7f2      	b.n	8002c1e <__libc_init_array+0x1e>
 8002c38:	08002ef4 	.word	0x08002ef4
 8002c3c:	08002ef4 	.word	0x08002ef4
 8002c40:	08002ef4 	.word	0x08002ef4
 8002c44:	08002ef8 	.word	0x08002ef8

08002c48 <memset>:
 8002c48:	0003      	movs	r3, r0
 8002c4a:	1882      	adds	r2, r0, r2
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d100      	bne.n	8002c52 <memset+0xa>
 8002c50:	4770      	bx	lr
 8002c52:	7019      	strb	r1, [r3, #0]
 8002c54:	3301      	adds	r3, #1
 8002c56:	e7f9      	b.n	8002c4c <memset+0x4>

08002c58 <_init>:
 8002c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c5e:	bc08      	pop	{r3}
 8002c60:	469e      	mov	lr, r3
 8002c62:	4770      	bx	lr

08002c64 <_fini>:
 8002c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c6a:	bc08      	pop	{r3}
 8002c6c:	469e      	mov	lr, r3
 8002c6e:	4770      	bx	lr
