
nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000178c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08001920  08001920  00011920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001b30  08001b30  00011b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001b34  08001b34  00011b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          000000e0  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000ec  200000ec  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000db1b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001f3e  00000000  00000000  0002db57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003355  00000000  00000000  0002fa95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000598  00000000  00000000  00032df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000850  00000000  00000000  00033388  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003904  00000000  00000000  00033bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002824  00000000  00000000  000374dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00039d00  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000e1c  00000000  00000000  00039d7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001908 	.word	0x08001908

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001908 	.word	0x08001908

080001d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001d4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d6:	4a0e      	ldr	r2, [pc, #56]	; (8000210 <HAL_InitTick+0x3c>)
 80001d8:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <HAL_InitTick+0x40>)
{
 80001da:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001dc:	7818      	ldrb	r0, [r3, #0]
 80001de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e2:	fbb3 f3f0 	udiv	r3, r3, r0
 80001e6:	6810      	ldr	r0, [r2, #0]
 80001e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80001ec:	f000 f88c 	bl	8000308 <HAL_SYSTICK_Config>
 80001f0:	4604      	mov	r4, r0
 80001f2:	b958      	cbnz	r0, 800020c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001f4:	2d0f      	cmp	r5, #15
 80001f6:	d809      	bhi.n	800020c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001f8:	4602      	mov	r2, r0
 80001fa:	4629      	mov	r1, r5
 80001fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 f842 	bl	8000288 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000204:	4b04      	ldr	r3, [pc, #16]	; (8000218 <HAL_InitTick+0x44>)
 8000206:	4620      	mov	r0, r4
 8000208:	601d      	str	r5, [r3, #0]
 800020a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800020c:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 800020e:	bd38      	pop	{r3, r4, r5, pc}
 8000210:	20000008 	.word	0x20000008
 8000214:	20000000 	.word	0x20000000
 8000218:	20000004 	.word	0x20000004

0800021c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800021c:	4a07      	ldr	r2, [pc, #28]	; (800023c <HAL_Init+0x20>)
{
 800021e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000220:	6813      	ldr	r3, [r2, #0]
 8000222:	f043 0310 	orr.w	r3, r3, #16
 8000226:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000228:	2003      	movs	r0, #3
 800022a:	f000 f81b 	bl	8000264 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800022e:	2000      	movs	r0, #0
 8000230:	f7ff ffd0 	bl	80001d4 <HAL_InitTick>
  HAL_MspInit();
 8000234:	f001 fa64 	bl	8001700 <HAL_MspInit>
}
 8000238:	2000      	movs	r0, #0
 800023a:	bd08      	pop	{r3, pc}
 800023c:	40022000 	.word	0x40022000

08000240 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000240:	4a03      	ldr	r2, [pc, #12]	; (8000250 <HAL_IncTick+0x10>)
 8000242:	4b04      	ldr	r3, [pc, #16]	; (8000254 <HAL_IncTick+0x14>)
 8000244:	6811      	ldr	r1, [r2, #0]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	440b      	add	r3, r1
 800024a:	6013      	str	r3, [r2, #0]
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	20000034 	.word	0x20000034
 8000254:	20000000 	.word	0x20000000

08000258 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000258:	4b01      	ldr	r3, [pc, #4]	; (8000260 <HAL_GetTick+0x8>)
 800025a:	6818      	ldr	r0, [r3, #0]
}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	20000034 	.word	0x20000034

08000264 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4a07      	ldr	r2, [pc, #28]	; (8000284 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000266:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000268:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800026c:	041b      	lsls	r3, r3, #16
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000274:	0200      	lsls	r0, r0, #8
 8000276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800027a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800027e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000280:	60d3      	str	r3, [r2, #12]
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00

08000288 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000288:	4b17      	ldr	r3, [pc, #92]	; (80002e8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800028a:	b530      	push	{r4, r5, lr}
 800028c:	68dc      	ldr	r4, [r3, #12]
 800028e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000292:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000298:	2b04      	cmp	r3, #4
 800029a:	bf28      	it	cs
 800029c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800029e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a0:	f04f 0501 	mov.w	r5, #1
 80002a4:	fa05 f303 	lsl.w	r3, r5, r3
 80002a8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ac:	bf8c      	ite	hi
 80002ae:	3c03      	subhi	r4, #3
 80002b0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002b2:	4019      	ands	r1, r3
 80002b4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002b6:	fa05 f404 	lsl.w	r4, r5, r4
 80002ba:	3c01      	subs	r4, #1
 80002bc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002be:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002c0:	ea42 0201 	orr.w	r2, r2, r1
 80002c4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c8:	bfaf      	iteee	ge
 80002ca:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ce:	f000 000f 	andlt.w	r0, r0, #15
 80002d2:	4b06      	ldrlt	r3, [pc, #24]	; (80002ec <HAL_NVIC_SetPriority+0x64>)
 80002d4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	bfa5      	ittet	ge
 80002d8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002dc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002de:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002e4:	bd30      	pop	{r4, r5, pc}
 80002e6:	bf00      	nop
 80002e8:	e000ed00 	.word	0xe000ed00
 80002ec:	e000ed14 	.word	0xe000ed14

080002f0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002f0:	0942      	lsrs	r2, r0, #5
 80002f2:	2301      	movs	r3, #1
 80002f4:	f000 001f 	and.w	r0, r0, #31
 80002f8:	fa03 f000 	lsl.w	r0, r3, r0
 80002fc:	4b01      	ldr	r3, [pc, #4]	; (8000304 <HAL_NVIC_EnableIRQ+0x14>)
 80002fe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000302:	4770      	bx	lr
 8000304:	e000e100 	.word	0xe000e100

08000308 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000308:	3801      	subs	r0, #1
 800030a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800030e:	d20a      	bcs.n	8000326 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000312:	4a07      	ldr	r2, [pc, #28]	; (8000330 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000314:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000316:	21f0      	movs	r1, #240	; 0xf0
 8000318:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800031c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800031e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000320:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000326:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	e000e010 	.word	0xe000e010
 8000330:	e000ed00 	.word	0xe000ed00

08000334 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000334:	4b04      	ldr	r3, [pc, #16]	; (8000348 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000336:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000338:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800033a:	bf0c      	ite	eq
 800033c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000340:	f022 0204 	bicne.w	r2, r2, #4
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	4770      	bx	lr
 8000348:	e000e010 	.word	0xe000e010

0800034c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800034c:	4770      	bx	lr

0800034e <HAL_SYSTICK_IRQHandler>:
{
 800034e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000350:	f7ff fffc 	bl	800034c <HAL_SYSTICK_Callback>
 8000354:	bd08      	pop	{r3, pc}
	...

08000358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800035c:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000360:	f8df 9190 	ldr.w	r9, [pc, #400]	; 80004f4 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000364:	4a61      	ldr	r2, [pc, #388]	; (80004ec <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 8000366:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000368:	fa38 f403 	lsrs.w	r4, r8, r3
 800036c:	d102      	bne.n	8000374 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 800036e:	b003      	add	sp, #12
 8000370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000374:	f04f 0e01 	mov.w	lr, #1
 8000378:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 800037c:	ea18 060e 	ands.w	r6, r8, lr
 8000380:	f000 80a6 	beq.w	80004d0 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000384:	684c      	ldr	r4, [r1, #4]
 8000386:	f024 0710 	bic.w	r7, r4, #16
 800038a:	2f02      	cmp	r7, #2
 800038c:	d116      	bne.n	80003bc <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 800038e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000392:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000396:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800039a:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800039e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80003a2:	f04f 0c0f 	mov.w	ip, #15
 80003a6:	fa0c fc0b 	lsl.w	ip, ip, fp
 80003aa:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80003ae:	690d      	ldr	r5, [r1, #16]
 80003b0:	fa05 f50b 	lsl.w	r5, r5, fp
 80003b4:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80003b8:	f8ca 5020 	str.w	r5, [sl, #32]
 80003bc:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003c0:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80003c2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003c6:	fa05 f50a 	lsl.w	r5, r5, sl
 80003ca:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003cc:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003d0:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003d4:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003d8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003da:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003de:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80003e0:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003e4:	d811      	bhi.n	800040a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80003e6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003e8:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003ec:	68cf      	ldr	r7, [r1, #12]
 80003ee:	fa07 fc0a 	lsl.w	ip, r7, sl
 80003f2:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80003f6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80003f8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003fa:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003fe:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000402:	409f      	lsls	r7, r3
 8000404:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000408:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800040a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800040c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800040e:	688f      	ldr	r7, [r1, #8]
 8000410:	fa07 f70a 	lsl.w	r7, r7, sl
 8000414:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000416:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000418:	00e5      	lsls	r5, r4, #3
 800041a:	d559      	bpl.n	80004d0 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041c:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000420:	f045 0501 	orr.w	r5, r5, #1
 8000424:	f8c9 5018 	str.w	r5, [r9, #24]
 8000428:	f8d9 5018 	ldr.w	r5, [r9, #24]
 800042c:	f023 0703 	bic.w	r7, r3, #3
 8000430:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000434:	f005 0501 	and.w	r5, r5, #1
 8000438:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800043c:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800043e:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000442:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000444:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000446:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800044a:	f04f 0e0f 	mov.w	lr, #15
 800044e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000452:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000456:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800045a:	d03b      	beq.n	80004d4 <HAL_GPIO_Init+0x17c>
 800045c:	4d24      	ldr	r5, [pc, #144]	; (80004f0 <HAL_GPIO_Init+0x198>)
 800045e:	42a8      	cmp	r0, r5
 8000460:	d03a      	beq.n	80004d8 <HAL_GPIO_Init+0x180>
 8000462:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000466:	42a8      	cmp	r0, r5
 8000468:	d038      	beq.n	80004dc <HAL_GPIO_Init+0x184>
 800046a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800046e:	42a8      	cmp	r0, r5
 8000470:	d036      	beq.n	80004e0 <HAL_GPIO_Init+0x188>
 8000472:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000476:	42a8      	cmp	r0, r5
 8000478:	d034      	beq.n	80004e4 <HAL_GPIO_Init+0x18c>
 800047a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800047e:	42a8      	cmp	r0, r5
 8000480:	d032      	beq.n	80004e8 <HAL_GPIO_Init+0x190>
 8000482:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000486:	42a8      	cmp	r0, r5
 8000488:	bf14      	ite	ne
 800048a:	2507      	movne	r5, #7
 800048c:	2506      	moveq	r5, #6
 800048e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000492:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000496:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000498:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800049a:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800049c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80004a0:	bf0c      	ite	eq
 80004a2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80004a4:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 80004a6:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80004a8:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004aa:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80004ae:	bf0c      	ite	eq
 80004b0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80004b2:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 80004b4:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80004b6:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004b8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80004bc:	bf0c      	ite	eq
 80004be:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80004c0:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 80004c2:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80004c4:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004c6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80004c8:	bf54      	ite	pl
 80004ca:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80004cc:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 80004ce:	60d5      	str	r5, [r2, #12]
    position++;
 80004d0:	3301      	adds	r3, #1
 80004d2:	e749      	b.n	8000368 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80004d4:	2500      	movs	r5, #0
 80004d6:	e7da      	b.n	800048e <HAL_GPIO_Init+0x136>
 80004d8:	2501      	movs	r5, #1
 80004da:	e7d8      	b.n	800048e <HAL_GPIO_Init+0x136>
 80004dc:	2502      	movs	r5, #2
 80004de:	e7d6      	b.n	800048e <HAL_GPIO_Init+0x136>
 80004e0:	2503      	movs	r5, #3
 80004e2:	e7d4      	b.n	800048e <HAL_GPIO_Init+0x136>
 80004e4:	2504      	movs	r5, #4
 80004e6:	e7d2      	b.n	800048e <HAL_GPIO_Init+0x136>
 80004e8:	2505      	movs	r5, #5
 80004ea:	e7d0      	b.n	800048e <HAL_GPIO_Init+0x136>
 80004ec:	40010400 	.word	0x40010400
 80004f0:	48000400 	.word	0x48000400
 80004f4:	40021000 	.word	0x40021000

080004f8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80004f8:	6903      	ldr	r3, [r0, #16]
 80004fa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80004fc:	bf14      	ite	ne
 80004fe:	2001      	movne	r0, #1
 8000500:	2000      	moveq	r0, #0
 8000502:	4770      	bx	lr

08000504 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000504:	b10a      	cbz	r2, 800050a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000506:	6181      	str	r1, [r0, #24]
 8000508:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800050a:	6281      	str	r1, [r0, #40]	; 0x28
 800050c:	4770      	bx	lr

0800050e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800050e:	4770      	bx	lr

08000510 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000510:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000512:	4b04      	ldr	r3, [pc, #16]	; (8000524 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000514:	6959      	ldr	r1, [r3, #20]
 8000516:	4201      	tst	r1, r0
 8000518:	d002      	beq.n	8000520 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800051a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800051c:	f7ff fff7 	bl	800050e <HAL_GPIO_EXTI_Callback>
 8000520:	bd08      	pop	{r3, pc}
 8000522:	bf00      	nop
 8000524:	40010400 	.word	0x40010400

08000528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000528:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800052c:	4605      	mov	r5, r0
 800052e:	b918      	cbnz	r0, 8000538 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000530:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000532:	b002      	add	sp, #8
 8000534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000538:	6803      	ldr	r3, [r0, #0]
 800053a:	07df      	lsls	r7, r3, #31
 800053c:	d411      	bmi.n	8000562 <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800053e:	682b      	ldr	r3, [r5, #0]
 8000540:	079e      	lsls	r6, r3, #30
 8000542:	f100 8088 	bmi.w	8000656 <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000546:	682b      	ldr	r3, [r5, #0]
 8000548:	071c      	lsls	r4, r3, #28
 800054a:	f100 80fc 	bmi.w	8000746 <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800054e:	682b      	ldr	r3, [r5, #0]
 8000550:	0758      	lsls	r0, r3, #29
 8000552:	f100 8145 	bmi.w	80007e0 <HAL_RCC_OscConfig+0x2b8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000556:	69aa      	ldr	r2, [r5, #24]
 8000558:	2a00      	cmp	r2, #0
 800055a:	f040 81dc 	bne.w	8000916 <HAL_RCC_OscConfig+0x3ee>
  return HAL_OK;
 800055e:	2000      	movs	r0, #0
 8000560:	e7e7      	b.n	8000532 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000562:	4cbd      	ldr	r4, [pc, #756]	; (8000858 <HAL_RCC_OscConfig+0x330>)
 8000564:	6863      	ldr	r3, [r4, #4]
 8000566:	f003 030c 	and.w	r3, r3, #12
 800056a:	2b04      	cmp	r3, #4
 800056c:	d00a      	beq.n	8000584 <HAL_RCC_OscConfig+0x5c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800056e:	6863      	ldr	r3, [r4, #4]
 8000570:	f003 030c 	and.w	r3, r3, #12
 8000574:	2b08      	cmp	r3, #8
 8000576:	d119      	bne.n	80005ac <HAL_RCC_OscConfig+0x84>
 8000578:	6863      	ldr	r3, [r4, #4]
 800057a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800057e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000582:	d113      	bne.n	80005ac <HAL_RCC_OscConfig+0x84>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000584:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000588:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800058c:	6821      	ldr	r1, [r4, #0]
 800058e:	fa93 f3a3 	rbit	r3, r3
 8000592:	fab3 f383 	clz	r3, r3
 8000596:	f003 031f 	and.w	r3, r3, #31
 800059a:	2201      	movs	r2, #1
 800059c:	fa02 f303 	lsl.w	r3, r2, r3
 80005a0:	420b      	tst	r3, r1
 80005a2:	d0cc      	beq.n	800053e <HAL_RCC_OscConfig+0x16>
 80005a4:	686b      	ldr	r3, [r5, #4]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d1c9      	bne.n	800053e <HAL_RCC_OscConfig+0x16>
 80005aa:	e7c1      	b.n	8000530 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ac:	686b      	ldr	r3, [r5, #4]
 80005ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005b2:	d11e      	bne.n	80005f2 <HAL_RCC_OscConfig+0xca>
 80005b4:	6823      	ldr	r3, [r4, #0]
 80005b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005ba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005bc:	f7ff fe4c 	bl	8000258 <HAL_GetTick>
 80005c0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80005c4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005c6:	2701      	movs	r7, #1
 80005c8:	fa96 f3a6 	rbit	r3, r6
 80005cc:	6822      	ldr	r2, [r4, #0]
 80005ce:	fa96 f3a6 	rbit	r3, r6
 80005d2:	fab3 f383 	clz	r3, r3
 80005d6:	f003 031f 	and.w	r3, r3, #31
 80005da:	fa07 f303 	lsl.w	r3, r7, r3
 80005de:	4213      	tst	r3, r2
 80005e0:	d1ad      	bne.n	800053e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005e2:	f7ff fe39 	bl	8000258 <HAL_GetTick>
 80005e6:	eba0 0008 	sub.w	r0, r0, r8
 80005ea:	2864      	cmp	r0, #100	; 0x64
 80005ec:	d9ec      	bls.n	80005c8 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 80005ee:	2003      	movs	r0, #3
 80005f0:	e79f      	b.n	8000532 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005f2:	bb0b      	cbnz	r3, 8000638 <HAL_RCC_OscConfig+0x110>
 80005f4:	6823      	ldr	r3, [r4, #0]
 80005f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005fa:	6023      	str	r3, [r4, #0]
 80005fc:	6823      	ldr	r3, [r4, #0]
 80005fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000602:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000604:	f7ff fe28 	bl	8000258 <HAL_GetTick>
 8000608:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800060c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800060e:	2701      	movs	r7, #1
 8000610:	fa96 f3a6 	rbit	r3, r6
 8000614:	6822      	ldr	r2, [r4, #0]
 8000616:	fa96 f3a6 	rbit	r3, r6
 800061a:	fab3 f383 	clz	r3, r3
 800061e:	f003 031f 	and.w	r3, r3, #31
 8000622:	fa07 f303 	lsl.w	r3, r7, r3
 8000626:	4213      	tst	r3, r2
 8000628:	d089      	beq.n	800053e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800062a:	f7ff fe15 	bl	8000258 <HAL_GetTick>
 800062e:	eba0 0008 	sub.w	r0, r0, r8
 8000632:	2864      	cmp	r0, #100	; 0x64
 8000634:	d9ec      	bls.n	8000610 <HAL_RCC_OscConfig+0xe8>
 8000636:	e7da      	b.n	80005ee <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800063c:	6823      	ldr	r3, [r4, #0]
 800063e:	d103      	bne.n	8000648 <HAL_RCC_OscConfig+0x120>
 8000640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000644:	6023      	str	r3, [r4, #0]
 8000646:	e7b5      	b.n	80005b4 <HAL_RCC_OscConfig+0x8c>
 8000648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800064c:	6023      	str	r3, [r4, #0]
 800064e:	6823      	ldr	r3, [r4, #0]
 8000650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000654:	e7b1      	b.n	80005ba <HAL_RCC_OscConfig+0x92>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000656:	4c80      	ldr	r4, [pc, #512]	; (8000858 <HAL_RCC_OscConfig+0x330>)
 8000658:	6863      	ldr	r3, [r4, #4]
 800065a:	f013 0f0c 	tst.w	r3, #12
 800065e:	d00a      	beq.n	8000676 <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000660:	6863      	ldr	r3, [r4, #4]
 8000662:	f003 030c 	and.w	r3, r3, #12
 8000666:	2b08      	cmp	r3, #8
 8000668:	d125      	bne.n	80006b6 <HAL_RCC_OscConfig+0x18e>
 800066a:	6863      	ldr	r3, [r4, #4]
 800066c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000674:	d11f      	bne.n	80006b6 <HAL_RCC_OscConfig+0x18e>
 8000676:	2302      	movs	r3, #2
 8000678:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800067c:	6821      	ldr	r1, [r4, #0]
 800067e:	fa93 f3a3 	rbit	r3, r3
 8000682:	fab3 f383 	clz	r3, r3
 8000686:	f003 031f 	and.w	r3, r3, #31
 800068a:	2201      	movs	r2, #1
 800068c:	fa02 f303 	lsl.w	r3, r2, r3
 8000690:	420b      	tst	r3, r1
 8000692:	d003      	beq.n	800069c <HAL_RCC_OscConfig+0x174>
 8000694:	68eb      	ldr	r3, [r5, #12]
 8000696:	4293      	cmp	r3, r2
 8000698:	f47f af4a 	bne.w	8000530 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800069c:	6821      	ldr	r1, [r4, #0]
 800069e:	23f8      	movs	r3, #248	; 0xf8
 80006a0:	fa93 f3a3 	rbit	r3, r3
 80006a4:	fab3 f283 	clz	r2, r3
 80006a8:	692b      	ldr	r3, [r5, #16]
 80006aa:	4093      	lsls	r3, r2
 80006ac:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80006b0:	4313      	orrs	r3, r2
 80006b2:	6023      	str	r3, [r4, #0]
 80006b4:	e747      	b.n	8000546 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006b6:	68ea      	ldr	r2, [r5, #12]
 80006b8:	2601      	movs	r6, #1
 80006ba:	b30a      	cbz	r2, 8000700 <HAL_RCC_OscConfig+0x1d8>
 80006bc:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80006c0:	fab3 f383 	clz	r3, r3
 80006c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80006c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	2702      	movs	r7, #2
 80006d0:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80006d2:	f7ff fdc1 	bl	8000258 <HAL_GetTick>
 80006d6:	4680      	mov	r8, r0
 80006d8:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006dc:	6822      	ldr	r2, [r4, #0]
 80006de:	fa97 f3a7 	rbit	r3, r7
 80006e2:	fab3 f383 	clz	r3, r3
 80006e6:	f003 031f 	and.w	r3, r3, #31
 80006ea:	fa06 f303 	lsl.w	r3, r6, r3
 80006ee:	4213      	tst	r3, r2
 80006f0:	d1d4      	bne.n	800069c <HAL_RCC_OscConfig+0x174>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006f2:	f7ff fdb1 	bl	8000258 <HAL_GetTick>
 80006f6:	eba0 0008 	sub.w	r0, r0, r8
 80006fa:	2802      	cmp	r0, #2
 80006fc:	d9ec      	bls.n	80006d8 <HAL_RCC_OscConfig+0x1b0>
 80006fe:	e776      	b.n	80005ee <HAL_RCC_OscConfig+0xc6>
 8000700:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000704:	fab3 f383 	clz	r3, r3
 8000708:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800070c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	2702      	movs	r7, #2
 8000714:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000716:	f7ff fd9f 	bl	8000258 <HAL_GetTick>
 800071a:	4680      	mov	r8, r0
 800071c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000720:	6822      	ldr	r2, [r4, #0]
 8000722:	fa97 f3a7 	rbit	r3, r7
 8000726:	fab3 f383 	clz	r3, r3
 800072a:	f003 031f 	and.w	r3, r3, #31
 800072e:	fa06 f303 	lsl.w	r3, r6, r3
 8000732:	4213      	tst	r3, r2
 8000734:	f43f af07 	beq.w	8000546 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000738:	f7ff fd8e 	bl	8000258 <HAL_GetTick>
 800073c:	eba0 0008 	sub.w	r0, r0, r8
 8000740:	2802      	cmp	r0, #2
 8000742:	d9eb      	bls.n	800071c <HAL_RCC_OscConfig+0x1f4>
 8000744:	e753      	b.n	80005ee <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000746:	696a      	ldr	r2, [r5, #20]
 8000748:	4e43      	ldr	r6, [pc, #268]	; (8000858 <HAL_RCC_OscConfig+0x330>)
 800074a:	4944      	ldr	r1, [pc, #272]	; (800085c <HAL_RCC_OscConfig+0x334>)
 800074c:	2401      	movs	r4, #1
 800074e:	b31a      	cbz	r2, 8000798 <HAL_RCC_OscConfig+0x270>
 8000750:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000754:	fab3 f383 	clz	r3, r3
 8000758:	440b      	add	r3, r1
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	2702      	movs	r7, #2
 800075e:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000760:	f7ff fd7a 	bl	8000258 <HAL_GetTick>
 8000764:	4680      	mov	r8, r0
 8000766:	fa97 f3a7 	rbit	r3, r7
 800076a:	fa97 f3a7 	rbit	r3, r7
 800076e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000772:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000774:	fa97 f3a7 	rbit	r3, r7
 8000778:	fab3 f383 	clz	r3, r3
 800077c:	f003 031f 	and.w	r3, r3, #31
 8000780:	fa04 f303 	lsl.w	r3, r4, r3
 8000784:	4213      	tst	r3, r2
 8000786:	f47f aee2 	bne.w	800054e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800078a:	f7ff fd65 	bl	8000258 <HAL_GetTick>
 800078e:	eba0 0008 	sub.w	r0, r0, r8
 8000792:	2802      	cmp	r0, #2
 8000794:	d9e7      	bls.n	8000766 <HAL_RCC_OscConfig+0x23e>
 8000796:	e72a      	b.n	80005ee <HAL_RCC_OscConfig+0xc6>
 8000798:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 800079c:	fab3 f383 	clz	r3, r3
 80007a0:	440b      	add	r3, r1
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	2702      	movs	r7, #2
 80007a6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80007a8:	f7ff fd56 	bl	8000258 <HAL_GetTick>
 80007ac:	4680      	mov	r8, r0
 80007ae:	fa97 f3a7 	rbit	r3, r7
 80007b2:	fa97 f3a7 	rbit	r3, r7
 80007b6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007ba:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80007bc:	fa97 f3a7 	rbit	r3, r7
 80007c0:	fab3 f383 	clz	r3, r3
 80007c4:	f003 031f 	and.w	r3, r3, #31
 80007c8:	fa04 f303 	lsl.w	r3, r4, r3
 80007cc:	4213      	tst	r3, r2
 80007ce:	f43f aebe 	beq.w	800054e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007d2:	f7ff fd41 	bl	8000258 <HAL_GetTick>
 80007d6:	eba0 0008 	sub.w	r0, r0, r8
 80007da:	2802      	cmp	r0, #2
 80007dc:	d9e7      	bls.n	80007ae <HAL_RCC_OscConfig+0x286>
 80007de:	e706      	b.n	80005ee <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007e0:	4c1d      	ldr	r4, [pc, #116]	; (8000858 <HAL_RCC_OscConfig+0x330>)
 80007e2:	69e3      	ldr	r3, [r4, #28]
 80007e4:	00d9      	lsls	r1, r3, #3
 80007e6:	d434      	bmi.n	8000852 <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80007e8:	69e3      	ldr	r3, [r4, #28]
 80007ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ee:	61e3      	str	r3, [r4, #28]
 80007f0:	69e3      	ldr	r3, [r4, #28]
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f6:	9301      	str	r3, [sp, #4]
 80007f8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80007fa:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007fc:	4f18      	ldr	r7, [pc, #96]	; (8000860 <HAL_RCC_OscConfig+0x338>)
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	05da      	lsls	r2, r3, #23
 8000802:	d52f      	bpl.n	8000864 <HAL_RCC_OscConfig+0x33c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000804:	68ab      	ldr	r3, [r5, #8]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d13d      	bne.n	8000886 <HAL_RCC_OscConfig+0x35e>
 800080a:	6a23      	ldr	r3, [r4, #32]
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000812:	f7ff fd21 	bl	8000258 <HAL_GetTick>
 8000816:	2702      	movs	r7, #2
 8000818:	4682      	mov	sl, r0
 800081a:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800081c:	f04f 0801 	mov.w	r8, #1
 8000820:	fa97 f3a7 	rbit	r3, r7
 8000824:	fa97 f3a7 	rbit	r3, r7
 8000828:	2b00      	cmp	r3, #0
 800082a:	d06c      	beq.n	8000906 <HAL_RCC_OscConfig+0x3de>
 800082c:	6a22      	ldr	r2, [r4, #32]
 800082e:	fa99 f3a9 	rbit	r3, r9
 8000832:	fab3 f383 	clz	r3, r3
 8000836:	f003 031f 	and.w	r3, r3, #31
 800083a:	fa08 f303 	lsl.w	r3, r8, r3
 800083e:	4213      	tst	r3, r2
 8000840:	d058      	beq.n	80008f4 <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 8000842:	2e00      	cmp	r6, #0
 8000844:	f43f ae87 	beq.w	8000556 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000848:	69e3      	ldr	r3, [r4, #28]
 800084a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800084e:	61e3      	str	r3, [r4, #28]
 8000850:	e681      	b.n	8000556 <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 8000852:	2600      	movs	r6, #0
 8000854:	e7d2      	b.n	80007fc <HAL_RCC_OscConfig+0x2d4>
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000
 800085c:	10908120 	.word	0x10908120
 8000860:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800086a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800086c:	f7ff fcf4 	bl	8000258 <HAL_GetTick>
 8000870:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	d4c5      	bmi.n	8000804 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000878:	f7ff fcee 	bl	8000258 <HAL_GetTick>
 800087c:	eba0 0008 	sub.w	r0, r0, r8
 8000880:	2864      	cmp	r0, #100	; 0x64
 8000882:	d9f6      	bls.n	8000872 <HAL_RCC_OscConfig+0x34a>
 8000884:	e6b3      	b.n	80005ee <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000886:	bb3b      	cbnz	r3, 80008d8 <HAL_RCC_OscConfig+0x3b0>
 8000888:	6a23      	ldr	r3, [r4, #32]
 800088a:	f023 0301 	bic.w	r3, r3, #1
 800088e:	6223      	str	r3, [r4, #32]
 8000890:	6a23      	ldr	r3, [r4, #32]
 8000892:	f023 0304 	bic.w	r3, r3, #4
 8000896:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000898:	f7ff fcde 	bl	8000258 <HAL_GetTick>
 800089c:	2702      	movs	r7, #2
 800089e:	4682      	mov	sl, r0
 80008a0:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008a2:	f04f 0801 	mov.w	r8, #1
 80008a6:	fa97 f3a7 	rbit	r3, r7
 80008aa:	fa97 f3a7 	rbit	r3, r7
 80008ae:	b373      	cbz	r3, 800090e <HAL_RCC_OscConfig+0x3e6>
 80008b0:	6a22      	ldr	r2, [r4, #32]
 80008b2:	fa99 f3a9 	rbit	r3, r9
 80008b6:	fab3 f383 	clz	r3, r3
 80008ba:	f003 031f 	and.w	r3, r3, #31
 80008be:	fa08 f303 	lsl.w	r3, r8, r3
 80008c2:	4213      	tst	r3, r2
 80008c4:	d0bd      	beq.n	8000842 <HAL_RCC_OscConfig+0x31a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008c6:	f7ff fcc7 	bl	8000258 <HAL_GetTick>
 80008ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80008ce:	eba0 000a 	sub.w	r0, r0, sl
 80008d2:	4298      	cmp	r0, r3
 80008d4:	d9e7      	bls.n	80008a6 <HAL_RCC_OscConfig+0x37e>
 80008d6:	e68a      	b.n	80005ee <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008d8:	2b05      	cmp	r3, #5
 80008da:	6a23      	ldr	r3, [r4, #32]
 80008dc:	d103      	bne.n	80008e6 <HAL_RCC_OscConfig+0x3be>
 80008de:	f043 0304 	orr.w	r3, r3, #4
 80008e2:	6223      	str	r3, [r4, #32]
 80008e4:	e791      	b.n	800080a <HAL_RCC_OscConfig+0x2e2>
 80008e6:	f023 0301 	bic.w	r3, r3, #1
 80008ea:	6223      	str	r3, [r4, #32]
 80008ec:	6a23      	ldr	r3, [r4, #32]
 80008ee:	f023 0304 	bic.w	r3, r3, #4
 80008f2:	e78d      	b.n	8000810 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008f4:	f7ff fcb0 	bl	8000258 <HAL_GetTick>
 80008f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80008fc:	eba0 000a 	sub.w	r0, r0, sl
 8000900:	4298      	cmp	r0, r3
 8000902:	d98d      	bls.n	8000820 <HAL_RCC_OscConfig+0x2f8>
 8000904:	e673      	b.n	80005ee <HAL_RCC_OscConfig+0xc6>
 8000906:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800090a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800090c:	e78f      	b.n	800082e <HAL_RCC_OscConfig+0x306>
 800090e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000912:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000914:	e7cd      	b.n	80008b2 <HAL_RCC_OscConfig+0x38a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000916:	4c44      	ldr	r4, [pc, #272]	; (8000a28 <HAL_RCC_OscConfig+0x500>)
 8000918:	6863      	ldr	r3, [r4, #4]
 800091a:	f003 030c 	and.w	r3, r3, #12
 800091e:	2b08      	cmp	r3, #8
 8000920:	f43f ae06 	beq.w	8000530 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000924:	2a02      	cmp	r2, #2
 8000926:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800092a:	d158      	bne.n	80009de <HAL_RCC_OscConfig+0x4b6>
 800092c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000930:	fab3 f383 	clz	r3, r3
 8000934:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000938:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000942:	f7ff fc89 	bl	8000258 <HAL_GetTick>
 8000946:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800094a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800094c:	2601      	movs	r6, #1
 800094e:	fa97 f3a7 	rbit	r3, r7
 8000952:	6822      	ldr	r2, [r4, #0]
 8000954:	fa97 f3a7 	rbit	r3, r7
 8000958:	fab3 f383 	clz	r3, r3
 800095c:	f003 031f 	and.w	r3, r3, #31
 8000960:	fa06 f303 	lsl.w	r3, r6, r3
 8000964:	4213      	tst	r3, r2
 8000966:	d133      	bne.n	80009d0 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000968:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800096a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800096c:	f023 030f 	bic.w	r3, r3, #15
 8000970:	4313      	orrs	r3, r2
 8000972:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000974:	6862      	ldr	r2, [r4, #4]
 8000976:	6a2b      	ldr	r3, [r5, #32]
 8000978:	69e9      	ldr	r1, [r5, #28]
 800097a:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 800097e:	430b      	orrs	r3, r1
 8000980:	4313      	orrs	r3, r2
 8000982:	6063      	str	r3, [r4, #4]
 8000984:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000988:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800098c:	fab3 f383 	clz	r3, r3
 8000990:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000994:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800099e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80009a0:	f7ff fc5a 	bl	8000258 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009a4:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 80009a6:	4607      	mov	r7, r0
 80009a8:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009ac:	6822      	ldr	r2, [r4, #0]
 80009ae:	fa95 f3a5 	rbit	r3, r5
 80009b2:	fab3 f383 	clz	r3, r3
 80009b6:	f003 031f 	and.w	r3, r3, #31
 80009ba:	fa06 f303 	lsl.w	r3, r6, r3
 80009be:	4213      	tst	r3, r2
 80009c0:	f47f adcd 	bne.w	800055e <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009c4:	f7ff fc48 	bl	8000258 <HAL_GetTick>
 80009c8:	1bc0      	subs	r0, r0, r7
 80009ca:	2802      	cmp	r0, #2
 80009cc:	d9ec      	bls.n	80009a8 <HAL_RCC_OscConfig+0x480>
 80009ce:	e60e      	b.n	80005ee <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009d0:	f7ff fc42 	bl	8000258 <HAL_GetTick>
 80009d4:	eba0 0008 	sub.w	r0, r0, r8
 80009d8:	2802      	cmp	r0, #2
 80009da:	d9b8      	bls.n	800094e <HAL_RCC_OscConfig+0x426>
 80009dc:	e607      	b.n	80005ee <HAL_RCC_OscConfig+0xc6>
 80009de:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80009e2:	fab3 f383 	clz	r3, r3
 80009e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009f4:	f7ff fc30 	bl	8000258 <HAL_GetTick>
 80009f8:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80009fc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009fe:	2601      	movs	r6, #1
 8000a00:	fa95 f3a5 	rbit	r3, r5
 8000a04:	6822      	ldr	r2, [r4, #0]
 8000a06:	fa95 f3a5 	rbit	r3, r5
 8000a0a:	fab3 f383 	clz	r3, r3
 8000a0e:	f003 031f 	and.w	r3, r3, #31
 8000a12:	fa06 f303 	lsl.w	r3, r6, r3
 8000a16:	4213      	tst	r3, r2
 8000a18:	f43f ada1 	beq.w	800055e <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a1c:	f7ff fc1c 	bl	8000258 <HAL_GetTick>
 8000a20:	1bc0      	subs	r0, r0, r7
 8000a22:	2802      	cmp	r0, #2
 8000a24:	d9ec      	bls.n	8000a00 <HAL_RCC_OscConfig+0x4d8>
 8000a26:	e5e2      	b.n	80005ee <HAL_RCC_OscConfig+0xc6>
 8000a28:	40021000 	.word	0x40021000

08000a2c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000a2c:	4911      	ldr	r1, [pc, #68]	; (8000a74 <HAL_RCC_GetSysClockFreq+0x48>)
 8000a2e:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000a30:	f003 020c 	and.w	r2, r3, #12
 8000a34:	2a08      	cmp	r2, #8
 8000a36:	d11a      	bne.n	8000a6e <HAL_RCC_GetSysClockFreq+0x42>
 8000a38:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000a3c:	fa92 f2a2 	rbit	r2, r2
 8000a40:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a42:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a46:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000a48:	fa90 f0a0 	rbit	r0, r0
 8000a4c:	fab0 f080 	clz	r0, r0
 8000a50:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a54:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000a58:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a5a:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a5c:	4a06      	ldr	r2, [pc, #24]	; (8000a78 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a5e:	4807      	ldr	r0, [pc, #28]	; (8000a7c <HAL_RCC_GetSysClockFreq+0x50>)
 8000a60:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000a62:	4807      	ldr	r0, [pc, #28]	; (8000a80 <HAL_RCC_GetSysClockFreq+0x54>)
 8000a64:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a68:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000a6a:	4348      	muls	r0, r1
 8000a6c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000a6e:	4804      	ldr	r0, [pc, #16]	; (8000a80 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40021000 	.word	0x40021000
 8000a78:	08001920 	.word	0x08001920
 8000a7c:	08001930 	.word	0x08001930
 8000a80:	007a1200 	.word	0x007a1200

08000a84 <HAL_RCC_ClockConfig>:
{
 8000a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a88:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	b910      	cbnz	r0, 8000a94 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000a8e:	2001      	movs	r0, #1
 8000a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000a94:	4a4c      	ldr	r2, [pc, #304]	; (8000bc8 <HAL_RCC_ClockConfig+0x144>)
 8000a96:	6813      	ldr	r3, [r2, #0]
 8000a98:	f003 0307 	and.w	r3, r3, #7
 8000a9c:	428b      	cmp	r3, r1
 8000a9e:	d32e      	bcc.n	8000afe <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000aa0:	6822      	ldr	r2, [r4, #0]
 8000aa2:	0791      	lsls	r1, r2, #30
 8000aa4:	d436      	bmi.n	8000b14 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000aa6:	07d2      	lsls	r2, r2, #31
 8000aa8:	d43c      	bmi.n	8000b24 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000aaa:	4a47      	ldr	r2, [pc, #284]	; (8000bc8 <HAL_RCC_ClockConfig+0x144>)
 8000aac:	6813      	ldr	r3, [r2, #0]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	429d      	cmp	r5, r3
 8000ab4:	d375      	bcc.n	8000ba2 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ab6:	6822      	ldr	r2, [r4, #0]
 8000ab8:	4d44      	ldr	r5, [pc, #272]	; (8000bcc <HAL_RCC_ClockConfig+0x148>)
 8000aba:	f012 0f04 	tst.w	r2, #4
 8000abe:	d17c      	bne.n	8000bba <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ac0:	0713      	lsls	r3, r2, #28
 8000ac2:	d506      	bpl.n	8000ad2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ac4:	686b      	ldr	r3, [r5, #4]
 8000ac6:	6922      	ldr	r2, [r4, #16]
 8000ac8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000acc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ad0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000ad2:	f7ff ffab 	bl	8000a2c <HAL_RCC_GetSysClockFreq>
 8000ad6:	686b      	ldr	r3, [r5, #4]
 8000ad8:	22f0      	movs	r2, #240	; 0xf0
 8000ada:	fa92 f2a2 	rbit	r2, r2
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ae6:	40d3      	lsrs	r3, r2
 8000ae8:	4a39      	ldr	r2, [pc, #228]	; (8000bd0 <HAL_RCC_ClockConfig+0x14c>)
 8000aea:	5cd3      	ldrb	r3, [r2, r3]
 8000aec:	40d8      	lsrs	r0, r3
 8000aee:	4b39      	ldr	r3, [pc, #228]	; (8000bd4 <HAL_RCC_ClockConfig+0x150>)
 8000af0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000af2:	2000      	movs	r0, #0
 8000af4:	f7ff fb6e 	bl	80001d4 <HAL_InitTick>
  return HAL_OK;
 8000af8:	2000      	movs	r0, #0
 8000afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000afe:	6813      	ldr	r3, [r2, #0]
 8000b00:	f023 0307 	bic.w	r3, r3, #7
 8000b04:	430b      	orrs	r3, r1
 8000b06:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b08:	6813      	ldr	r3, [r2, #0]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	d1bd      	bne.n	8000a8e <HAL_RCC_ClockConfig+0xa>
 8000b12:	e7c5      	b.n	8000aa0 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b14:	492d      	ldr	r1, [pc, #180]	; (8000bcc <HAL_RCC_ClockConfig+0x148>)
 8000b16:	68a0      	ldr	r0, [r4, #8]
 8000b18:	684b      	ldr	r3, [r1, #4]
 8000b1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b1e:	4303      	orrs	r3, r0
 8000b20:	604b      	str	r3, [r1, #4]
 8000b22:	e7c0      	b.n	8000aa6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b24:	6862      	ldr	r2, [r4, #4]
 8000b26:	4e29      	ldr	r6, [pc, #164]	; (8000bcc <HAL_RCC_ClockConfig+0x148>)
 8000b28:	2a01      	cmp	r2, #1
 8000b2a:	d127      	bne.n	8000b7c <HAL_RCC_ClockConfig+0xf8>
 8000b2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b30:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b34:	6831      	ldr	r1, [r6, #0]
 8000b36:	fa93 f3a3 	rbit	r3, r3
 8000b3a:	fab3 f383 	clz	r3, r3
 8000b3e:	f003 031f 	and.w	r3, r3, #31
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b48:	d0a1      	beq.n	8000a8e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b4a:	6873      	ldr	r3, [r6, #4]
 8000b4c:	f023 0303 	bic.w	r3, r3, #3
 8000b50:	431a      	orrs	r2, r3
 8000b52:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8000b54:	f7ff fb80 	bl	8000258 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b58:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000b5c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000b5e:	6873      	ldr	r3, [r6, #4]
 8000b60:	6862      	ldr	r2, [r4, #4]
 8000b62:	f003 030c 	and.w	r3, r3, #12
 8000b66:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000b6a:	d09e      	beq.n	8000aaa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b6c:	f7ff fb74 	bl	8000258 <HAL_GetTick>
 8000b70:	1bc0      	subs	r0, r0, r7
 8000b72:	4540      	cmp	r0, r8
 8000b74:	d9f3      	bls.n	8000b5e <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8000b76:	2003      	movs	r0, #3
}
 8000b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b7c:	2a02      	cmp	r2, #2
 8000b7e:	bf0c      	ite	eq
 8000b80:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000b84:	2302      	movne	r3, #2
 8000b86:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b8a:	6830      	ldr	r0, [r6, #0]
 8000b8c:	fa93 f3a3 	rbit	r3, r3
 8000b90:	fab3 f383 	clz	r3, r3
 8000b94:	f003 031f 	and.w	r3, r3, #31
 8000b98:	2101      	movs	r1, #1
 8000b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9e:	4203      	tst	r3, r0
 8000ba0:	e7d2      	b.n	8000b48 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ba2:	6813      	ldr	r3, [r2, #0]
 8000ba4:	f023 0307 	bic.w	r3, r3, #7
 8000ba8:	432b      	orrs	r3, r5
 8000baa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bac:	6813      	ldr	r3, [r2, #0]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	429d      	cmp	r5, r3
 8000bb4:	f47f af6b 	bne.w	8000a8e <HAL_RCC_ClockConfig+0xa>
 8000bb8:	e77d      	b.n	8000ab6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000bba:	686b      	ldr	r3, [r5, #4]
 8000bbc:	68e1      	ldr	r1, [r4, #12]
 8000bbe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bc2:	430b      	orrs	r3, r1
 8000bc4:	606b      	str	r3, [r5, #4]
 8000bc6:	e77b      	b.n	8000ac0 <HAL_RCC_ClockConfig+0x3c>
 8000bc8:	40022000 	.word	0x40022000
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	08001b17 	.word	0x08001b17
 8000bd4:	20000008 	.word	0x20000008

08000bd8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000bd8:	4b01      	ldr	r3, [pc, #4]	; (8000be0 <HAL_RCC_GetHCLKFreq+0x8>)
 8000bda:	6818      	ldr	r0, [r3, #0]
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000008 	.word	0x20000008

08000be4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000be6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	fa92 f2a2 	rbit	r2, r2
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000bf8:	40d3      	lsrs	r3, r2
 8000bfa:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8000bfc:	5cd3      	ldrb	r3, [r2, r3]
 8000bfe:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000c00:	6810      	ldr	r0, [r2, #0]
}    
 8000c02:	40d8      	lsrs	r0, r3
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	08001b27 	.word	0x08001b27
 8000c10:	20000008 	.word	0x20000008

08000c14 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000c16:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	fa92 f2a2 	rbit	r2, r2
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000c28:	40d3      	lsrs	r3, r2
 8000c2a:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8000c2c:	5cd3      	ldrb	r3, [r2, r3]
 8000c2e:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000c30:	6810      	ldr	r0, [r2, #0]
} 
 8000c32:	40d8      	lsrs	r0, r3
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	08001b27 	.word	0x08001b27
 8000c40:	20000008 	.word	0x20000008

08000c44 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000c44:	6803      	ldr	r3, [r0, #0]
{
 8000c46:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000c4a:	03df      	lsls	r7, r3, #15
{
 8000c4c:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000c4e:	d523      	bpl.n	8000c98 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c50:	4d9b      	ldr	r5, [pc, #620]	; (8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000c52:	69eb      	ldr	r3, [r5, #28]
 8000c54:	00de      	lsls	r6, r3, #3
 8000c56:	f100 80d7 	bmi.w	8000e08 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	69eb      	ldr	r3, [r5, #28]
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	61eb      	str	r3, [r5, #28]
 8000c62:	69eb      	ldr	r3, [r5, #28]
 8000c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c68:	9301      	str	r3, [sp, #4]
 8000c6a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c6c:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c6e:	4f95      	ldr	r7, [pc, #596]	; (8000ec4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	05d8      	lsls	r0, r3, #23
 8000c74:	f140 80ca 	bpl.w	8000e0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000c78:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c7a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000c7e:	f040 80da 	bne.w	8000e36 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000c82:	6a2b      	ldr	r3, [r5, #32]
 8000c84:	6862      	ldr	r2, [r4, #4]
 8000c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c8e:	b11e      	cbz	r6, 8000c98 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c90:	69eb      	ldr	r3, [r5, #28]
 8000c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c96:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000c98:	6820      	ldr	r0, [r4, #0]
 8000c9a:	07c3      	lsls	r3, r0, #31
 8000c9c:	d506      	bpl.n	8000cac <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000c9e:	4a88      	ldr	r2, [pc, #544]	; (8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000ca0:	68a1      	ldr	r1, [r4, #8]
 8000ca2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ca4:	f023 0303 	bic.w	r3, r3, #3
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000cac:	0787      	lsls	r7, r0, #30
 8000cae:	d506      	bpl.n	8000cbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000cb0:	4a83      	ldr	r2, [pc, #524]	; (8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000cb2:	68e1      	ldr	r1, [r4, #12]
 8000cb4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cb6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000cba:	430b      	orrs	r3, r1
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8000cbe:	0746      	lsls	r6, r0, #29
 8000cc0:	d506      	bpl.n	8000cd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8000cc2:	4a7f      	ldr	r2, [pc, #508]	; (8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000cc4:	6921      	ldr	r1, [r4, #16]
 8000cc6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cc8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000ccc:	430b      	orrs	r3, r1
 8000cce:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000cd0:	0685      	lsls	r5, r0, #26
 8000cd2:	d506      	bpl.n	8000ce2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000cd4:	4a7a      	ldr	r2, [pc, #488]	; (8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000cd6:	69e1      	ldr	r1, [r4, #28]
 8000cd8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cda:	f023 0310 	bic.w	r3, r3, #16
 8000cde:	430b      	orrs	r3, r1
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000ce2:	0381      	lsls	r1, r0, #14
 8000ce4:	d506      	bpl.n	8000cf4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8000ce6:	4a76      	ldr	r2, [pc, #472]	; (8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000ce8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000cea:	6853      	ldr	r3, [r2, #4]
 8000cec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000cf0:	430b      	orrs	r3, r1
 8000cf2:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8000cf4:	0642      	lsls	r2, r0, #25
 8000cf6:	d506      	bpl.n	8000d06 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8000cf8:	4a71      	ldr	r2, [pc, #452]	; (8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000cfa:	6a21      	ldr	r1, [r4, #32]
 8000cfc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cfe:	f023 0320 	bic.w	r3, r3, #32
 8000d02:	430b      	orrs	r3, r1
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000d06:	0343      	lsls	r3, r0, #13
 8000d08:	d506      	bpl.n	8000d18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000d0a:	4a6d      	ldr	r2, [pc, #436]	; (8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000d0e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d14:	430b      	orrs	r3, r1
 8000d16:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8000d18:	0707      	lsls	r7, r0, #28
 8000d1a:	d506      	bpl.n	8000d2a <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8000d1c:	4a68      	ldr	r2, [pc, #416]	; (8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d1e:	6961      	ldr	r1, [r4, #20]
 8000d20:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d22:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000d26:	430b      	orrs	r3, r1
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8000d2a:	06c6      	lsls	r6, r0, #27
 8000d2c:	d506      	bpl.n	8000d3c <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8000d2e:	4a64      	ldr	r2, [pc, #400]	; (8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d30:	69a1      	ldr	r1, [r4, #24]
 8000d32:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d34:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000d38:	430b      	orrs	r3, r1
 8000d3a:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8000d3c:	0585      	lsls	r5, r0, #22
 8000d3e:	d506      	bpl.n	8000d4e <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000d40:	4a5f      	ldr	r2, [pc, #380]	; (8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d42:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000d44:	6853      	ldr	r3, [r2, #4]
 8000d46:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000d4a:	430b      	orrs	r3, r1
 8000d4c:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8000d4e:	0601      	lsls	r1, r0, #24
 8000d50:	d506      	bpl.n	8000d60 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8000d52:	4a5b      	ldr	r2, [pc, #364]	; (8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d54:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000d56:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000d58:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000d5c:	430b      	orrs	r3, r1
 8000d5e:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8000d60:	05c2      	lsls	r2, r0, #23
 8000d62:	d506      	bpl.n	8000d72 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8000d64:	4a56      	ldr	r2, [pc, #344]	; (8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d66:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000d68:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000d6a:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8000d6e:	430b      	orrs	r3, r1
 8000d70:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8000d72:	04c3      	lsls	r3, r0, #19
 8000d74:	d506      	bpl.n	8000d84 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8000d76:	4a52      	ldr	r2, [pc, #328]	; (8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000d7a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d80:	430b      	orrs	r3, r1
 8000d82:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8000d84:	0487      	lsls	r7, r0, #18
 8000d86:	d506      	bpl.n	8000d96 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8000d88:	4a4d      	ldr	r2, [pc, #308]	; (8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000d8c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d8e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000d92:	430b      	orrs	r3, r1
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8000d96:	02c6      	lsls	r6, r0, #11
 8000d98:	d506      	bpl.n	8000da8 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8000d9a:	4a49      	ldr	r2, [pc, #292]	; (8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d9c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000d9e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000da0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000da4:	430b      	orrs	r3, r1
 8000da6:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8000da8:	0285      	lsls	r5, r0, #10
 8000daa:	d506      	bpl.n	8000dba <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8000dac:	4a44      	ldr	r2, [pc, #272]	; (8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000dae:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000db0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000db2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000db6:	430b      	orrs	r3, r1
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8000dba:	0241      	lsls	r1, r0, #9
 8000dbc:	d506      	bpl.n	8000dcc <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8000dbe:	4a40      	ldr	r2, [pc, #256]	; (8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000dc0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000dc2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000dc8:	430b      	orrs	r3, r1
 8000dca:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8000dcc:	0202      	lsls	r2, r0, #8
 8000dce:	d506      	bpl.n	8000dde <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8000dd0:	4a3b      	ldr	r2, [pc, #236]	; (8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000dd2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000dd4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000dda:	430b      	orrs	r3, r1
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8000dde:	01c3      	lsls	r3, r0, #7
 8000de0:	d506      	bpl.n	8000df0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8000de2:	4a37      	ldr	r2, [pc, #220]	; (8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000de4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8000de6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000de8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000dec:	430b      	orrs	r3, r1
 8000dee:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8000df0:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8000df4:	d01c      	beq.n	8000e30 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8000df6:	4a32      	ldr	r2, [pc, #200]	; (8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000df8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000dfa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dfc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e00:	430b      	orrs	r3, r1
 8000e02:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8000e04:	2000      	movs	r0, #0
 8000e06:	e013      	b.n	8000e30 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e730      	b.n	8000c6e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e12:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000e14:	f7ff fa20 	bl	8000258 <HAL_GetTick>
 8000e18:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	05d9      	lsls	r1, r3, #23
 8000e1e:	f53f af2b 	bmi.w	8000c78 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e22:	f7ff fa19 	bl	8000258 <HAL_GetTick>
 8000e26:	eba0 0008 	sub.w	r0, r0, r8
 8000e2a:	2864      	cmp	r0, #100	; 0x64
 8000e2c:	d9f5      	bls.n	8000e1a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 8000e2e:	2003      	movs	r0, #3
}
 8000e30:	b002      	add	sp, #8
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000e36:	6862      	ldr	r2, [r4, #4]
 8000e38:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	f43f af20 	beq.w	8000c82 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000e42:	6a29      	ldr	r1, [r5, #32]
 8000e44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e48:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8000e4c:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8000e50:	f8df e074 	ldr.w	lr, [pc, #116]	; 8000ec8 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8000e54:	fab2 f282 	clz	r2, r2
 8000e58:	4472      	add	r2, lr
 8000e5a:	0092      	lsls	r2, r2, #2
 8000e5c:	2701      	movs	r7, #1
 8000e5e:	6017      	str	r7, [r2, #0]
 8000e60:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000e64:	fab3 f383 	clz	r3, r3
 8000e68:	4473      	add	r3, lr
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000e70:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8000e72:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000e74:	f57f af05 	bpl.w	8000c82 <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8000e78:	f7ff f9ee 	bl	8000258 <HAL_GetTick>
 8000e7c:	f04f 0802 	mov.w	r8, #2
 8000e80:	4682      	mov	sl, r0
 8000e82:	46c1      	mov	r9, r8
 8000e84:	fa98 f3a8 	rbit	r3, r8
 8000e88:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e8c:	b1a3      	cbz	r3, 8000eb8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8000e8e:	6a2a      	ldr	r2, [r5, #32]
 8000e90:	fa99 f3a9 	rbit	r3, r9
 8000e94:	fab3 f383 	clz	r3, r3
 8000e98:	f003 031f 	and.w	r3, r3, #31
 8000e9c:	fa07 f303 	lsl.w	r3, r7, r3
 8000ea0:	4213      	tst	r3, r2
 8000ea2:	f47f aeee 	bne.w	8000c82 <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ea6:	f7ff f9d7 	bl	8000258 <HAL_GetTick>
 8000eaa:	f241 3388 	movw	r3, #5000	; 0x1388
 8000eae:	eba0 000a 	sub.w	r0, r0, sl
 8000eb2:	4298      	cmp	r0, r3
 8000eb4:	d9e6      	bls.n	8000e84 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8000eb6:	e7ba      	b.n	8000e2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8000eb8:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ebc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000ebe:	e7e7      	b.n	8000e90 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40007000 	.word	0x40007000
 8000ec8:	10908100 	.word	0x10908100

08000ecc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000ecc:	b538      	push	{r3, r4, r5, lr}
 8000ece:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ed0:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000ed2:	6921      	ldr	r1, [r4, #16]
 8000ed4:	68a2      	ldr	r2, [r4, #8]
 8000ed6:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ed8:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000eda:	430a      	orrs	r2, r1
 8000edc:	6961      	ldr	r1, [r4, #20]
 8000ede:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ee0:	4977      	ldr	r1, [pc, #476]	; (80010c0 <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000ee2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ee4:	4001      	ands	r1, r0
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000eea:	686a      	ldr	r2, [r5, #4]
 8000eec:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000eee:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000ef0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000ef8:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000efa:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000efc:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000f00:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000f02:	430a      	orrs	r2, r1
 8000f04:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f06:	4a6f      	ldr	r2, [pc, #444]	; (80010c4 <UART_SetConfig+0x1f8>)
 8000f08:	4295      	cmp	r5, r2
 8000f0a:	d112      	bne.n	8000f32 <UART_SetConfig+0x66>
 8000f0c:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8000f10:	496d      	ldr	r1, [pc, #436]	; (80010c8 <UART_SetConfig+0x1fc>)
 8000f12:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000f14:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f1c:	5c8a      	ldrb	r2, [r1, r2]
 8000f1e:	d066      	beq.n	8000fee <UART_SetConfig+0x122>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8000f20:	2a08      	cmp	r2, #8
 8000f22:	d819      	bhi.n	8000f58 <UART_SetConfig+0x8c>
 8000f24:	e8df f002 	tbb	[pc, r2]
 8000f28:	189e92c2 	.word	0x189e92c2
 8000f2c:	181818a9 	.word	0x181818a9
 8000f30:	ac          	.byte	0xac
 8000f31:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f32:	4a66      	ldr	r2, [pc, #408]	; (80010cc <UART_SetConfig+0x200>)
 8000f34:	4295      	cmp	r5, r2
 8000f36:	d124      	bne.n	8000f82 <UART_SetConfig+0xb6>
 8000f38:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8000f3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000f3e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8000f42:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000f46:	f000 80a0 	beq.w	800108a <UART_SetConfig+0x1be>
 8000f4a:	d807      	bhi.n	8000f5c <UART_SetConfig+0x90>
 8000f4c:	2a00      	cmp	r2, #0
 8000f4e:	f000 80aa 	beq.w	80010a6 <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f56:	d076      	beq.n	8001046 <UART_SetConfig+0x17a>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8000f58:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8000f5a:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f5c:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8000f60:	f000 8099 	beq.w	8001096 <UART_SetConfig+0x1ca>
 8000f64:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8000f68:	d1f3      	bne.n	8000f52 <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f6e:	d179      	bne.n	8001064 <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000f70:	6860      	ldr	r0, [r4, #4]
 8000f72:	0843      	lsrs	r3, r0, #1
 8000f74:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8000f78:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000f7c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f80:	e054      	b.n	800102c <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f82:	4a53      	ldr	r2, [pc, #332]	; (80010d0 <UART_SetConfig+0x204>)
 8000f84:	4295      	cmp	r5, r2
 8000f86:	d10e      	bne.n	8000fa6 <UART_SetConfig+0xda>
 8000f88:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8000f8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000f8e:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8000f92:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8000f96:	d078      	beq.n	800108a <UART_SetConfig+0x1be>
 8000f98:	d9d8      	bls.n	8000f4c <UART_SetConfig+0x80>
 8000f9a:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8000f9e:	d07a      	beq.n	8001096 <UART_SetConfig+0x1ca>
 8000fa0:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8000fa4:	e7e0      	b.n	8000f68 <UART_SetConfig+0x9c>
 8000fa6:	4a4b      	ldr	r2, [pc, #300]	; (80010d4 <UART_SetConfig+0x208>)
 8000fa8:	4295      	cmp	r5, r2
 8000faa:	d10e      	bne.n	8000fca <UART_SetConfig+0xfe>
 8000fac:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8000fb0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000fb2:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8000fb6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8000fba:	d066      	beq.n	800108a <UART_SetConfig+0x1be>
 8000fbc:	d9c6      	bls.n	8000f4c <UART_SetConfig+0x80>
 8000fbe:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8000fc2:	d068      	beq.n	8001096 <UART_SetConfig+0x1ca>
 8000fc4:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8000fc8:	e7ce      	b.n	8000f68 <UART_SetConfig+0x9c>
 8000fca:	4a43      	ldr	r2, [pc, #268]	; (80010d8 <UART_SetConfig+0x20c>)
 8000fcc:	4295      	cmp	r5, r2
 8000fce:	d1c0      	bne.n	8000f52 <UART_SetConfig+0x86>
 8000fd0:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8000fd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000fd6:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8000fda:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8000fde:	d054      	beq.n	800108a <UART_SetConfig+0x1be>
 8000fe0:	d9b4      	bls.n	8000f4c <UART_SetConfig+0x80>
 8000fe2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8000fe6:	d056      	beq.n	8001096 <UART_SetConfig+0x1ca>
 8000fe8:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8000fec:	e7bc      	b.n	8000f68 <UART_SetConfig+0x9c>
    switch (clocksource)
 8000fee:	2a08      	cmp	r2, #8
 8000ff0:	d829      	bhi.n	8001046 <UART_SetConfig+0x17a>
 8000ff2:	a301      	add	r3, pc, #4	; (adr r3, 8000ff8 <UART_SetConfig+0x12c>)
 8000ff4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000ff8:	0800101d 	.word	0x0800101d
 8000ffc:	08001041 	.word	0x08001041
 8001000:	08000f71 	.word	0x08000f71
 8001004:	08001047 	.word	0x08001047
 8001008:	08001091 	.word	0x08001091
 800100c:	08001047 	.word	0x08001047
 8001010:	08001047 	.word	0x08001047
 8001014:	08001047 	.word	0x08001047
 8001018:	0800109d 	.word	0x0800109d
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800101c:	f7ff fde2 	bl	8000be4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001020:	6861      	ldr	r1, [r4, #4]
 8001022:	084a      	lsrs	r2, r1, #1
 8001024:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001028:	fbb3 f3f1 	udiv	r3, r3, r1
 800102c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800102e:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001030:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8001034:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001036:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800103a:	4313      	orrs	r3, r2
 800103c:	60cb      	str	r3, [r1, #12]
 800103e:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001040:	f7ff fde8 	bl	8000c14 <HAL_RCC_GetPCLK2Freq>
 8001044:	e7ec      	b.n	8001020 <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 8001046:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001048:	2300      	movs	r3, #0
 800104a:	e7f1      	b.n	8001030 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800104c:	f7ff fde2 	bl	8000c14 <HAL_RCC_GetPCLK2Freq>
 8001050:	6863      	ldr	r3, [r4, #4]
 8001052:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001056:	fbb0 f0f3 	udiv	r0, r0, r3
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <UART_SetConfig+0x1f8>)
 800105c:	b280      	uxth	r0, r0
 800105e:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001060:	2000      	movs	r0, #0
        break;
 8001062:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001064:	6862      	ldr	r2, [r4, #4]
 8001066:	0853      	lsrs	r3, r2, #1
 8001068:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800106c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001070:	fbb3 f3f2 	udiv	r3, r3, r2
 8001074:	b29b      	uxth	r3, r3
 8001076:	60eb      	str	r3, [r5, #12]
 8001078:	e7f2      	b.n	8001060 <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800107a:	f7ff fcd7 	bl	8000a2c <HAL_RCC_GetSysClockFreq>
 800107e:	e017      	b.n	80010b0 <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001080:	6862      	ldr	r2, [r4, #4]
 8001082:	0853      	lsrs	r3, r2, #1
 8001084:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001088:	e7f2      	b.n	8001070 <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800108a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800108e:	d1f4      	bne.n	800107a <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001090:	f7ff fccc 	bl	8000a2c <HAL_RCC_GetSysClockFreq>
 8001094:	e7c4      	b.n	8001020 <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800109a:	d1f1      	bne.n	8001080 <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800109c:	6860      	ldr	r0, [r4, #4]
 800109e:	0843      	lsrs	r3, r0, #1
 80010a0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80010a4:	e76a      	b.n	8000f7c <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010aa:	d0b7      	beq.n	800101c <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80010ac:	f7ff fd9a 	bl	8000be4 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80010b0:	6863      	ldr	r3, [r4, #4]
 80010b2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80010b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80010ba:	b280      	uxth	r0, r0
 80010bc:	60e8      	str	r0, [r5, #12]
 80010be:	e7cf      	b.n	8001060 <UART_SetConfig+0x194>
 80010c0:	efff69f3 	.word	0xefff69f3
 80010c4:	40013800 	.word	0x40013800
 80010c8:	08001940 	.word	0x08001940
 80010cc:	40004400 	.word	0x40004400
 80010d0:	40004800 	.word	0x40004800
 80010d4:	40004c00 	.word	0x40004c00
 80010d8:	40005000 	.word	0x40005000

080010dc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80010dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80010de:	07da      	lsls	r2, r3, #31
{
 80010e0:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80010e2:	d506      	bpl.n	80010f2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80010e4:	6801      	ldr	r1, [r0, #0]
 80010e6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80010e8:	684a      	ldr	r2, [r1, #4]
 80010ea:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80010ee:	4322      	orrs	r2, r4
 80010f0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80010f2:	079c      	lsls	r4, r3, #30
 80010f4:	d506      	bpl.n	8001104 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80010f6:	6801      	ldr	r1, [r0, #0]
 80010f8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80010fa:	684a      	ldr	r2, [r1, #4]
 80010fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001100:	4322      	orrs	r2, r4
 8001102:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001104:	0759      	lsls	r1, r3, #29
 8001106:	d506      	bpl.n	8001116 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001108:	6801      	ldr	r1, [r0, #0]
 800110a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800110c:	684a      	ldr	r2, [r1, #4]
 800110e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001112:	4322      	orrs	r2, r4
 8001114:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001116:	071a      	lsls	r2, r3, #28
 8001118:	d506      	bpl.n	8001128 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800111a:	6801      	ldr	r1, [r0, #0]
 800111c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800111e:	684a      	ldr	r2, [r1, #4]
 8001120:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001124:	4322      	orrs	r2, r4
 8001126:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001128:	06dc      	lsls	r4, r3, #27
 800112a:	d506      	bpl.n	800113a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800112c:	6801      	ldr	r1, [r0, #0]
 800112e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001130:	688a      	ldr	r2, [r1, #8]
 8001132:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001136:	4322      	orrs	r2, r4
 8001138:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800113a:	0699      	lsls	r1, r3, #26
 800113c:	d506      	bpl.n	800114c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800113e:	6801      	ldr	r1, [r0, #0]
 8001140:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001142:	688a      	ldr	r2, [r1, #8]
 8001144:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001148:	4322      	orrs	r2, r4
 800114a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800114c:	065a      	lsls	r2, r3, #25
 800114e:	d50f      	bpl.n	8001170 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001150:	6801      	ldr	r1, [r0, #0]
 8001152:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001154:	684a      	ldr	r2, [r1, #4]
 8001156:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800115a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800115c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001160:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001162:	d105      	bne.n	8001170 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001164:	684a      	ldr	r2, [r1, #4]
 8001166:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001168:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800116c:	4322      	orrs	r2, r4
 800116e:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001170:	061b      	lsls	r3, r3, #24
 8001172:	d506      	bpl.n	8001182 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001174:	6802      	ldr	r2, [r0, #0]
 8001176:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001178:	6853      	ldr	r3, [r2, #4]
 800117a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800117e:	430b      	orrs	r3, r1
 8001180:	6053      	str	r3, [r2, #4]
 8001182:	bd10      	pop	{r4, pc}

08001184 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001188:	9d06      	ldr	r5, [sp, #24]
 800118a:	4604      	mov	r4, r0
 800118c:	460f      	mov	r7, r1
 800118e:	4616      	mov	r6, r2
 8001190:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001192:	6821      	ldr	r1, [r4, #0]
 8001194:	69ca      	ldr	r2, [r1, #28]
 8001196:	ea37 0302 	bics.w	r3, r7, r2
 800119a:	bf0c      	ite	eq
 800119c:	2201      	moveq	r2, #1
 800119e:	2200      	movne	r2, #0
 80011a0:	42b2      	cmp	r2, r6
 80011a2:	d002      	beq.n	80011aa <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80011a4:	2000      	movs	r0, #0
}
 80011a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80011aa:	1c6b      	adds	r3, r5, #1
 80011ac:	d0f2      	beq.n	8001194 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80011ae:	b99d      	cbnz	r5, 80011d8 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80011b8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	f022 0201 	bic.w	r2, r2, #1
 80011c0:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80011c2:	2320      	movs	r3, #32
 80011c4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80011c8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80011cc:	2300      	movs	r3, #0
 80011ce:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80011d2:	2003      	movs	r0, #3
 80011d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80011d8:	f7ff f83e 	bl	8000258 <HAL_GetTick>
 80011dc:	eba0 0008 	sub.w	r0, r0, r8
 80011e0:	4285      	cmp	r5, r0
 80011e2:	d2d6      	bcs.n	8001192 <UART_WaitOnFlagUntilTimeout+0xe>
 80011e4:	e7e4      	b.n	80011b0 <UART_WaitOnFlagUntilTimeout+0x2c>

080011e6 <HAL_UART_Transmit>:
{
 80011e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80011ea:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80011ec:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80011f0:	2b20      	cmp	r3, #32
{
 80011f2:	4604      	mov	r4, r0
 80011f4:	460d      	mov	r5, r1
 80011f6:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80011f8:	d14c      	bne.n	8001294 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 80011fa:	2900      	cmp	r1, #0
 80011fc:	d048      	beq.n	8001290 <HAL_UART_Transmit+0xaa>
 80011fe:	2a00      	cmp	r2, #0
 8001200:	d046      	beq.n	8001290 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8001202:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001206:	2b01      	cmp	r3, #1
 8001208:	d044      	beq.n	8001294 <HAL_UART_Transmit+0xae>
 800120a:	2301      	movs	r3, #1
 800120c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001210:	2300      	movs	r3, #0
 8001212:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001214:	2321      	movs	r3, #33	; 0x21
 8001216:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 800121a:	f7ff f81d 	bl	8000258 <HAL_GetTick>
    huart->TxXferSize = Size;
 800121e:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001222:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001224:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001228:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800122c:	b292      	uxth	r2, r2
 800122e:	b962      	cbnz	r2, 800124a <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001230:	9700      	str	r7, [sp, #0]
 8001232:	4633      	mov	r3, r6
 8001234:	2140      	movs	r1, #64	; 0x40
 8001236:	4620      	mov	r0, r4
 8001238:	f7ff ffa4 	bl	8001184 <UART_WaitOnFlagUntilTimeout>
 800123c:	b998      	cbnz	r0, 8001266 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 800123e:	2320      	movs	r3, #32
 8001240:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8001244:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8001248:	e00e      	b.n	8001268 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 800124a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800124e:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8001250:	3b01      	subs	r3, #1
 8001252:	b29b      	uxth	r3, r3
 8001254:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001258:	2200      	movs	r2, #0
 800125a:	4633      	mov	r3, r6
 800125c:	2180      	movs	r1, #128	; 0x80
 800125e:	4620      	mov	r0, r4
 8001260:	f7ff ff90 	bl	8001184 <UART_WaitOnFlagUntilTimeout>
 8001264:	b118      	cbz	r0, 800126e <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8001266:	2003      	movs	r0, #3
}
 8001268:	b002      	add	sp, #8
 800126a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800126e:	68a3      	ldr	r3, [r4, #8]
 8001270:	6822      	ldr	r2, [r4, #0]
 8001272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001276:	d107      	bne.n	8001288 <HAL_UART_Transmit+0xa2>
 8001278:	6923      	ldr	r3, [r4, #16]
 800127a:	b92b      	cbnz	r3, 8001288 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800127c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001284:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8001286:	e7cf      	b.n	8001228 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001288:	782b      	ldrb	r3, [r5, #0]
 800128a:	8513      	strh	r3, [r2, #40]	; 0x28
 800128c:	3501      	adds	r5, #1
 800128e:	e7cb      	b.n	8001228 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001290:	2001      	movs	r0, #1
 8001292:	e7e9      	b.n	8001268 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001294:	2002      	movs	r0, #2
 8001296:	e7e7      	b.n	8001268 <HAL_UART_Transmit+0x82>

08001298 <UART_CheckIdleState>:
{
 8001298:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800129a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800129c:	2600      	movs	r6, #0
 800129e:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80012a0:	f7fe ffda 	bl	8000258 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80012a4:	6823      	ldr	r3, [r4, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80012aa:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80012ac:	d417      	bmi.n	80012de <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80012ae:	6823      	ldr	r3, [r4, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	075b      	lsls	r3, r3, #29
 80012b4:	d50a      	bpl.n	80012cc <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80012b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2200      	movs	r2, #0
 80012be:	462b      	mov	r3, r5
 80012c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80012c4:	4620      	mov	r0, r4
 80012c6:	f7ff ff5d 	bl	8001184 <UART_WaitOnFlagUntilTimeout>
 80012ca:	b9a0      	cbnz	r0, 80012f6 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 80012cc:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80012ce:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80012d0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80012d4:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80012d8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 80012dc:	e00c      	b.n	80012f8 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80012de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	4632      	mov	r2, r6
 80012e6:	4603      	mov	r3, r0
 80012e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80012ec:	4620      	mov	r0, r4
 80012ee:	f7ff ff49 	bl	8001184 <UART_WaitOnFlagUntilTimeout>
 80012f2:	2800      	cmp	r0, #0
 80012f4:	d0db      	beq.n	80012ae <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80012f6:	2003      	movs	r0, #3
}
 80012f8:	b002      	add	sp, #8
 80012fa:	bd70      	pop	{r4, r5, r6, pc}

080012fc <HAL_UART_Init>:
{
 80012fc:	b510      	push	{r4, lr}
  if(huart == NULL)
 80012fe:	4604      	mov	r4, r0
 8001300:	b360      	cbz	r0, 800135c <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001302:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001306:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800130a:	b91b      	cbnz	r3, 8001314 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800130c:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001310:	f000 fa3c 	bl	800178c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001314:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001316:	2324      	movs	r3, #36	; 0x24
 8001318:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800131c:	6813      	ldr	r3, [r2, #0]
 800131e:	f023 0301 	bic.w	r3, r3, #1
 8001322:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001324:	4620      	mov	r0, r4
 8001326:	f7ff fdd1 	bl	8000ecc <UART_SetConfig>
 800132a:	2801      	cmp	r0, #1
 800132c:	d016      	beq.n	800135c <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800132e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001330:	b113      	cbz	r3, 8001338 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001332:	4620      	mov	r0, r4
 8001334:	f7ff fed2 	bl	80010dc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001338:	6823      	ldr	r3, [r4, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001340:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001348:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001350:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001352:	601a      	str	r2, [r3, #0]
}
 8001354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001358:	f7ff bf9e 	b.w	8001298 <UART_CheckIdleState>
}
 800135c:	2001      	movs	r0, #1
 800135e:	bd10      	pop	{r4, pc}

08001360 <get_iso8859_code>:
#define SHIFT_L   0x04
#define SHIFT_R   0x08
#define ALTGR     0x10

static char get_iso8859_code(Keyboard_TypeDef* keyboard)
{
 8001360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001362:	4d3c      	ldr	r5, [pc, #240]	; (8001454 <get_iso8859_code+0xf4>)
 8001364:	4e3c      	ldr	r6, [pc, #240]	; (8001458 <get_iso8859_code+0xf8>)
 8001366:	782b      	ldrb	r3, [r5, #0]
 8001368:	4604      	mov	r4, r0
 800136a:	2100      	movs	r1, #0
	i = keyboard->tail;
 800136c:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
	if (i == keyboard->head) return 0;
 8001370:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
	i = keyboard->tail;
 8001374:	b2d2      	uxtb	r2, r2
	if (i == keyboard->head) return 0;
 8001376:	4282      	cmp	r2, r0
 8001378:	d103      	bne.n	8001382 <get_iso8859_code+0x22>
 800137a:	b101      	cbz	r1, 800137e <get_iso8859_code+0x1e>
 800137c:	702b      	strb	r3, [r5, #0]
	uint8_t s;
	char c;

	while (1) {
		s = get_scan_code(keyboard);
		if (!s) return 0;
 800137e:	2000      	movs	r0, #0
 8001380:	bdf0      	pop	{r4, r5, r6, r7, pc}
	i++;
 8001382:	3201      	adds	r2, #1
 8001384:	b2d2      	uxtb	r2, r2
	if (i >= BUFFER_SIZE) i = 0;
 8001386:	2a2d      	cmp	r2, #45	; 0x2d
 8001388:	bf28      	it	cs
 800138a:	2200      	movcs	r2, #0
	c = keyboard->buffer[i];
 800138c:	5ca0      	ldrb	r0, [r4, r2]
	keyboard->tail = i;
 800138e:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
		if (!s) return 0;
 8001392:	f000 02ff 	and.w	r2, r0, #255	; 0xff
 8001396:	2800      	cmp	r0, #0
 8001398:	d0ef      	beq.n	800137a <get_iso8859_code+0x1a>
		if (s == 0xF0) {
 800139a:	2af0      	cmp	r2, #240	; 0xf0
 800139c:	d103      	bne.n	80013a6 <get_iso8859_code+0x46>
			state |= BREAK;
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	2101      	movs	r1, #1
 80013a4:	e7e2      	b.n	800136c <get_iso8859_code+0xc>
		} else if (s == 0xE0) {
 80013a6:	2ae0      	cmp	r2, #224	; 0xe0
 80013a8:	d102      	bne.n	80013b0 <get_iso8859_code+0x50>
			state |= MODIFIER;
 80013aa:	f043 0302 	orr.w	r3, r3, #2
 80013ae:	e7f8      	b.n	80013a2 <get_iso8859_code+0x42>
		} else {
			if (state & BREAK) {
 80013b0:	07d9      	lsls	r1, r3, #31
 80013b2:	d512      	bpl.n	80013da <get_iso8859_code+0x7a>
				if (s == 0x12) {
 80013b4:	2a12      	cmp	r2, #18
 80013b6:	d104      	bne.n	80013c2 <get_iso8859_code+0x62>
					state &= ~SHIFT_L;
 80013b8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
				} else if (s == 0x11 && (state & MODIFIER)) {
					state &= ~ALTGR;
				}
				// CTRL, ALT & WIN keys could be added
				// but is that really worth the overkeyboard->head?
				state &= ~(BREAK | MODIFIER);
 80013bc:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
				continue;
 80013c0:	e7ef      	b.n	80013a2 <get_iso8859_code+0x42>
				} else if (s == 0x59) {
 80013c2:	2a59      	cmp	r2, #89	; 0x59
 80013c4:	d102      	bne.n	80013cc <get_iso8859_code+0x6c>
					state &= ~SHIFT_R;
 80013c6:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 80013ca:	e7f7      	b.n	80013bc <get_iso8859_code+0x5c>
				} else if (s == 0x11 && (state & MODIFIER)) {
 80013cc:	2a11      	cmp	r2, #17
 80013ce:	d1f5      	bne.n	80013bc <get_iso8859_code+0x5c>
 80013d0:	079a      	lsls	r2, r3, #30
					state &= ~ALTGR;
 80013d2:	bf48      	it	mi
 80013d4:	f003 03ef 	andmi.w	r3, r3, #239	; 0xef
 80013d8:	e7f0      	b.n	80013bc <get_iso8859_code+0x5c>
			}
			if (s == 0x12) {
 80013da:	2a12      	cmp	r2, #18
 80013dc:	d102      	bne.n	80013e4 <get_iso8859_code+0x84>
				state |= SHIFT_L;
 80013de:	f043 0304 	orr.w	r3, r3, #4
				continue;
 80013e2:	e7de      	b.n	80013a2 <get_iso8859_code+0x42>
			} else if (s == 0x59) {
 80013e4:	2a59      	cmp	r2, #89	; 0x59
 80013e6:	d102      	bne.n	80013ee <get_iso8859_code+0x8e>
				state |= SHIFT_R;
 80013e8:	f043 0308 	orr.w	r3, r3, #8
				continue;
 80013ec:	e7d9      	b.n	80013a2 <get_iso8859_code+0x42>
			} else if (s == 0x11 && (state & MODIFIER)) {
 80013ee:	2a11      	cmp	r2, #17
 80013f0:	d103      	bne.n	80013fa <get_iso8859_code+0x9a>
 80013f2:	079f      	lsls	r7, r3, #30
				state |= ALTGR;
 80013f4:	bf48      	it	mi
 80013f6:	f043 0310 	orrmi.w	r3, r3, #16
			}
			c = 0;
			if (state & MODIFIER) {
 80013fa:	f013 0102 	ands.w	r1, r3, #2
 80013fe:	d00a      	beq.n	8001416 <get_iso8859_code+0xb6>
 8001400:	3a4a      	subs	r2, #74	; 0x4a
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	2a33      	cmp	r2, #51	; 0x33
 8001406:	d821      	bhi.n	800144c <get_iso8859_code+0xec>
 8001408:	5cb0      	ldrb	r0, [r6, r2]
					c = pgm_read_byte(keyboard->keymap->shift + s);
			} else {
				if (s < PS2_KEYMAP_SIZE)
					c = pgm_read_byte(keyboard->keymap->noshift + s);
			}
			state &= ~(BREAK | MODIFIER);
 800140a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
			if (c) return c;
 800140e:	2800      	cmp	r0, #0
 8001410:	d0c7      	beq.n	80013a2 <get_iso8859_code+0x42>
 8001412:	702b      	strb	r3, [r5, #0]
		}
	}
}
 8001414:	bdf0      	pop	{r4, r5, r6, r7, pc}
			} else if ((state & ALTGR) && keyboard->keymap->uses_altgr) {
 8001416:	06d8      	lsls	r0, r3, #27
 8001418:	d509      	bpl.n	800142e <get_iso8859_code+0xce>
 800141a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800141c:	f8d0 7110 	ldr.w	r7, [r0, #272]	; 0x110
 8001420:	b12f      	cbz	r7, 800142e <get_iso8859_code+0xce>
				if (s < PS2_KEYMAP_SIZE)
 8001422:	2a87      	cmp	r2, #135	; 0x87
 8001424:	d814      	bhi.n	8001450 <get_iso8859_code+0xf0>
					c = pgm_read_byte(keyboard->keymap->altgr + s); // MUDAR
 8001426:	4402      	add	r2, r0
 8001428:	f892 0114 	ldrb.w	r0, [r2, #276]	; 0x114
 800142c:	e7ed      	b.n	800140a <get_iso8859_code+0xaa>
			} else if (state & (SHIFT_L | SHIFT_R)) {
 800142e:	f013 010c 	ands.w	r1, r3, #12
 8001432:	d006      	beq.n	8001442 <get_iso8859_code+0xe2>
				if (s < PS2_KEYMAP_SIZE)
 8001434:	2a87      	cmp	r2, #135	; 0x87
 8001436:	d809      	bhi.n	800144c <get_iso8859_code+0xec>
					c = pgm_read_byte(keyboard->keymap->shift + s);
 8001438:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800143a:	440a      	add	r2, r1
 800143c:	f892 0088 	ldrb.w	r0, [r2, #136]	; 0x88
 8001440:	e7e3      	b.n	800140a <get_iso8859_code+0xaa>
				if (s < PS2_KEYMAP_SIZE)
 8001442:	2a87      	cmp	r2, #135	; 0x87
 8001444:	d804      	bhi.n	8001450 <get_iso8859_code+0xf0>
					c = pgm_read_byte(keyboard->keymap->noshift + s);
 8001446:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001448:	5c88      	ldrb	r0, [r1, r2]
 800144a:	e7de      	b.n	800140a <get_iso8859_code+0xaa>
 800144c:	2000      	movs	r0, #0
 800144e:	e7dc      	b.n	800140a <get_iso8859_code+0xaa>
 8001450:	4608      	mov	r0, r1
 8001452:	e7da      	b.n	800140a <get_iso8859_code+0xaa>
 8001454:	20000030 	.word	0x20000030
 8001458:	08001944 	.word	0x08001944

0800145c <ps2interrupt>:
{
 800145c:	b570      	push	{r4, r5, r6, lr}
 800145e:	4604      	mov	r4, r0
	val = HAL_GPIO_ReadPin(keyboard->DataPort, keyboard->DataPin); 
 8001460:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
 8001464:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001466:	f7ff f847 	bl	80004f8 <HAL_GPIO_ReadPin>
 800146a:	4605      	mov	r5, r0
	now_ms = HAL_GetTick() ;
 800146c:	f7fe fef4 	bl	8000258 <HAL_GetTick>
	if (now_ms - prev_ms > 250) {
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <ps2interrupt+0x8c>)
 8001472:	681a      	ldr	r2, [r3, #0]
	prev_ms = now_ms;
 8001474:	6018      	str	r0, [r3, #0]
	if (now_ms - prev_ms > 250) {
 8001476:	1a82      	subs	r2, r0, r2
 8001478:	2afa      	cmp	r2, #250	; 0xfa
 800147a:	4a1c      	ldr	r2, [pc, #112]	; (80014ec <ps2interrupt+0x90>)
		incoming = 0;
 800147c:	bf82      	ittt	hi
 800147e:	4e1c      	ldrhi	r6, [pc, #112]	; (80014f0 <ps2interrupt+0x94>)
		bitcount = 0;
 8001480:	2100      	movhi	r1, #0
 8001482:	7011      	strbhi	r1, [r2, #0]
	n = bitcount - 1;
 8001484:	7813      	ldrb	r3, [r2, #0]
		incoming = 0;
 8001486:	bf88      	it	hi
 8001488:	7031      	strbhi	r1, [r6, #0]
	n = bitcount - 1;
 800148a:	1e59      	subs	r1, r3, #1
 800148c:	b2c9      	uxtb	r1, r1
	if (n <= 7) {
 800148e:	2907      	cmp	r1, #7
 8001490:	d804      	bhi.n	800149c <ps2interrupt+0x40>
		incoming |= (val << n);
 8001492:	4817      	ldr	r0, [pc, #92]	; (80014f0 <ps2interrupt+0x94>)
 8001494:	408d      	lsls	r5, r1
 8001496:	7801      	ldrb	r1, [r0, #0]
 8001498:	430d      	orrs	r5, r1
 800149a:	7005      	strb	r5, [r0, #0]
	bitcount++;
 800149c:	3301      	adds	r3, #1
 800149e:	b2db      	uxtb	r3, r3
	if (bitcount == 11) {
 80014a0:	2b0b      	cmp	r3, #11
	bitcount++;
 80014a2:	7013      	strb	r3, [r2, #0]
	if (bitcount == 11) {
 80014a4:	d112      	bne.n	80014cc <ps2interrupt+0x70>
		uint8_t i = keyboard->head + 1;
 80014a6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
		if (i != keyboard->tail) {
 80014aa:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
		uint8_t i = keyboard->head + 1;
 80014ae:	3301      	adds	r3, #1
 80014b0:	b2db      	uxtb	r3, r3
		if (i >= BUFFER_SIZE) i = 0;
 80014b2:	2b2d      	cmp	r3, #45	; 0x2d
 80014b4:	bf28      	it	cs
 80014b6:	2300      	movcs	r3, #0
		if (i != keyboard->tail) {
 80014b8:	428b      	cmp	r3, r1
 80014ba:	490d      	ldr	r1, [pc, #52]	; (80014f0 <ps2interrupt+0x94>)
			keyboard->buffer[i] = incoming;
 80014bc:	bf1e      	ittt	ne
 80014be:	7808      	ldrbne	r0, [r1, #0]
 80014c0:	54e0      	strbne	r0, [r4, r3]
			keyboard->head = i;
 80014c2:	f884 302d 	strbne.w	r3, [r4, #45]	; 0x2d
		bitcount = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	7013      	strb	r3, [r2, #0]
		incoming = 0;
 80014ca:	700b      	strb	r3, [r1, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80014cc:	2201      	movs	r2, #1
 80014ce:	2120      	movs	r1, #32
 80014d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d4:	f7ff f816 	bl	8000504 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	2120      	movs	r1, #32
 80014dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 80014e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80014e4:	f7ff b80e 	b.w	8000504 <HAL_GPIO_WritePin>
 80014e8:	2000002c 	.word	0x2000002c
 80014ec:	20000028 	.word	0x20000028
 80014f0:	20000029 	.word	0x20000029

080014f4 <keyboardAvailable>:

uint8_t keyboardAvailable(Keyboard_TypeDef* keyboard) {
 80014f4:	b510      	push	{r4, lr}
	if (keyboard->CharBuffer || keyboard->UTF8next) return 1;
 80014f6:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
uint8_t keyboardAvailable(Keyboard_TypeDef* keyboard) {
 80014f8:	4604      	mov	r4, r0
	if (keyboard->CharBuffer || keyboard->UTF8next) return 1;
 80014fa:	b93b      	cbnz	r3, 800150c <keyboardAvailable+0x18>
	keyboard->CharBuffer = get_iso8859_code(keyboard);
 80014fc:	f7ff ff30 	bl	8001360 <get_iso8859_code>
 8001500:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
	if (keyboard->CharBuffer || keyboard->UTF8next) return 1;
 8001504:	3000      	adds	r0, #0
 8001506:	bf18      	it	ne
 8001508:	2001      	movne	r0, #1
 800150a:	bd10      	pop	{r4, pc}
 800150c:	2001      	movs	r0, #1
	if (keyboard->CharBuffer) return 1;
	return 0;
}
 800150e:	bd10      	pop	{r4, pc}

08001510 <keyboardRead>:
uint8_t keyboardReadScanCode(Keyboard_TypeDef* keyboard) 
{
	return get_scan_code(keyboard);
}

uint8_t keyboardRead(Keyboard_TypeDef* keyboard) { 
 8001510:	b510      	push	{r4, lr}
	uint8_t result;

	result = keyboard->UTF8next;
 8001512:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
uint8_t keyboardRead(Keyboard_TypeDef* keyboard) { 
 8001516:	4604      	mov	r4, r0
	if (result) {
 8001518:	b123      	cbz	r3, 8001524 <keyboardRead+0x14>
		keyboard->UTF8next = 0;
 800151a:	2200      	movs	r2, #0
 800151c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
			result = ((result >> 6) & 0x1F) | 0xC0;
		}
	}
	if (!result) return -1;
	return result;
}
 8001520:	4618      	mov	r0, r3
 8001522:	bd10      	pop	{r4, pc}
		result = keyboard->CharBuffer;
 8001524:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		if (result) {
 8001528:	b183      	cbz	r3, 800154c <keyboardRead+0x3c>
			keyboard->CharBuffer = 0;
 800152a:	2200      	movs	r2, #0
 800152c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
		if (result >= 128) {
 8001530:	b25a      	sxtb	r2, r3
 8001532:	2a00      	cmp	r2, #0
 8001534:	da0e      	bge.n	8001554 <keyboardRead+0x44>
			keyboard->UTF8next = (result & 0x3F) | 0x80;
 8001536:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800153a:	f062 027f 	orn	r2, r2, #127	; 0x7f
			result = ((result >> 6) & 0x1F) | 0xC0;
 800153e:	f3c3 1385 	ubfx	r3, r3, #6, #6
			keyboard->UTF8next = (result & 0x3F) | 0x80;
 8001542:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
			result = ((result >> 6) & 0x1F) | 0xC0;
 8001546:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800154a:	e7e9      	b.n	8001520 <keyboardRead+0x10>
			result = get_iso8859_code(keyboard);
 800154c:	f7ff ff08 	bl	8001360 <get_iso8859_code>
 8001550:	4603      	mov	r3, r0
 8001552:	e7ed      	b.n	8001530 <keyboardRead+0x20>
	if (!result) return -1;
 8001554:	2b00      	cmp	r3, #0
 8001556:	bf08      	it	eq
 8001558:	23ff      	moveq	r3, #255	; 0xff
 800155a:	e7e1      	b.n	8001520 <keyboardRead+0x10>

0800155c <keyboardBegin>:
void keyboardBegin(Keyboard_TypeDef* keyboard, GPIO_TypeDef* data_port, uint8_t data_pin, GPIO_TypeDef* iqr_port, uint8_t iqr_pin) {

  keyboard->DataPort = data_port;
  keyboard->DataPin = data_pin;

  keyboard->IQRPort = iqr_port;
 800155c:	6383      	str	r3, [r0, #56]	; 0x38
  keyboard->IQRPin = iqr_pin;
 800155e:	f89d 3000 	ldrb.w	r3, [sp]
 8001562:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

  keyboard->keymap = &PS2Keymap_US;
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <keyboardBegin+0x28>)
 8001568:	6403      	str	r3, [r0, #64]	; 0x40

  keyboard->head = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  keyboard->DataPort = data_port;
 8001570:	6301      	str	r1, [r0, #48]	; 0x30
  keyboard->DataPin = data_pin;
 8001572:	f880 202f 	strb.w	r2, [r0, #47]	; 0x2f
  keyboard->tail = 0;
 8001576:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
  keyboard->CharBuffer = 0;
 800157a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  keyboard->UTF8next = 0;
 800157e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8001582:	4770      	bx	lr
 8001584:	08001978 	.word	0x08001978

08001588 <interruption>:
/* USER CODE BEGIN 0 */
Keyboard_TypeDef keyboard;


	void interruption(){
		ps2interrupt(&keyboard);
 8001588:	4801      	ldr	r0, [pc, #4]	; (8001590 <interruption+0x8>)
 800158a:	f7ff bf67 	b.w	800145c <ps2interrupt>
 800158e:	bf00      	nop
 8001590:	20000038 	.word	0x20000038

08001594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001594:	b510      	push	{r4, lr}
 8001596:	b0a6      	sub	sp, #152	; 0x98
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001598:	2301      	movs	r3, #1
 800159a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800159c:	2310      	movs	r3, #16
 800159e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a0:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015a2:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a4:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a6:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015a8:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015aa:	f7fe ffbd 	bl	8000528 <HAL_RCC_OscConfig>
 80015ae:	4601      	mov	r1, r0
 80015b0:	b100      	cbz	r0, 80015b4 <SystemClock_Config+0x20>
 80015b2:	e7fe      	b.n	80015b2 <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b4:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015b6:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b8:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ba:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015bc:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015be:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c0:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015c2:	f7ff fa5f 	bl	8000a84 <HAL_RCC_ClockConfig>
 80015c6:	b100      	cbz	r0, 80015ca <SystemClock_Config+0x36>
 80015c8:	e7fe      	b.n	80015c8 <SystemClock_Config+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015ca:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015cc:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015ce:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d0:	f7ff fb38 	bl	8000c44 <HAL_RCCEx_PeriphCLKConfig>
 80015d4:	4604      	mov	r4, r0
 80015d6:	b100      	cbz	r0, 80015da <SystemClock_Config+0x46>
 80015d8:	e7fe      	b.n	80015d8 <SystemClock_Config+0x44>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80015da:	f7ff fafd 	bl	8000bd8 <HAL_RCC_GetHCLKFreq>
 80015de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80015e6:	f7fe fe8f 	bl	8000308 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80015ea:	2004      	movs	r0, #4
 80015ec:	f7fe fea2 	bl	8000334 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80015f0:	4622      	mov	r2, r4
 80015f2:	4621      	mov	r1, r4
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015f8:	f7fe fe46 	bl	8000288 <HAL_NVIC_SetPriority>
}
 80015fc:	b026      	add	sp, #152	; 0x98
 80015fe:	bd10      	pop	{r4, pc}

08001600 <main>:
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b088      	sub	sp, #32
  HAL_Init();
 8001604:	f7fe fe0a 	bl	800021c <HAL_Init>
  SystemClock_Config();
 8001608:	f7ff ffc4 	bl	8001594 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160c:	4b36      	ldr	r3, [pc, #216]	; (80016e8 <main+0xe8>)
  huart2.Instance = USART2;
 800160e:	4c37      	ldr	r4, [pc, #220]	; (80016ec <main+0xec>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001610:	695a      	ldr	r2, [r3, #20]
 8001612:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001616:	615a      	str	r2, [r3, #20]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001622:	2160      	movs	r1, #96	; 0x60
 8001624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : IQR_PIN_Pin */
  GPIO_InitStruct.Pin = IQR_PIN_Pin;
 8001628:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800162c:	f7fe ff6a 	bl	8000504 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001630:	4b2f      	ldr	r3, [pc, #188]	; (80016f0 <main+0xf0>)
 8001632:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(IQR_PIN_GPIO_Port, &GPIO_InitStruct);
 8001634:	a903      	add	r1, sp, #12
 8001636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : DATA_PIN_Pin */
  GPIO_InitStruct.Pin = DATA_PIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163a:	2500      	movs	r5, #0
  GPIO_InitStruct.Pin = IQR_PIN_Pin;
 800163c:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800163e:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pin = DATA_PIN_Pin;
 8001640:	2702      	movs	r7, #2
  HAL_GPIO_Init(IQR_PIN_GPIO_Port, &GPIO_InitStruct);
 8001642:	f7fe fe89 	bl	8000358 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(DATA_PIN_GPIO_Port, &GPIO_InitStruct);
 8001646:	a903      	add	r1, sp, #12
 8001648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = DATA_PIN_Pin;
 800164c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001650:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(DATA_PIN_GPIO_Port, &GPIO_InitStruct);
 8001652:	f7fe fe81 	bl	8000358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001656:	2360      	movs	r3, #96	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001658:	a903      	add	r1, sp, #12
 800165a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800165e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001660:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001666:	f7fe fe77 	bl	8000358 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800166a:	462a      	mov	r2, r5
 800166c:	4629      	mov	r1, r5
 800166e:	2006      	movs	r0, #6
 8001670:	f7fe fe0a 	bl	8000288 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001674:	2006      	movs	r0, #6
 8001676:	f7fe fe3b 	bl	80002f0 <HAL_NVIC_EnableIRQ>
  huart2.Init.BaudRate = 38400;
 800167a:	4a1e      	ldr	r2, [pc, #120]	; (80016f4 <main+0xf4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800167c:	60a5      	str	r5, [r4, #8]
  huart2.Init.BaudRate = 38400;
 800167e:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001682:	e884 000c 	stmia.w	r4, {r2, r3}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001686:	4620      	mov	r0, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001688:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800168a:	60e5      	str	r5, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800168c:	6125      	str	r5, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800168e:	6163      	str	r3, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001690:	61a5      	str	r5, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001692:	61e5      	str	r5, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001694:	6225      	str	r5, [r4, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001696:	6265      	str	r5, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001698:	f7ff fe30 	bl	80012fc <HAL_UART_Init>
 800169c:	b100      	cbz	r0, 80016a0 <main+0xa0>
 800169e:	e7fe      	b.n	800169e <main+0x9e>
  keyboardBegin(&keyboard, data_port, data_pin, iqr_port, iqr_pin);
 80016a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016a4:	9600      	str	r6, [sp, #0]
 80016a6:	463a      	mov	r2, r7
 80016a8:	4619      	mov	r1, r3
 80016aa:	4813      	ldr	r0, [pc, #76]	; (80016f8 <main+0xf8>)
	  if(keyboardAvailable(&keyboard)){
 80016ac:	4d12      	ldr	r5, [pc, #72]	; (80016f8 <main+0xf8>)
  keyboardBegin(&keyboard, data_port, data_pin, iqr_port, iqr_pin);
 80016ae:	f7ff ff55 	bl	800155c <keyboardBegin>
	  if(keyboardAvailable(&keyboard)){
 80016b2:	4628      	mov	r0, r5
 80016b4:	f7ff ff1e 	bl	80014f4 <keyboardAvailable>
 80016b8:	2800      	cmp	r0, #0
 80016ba:	d0fa      	beq.n	80016b2 <main+0xb2>
	  	  		uint8_t c = keyboardRead(&keyboard);
 80016bc:	4628      	mov	r0, r5
 80016be:	f7ff ff27 	bl	8001510 <keyboardRead>
	  	  		if(c == PS2_ENTER){
 80016c2:	280d      	cmp	r0, #13
	  	  		uint8_t c = keyboardRead(&keyboard);
 80016c4:	f88d 000c 	strb.w	r0, [sp, #12]
	  	  		if(c == PS2_ENTER){
 80016c8:	d106      	bne.n	80016d8 <main+0xd8>
	  	  			HAL_UART_Transmit(&huart2, "\r\n", 2, 1000);
 80016ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ce:	2202      	movs	r2, #2
 80016d0:	490a      	ldr	r1, [pc, #40]	; (80016fc <main+0xfc>)
 80016d2:	4620      	mov	r0, r4
 80016d4:	f7ff fd87 	bl	80011e6 <HAL_UART_Transmit>
	  	  	  	HAL_UART_Transmit(&huart2, &c, 1, 1000);
 80016d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016dc:	2201      	movs	r2, #1
 80016de:	a903      	add	r1, sp, #12
 80016e0:	4620      	mov	r0, r4
 80016e2:	f7ff fd80 	bl	80011e6 <HAL_UART_Transmit>
 80016e6:	e7e4      	b.n	80016b2 <main+0xb2>
 80016e8:	40021000 	.word	0x40021000
 80016ec:	2000007c 	.word	0x2000007c
 80016f0:	10210000 	.word	0x10210000
 80016f4:	40004400 	.word	0x40004400
 80016f8:	20000038 	.word	0x20000038
 80016fc:	08001b14 	.word	0x08001b14

08001700 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001700:	4b21      	ldr	r3, [pc, #132]	; (8001788 <HAL_MspInit+0x88>)
{
 8001702:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001704:	699a      	ldr	r2, [r3, #24]
 8001706:	f042 0201 	orr.w	r2, r2, #1
 800170a:	619a      	str	r2, [r3, #24]
 800170c:	699a      	ldr	r2, [r3, #24]
 800170e:	f002 0201 	and.w	r2, r2, #1
 8001712:	9200      	str	r2, [sp, #0]
 8001714:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	69da      	ldr	r2, [r3, #28]
 8001718:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800171c:	61da      	str	r2, [r3, #28]
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001724:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001726:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8001728:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800172a:	f7fe fd9b 	bl	8000264 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	4611      	mov	r1, r2
 8001732:	f06f 000b 	mvn.w	r0, #11
 8001736:	f7fe fda7 	bl	8000288 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	4611      	mov	r1, r2
 800173e:	f06f 000a 	mvn.w	r0, #10
 8001742:	f7fe fda1 	bl	8000288 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	4611      	mov	r1, r2
 800174a:	f06f 0009 	mvn.w	r0, #9
 800174e:	f7fe fd9b 	bl	8000288 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	4611      	mov	r1, r2
 8001756:	f06f 0004 	mvn.w	r0, #4
 800175a:	f7fe fd95 	bl	8000288 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	4611      	mov	r1, r2
 8001762:	f06f 0003 	mvn.w	r0, #3
 8001766:	f7fe fd8f 	bl	8000288 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	4611      	mov	r1, r2
 800176e:	f06f 0001 	mvn.w	r0, #1
 8001772:	f7fe fd89 	bl	8000288 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	4611      	mov	r1, r2
 800177a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800177e:	f7fe fd83 	bl	8000288 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001782:	b003      	add	sp, #12
 8001784:	f85d fb04 	ldr.w	pc, [sp], #4
 8001788:	40021000 	.word	0x40021000

0800178c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800178c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800178e:	6802      	ldr	r2, [r0, #0]
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <HAL_UART_MspInit+0x44>)
 8001792:	429a      	cmp	r2, r3
 8001794:	d119      	bne.n	80017ca <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001796:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179a:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 800179c:	69da      	ldr	r2, [r3, #28]
 800179e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80017a2:	61da      	str	r2, [r3, #28]
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017ae:	230c      	movs	r3, #12
 80017b0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017c2:	2307      	movs	r3, #7
 80017c4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f7fe fdc7 	bl	8000358 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017ca:	b007      	add	sp, #28
 80017cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80017d0:	40004400 	.word	0x40004400

080017d4 <NMI_Handler>:
 80017d4:	4770      	bx	lr

080017d6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80017d6:	e7fe      	b.n	80017d6 <HardFault_Handler>

080017d8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80017d8:	e7fe      	b.n	80017d8 <MemManage_Handler>

080017da <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80017da:	e7fe      	b.n	80017da <BusFault_Handler>

080017dc <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80017dc:	e7fe      	b.n	80017dc <UsageFault_Handler>

080017de <SVC_Handler>:
 80017de:	4770      	bx	lr

080017e0 <DebugMon_Handler>:
 80017e0:	4770      	bx	lr

080017e2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80017e2:	4770      	bx	lr

080017e4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80017e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e6:	f7fe fd2b 	bl	8000240 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80017ee:	f7fe bdae 	b.w	800034e <HAL_SYSTICK_IRQHandler>

080017f2 <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 80017f2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	interruption();
 80017f4:	f7ff fec8 	bl	8001588 <interruption>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80017f8:	2001      	movs	r0, #1
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80017fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80017fe:	f7fe be87 	b.w	8000510 <HAL_GPIO_EXTI_IRQHandler>
	...

08001804 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001804:	4915      	ldr	r1, [pc, #84]	; (800185c <SystemInit+0x58>)
 8001806:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800180a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800180e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001812:	4b13      	ldr	r3, [pc, #76]	; (8001860 <SystemInit+0x5c>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	f042 0201 	orr.w	r2, r2, #1
 800181a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800181c:	6858      	ldr	r0, [r3, #4]
 800181e:	4a11      	ldr	r2, [pc, #68]	; (8001864 <SystemInit+0x60>)
 8001820:	4002      	ands	r2, r0
 8001822:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800182a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800182e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001836:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800183e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001842:	f022 020f 	bic.w	r2, r2, #15
 8001846:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001848:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800184a:	4a07      	ldr	r2, [pc, #28]	; (8001868 <SystemInit+0x64>)
 800184c:	4002      	ands	r2, r0
 800184e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001854:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001858:	608b      	str	r3, [r1, #8]
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00
 8001860:	40021000 	.word	0x40021000
 8001864:	f87fc00c 	.word	0xf87fc00c
 8001868:	ff00fccc 	.word	0xff00fccc

0800186c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800186c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001870:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001872:	e003      	b.n	800187c <LoopCopyDataInit>

08001874 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001876:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001878:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800187a:	3104      	adds	r1, #4

0800187c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800187c:	480b      	ldr	r0, [pc, #44]	; (80018ac <LoopForever+0xa>)
	ldr	r3, =_edata
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001880:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001882:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001884:	d3f6      	bcc.n	8001874 <CopyDataInit>
	ldr	r2, =_sbss
 8001886:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001888:	e002      	b.n	8001890 <LoopFillZerobss>

0800188a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800188a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800188c:	f842 3b04 	str.w	r3, [r2], #4

08001890 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <LoopForever+0x16>)
	cmp	r2, r3
 8001892:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001894:	d3f9      	bcc.n	800188a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001896:	f7ff ffb5 	bl	8001804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800189a:	f000 f811 	bl	80018c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800189e:	f7ff feaf 	bl	8001600 <main>

080018a2 <LoopForever>:

LoopForever:
    b LoopForever
 80018a2:	e7fe      	b.n	80018a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018a4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80018a8:	08001b38 	.word	0x08001b38
	ldr	r0, =_sdata
 80018ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80018b0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80018b4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80018b8:	200000ec 	.word	0x200000ec

080018bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018bc:	e7fe      	b.n	80018bc <ADC1_2_IRQHandler>
	...

080018c0 <__libc_init_array>:
 80018c0:	b570      	push	{r4, r5, r6, lr}
 80018c2:	4e0d      	ldr	r6, [pc, #52]	; (80018f8 <__libc_init_array+0x38>)
 80018c4:	4c0d      	ldr	r4, [pc, #52]	; (80018fc <__libc_init_array+0x3c>)
 80018c6:	1ba4      	subs	r4, r4, r6
 80018c8:	10a4      	asrs	r4, r4, #2
 80018ca:	2500      	movs	r5, #0
 80018cc:	42a5      	cmp	r5, r4
 80018ce:	d109      	bne.n	80018e4 <__libc_init_array+0x24>
 80018d0:	4e0b      	ldr	r6, [pc, #44]	; (8001900 <__libc_init_array+0x40>)
 80018d2:	4c0c      	ldr	r4, [pc, #48]	; (8001904 <__libc_init_array+0x44>)
 80018d4:	f000 f818 	bl	8001908 <_init>
 80018d8:	1ba4      	subs	r4, r4, r6
 80018da:	10a4      	asrs	r4, r4, #2
 80018dc:	2500      	movs	r5, #0
 80018de:	42a5      	cmp	r5, r4
 80018e0:	d105      	bne.n	80018ee <__libc_init_array+0x2e>
 80018e2:	bd70      	pop	{r4, r5, r6, pc}
 80018e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018e8:	4798      	blx	r3
 80018ea:	3501      	adds	r5, #1
 80018ec:	e7ee      	b.n	80018cc <__libc_init_array+0xc>
 80018ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018f2:	4798      	blx	r3
 80018f4:	3501      	adds	r5, #1
 80018f6:	e7f2      	b.n	80018de <__libc_init_array+0x1e>
 80018f8:	08001b30 	.word	0x08001b30
 80018fc:	08001b30 	.word	0x08001b30
 8001900:	08001b30 	.word	0x08001b30
 8001904:	08001b34 	.word	0x08001b34

08001908 <_init>:
 8001908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800190a:	bf00      	nop
 800190c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800190e:	bc08      	pop	{r3}
 8001910:	469e      	mov	lr, r3
 8001912:	4770      	bx	lr

08001914 <_fini>:
 8001914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001916:	bf00      	nop
 8001918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800191a:	bc08      	pop	{r3}
 800191c:	469e      	mov	lr, r3
 800191e:	4770      	bx	lr
